package com.ibm.workday.automation.controller;

import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.xml.namespace.QName;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.soap.MessageFactory;
import javax.xml.soap.SOAPConnection;
import javax.xml.soap.SOAPConnectionFactory;
import javax.xml.soap.SOAPElement;
import javax.xml.soap.SOAPEnvelope;
import javax.xml.soap.SOAPException;
import javax.xml.soap.SOAPHeader;
import javax.xml.soap.SOAPHeaderElement;
import javax.xml.soap.SOAPMessage;
import javax.xml.soap.SOAPPart;
import javax.xml.stream.XMLInputFactory;
import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;

import org.apache.commons.collections4.MultiValuedMap;
import org.apache.commons.collections4.multimap.ArrayListValuedHashMap;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.IOUtils;
import org.apache.commons.json.JSONArray;
import org.apache.commons.json.JSONException;
import org.apache.commons.json.JSONObject;
import org.apache.poi.ss.usermodel.BorderStyle;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Font;
import org.apache.poi.ss.usermodel.HorizontalAlignment;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import org.apache.poi.ss.util.CellRangeAddress;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.w3c.dom.DOMException;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import com.ibm.workday.automation.common.CommonConstants;
import com.ibm.workday.automation.model.GetRequest;
import com.ibm.workday.automation.model.Page;
import com.ibm.workday.automation.model.Tenant;
import com.ibm.workday.automation.model.User;
import com.ibm.workday.automation.operation.HttpBasicAuthentication;
import com.ibm.workday.automation.operation.LoadDataRules;
import com.ibm.workday.automation.operation.ReportElement;
import com.ibm.workday.automation.operation.XmlParserManager;
import com.ibm.workday.automation.service.GetRequestService;
import com.ibm.workday.automation.service.MapFileService;
import com.ibm.workday.automation.service.OperationService;
import com.ibm.workday.automation.service.PageService;
import com.ibm.workday.automation.service.PostLoadService;
import com.ibm.workday.automation.service.SectionService;
import com.ibm.workday.automation.service.TenantService;
import com.ibm.workday.automation.service.UserService;

import au.com.bytecode.opencsv.CSVReader;

@RestController
public class PostLoadGFController implements CommonConstants{
	
	Tenant tenant;
	
	@Autowired
	TenantService tenantService;
	
	@Autowired
	PostLoadService postLoadService;
	
	@Autowired
	GetRequestService getRequestService;
	
	@Autowired
	PageService pageService;
	
	@Autowired
	UserService userService;
	
	@Autowired
	OperationService operationService;
	
	@Autowired
	MapFileService mapFileService;
	
	@Autowired
	LoadDataRules loadDataRules;
	
	@Autowired
	SectionService sectionService;
	
	private static final String NAMESPACE_URL = "urn:com.workday/bsvc";
	private static final String NAMESPACE_PREFIX = "bsvc";
	private static final String HEADER_SECURITY_NAMESPACE = "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd";
	private static final String HEADER_SECURITY_NS_PREFIX = "wsse";
	private static final String PASSWORD_TYPE_ATTR_VALUE = "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText";
	private static final String EMPLOYEE_APPLICANT_MAPPING_RESPONSE_EXPRESSION = "/Report_Data";
	
	boolean complete = false;
	JSONArray headingArray = null;
	Map<String, byte[]> sourceFileMap = new HashMap<String, byte[]>();
	private String headingFromWD = "";
	private String headingFromSource = "";
	JSONArray headingWd = null;
	private List<String> columnList = new ArrayList<String>();
	private List<String> errorList = new ArrayList<String>();
	private List<String> wdColumnList = new ArrayList<String>();
	private List<String> idTypeList = new ArrayList<String>();
	private StringBuffer sbFinal = null;
	private Map<String, String> ccMap = new HashMap<>();
	private byte[] sourceContent = null;
	private byte[] targetContent = null;
	private byte[] sourceXMLContent = null;
	private byte[] targetXMLContent = null;
	private int sourceCount = 0;
	private int wdCount = 0;
	private int mismatchCount = 0;
	Map<String, String> sourceEntryMap = new HashMap<String, String>();
	
	private String GET_LOCATION_REQUEST_FILE = "";
	private String GET_LEGAL_NAME_REQUEST_FILE = "";
	private String GET_PREFERRED_NAME_REQUEST_FILE = "";
	private String GET_HIRE_CW_REQUEST_FILE = "";
	private String GET_HIRE_REQUEST_FILE = "";
	private String GET_TERMINATION_REQUEST_FILE = "";
	private String GET_APPLICANT_REQUEST_FILE = "";
	private String GET_POSITION_REQUEST_FILE = "";
	private String GET_NATIONAL_ID_REQUEST_FILE = "";
	private String GET_GOVERNMENT_ID_REQUEST_FILE = "";
	private String GET_OTHER_ID_REQUEST_FILE = "";
	private String GET_PASSPORT_ID_REQUEST_FILE = "";
	private String GET_VISA_ID_REQUEST_FILE = "";
	private String GET_PERSONAL_INFORMATION_REQUEST_FILE = "";
	private String GET_PERSONAL_INFORMATION_CW_REQUEST_FILE = "";
	private String GET_SERVICE_DATE_REQUEST_FILE = "";
	private String GET_SUP_ORG_REQUEST_FILE = "";
	private String GET_ASSIGN_ORG_ROLE_REQUEST_FILE = "";
	private String GET_COST_CENTER_REQUEST_FILE = "";
	private String GET_COMPANY_REQUEST_FILE = "";
	private String GET_COST_CENTER_HIERARCHY_REQUEST_FILE = "";
	private String GET_CONTACT_EMAIL_REQUEST_FILE = "";
	private String GET_CONTACT_PHONE_REQUEST_FILE = "";
	private String GET_CONTACT_ADDRESS_REQUEST_FILE = "";
	private String GET_CONTACT_ADDRESS_LINE_REQUEST_FILE = "";
	private String GET_COMP_HIST_REQUEST_FILE = "";
	private String GET_JOB_FAMILY_REQUEST_FILE = "";
	private String GET_JOB_FAMILY_GROUP_REQUEST_FILE = "";
	private String GET_JOB_PROFILE_REQUEST_FILE = "";
	private String GET_MANAGE_EDUCATION_REQUEST_FILE = "";
	private String GET_JOB_HIST_REQUEST_FILE = "";
	private String GET_START_INTERNATIONAL_ASSIGNMENT_REQUEST_FILE = "";
	private String GET_END_INTERNATIONAL_ASSIGNMENT_REQUEST_FILE = "";
	private String GET_DEPENDENT_REQUEST_FILE = "";
	private String GET_DEPENDENT_ADDRESS_REQUEST_FILE = "";
	private String GET_DEPENDENT_ADDRESS_LINE_REQUEST_FILE = "";
	private String GET_DEPENDENT_PHONE_REQUEST_FILE = "";
	private String GET_PAYMENT_ELECTION_REQUEST_FILE = "";
	private String GET_PAYMENT_ELECTION_OPTION_REQUEST_FILE = "";
	private String GET_BONUS_REQUEST_FILE = "";
	private String GET_ALLOWANCE_REQUEST_FILE = "";
	private String GET_PERIOD_SALARY_REQUEST_FILE = "";
	private String GET_SALARY_REQUEST_FILE = "";
	private String GET_PAY_GROUP_FILE = "";
	private String GET_LEAVE_OF_ABSENCE_FILE = "";
	private String GET_PAYROLL_PAYEE_WORK_REQUEST_FILE = "";
	private String GET_PAYROLL_HISTORY_PAYMENT_REQUEST_FILE = "";
	private String GET_PAYROLL_PAYEE_FICA_REQUEST_FILE = "";
	private String GET_PAYROLL_PAYCHECK_DELIVERY_REQUEST_FILE = "";
	private String GET_PAYROLL_INPUT_REQUEST_FILE = "";
	private String GET_PAYROLL_DEDUCTION_RECIPIENT_REQUEST_FILE = "";
	private String GET_PAYROLL_WITHHOLDING_ORDER_REQUEST_FILE = "";
	private String GET_W4_WITHHOLDING_PUBLIC_REQUEST_FILE = "";
	private String GET_W2C_PRINTING_REQUEST_FILE = "";
	private String GET_HOME_CITY_REQUEST_FILE = "";
	private String GET_WORK_CITY_REQUEST_FILE = "";
	private String GET_HOME_COUNTRY_REQUEST_FILE = "";
	private String GET_WORK_COUNTRY_REQUEST_FILE = "";
	private String GET_WORK_OTHER_REQUEST_FILE = "";
	private String GET_HOME_SD_REQUEST_FILE = "";
	private String GET_STATE_REQUEST_FILE = "";
	private String GET_WORK_SCHEDULE_REQUEST_FILE = "";
	private String GET_CANDIDATES_REQUEST_FILE = "";
	private String GET_JOB_REQUISITION_REQUEST_FILE = "";
	private String GET_EVERGREEN_REQUISITION_REQUEST_FILE = "";
	private String GET_JOB_REQUISITION_ROLE_REQUEST_FILE = "";
	private String GET_ASSIGN_ORG_FILE = "";
	private String GET_SYSTEM_USER_REQUEST_FILE = "";
	private String GET_LICENSE_ID_REQUEST_FILE = "";
	private String GET_HOURLY_REQUEST_FILE = "";
	private String GET_ADDITIONAL_DATA_REQUEST_FILE = "";
	private String GET_CUSTOM_ORG_REQUEST_FILE = "";
	private String GET_BENEFIT_INDIVIDUAL_RATE_FILE = "";
	private String GET_CHANGE_BENEFITS_LIFE_EVENT_REQUEST_FILE = "";
	private String GET_CHANGE_BENEFITS_REQUEST_FILE = "";
	private String GET_ONE_TIME_PAYMENT_REQUEST_FILE = "";
	private String GET_MERIT_REQUEST_FILE = "";
	private String GET_STOCK_REQUEST_FILE = "";
	private String GET_CALCULATED_SALARY_REQUEST_FILE = "";
	private String GET_CARRYOVER_BALANCE_REQUEST_FILE = "";
	
	@RequestMapping(value = "/postloadIsAllCompleteGF", method = RequestMethod.GET, headers = "Accept=application/json")
	private boolean isCompleted()
	{
		return complete;
	}
	
	@RequestMapping(value = "/getMapResponseGF", method = RequestMethod.GET, headers = "Accept=application/json")
	private JSONArray getMapResponse()
	{
		return headingWd;
	}
	
	@RequestMapping(value = "/getRuleNameListGF/{pageId}", method = RequestMethod.POST, headers = "Accept=application/json")
	public JSONArray getRuleNameList(HttpSession httpSession, @PathVariable("pageId") Long pageId) {
		
		JSONArray objArr = new JSONArray();
		JSONObject obj = null;			
		try 
		{	
			obj = new JSONObject();
			obj.put("operationName", "Location");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "Change Legal Name");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "Change Preferred Name");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "Contract Contingent Worker");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "Hire Employee");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "Terminate Employee");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "Create Pre Hire");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "Create Position");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "National ID");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "Government ID");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "Change Other ID");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "Passport");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "License");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "Visa");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "Change Personal Information");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "Change Personal Information CW");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "Edit Service Date");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "Supervisory Organization");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "Role Based Security Group");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "Cost Center");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "Company");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "Cost Center Hierarchy");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "Contact EMAIL");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "Contact Phone");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "Contact Address");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "Contact Info");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "Contact Address Line");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "Compensation History");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "Job Families");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "Job Family Group");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "Job Profile");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "Education");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "Manage Job History");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "Employee Job History");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "Start IA");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "End IA");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "Dependent Data");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "Dependent Address");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "Dependent Address Line");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "Dependent Phone");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "Payment Election Enrollment");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "Payment Election Option");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "Salary Plan");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "Hourly Plan");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "Bonus Plan");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "Allowance Plan");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "Period Salary Plan");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "Merit Plan");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "Stock Plan");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "Calculated Plan");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "Assign Pay Group");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "Leave of Absence");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "Work Schedule");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "Payroll Payee Ongoing Work Jurisdiction Tax Election");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "Payroll History Payment");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "Payroll Payee FICA");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "Paycheck Delivery");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "Submit Payroll Input");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "Payroll Deduction Recipient");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "Payroll Involuntary Withholding Order");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "W4 Withholding Public");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "W2C Printing Election");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "Home City Withholding");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "Work City Withholding");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "Home Country Withholding");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "Work Country Withholding");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "Work Other Withholding");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "Home School District Withholding");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "State Withholding");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "Candidates");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "Job Requisition");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "Evergreen Requisition");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "Role Based Requisition");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "Assign Organization");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "System User");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "Edit Additional Data");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "Custom Org");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "Benefit Individual Rates");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "Change Benefits");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "Change Benefits Life Events");
			objArr.put(obj);
			obj = new JSONObject();
			obj.put("operationName", "Carryover Balance");
			objArr.put(obj);
		} 
		catch (JSONException e) 
		{
			e.printStackTrace();
		}
		
		return objArr;
	}
	
	@RequestMapping(value = "executeSourceFileGF/{fileName}/{loadCycle}/{ruleName}/{tenantId}", method = RequestMethod.POST)
	public JSONArray executeSourceFileGF(@PathVariable("fileName")String fileName, @PathVariable("loadCycle") final String loadCycle,  @PathVariable("ruleName") String ruleName, 
			@PathVariable("tenantId") Long tenantId, @RequestParam("sourceFileGF") MultipartFile sourceFileGF, HttpSession httpSession) {
		
		complete = false;
		sourceContent = null;
		ccMap.clear();
		headingFromSource = "";
		headingFromWD = "";
		columnList.clear();
		errorList.clear();
		wdColumnList.clear();
		idTypeList.clear();
		tenant = tenantService.getTenant(tenantId);
		InputStream is = null;
		SOAPConnection soapConnection = null;
		int startIndex = 0;
		int endIndex = 0;
		headingWd = null;
		System.out.println("fileName-"+fileName);
		byte[] mapFileData = null;
		String str = null;		
		 
		try 
		{
			mapFileData = sourceFileGF.getBytes();
			if(fileName.contains(".csv"))
			{
				str = new String(mapFileData, "UTF-8");
			}
			else
			{
				InputStream in = sourceFileGF.getInputStream();
				File sourceExcelFile = File.createTempFile(fileName.substring(0, fileName.indexOf(".")), ".xlsx");
			    String excelPath = sourceExcelFile.getAbsolutePath();
			    FileOutputStream f = new FileOutputStream(excelPath);
			    int ch = 0;
			    while ((ch = in.read()) != -1) 
			    {
			        f.write(ch);
			    }
			    f.flush();
			    f.close();
			    
			    InputStream inp = new FileInputStream(excelPath);
			    Workbook wb = WorkbookFactory.create(inp);
			    str = convertExcelToCSV(wb.getSheetAt(4), fileName); 
			}
			System.out.println(str);
			String line = "";
			int count = 0;
	        BufferedReader reader = new BufferedReader(new StringReader(str));
	        while ((line = reader.readLine()) != null) 
	        { 
	            if(count != 0 && line.length() > 0) 
	            {
	            	/*if(ruleName.equalsIgnoreCase("Cost Center"))
	            	{
	            		columnList.add(line.substring(0, line.indexOf(",")));
	            		String [] lineArr = line.split(",");
	            		if(lineArr.length >0)
	            		{
	            			ccMap.put(lineArr[0], lineArr[3]);
	            		}
	            	}
	            	else
	            	{*/
	            		String [] lineArr = line.split(",");
	            		if(lineArr.length >0)
	            		{
		            		columnList.add(lineArr[0]);		            		
	            		}
	            	//}	            	
	            }
	            count++;
	        }
			//addPrimaryId(lines, columnList);
			String[] result = str.split("\\R", 2);
			System.out.println(result[0]);
			headingFromSource = result[0];
			sourceContent = str.toString().getBytes();
			
			Page page = pageService.getPage(Long.parseLong(loadCycle));
			String loadCycle1 = page.getPageName();
			Long userId = (Long) httpSession.getAttribute(SESSION_USER_ID);
			User user = userService.getUser(userId);
			
			
			if(ruleName.equalsIgnoreCase("Location"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDLocation(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("Change Legal Name"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDLegalName(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("Change Preferred Name"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDPreferredName(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("Contract Contingent Worker"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDContractContingentWorker(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}					
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("Hire Employee"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDHire(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}					
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("Terminate Employee"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDTermination(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}					
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("Create Pre Hire"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDApplicantMultiplePh(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}					
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("Create Position"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDPosition(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}					
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("National ID"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDNationalID(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}					
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("Government ID"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDGovernmentID(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}					
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("Leave of Absence"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDLeaveOfAbsence(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}					
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("Change Other ID"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDOtherID(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}					
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("Passport"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDPassportID(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}					
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("License"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDLicenseID(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}					
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("Visa"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDVisaID(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}					
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("Change Personal Information"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDPersonalInformation(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}					
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("Change Personal Information CW"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDPersonalInformationCW(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}					
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("Edit Service Date"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDServiceDate(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}					
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("Supervisory Organization"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDSupervisoryOrganization(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}					
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("Role Based Security Group"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDOrganizationRoles(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}					
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("Cost Center"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDCostCenter(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}					
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("Company"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDCompany(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}					
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("Cost Center Hierarchy"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDCostCenterHierarchy(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}					
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("Contact Info"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDContactInfo(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}					
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("Contact EMAIL"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDContactEmail(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}				
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("Contact Phone"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDContactPhone(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}				
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("Contact Address"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDContactAddress(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}				
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("Contact Address Line"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDContactAddressLine(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}				
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("Compensation History"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDCompHistory(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}				
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("System User"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDSystemUser(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}				
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("Job Families"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDJobFamilies(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}				
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("Job Family Group"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDJobFamilyGroup(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}				
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("Job Profile"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDJobProfile(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}				
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("Education"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDManageEducation(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}				
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("Edit Additional Data"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDEditAdditionalData(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}			
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("Custom Org"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDCustomOrg(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}			
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("Manage Job History"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDManageJobHistory(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}				
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("Employee Job History"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDEmployeeJobHistory(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}				
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("Start IA"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDStartIA(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}				
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("End IA"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDEndIA(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}				
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("Request One Time Payment"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDOneTimePayment(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}				
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("Dependent Data"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDAddDependent(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}				
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("Dependent Address"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDAddDependentAddress(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}				
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("Dependent Address Line"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDAddDependentAddressLine(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}				
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("Dependent Phone"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDAddDependentPhone(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}				
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("Payment Election Enrollment"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDAddPaymentElecttion(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}				
				};
				t.start();					
			}
			if(ruleName.equalsIgnoreCase("Payment Election Option"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDAddPaymentElectionOption(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}				
				};
				t.start();	
			}
			else if(ruleName.equalsIgnoreCase("Work Schedule"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDAddWorkSchedule(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}				
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("Bonus Plan"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDAddBonusPlan(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}				
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("Merit Plan"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDAddMeritPlan(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}				
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("Stock Plan"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDAddStockPlan(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}				
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("Calculated Plan"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDAddCalculatedPlan(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}				
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("Allowance Plan"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDAddAllowancePlan(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}				
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("Period Salary Plan"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDAddPeriodPlan(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}				
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("Salary Plan"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDAddSalaryPlan(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}				
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("Hourly Plan"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDAddHourlyPlan(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}				
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("Assign Pay Group"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDAddAssignPayGroup(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}				
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("Payroll Payee Ongoing Work Jurisdiction Tax Election"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDPayrollPayeeWork(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}					
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("Payroll History Payment"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDPayrollHistoryPayment(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}					
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("Payroll Payee FICA"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDPayrollPayeeFICA(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}					
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("Paycheck Delivery"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDPaycheckDelivery(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}					
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("Submit Payroll Input"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDSubmitPayrollInput(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}					
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("Payroll Deduction Recipient"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDPayrollDeductionRecipient(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}					
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("Payroll Involuntary Withholding Order"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDPayrollWithholdingOrder(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}					
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("W4 Withholding Public"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDW4WithholdingPublic(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}					
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("W2C Printing Election"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDW2CPrintingElection(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}					
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("Home City Withholding"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDW2CHomeCityWithholding(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}					
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("Work City Withholding"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDW2CWorkCityWithholding(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}					
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("Home Country Withholding"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDW2CHomeCountryWithholding(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}				
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("Work Country Withholding"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDW2CWorkCountryWithholding(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}				
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("Work Other Withholding"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDW2CWorkOtherWithholding(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}				
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("Home School District Withholding"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDHomeSDWithholding(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}				
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("State Withholding"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDStateWithholding(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}				
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("Candidates"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDCandidates(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}					
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("Job Requisition"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDJobRequisition(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}					
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("Evergreen Requisition"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDEvergreenRequisition(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}					
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("Role Based Requisition"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDRoleRequisition(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}					
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("Assign Organization"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDAssignOrganization(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}					
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("Benefit Individual Rates"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDBenefitIndividualRates(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}					
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("Change Benefits"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDChangeBenefits(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}					
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("Change Benefits Life Events"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDChangeBenefitsLifeEvents(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}				
				};
				t.start();					
			}
			else if(ruleName.equalsIgnoreCase("Carryover Balance"))
			{
				Thread t = new Thread( ) {
					public void run() {
						headingWd = createCSVFromWDCarryoverBalances(tenant, is, soapConnection, startIndex, endIndex, headingWd, loadCycle1, ruleName, user.getClient());
					}				
				};
				t.start();					
			}
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		}
		return headingWd;
	}
	
	private JSONArray createCSVFromWDLocation(Tenant tenant, InputStream is, SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd,
			String loadCycle, String ruleName, String client) {

		targetContent = null;
		headingFromWD = "";
		try 
		{
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_LOCATION_REQUEST_FILE = requestfile.getAbsolutePath();
				 String outputfile = addLocationIdList(GET_LOCATION_REQUEST_FILE, columnList, ruleName, startIndex, columnList.size(), "Location_ID");

				 is = new FileInputStream(outputfile);
			     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
			     SOAPPart soapPart = soapMessage.getSOAPPart();
			     SOAPEnvelope envelope = soapPart.getEnvelope();
				 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
				 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
				 {
					  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
					  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
				 }
				 soapMessage.saveChanges();
			     ByteArrayOutputStream out = new ByteArrayOutputStream();
			     soapMessage.writeTo(out);
			     String strMsg = new String(out.toByteArray());	
			     
			     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Human_Resources";
			     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
				 soapConnection = soapConnectionFactory.createConnection();
				 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
				 out = new ByteArrayOutputStream();
				 soapResponse.writeTo(out);
				 strMsg = new String(out.toByteArray(), "utf-8");
				 
				 //if(faultStr == null)
				 {
					 ReportElement soapResp = XmlParserManager.parseXml(strMsg);				 
					 ReportElement pageData = soapResp.getChild("env:Body")
								.getChild("wd:Get_Locations_Response")
								.getChild("wd:Response_Results");
					 
					 String totalNoOfPages = pageData.getChild("wd:Total_Pages").getValue().trim();
					 String totalResults = pageData.getChild("wd:Total_Results").getValue().trim();
					 int totalResult = Integer.parseInt(totalResults);
					 System.out.println("totalNoOfPages-"+totalNoOfPages);
					 System.out.println("totalResult-"+totalResult);
					 wdCount = totalResult;
					 
					 String finalStr = "";
					 String headerStr = "";
					 
					 String locationId = "";
					 String locationName = "";
					 String timeProfile = "";
					 String locale = "";
					 String currency = "";
					 String locationUsage = "";
					 String locationUsageArr = "";
					 String locationType = "";
					 String effectiveDate = "";
					 String country = "";
					 String municipality = "";
					 String countryRegion = "";
					 String postalcode = "";
					 String communicationUsageType = "";
					 String addressLine1 = "";
					 String addressLine2 = "";
					 String addressLine3 = "";
					 String locationHierarchyId = "";
					 
					 Map<String,String> timeProfileMap = null;
					 Map<String,String> localeMap = null;
					 Map<String,String> currencyMap = null;
					 Map<String,String> locUsageMap = null;
					 Map<String,String> countryRegMap = null;
					 Map<String,String> comUsageMap = null;
					 //Map<String,String> addressMap = null;
					 Map<String,String> addressLineMap = null;
					 Map<String,String> countryMap = null;
					 Map<String,String> locHierarchyIdMap = null;
					 
					 for (int j = 1; j <= Integer.parseInt(totalNoOfPages); j++) 
					 {					 
						 if(j == 1)
						 {
							startIndex = 0;
							if(999 > totalResult)
							{
								endIndex = totalResult;
							}
							else
							{
								endIndex = j*999;
							}
						 }
						 else
						 {
							startIndex = endIndex;
							if(j*999 > totalResult)
							{
								endIndex = totalResult;
							}
							else
							{
								endIndex = (j*999);
							}
						 }
						 outputfile = addLocationIdList(GET_LOCATION_REQUEST_FILE, columnList, ruleName, startIndex, endIndex, "Location_ID");
						 is = new FileInputStream(outputfile);
					     soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     soapPart = soapMessage.getSOAPPart();
					     envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
								envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
								createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
				         out = new ByteArrayOutputStream();
				         soapMessage.writeTo(out);
				         strMsg = new String(out.toByteArray());
				        
				         soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
				         soapResponse = soapConnection.call(soapMessage, sourceUrl);
				         out = new ByteArrayOutputStream();
				         soapResponse.writeTo(out);
				         strMsg = new String(out.toByteArray(), "utf-8");
				        
				         soapResp = XmlParserManager.parseXml(strMsg);
					 
						 ReportElement responseData = soapResp.getChild("env:Body")
									.getChild("wd:Get_Locations_Response")
									.getChild("wd:Response_Data");
						 
						 List<ReportElement> locations = responseData.getChildren("wd:Location");
							
						 for(ReportElement reportElement : locations)
						 {
							 ReportElement locationData = reportElement.getChild("wd:Location_Data");
							 if(locationData != null)
							 {
								 locationId = locationData.getChild("wd:Location_ID") != null?locationData.getChild("wd:Location_ID").getValue().trim():"";
								 if(locationId.contains(","))
								 {
									 locationId = locationId.replaceAll(",", "|");
								 }
								 locationName = locationData.getChild("wd:Location_Name") != null?locationData.getChild("wd:Location_Name").getValue().trim():"";
								 if(locationName.contains(","))
								 {
									 locationName = locationName.replaceAll(",", "|");
								 }
								 
								 //locationType = locationName;
								 
								 ReportElement timeProfileData = locationData.getChild("wd:Time_Profile_Reference");
								 if(timeProfileData != null)
								 {
									 List<ReportElement> timeData = timeProfileData.getChildren("wd:ID");					 
									 for(ReportElement timeElement:timeData)
									 {
										 timeProfileMap = timeElement.getAllAttributes();
										 if(timeProfileMap.get("wd:type").equals("Time_Profile_ID"))
										 {
											 timeProfile = timeElement.getValue().trim();
										 }
									 }
								 }
								 
								 ReportElement localeData = locationData.getChild("wd:Locale_Reference");
								 if(localeData != null)
								 {
									 List<ReportElement> localeDataList = localeData.getChildren("wd:ID");					 
									 for(ReportElement localeElement:localeDataList)
									 {
										 localeMap = localeElement.getAllAttributes();
										 if(localeMap.get("wd:type").equals("Locale_ID"))
										 {
											 locale = localeElement.getValue().trim();
										 }
									 }
								 }
								 
								 ReportElement currencyData = locationData.getChild("wd:Default_Currency_Reference");
								 if(currencyData != null)
								 {
									 List<ReportElement> currencyDataList = currencyData.getChildren("wd:ID");					 
									 for(ReportElement currencyElement:currencyDataList)
									 {
										 currencyMap = currencyElement.getAllAttributes();
										 if(currencyMap.get("wd:type").equals("Currency_ID"))
										 {
											 currency = currencyElement.getValue().trim();
										 }
									 }
								 }
								 
								 List<ReportElement> locUsageList = locationData.getChildren("wd:Location_Usage_Reference");
								 for(ReportElement locUsageData:locUsageList)
								 {
									 locationUsageArr = "";
									 if(locUsageData != null)
									 {
										 List<ReportElement> locUsageDataList = locUsageData.getChildren("wd:ID");					 
										 for(ReportElement locUsageElement:locUsageDataList)
										 {
											 locUsageMap = locUsageElement.getAllAttributes();
											 if(locUsageMap.get("wd:type").equals("Location_Usage_ID"))
											 {
												 locationUsage = locUsageElement.getValue().trim();
												 if(locationUsageArr.equals(""))
												 {
													 locationUsageArr = locationUsage;
												 }
												 else
												 {
													 if(!locationUsage.isEmpty())
													 {
														 locationUsageArr = locationUsageArr + "~" + locationUsage;
													 }
												 }	
											 }
										 }
									 }
								 }
								 
								 ReportElement locHierarchyData = locationData.getChild("wd:Location_Hierarchy_Reference");
								 if(locHierarchyData != null)
								 {									 
									 List<ReportElement> locationHieData = locHierarchyData.getChildren("wd:ID");					 
									 for(ReportElement locHierarchyElement:locationHieData)
									 {
										 locHierarchyIdMap = locHierarchyElement.getAllAttributes();
										 if(locHierarchyIdMap.get("wd:type").equals("Organization_Reference_ID"))
										 {
											 locationHierarchyId = locHierarchyElement.getValue().trim();												
										 }
									 }										
								 }
								 else
								 {
									 locationHierarchyId = "";
								 }
								 
								 ReportElement contactData = locationData.getChild("wd:Contact_Data");
								 if(contactData != null)
								 {
									 ReportElement addressData = contactData.getChild("wd:Address_Data");									 
									 if(addressData != null)
									 {
										 //addressMap = addressData.getAllAttributes();
										 //effectiveDate = addressMap.get("wd:Effective_Date");
										 //effectiveDate = convertDate(effectiveDate, "yyyy-MM-dd", "dd-MM-yyyy");
										 List<ReportElement> addrLineData = addressData.getChildren("wd:Address_Line_Data");
										 if(addrLineData != null)
										 {
											 addressLine1 = "";
											 addressLine2 = "";
											 addressLine3 = "";
											 for(ReportElement addrLineElement:addrLineData)
											 {												 
												 addressLineMap = addrLineElement.getAllAttributes();
												 if(addressLineMap.get("wd:Type").equals("ADDRESS_LINE_1"))
												 {
													addressLine1 =  addrLineElement.getValue().trim();
													if(addressLine1.contains(","))
													{
														addressLine1 = addressLine1.replaceAll(",", "|");
													}
												 }
												 else if(addressLineMap.get("wd:Type").equals("ADDRESS_LINE_2"))
												 {
													addressLine2 =  addrLineElement.getValue().trim();
													if(addressLine2.contains(","))
													{
														addressLine2 = addressLine2.replaceAll(",", "|");
													}
												 }
												 else if(addressLineMap.get("wd:Type").equals("ADDRESS_LINE_3"))
												 {
													addressLine3 =  addrLineElement.getValue().trim();
													if(addressLine3.contains(","))
													{
														addressLine3 = addressLine3.replaceAll(",", "|");
													}
												 }
											 }
										 }
										 
										 municipality = addressData.getChild("wd:Municipality") != null?addressData.getChild("wd:Municipality").getValue().trim():"";
										 if(municipality.contains(","))
										 {
											 municipality = municipality.replaceAll(",", "|");
										 }
										 
										 ReportElement countryData = addressData.getChild("wd:Country_Reference");
										 if(countryData != null)
										 {
											 List<ReportElement> countryDataList = countryData.getChildren("wd:ID");					 
											 for(ReportElement countryElement:countryDataList)
											 {
												 countryMap = countryElement.getAllAttributes();
												 if(countryMap.get("wd:type").equals("ISO_3166-1_Alpha-3_Code"))
												 {
													 country = countryElement.getValue().trim();
												 }
											 }
										 }
										 
										 ReportElement countryRegionData = addressData.getChild("wd:Country_Region_Reference");
										 if(countryRegionData != null)
										 {
											 List<ReportElement> countryRegionDataList = countryRegionData.getChildren("wd:ID");					 
											 for(ReportElement countryRegionElement:countryRegionDataList)
											 {
												 countryRegMap = countryRegionElement.getAllAttributes();
												 if(countryRegMap.get("wd:type").equals("Country_Region_ID"))
												 {
													 countryRegion = countryRegionElement.getValue().trim();
												 }
											 }
										 }
										 postalcode = addressData.getChild("wd:Postal_Code") != null?addressData.getChild("wd:Postal_Code").getValue().trim():"";
										 
										 ReportElement typeRefData = addressData.getChild("wd:Usage_Data")
												 							.getChild("wd:Type_Data")
												 							.getChild("wd:Type_Reference");
										 if(typeRefData != null)
										 {
											 List<ReportElement> typeRefDataList = typeRefData.getChildren("wd:ID");					 
											 for(ReportElement typeRefElement:typeRefDataList)
											 {
												 comUsageMap = typeRefElement.getAllAttributes();
												 if(comUsageMap.get("wd:type").equals("Communication_Usage_Type_ID"))
												 {
													 communicationUsageType = typeRefElement.getValue().trim();
												 }
											 }
										 }
									 }
								 }								 								 
								 
								 headingFromWD = "Location_ID,Location_Name,Time_Profile,Locale,Location_Usage,Location_Type,Country,Municipality,Currency,Country_Region,Postal_Code,Communication_Usage,"
								 					+ "Effective_Date,Superior_Location_ID,AddressLine_1,AddressLine_2,AddressLine_3";
								 
								 headerStr = locationId + "," + locationName + "," + timeProfile + "," + locale + "," + locationUsageArr + "," + locationType + "," + country + "," + municipality + "," +  
										     currency + "," + countryRegion + "," + postalcode + "," + communicationUsageType + "," + effectiveDate + "," + locationHierarchyId + "," + addressLine1 
										     + "," + addressLine2 + "," + addressLine3;
								 if(finalStr.equals(""))
								 {
									 finalStr = headingFromWD + "\n" + headerStr;
								 }
								 else
								 {
									 finalStr = finalStr + "\n" + headerStr;
								 }								 							 							 
							 }					 
						 }
					 }
					 
					 System.out.println(finalStr);
					 targetContent = finalStr.toString().getBytes();
					 
					 headingWd = selectColumnMapping(loadCycle, ruleName, "Location_ID");
					 complete = true;
				 }
			 }
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		return headingWd;
	}
	
	private JSONArray createCSVFromWDLegalName(Tenant tenant, InputStream is, SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd,
			String loadCycle, String ruleName, String client) {

		 targetContent = null;
		 headingFromWD = "";
		 String checkFile = "";
		
		 String employeeId = "";
		 String legalFirstName = "";
		 String legalMiddleName = "";
		 String legalLastName = "";
		 String localFirstName = "";
		 String localMiddleName = "";
		 String localLastName = "";
		 String legalSecLastName = "";
		 String countryISOCode = "";
		 String prefix = "";
		 String email = "";
		 String emailArr = "";
		 String title = "";

		 String finalStr = "";
		 String headerStr = "";
		 
		 Map<String,String> keyMap = null;
		 Map<String,String> prefixMap = null;
		 Map<String,String> usageMap = null;
		 
		 try 
		 {			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_LEGAL_NAME_REQUEST_FILE = requestfile.getAbsolutePath();
				 
				 if(errorList.isEmpty())
				 {
					 for(int i = 0; i<columnList.size();i++)
					 {
						 checkFile = addWorkerIdListToFindError(GET_LEGAL_NAME_REQUEST_FILE, columnList.get(i), ruleName, "Employee_ID");
						 is = new FileInputStream(checkFile);
					     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     SOAPPart soapPart = soapMessage.getSOAPPart();
					     SOAPEnvelope envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
							  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
					     ByteArrayOutputStream out = new ByteArrayOutputStream();
					     soapMessage.writeTo(out);
					     String strMsgChk = new String(out.toByteArray());	
					     
					     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
					     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
						 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
						 out = new ByteArrayOutputStream();
						 soapResponse.writeTo(out);
						 strMsgChk = new String(out.toByteArray(), "utf-8");
						 if(strMsgChk.contains("faultstring"))
						 {
							 errorList.add(columnList.get(i)) ;
						 }
						 else
						 {
							 ReportElement rptElement = XmlParserManager.parseXml(strMsgChk);				 
							 ReportElement pageResults = rptElement.getChild("env:Body")
										.getChild("wd:Get_Workers_Response")
										.getChild("wd:Response_Results");
							 
							 String result = pageResults.getChild("wd:Total_Results").getValue().trim();
							 if(result.equalsIgnoreCase("0"))
							 {
								 errorList.add(columnList.get(i));
							 }
							 else
							 {
								 ReportElement responseData = rptElement.getChild("env:Body")
											.getChild("wd:Get_Workers_Response")
											.getChild("wd:Response_Data");
								 
								 List<ReportElement> applicantData = responseData.getChildren("wd:Worker");
									
								 for(ReportElement reportElement : applicantData)
								 {
									 ReportElement element1 = reportElement.getChild("wd:Worker_Data");
						        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
						        		System.out.println("employeeId--"+ employeeId);										 										
										
						        		ReportElement legalNameData = reportElement.getChild("wd:Worker_Data")
									 			.getChild("wd:Personal_Data")
									 			.getChild("wd:Name_Data")
						        				.getChild("wd:Legal_Name_Data")
						        				.getChild("wd:Name_Detail_Data");
						        		
										 legalFirstName = legalNameData.getChild("wd:First_Name") != null?legalNameData.getChild("wd:First_Name").getValue().trim():"";
										 legalMiddleName = legalNameData.getChild("wd:Middle_Name")!= null?legalNameData.getChild("wd:Middle_Name").getValue().trim():"";										 
										 legalLastName = legalNameData.getChild("wd:Last_Name") != null?legalNameData.getChild("wd:Last_Name").getValue().trim():"";
										 if(legalLastName.contains(","))
										 {
											 legalLastName = legalLastName.replaceAll(",", "|");
										 }
										 legalSecLastName = legalNameData.getChild("wd:Secondary_Last_Name") != null?legalNameData.getChild("wd:Secondary_Last_Name").getValue().trim():"";
										 
										 ReportElement localNameData = reportElement.getChild("wd:Worker_Data")
										 			.getChild("wd:Personal_Data")
										 			.getChild("wd:Name_Data")
								 					.getChild("wd:Legal_Name_Data")
								 					.getChild("wd:Name_Detail_Data")
								 					.getChild("wd:Local_Name_Detail_Data");
										 
										 if(localNameData != null)
										 {
											 localFirstName = localNameData.getChild("wd:First_Name") != null?localNameData.getChild("wd:First_Name").getValue().trim():"";
											 localMiddleName = localNameData.getChild("wd:Middle_Name")!= null?localNameData.getChild("wd:Middle_Name").getValue().trim():"";
											 localLastName = localNameData.getChild("wd:Last_Name") != null?localNameData.getChild("wd:Last_Name").getValue().trim():"";
										 }
										 else
										 {
											 localFirstName = "";
											 localMiddleName = "";
											 localLastName = "";
										 }
										 
										 ReportElement prefixData = legalNameData.getChild("wd:Prefix_Data");								 													 
										 if(prefixData != null)
										 {
											 ReportElement prefixTitleRef = prefixData.getChild("wd:Title_Reference");
											 if(prefixTitleRef != null)
											 {
												 List<ReportElement> prefixList = prefixTitleRef.getChildren("wd:ID");
												 for(ReportElement prefixElement:prefixList)
												 {
													 prefixMap = prefixElement.getAllAttributes();
													 if(prefixMap.get("wd:type").equals("Predefined_Name_Component_ID"))
													 {
														 prefix = prefixElement.getValue().trim();
													 }
												 }
											 }
											 else
											 {
												 prefix = "";
											 }
											 title = prefixData.getChild("wd:Title_Descriptor") != null?prefixData.getChild("wd:Title_Descriptor").getValue().trim():"";
										 }
										 else
										 {
											 prefix = "";
										 }
										 
										 ReportElement countryRef = legalNameData.getChild("wd:Country_Reference");
										 if(countryRef != null)
										 {
											 List<ReportElement> wdData = countryRef.getChildren("wd:ID");											 
											 for(ReportElement wdElement:wdData)
											 {
												 keyMap = wdElement.getAllAttributes();
												 if(keyMap.get("wd:type").equals("ISO_3166-1_Alpha-3_Code"))
												 {
													 countryISOCode = wdElement.getValue().trim();
												 }
											 }
										 }
										 else
										 {
											 countryISOCode = "";
										 }
										 
										 List<ReportElement> emailList = reportElement.getChild("wd:Worker_Data")
										 			.getChild("wd:Personal_Data")
										 			.getChild("wd:Contact_Data")
								 					.getChildren("wd:Email_Address_Data");
										 
										 if(emailList != null && emailList.size() >0)
										 {
											 emailArr = "";										 
											 for(ReportElement emailElement:emailList)
											 {
												 ReportElement usageData = emailElement.getChild("wd:Usage_Data");
												 if(usageData != null)
												 {
													 ReportElement typeDaya = usageData.getChild("wd:Type_Data");
													 if(typeDaya != null)
													 {
														 ReportElement typeRef = typeDaya.getChild("wd:Type_Reference");
														 if(typeRef !=null)
														 {
															 List<ReportElement> typeRefData = typeRef.getChildren("wd:ID");					 
															 for(ReportElement wdElement:typeRefData)
															 {
																 usageMap = wdElement.getAllAttributes();
																 if(usageMap.get("wd:type").equals("Communication_Usage_Type_ID"))
																 {
																	 if(wdElement.getValue().trim().equalsIgnoreCase("WORK"))
																	 {
																		 email = emailElement.getChild("wd:Email_Address") != null?emailElement.getChild("wd:Email_Address").getValue().trim():"";
																		 if(emailArr.equals(""))
																		 {
																			 emailArr = email;
																		 }
																		 else
																		 {
																			 emailArr = emailArr + "~" + email;
																		 }
																	 }
																	 														
																 }
															 }
														 }
													 }
												 }
											 }
										 }
											 								 
										 
										 headingFromWD = "Employee_ID,Country_ISO_Code,Prefix,Legal_First_Name,Legal_Middle_Name,Legal_Last_Name,Secondary_Last_Name,Local_First_Name,Local_Middle_Name,Local_Last_Name,Email,Title";
										 
										 headerStr = employeeId + "," + countryISOCode + "," + prefix + "," + legalFirstName + "," + legalMiddleName + "," + legalLastName + "," + 
												 		legalSecLastName + "," + localFirstName + "," + localMiddleName + "," + localLastName + "," + emailArr + "," + title;
									 
										 if(finalStr.equals(""))
										 {
											 finalStr = headingFromWD + "\n" + headerStr;
										 }
										 else
										 {
											 finalStr = finalStr + "\n" + headerStr;
										 }
								 }
							 }
						 }
					 }
					 columnList.removeAll(errorList);
					 wdCount = columnList.size();
				 }		 					 
				 System.out.println(finalStr);
				 targetContent = finalStr.toString().getBytes();					 					 
				 headingWd = selectColumnMapping(loadCycle, ruleName, "Employee_ID");					 
				 complete = true;
			}			 			 
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}

		return headingWd;
	}
	
	private JSONArray createCSVFromWDPreferredName(Tenant tenant, InputStream is, SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd,
			String loadCycle, String ruleName, String client) {

		 targetContent = null;
		 headingFromWD = "";
		 
		 String checkFile = "";
		
		 String employeeId = "";
		 String preferredFirstName = "";
		 String preferredMiddleName = "";
		 String preferredLastName = "";
		 String preferredSecLastName = "";
		 String countryISOCode = "";
		 
		 Map<String,String> keyMap = null;

		 String finalStr = "";
		 String headerStr = "";
		  try 
		{			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_PREFERRED_NAME_REQUEST_FILE = requestfile.getAbsolutePath();
				 
				 if(errorList.isEmpty())
				 {
					 for(int i = 0; i<columnList.size();i++)
					 {
						 checkFile = addWorkerIdListToFindError(GET_PREFERRED_NAME_REQUEST_FILE, columnList.get(i), ruleName, "Employee_ID");
						 is = new FileInputStream(checkFile);
					     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     SOAPPart soapPart = soapMessage.getSOAPPart();
					     SOAPEnvelope envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
							  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
					     ByteArrayOutputStream out = new ByteArrayOutputStream();
					     soapMessage.writeTo(out);
					     String strMsgChk = new String(out.toByteArray());	
					     
					     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
					     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
						 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
						 out = new ByteArrayOutputStream();
						 soapResponse.writeTo(out);
						 strMsgChk = new String(out.toByteArray(), "utf-8");
						 if(strMsgChk.contains("faultstring"))
						 {
							 errorList.add(columnList.get(i)) ;
						 }
						 else
						 {
							 ReportElement rptElement = XmlParserManager.parseXml(strMsgChk);				 
							 ReportElement pageResults = rptElement.getChild("env:Body")
										.getChild("wd:Get_Workers_Response")
										.getChild("wd:Response_Results");
							 
							 String result = pageResults.getChild("wd:Total_Results").getValue().trim();
							 if(result.equalsIgnoreCase("0"))
							 {
								 errorList.add(columnList.get(i));
							 }
							 else
							 {
								 ReportElement responseData = rptElement.getChild("env:Body")
											.getChild("wd:Get_Workers_Response")
											.getChild("wd:Response_Data");
								 
								 List<ReportElement> applicantData = responseData.getChildren("wd:Worker");
									
								 for(ReportElement reportElement : applicantData)
								 {
									 ReportElement element1 = reportElement.getChild("wd:Worker_Data");
						        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
						        		System.out.println("employeeId--"+ employeeId);										 										
										
						        		ReportElement preferredNameData = reportElement.getChild("wd:Worker_Data")
									 			.getChild("wd:Personal_Data")
									 			.getChild("wd:Name_Data")
						        				.getChild("wd:Preferred_Name_Data")
						        				.getChild("wd:Name_Detail_Data");
						        		 
										 preferredFirstName = preferredNameData.getChild("wd:First_Name") != null?preferredNameData.getChild("wd:First_Name").getValue().trim():"";
										 preferredMiddleName = preferredNameData.getChild("wd:Middle_Name")!= null?preferredNameData.getChild("wd:Middle_Name").getValue().trim():"";
										 preferredLastName = preferredNameData.getChild("wd:Last_Name") != null?preferredNameData.getChild("wd:Last_Name").getValue().trim():"";
										 preferredSecLastName = preferredNameData.getChild("wd:Secondary_Last_Name") != null?preferredNameData.getChild("wd:Secondary_Last_Name").getValue().trim():"";
										 
										 ReportElement countryRef = preferredNameData.getChild("wd:Country_Reference");
										 if(countryRef != null)
										 {
											 List<ReportElement> wdData = countryRef.getChildren("wd:ID");											 
											 for(ReportElement wdElement:wdData)
											 {
												 keyMap = wdElement.getAllAttributes();
												 if(keyMap.get("wd:type").equals("ISO_3166-1_Alpha-3_Code"))
												 {
													 countryISOCode = wdElement.getValue().trim();
												 }
											 }
										 }
											 								 
										 
										 headingFromWD = "Employee_ID,Country_ISO_Code,Preferred_First_Name,Preferred_Middle_Name,Preferred_Last_Name,Secondary_Last_Name";
										 
										 headerStr = employeeId + "," + countryISOCode + "," + preferredFirstName + "," + preferredMiddleName + "," + preferredLastName + "," + preferredSecLastName;
										 
										 if(finalStr.equals(""))
										 {
											 finalStr = headingFromWD + "\n" + headerStr;
										 }
										 else
										 {
											 finalStr = finalStr + "\n" + headerStr;
										 }
										 							 							 
								 }						 
							 }				 
						 }
					 }
					 columnList.removeAll(errorList);
					 wdCount = columnList.size();
				 }		 					 
				 System.out.println(finalStr);
				 targetContent = finalStr.toString().getBytes();					 					 
				 headingWd = selectColumnMapping(loadCycle, ruleName, "Employee_ID");					 
				 complete = true;
			}			 			 
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}

		return headingWd;
	}
	
	private JSONArray createCSVFromWDContractContingentWorker(Tenant tenant, InputStream is, SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd,
			String loadCycle, String ruleName, String client) {

		 targetContent = null;
		 headingFromWD = "";
		 String checkFile = "";
		
		 String finalStr = "";
		 String headerStr = "";
		 String contingentWorkerId = "";
		 String positionId = "";
		 String positionTitle = "";
		 String businessTitle = "";
		 String contingentWorkerName = "";
		 String timeType = "";
		 String defaultWeeklyHours = "";
		 String scheduledWeeklyHour = "";
		 String payTypeName = "";
		 String jobPositionTitle = "";
		 String jobCode = "";
		 String location = "";
		 String supplierName = "";
		 String contractStartDate = "";
		 String contractEndDate = "";
		 String supOrg = "";
		 String hireReason = "";
		 String legalFirstName = "";
		 String legalLastName = "";
		 String costCenter = "";
		 String costCenterCode = "";
		 String company = "";
		 String companyName = "";
		 String hireDate = "";
		 String originalHireDate = "";
		 String contServiceDate = "";
		 String locName = "";
		 String managerId = "";
		 
		 Map<String,String> idMap = null;
		 Map<String,String> cwTypeMap = null;
		 Map<String,String> posTimeTypeMap = null;
		 Map<String,String> payRateMap = null;
		 Map<String,String> jobProfMap = null;
		 Map<String,String> supplierMap = null;
		 Map<String,String> locationMap = null;
		 Map<String,String> orgMap = null;
		 Map<String,String> hireReasonMap = null;
		 Map<String,String> managerMap = null;
		 
		 try 
		 {			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_HIRE_CW_REQUEST_FILE = requestfile.getAbsolutePath();
				 
				 if(errorList.isEmpty())
				 {
					 for(int i = 0; i<columnList.size();i++)
					 {
						 checkFile = addWorkerIdListToFindError(GET_HIRE_CW_REQUEST_FILE, columnList.get(i), ruleName, "Contingent_Worker_ID");
						 is = new FileInputStream(checkFile);
					     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     SOAPPart soapPart = soapMessage.getSOAPPart();
					     SOAPEnvelope envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
							  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
					     ByteArrayOutputStream out = new ByteArrayOutputStream();
					     soapMessage.writeTo(out);
					     String strMsgChk = new String(out.toByteArray());	
					     
					     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
					     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
						 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
						 out = new ByteArrayOutputStream();
						 soapResponse.writeTo(out);
						 strMsgChk = new String(out.toByteArray(), "utf-8");
						 if(strMsgChk.contains("faultstring"))
						 {
							 errorList.add(columnList.get(i)) ;
						 }
						 else
						 {
							 ReportElement rptElement = XmlParserManager.parseXml(strMsgChk);				 
							 ReportElement pageResults = rptElement.getChild("env:Body")
										.getChild("wd:Get_Workers_Response")
										.getChild("wd:Response_Results");
							 
							 String result = pageResults.getChild("wd:Total_Results").getValue().trim();
							 if(result.equalsIgnoreCase("0"))
							 {
								 errorList.add(columnList.get(i));
							 }
							 else
							 {
								 ReportElement responseData = rptElement.getChild("env:Body")
											.getChild("wd:Get_Workers_Response")
											.getChild("wd:Response_Data");
								 
								 List<ReportElement> workerData = responseData.getChildren("wd:Worker");
									
								 for(ReportElement reportElement : workerData)
								 {
									 ReportElement element1 = reportElement.getChild("wd:Worker_Reference");
									 if(element1 != null)
									 {
										 List<ReportElement> idData = element1.getChildren("wd:ID");					 
										 for(ReportElement wdElement:idData)
										 {
											 idMap = wdElement.getAllAttributes();
											 if(idMap.get("wd:type").equals("Contingent_Worker_ID"))
											 {
												 contingentWorkerId = wdElement.getValue().trim();
												 System.out.println(contingentWorkerId);
											 }
										 }
									 }
									 
									 ReportElement legalNameData = reportElement.getChild("wd:Worker_Data")
									 			.getChild("wd:Personal_Data")
									 			.getChild("wd:Name_Data")
						        				.getChild("wd:Legal_Name_Data")
						        				.getChild("wd:Name_Detail_Data");
						        		
									 legalFirstName = legalNameData.getChild("wd:First_Name") != null?legalNameData.getChild("wd:First_Name").getValue().trim():"";											 
									 legalLastName = legalNameData.getChild("wd:Last_Name") != null?legalNameData.getChild("wd:Last_Name").getValue().trim():"";
									 
									 ReportElement element2 = reportElement.getChild("wd:Worker_Data")
									 							.getChild("wd:Employment_Data")
									 							.getChild("wd:Worker_Job_Data");
									 if(element2 != null)
									 {
										 ReportElement element3 = element2.getChild("wd:Position_Data");
										 if(element3 != null)
										 {
											 positionId = element3.getChild("wd:Position_ID") != null?element3.getChild("wd:Position_ID").getValue().trim():"";
											 positionTitle = element3.getChild("wd:Position_Title") != null?element3.getChild("wd:Position_Title").getValue().trim():"";
											 if(positionTitle.contains(","))
											 {
												 positionTitle = positionTitle.replaceAll(",", "|");
											 }
											 businessTitle = element3.getChild("wd:Business_Title") != null?element3.getChild("wd:Business_Title").getValue().trim():"";
											 if(businessTitle.contains(","))
											 {
												 businessTitle = businessTitle.replaceAll(",", "|");
											 }
											 defaultWeeklyHours = element3.getChild("wd:Default_Weekly_Hours") != null?element3.getChild("wd:Default_Weekly_Hours").getValue().trim():"";
											 scheduledWeeklyHour = element3.getChild("wd:Scheduled_Weekly_Hours") != null?element3.getChild("wd:Scheduled_Weekly_Hours").getValue().trim():"";
											 contractStartDate = element3.getChild("wd:Start_Date") != null?element3.getChild("wd:Start_Date").getValue().trim():"";
											 if(!contractStartDate.isEmpty())
											 {
												 contractStartDate = contractStartDate.substring(0, 10);
											 }
											 
											 ReportElement element4 = element3.getChild("wd:Worker_Type_Reference");
											 if(element4 != null)
											 {
												 List<ReportElement> cwTypeData = element4.getChildren("wd:ID");					 
												 for(ReportElement cwTypeElement:cwTypeData)
												 {
													 cwTypeMap = cwTypeElement.getAllAttributes();
													 if(cwTypeMap.get("wd:type").equals("Contingent_Worker_Type_ID"))
													 {
														 contingentWorkerName = cwTypeElement.getValue().trim();
													 }
												 }
											 }
											 else
											 {
												 contingentWorkerName = "";
											 }
											 
											 ReportElement element5 = element3.getChild("wd:Position_Time_Type_Reference");
											 if(element5 != null)
											 {
												 List<ReportElement> timeData = element5.getChildren("wd:ID");					 
												 for(ReportElement timeElement:timeData)
												 {
													 posTimeTypeMap = timeElement.getAllAttributes();
													 if(posTimeTypeMap.get("wd:type").equals("Position_Time_Type_ID"))
													 {
														 timeType = timeElement.getValue().trim();
													 }
												 }
											 }
											 else
											 {
												 timeType = "";
											 }
											 
											 ReportElement element6 = element3.getChild("wd:Pay_Rate_Type_Reference");
											 if(element6 != null)
											 {
												 List<ReportElement> payData = element6.getChildren("wd:ID");					 
												 for(ReportElement payElement:payData)
												 {
													 payRateMap = payElement.getAllAttributes();
													 if(payRateMap.get("wd:type").equals("Pay_Rate_Type_ID"))
													 {
														 payTypeName = payElement.getValue().trim();
													 }
												 }
											 }
											 else
											 {
												 payTypeName = "";
											 }
											 
											 ReportElement element7 = element3.getChild("wd:Job_Profile_Summary_Data");
											 if(element7 != null)
											 {
												 ReportElement element8 = element7.getChild("wd:Job_Profile_Reference");
												 if(element8 != null)
												 {
													 List<ReportElement> jobProfData = element8.getChildren("wd:ID");					 
													 for(ReportElement jobProfElement:jobProfData)
													 {
														 jobProfMap = jobProfElement.getAllAttributes();
														 if(jobProfMap.get("wd:type").equals("Job_Profile_ID"))
														 {
															 jobCode = jobProfElement.getValue().trim();
														 }
													 }
												 }
												 else
												 {
													 jobCode = "";
												 }
												 jobPositionTitle = element7.getChild("wd:Job_Profile_Name") != null?element7.getChild("wd:Job_Profile_Name").getValue().trim():"";
												 jobPositionTitle = jobCode + "-" + jobPositionTitle;
												 if(jobPositionTitle.contains(","))
												 {
													 jobPositionTitle = jobPositionTitle.replaceAll(",", "|");
												 }
											 }
											 else
											 {
												 jobCode = "";
												 jobPositionTitle = "";
											 }
											 
											 ReportElement element9 = element3.getChild("wd:Business_Site_Summary_Data");
											 if(element9 != null)
											 {
												 ReportElement element99 = element9.getChild("wd:Location_Reference");
												 if(element99 != null)
												 {
													 List<ReportElement> locationData = element99.getChildren("wd:ID");					 
													 for(ReportElement locationElement:locationData)
													 {
														 locationMap = locationElement.getAllAttributes();
														 if(locationMap.get("wd:type").equals("Location_ID"))
														 {
															 location = locationElement.getValue().trim();
														 }
													 }
												 }
											 }
											 else
											 {
												 location = ""; 
											 }
											 locName = element9.getChild("wd:Name") != null?element9.getChild("wd:Name").getValue().trim():"";
											 if(locName.contains(","))
											 {
												 locName = locName.replaceAll(",", "|");
											 }
											 
											 ReportElement elementMgr = element3.getChild("wd:Manager_as_of_last_detected_manager_change_Reference");
											 if(elementMgr != null)
											 {
												 List<ReportElement> managerData = elementMgr.getChildren("wd:ID");					 
												 for(ReportElement managerElement:managerData)
												 {
													 managerMap = managerElement.getAllAttributes();
													 if(managerMap.get("wd:type").equals("Employee_ID"))
													 {
														 managerId = managerElement.getValue().trim();
													 }
												 }
											 }
											 else
											 {
												 managerId = ""; 
											 }
										 }
										 else
										 {
											 positionId = "";
											 positionTitle = "";
											 businessTitle = "";
											 contingentWorkerName = "";
											 timeType = "";
											 defaultWeeklyHours = "";
											 scheduledWeeklyHour = "";
											 payTypeName = "";
											 jobCode = "";
											 location = "";
											 locName = "";
											 contractStartDate = "";
											 managerId = ""; 
										 }
									 }
									 else
									 {
										 positionId = "";
										 positionTitle = "";
										 businessTitle = "";
										 contingentWorkerName = "";
										 timeType = "";
										 defaultWeeklyHours = "";
										 scheduledWeeklyHour = "";
										 payTypeName = "";
										 jobCode = "";
										 location = "";
										 locName = "";
										 contractStartDate = "";
										 managerId = ""; 
									 }
									 
									 ReportElement workerStatusData = reportElement.getChild("wd:Worker_Data")
					 							.getChild("wd:Employment_Data")
					 							.getChild("wd:Worker_Status_Data");
									 
									 if(workerStatusData != null)
									 {
										 hireDate = workerStatusData.getChild("wd:Hire_Date") != null?workerStatusData.getChild("wd:Hire_Date").getValue().trim():"";
										 if(!hireDate.isEmpty())
										 {
											 hireDate = hireDate.substring(0, 10);
										 }
										 originalHireDate = workerStatusData.getChild("wd:Original_Hire_Date") != null?workerStatusData.getChild("wd:Original_Hire_Date").getValue().trim():"";
										 if(!originalHireDate.isEmpty())
										 {
											 originalHireDate = originalHireDate.substring(0, 10);
										 }
										 contServiceDate = workerStatusData.getChild("wd:Continuous_Service_Date") != null?workerStatusData.getChild("wd:Continuous_Service_Date").getValue().trim():"";
										 if(!contServiceDate.isEmpty())
										 {
											 contServiceDate = contServiceDate.substring(0, 10);
										 }
										 ReportElement hireReasonRef = workerStatusData.getChild("wd:Hire_Reason_Reference");
										 if(hireReasonRef != null)
										 {
											 List<ReportElement> reasonData = hireReasonRef.getChildren("wd:ID");					 
											 for(ReportElement reasonElement:reasonData)
											 {
												 hireReasonMap = reasonElement.getAllAttributes();
												 if(hireReasonMap.get("wd:type").equals("Event_Classification_Subcategory_ID") || hireReasonMap.get("wd:type").equals("General_Event_Subcategory_ID"))
												 {
													 hireReason = reasonElement.getValue().trim();
												 }
											 }
										 }
										 else
										 {
											 hireReason = "";
										 }
									 }
									 
									 ReportElement element10 = reportElement.getChild("wd:Worker_Data")
					 							.getChild("wd:Employment_Data")
					 							.getChild("wd:Worker_Contract_Data");
									 
									 if(element10 != null)
									 {
										 contractEndDate = element10.getChild("wd:Contract_End_Date") != null?element10.getChild("wd:Contract_End_Date").getValue().trim():""; 
										 if(!contractEndDate.isEmpty())
										 {
											 contractEndDate = contractEndDate.substring(0, 10);
										 }
										 
										 ReportElement element11 = element10.getChild("wd:Supplier_Reference");
										 if(element11 != null)
										 {
											 List<ReportElement> supplierData = element11.getChildren("wd:ID");					 
											 for(ReportElement supplierElement:supplierData)
											 {
												 supplierMap = supplierElement.getAllAttributes();
												 if(supplierMap.get("wd:type").equals("Supplier_ID"))
												 {
													 supplierName = supplierElement.getValue().trim();
												 }
											 }
										 }
										 else
										 {
											 supplierName = "";
										 }
									 }
									 else
									 {
										 supplierName = "";
										 contractEndDate = "";
									 }
									 
									 ReportElement element12 = reportElement.getChild("wd:Worker_Data")
					 							.getChild("wd:Organization_Data");
									 
									 if(element12 != null)
									 {
										 List<ReportElement> orgData = element12.getChildren("wd:Worker_Organization_Data");
										 for(ReportElement orgElement:orgData)
										 {
											 ReportElement orgDataTypeElement = orgElement.getChild("wd:Organization_Data")
													 .getChild("wd:Organization_Type_Reference");
											 ReportElement element13 = orgElement.getChild("wd:Organization_Data");
											 List<ReportElement> orgElementData = orgDataTypeElement.getChildren("wd:ID");
											 for(ReportElement orgValElement:orgElementData)
											 {
												 orgMap = orgValElement.getAllAttributes();
											     if(orgMap.get("wd:type").equals("Organization_Type_ID") && orgValElement.getValue().trim().equalsIgnoreCase("SUPERVISORY"))
												 {											 
													 supOrg = element13.getChild("wd:Organization_Reference_ID") != null?element13.getChild("wd:Organization_Reference_ID").getValue().trim():"";
												 }									
											 }
										 }
									 }
									 
									 ReportElement element14 = reportElement.getChild("wd:Worker_Data")
					 							.getChild("wd:Organization_Data");
									 
									 if(element14 != null)
									 {
										 List<ReportElement> orgData = element14.getChildren("wd:Worker_Organization_Data");
										 if(orgData != null && orgData.size() >0)
										 {
										     for(ReportElement orgElement:orgData)
											 {
												 ReportElement orgDataElement = orgElement.getChild("wd:Organization_Reference");
												 ReportElement orgNameElement = orgElement.getChild("wd:Organization_Data");
												 List<ReportElement> orgElementData = orgDataElement.getChildren("wd:ID");
												 for(ReportElement orgValElement:orgElementData)
												 {
													 orgMap = orgValElement.getAllAttributes();
													 if(orgMap.get("wd:type").equals("Cost_Center_Reference_ID"))
													 {
														 costCenter = orgValElement.getValue().trim();
														 costCenterCode = orgNameElement.getChild("wd:Organization_Code") != null?orgNameElement.getChild("wd:Organization_Code").getValue().trim():"";											 
													 }
													 else if(orgMap.get("wd:type").equals("Company_Reference_ID"))
													 {
														 company = orgValElement.getValue().trim();	
														 companyName = orgNameElement.getChild("wd:Organization_Name") != null?orgNameElement.getChild("wd:Organization_Name").getValue().trim():"";											 
														 if(companyName.contains(","))
														 {
															 companyName = companyName.replaceAll(",", "|");
														 }
													 }
												 }
											 }
										 }
										 else
										 {
											 costCenter = "";
											 costCenterCode = "";
											 company = "";
											 companyName = "";
										 }
									 }
									 
									 headingFromWD = "Contingent_Worker_ID,First_Name,Last_Name,Position_ID,Hire_Reason,Supplier_Name,Contingent_Worker_Type_Name,Contract_Begin_Date,Contract_End_Date,Supervisory_Organization,"
									 		         + "Job_Position_Title,Job_Profile,Position_Title,Business_Title,Location,Location_Name,Time_Type,"
									 		         + "Default_Weekly_Hours,Scheduled_Weekly_Hours,Pay_Type_Name,Company,Campany_Name,Cost_Center,Cost_Center_Code,"
									 		         + "Hire_Date,Original_Hire_Date,Continuous_Service_Date,Manager";
										 
									 headerStr = contingentWorkerId + "," + legalFirstName + "," + legalLastName + "," + positionId + "," + hireReason + "," + supplierName + "," + contingentWorkerName + "," + contractStartDate + "," + contractEndDate + "," + 
											 supOrg + "," + jobPositionTitle + "," + jobCode + "," + positionTitle + "," + businessTitle + "," +
											 location + "," + locName + "," + timeType + "," + defaultWeeklyHours + "," + scheduledWeeklyHour + "," + payTypeName + "," + company + "," + companyName + "," + costCenter + "," + costCenterCode + "," +
											 hireDate + "," + originalHireDate + "," + contServiceDate + "," + managerId;
									 
									 if(finalStr.equals(""))
									 {
										 finalStr = headingFromWD + "\n" + headerStr;
									 }
									 else
									 {
										 finalStr = finalStr + "\n" + headerStr;
									 }					 
								 }
							 }
						 }
					 }
					 columnList.removeAll(errorList);
					 wdCount = columnList.size();
				 }		 					 
				 System.out.println(finalStr);
				 targetContent = finalStr.toString().getBytes();					 					 
				 headingWd = selectColumnMapping(loadCycle, ruleName, "Contingent_Worker_ID");					 
				 complete = true;
			}			 			 
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}

		return headingWd;
	}
		
		private JSONArray createCSVFromWDHire(Tenant tenant, InputStream is, SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd,
				String loadCycle, String ruleName, String client) {

			 targetContent = null;
			 headingFromWD = "";
			 String checkFile = "";
			
			 String finalStr = "";
			 String headerStr = "";
			 String empId = "";
			 String positionId = "";
			 String positionTitle = "";
			 String businessTitle = "";
			 String endEmpDate = "";
			 String empTypeName = "";
			 String timeType = "";
			 String defaultWeeklyHours = "";
			 String scheduledWeeklyHour = "";
			 String payTypeName = "";
			 String jobCode = "";
			 String jobPositionTitle = "";
			 String location = "";
			 String hireDate = "";
			 String originalHireDate = "";
			 String hireReason = "";
			 String contServiceDate = "";
			 String probStartDate = "";
			 String probEndDate = "";
			 String benefitsServiceDate = "";
			 String companyServiceDate = "";
			 String supOrg = "";
			 String workShiftName = "";
			 String workSpaceName = "";
			 //String jobClassificationName = "";
			 String jobClassificationNameArr = "";
			 String workHourProfileDesc = "";
			 String firstDayOfWork = "";
			 String locName = "";
			 String legalFirstName = "";
			 String legalLastName = "";
			 String managerId = "";
			 
			 Map<String,String> idMap = null;
			 Map<String,String> empTypeMap = null;
			 Map<String,String> posTimeTypeMap = null;
			 Map<String,String> payRateMap = null;
			 Map<String,String> jobProfMap = null;
			 Map<String,String> hireReasonMap = null;
			 Map<String,String> orgMap = null;
			 Map<String,String> locationMap = null;
			 Map<String,String> workShiftMap = null;
			 Map<String,String> jobSpaceMap = null;	
			 //Map<String,String> jobClassificationMap = null;
			 Map<String,String> workHourProfileMap = null;
			 Map<String,String> managerMap = null;
			 
			 try 
			 {			 
				 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
				 if(getRequest != null)
				 {
					 byte[] requestFileContent = getRequest.getRequestXMLContent();
					 File requestfile = null;
					 try 
					 {
						 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
						 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
					 } 
					 catch (IOException e1) 
					 {
					     e1.printStackTrace();
					 }
					 GET_HIRE_REQUEST_FILE = requestfile.getAbsolutePath();
					 
					 if(errorList.isEmpty())
					 {
						 for(int i = 0; i<columnList.size();i++)
						 {
							 checkFile = addWorkerIdListToFindError(GET_HIRE_REQUEST_FILE, columnList.get(i), ruleName, "Employee_ID");
							 is = new FileInputStream(checkFile);
						     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
						     SOAPPart soapPart = soapMessage.getSOAPPart();
						     SOAPEnvelope envelope = soapPart.getEnvelope();
							 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
							 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
							 {
								  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
								  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
							 }
							 soapMessage.saveChanges();
						     ByteArrayOutputStream out = new ByteArrayOutputStream();
						     soapMessage.writeTo(out);
						     String strMsgChk = new String(out.toByteArray());	
						     
						     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
						     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
							 soapConnection = soapConnectionFactory.createConnection();
							 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
							 out = new ByteArrayOutputStream();
							 soapResponse.writeTo(out);
							 strMsgChk = new String(out.toByteArray(), "utf-8");
							 if(strMsgChk.contains("faultstring"))
							 {
								 errorList.add(columnList.get(i)) ;
							 }
							 else
							 {
								 ReportElement rptElement = XmlParserManager.parseXml(strMsgChk);				 
								 ReportElement pageResults = rptElement.getChild("env:Body")
											.getChild("wd:Get_Workers_Response")
											.getChild("wd:Response_Results");
								 
								 String result = pageResults.getChild("wd:Total_Results").getValue().trim();
								 if(result.equalsIgnoreCase("0"))
								 {
									 errorList.add(columnList.get(i));
								 }
								 else
								 {
									 ReportElement responseData = rptElement.getChild("env:Body")
												.getChild("wd:Get_Workers_Response")
												.getChild("wd:Response_Data");
									 
									 List<ReportElement> workerData = responseData.getChildren("wd:Worker");
										
									 for(ReportElement reportElement : workerData)
									 {
										 ReportElement element1 = reportElement.getChild("wd:Worker_Reference");
										 if(element1 != null)
										 {
											 List<ReportElement> idData = element1.getChildren("wd:ID");					 
											 for(ReportElement wdElement:idData)
											 {
												 idMap = wdElement.getAllAttributes();
												 if(idMap.get("wd:type").equals("Employee_ID"))
												 {
													 empId = wdElement.getValue().trim();
													 System.out.println("empId--"+empId);
												 }
											 }
										 }
										 
										 ReportElement legalNameData = reportElement.getChild("wd:Worker_Data")
										 			.getChild("wd:Personal_Data")
										 			.getChild("wd:Name_Data")
							        				.getChild("wd:Legal_Name_Data")
							        				.getChild("wd:Name_Detail_Data");
							        		
											 legalFirstName = legalNameData.getChild("wd:First_Name") != null?legalNameData.getChild("wd:First_Name").getValue().trim():"";											 
											 legalLastName = legalNameData.getChild("wd:Last_Name") != null?legalNameData.getChild("wd:Last_Name").getValue().trim():"";
										 
										 ReportElement element2 = reportElement.getChild("wd:Worker_Data")
										 							.getChild("wd:Employment_Data")
										 							.getChild("wd:Worker_Job_Data");
										 if(element2 != null)
										 {
											 ReportElement element3 = element2.getChild("wd:Position_Data");
											 if(element3 != null)
											 {
												 positionId = element3.getChild("wd:Position_ID") != null?element3.getChild("wd:Position_ID").getValue().trim():"";
												 positionTitle = element3.getChild("wd:Position_Title") != null?element3.getChild("wd:Position_Title").getValue().trim():"";											 
												 if(positionTitle.contains(","))
												 {
													 positionTitle = positionTitle.replaceAll(",", "|");
												 }
												 businessTitle = element3.getChild("wd:Business_Title") != null?element3.getChild("wd:Business_Title").getValue().trim():"";
												 if(businessTitle.contains(","))
												 {
													 businessTitle = businessTitle.replaceAll(",", "|");
												 }
												 defaultWeeklyHours = element3.getChild("wd:Default_Weekly_Hours") != null?element3.getChild("wd:Default_Weekly_Hours").getValue().trim():"";
												 scheduledWeeklyHour = element3.getChild("wd:Scheduled_Weekly_Hours") != null?element3.getChild("wd:Scheduled_Weekly_Hours").getValue().trim():"";
												 
												 ReportElement element4 = element3.getChild("wd:Worker_Type_Reference");
												 if(element4 != null)
												 {
													 List<ReportElement> empTypeData = element4.getChildren("wd:ID");					 
													 for(ReportElement empTypeElement:empTypeData)
													 {
														 empTypeMap = empTypeElement.getAllAttributes();
														 if(empTypeMap.get("wd:type").equals("Employee_Type_ID"))
														 {
															 empTypeName = empTypeElement.getValue().trim();
														 }
													 }
												 }
												 else
												 {
													 empTypeName = "";
												 }
												 
												 ReportElement element5 = element3.getChild("wd:Position_Time_Type_Reference");
												 if(element5 != null)
												 {
													 List<ReportElement> timeData = element5.getChildren("wd:ID");					 
													 for(ReportElement timeElement:timeData)
													 {
														 posTimeTypeMap = timeElement.getAllAttributes();
														 if(posTimeTypeMap.get("wd:type").equals("Position_Time_Type_ID"))
														 {
															 timeType = timeElement.getValue().trim();
														 }
													 }
												 }
												 else
												 {
													 timeType = "";
												 }
												 
												 ReportElement element6 = element3.getChild("wd:Pay_Rate_Type_Reference");
												 if(element6 != null)
												 {
													 List<ReportElement> payData = element6.getChildren("wd:ID");					 
													 for(ReportElement payElement:payData)
													 {
														 payRateMap = payElement.getAllAttributes();
														 if(payRateMap.get("wd:type").equals("Pay_Rate_Type_ID"))
														 {
															 payTypeName = payElement.getValue().trim();
														 }
													 }
												 }
												 else
												 {
													 payTypeName = "";
												 }
												 
												 ReportElement element7 = element3.getChild("wd:Job_Profile_Summary_Data");
												 if(element7 != null)
												 {
													 ReportElement element8 = element7.getChild("wd:Job_Profile_Reference");
													 if(element8 != null)
													 {
														 List<ReportElement> jobProfData = element8.getChildren("wd:ID");					 
														 for(ReportElement jobProfElement:jobProfData)
														 {
															 jobProfMap = jobProfElement.getAllAttributes();
															 if(jobProfMap.get("wd:type").equals("Job_Profile_ID"))
															 {
																 jobCode = jobProfElement.getValue().trim();
															 }
														 }
													 }
													 else
													 {
														 jobCode = "";
													 }
													 jobPositionTitle = element7.getChild("wd:Job_Profile_Name") != null?element7.getChild("wd:Job_Profile_Name").getValue().trim():"";
													 jobPositionTitle = jobCode + "-" + jobPositionTitle;
													 if(jobPositionTitle.contains(","))
													 {
														 jobPositionTitle = jobPositionTitle.replaceAll(",", "|");
													 }
												 }
												 else
												 {
													 jobCode = "";
													 jobPositionTitle = "";
												 }
												 
												 ReportElement element88 = element3.getChild("wd:Work_Space__Reference");
												 if(element88 != null)
												 {
													 List<ReportElement> jobspaceData = element88.getChildren("wd:ID");					 
													 for(ReportElement jobSpaceElement:jobspaceData)
													 {
														 jobSpaceMap = jobSpaceElement.getAllAttributes();
														 if(jobSpaceMap.get("wd:type").equals("Location_ID"))
														 {
															 workSpaceName = jobSpaceElement.getValue().trim();
														 }
													 }
												 }
												 else
												 {
													 workSpaceName = "";
												 }
												 
												 ReportElement element9 = element3.getChild("wd:Business_Site_Summary_Data");
												 if(element9 != null)
												 {
													 ReportElement element99 = element9.getChild("wd:Location_Reference");
													 if(element99 != null)
													 {
														 List<ReportElement> locationData = element99.getChildren("wd:ID");					 
														 for(ReportElement locationElement:locationData)
														 {
															 locationMap = locationElement.getAllAttributes();
															 if(locationMap.get("wd:type").equals("Location_ID"))
															 {
																 location = locationElement.getValue().trim();
															 }
														 }
													 }
												 }
												 else
												 {
													 location = ""; 
												 }
												 locName = element9.getChild("wd:Name") != null?element9.getChild("wd:Name").getValue().trim():"";
												 if(locName.contains(","))
												 {
													 locName = locName.replaceAll(",", "|");
												 }
												 
												 ReportElement elementMgr = element3.getChild("wd:Manager_as_of_last_detected_manager_change_Reference");
												 if(elementMgr != null)
												 {
													 List<ReportElement> managerData = elementMgr.getChildren("wd:ID");					 
													 for(ReportElement managerElement:managerData)
													 {
														 managerMap = managerElement.getAllAttributes();
														 if(managerMap.get("wd:type").equals("Employee_ID"))
														 {
															 managerId = managerElement.getValue().trim();
														 }
													 }
												 }
												 else
												 {
													 managerId = ""; 
												 }
												 
												 /*List<ReportElement> jobClassSummData = element3.getChildren("wd:Job_Classification_Summary_Data");
												 if(jobClassSummData != null && jobClassSummData.size()>0)
												 {
													 jobClassificationNameArr = "";
													 for(ReportElement jobClassSummElement: jobClassSummData)
													 {
														 ReportElement jobClassRef = jobClassSummElement.getChild("wd:Job_Classification_Reference");
														 if(jobClassRef != null)
														 {
															 List<ReportElement> jobClassData = jobClassRef.getChildren("wd:ID");					 
															 for(ReportElement jobClassElement:jobClassData)
															 {
																 jobClassificationMap = jobClassElement.getAllAttributes();
																 if(jobClassificationMap.get("wd:type").equals("Job_Classification_Reference_ID"))
																 {
																	 jobClassificationName = jobClassElement.getValue().trim();
																	 if(jobClassificationName.contains(","))
																	 {
																		 jobClassificationName = jobClassificationName.replaceAll(",", "|");
																	 }
																	 if(jobClassificationNameArr.equals(""))
																	 {
																		 jobClassificationNameArr = jobClassificationName;
																	 }
																	 else
																	 {
																		 jobClassificationNameArr = jobClassificationNameArr + "~" + jobClassificationName;
																	 }
																 }
															 }											 
														 }													 
													 }
												 }
												 else
												 {
													 jobClassificationNameArr = "";
												 }*/
												 
												 ReportElement workShiftData = element3.getChild("wd:Work_Shift_Reference");
												 if(workShiftData != null)
												 {
													 List<ReportElement> shiftData = workShiftData.getChildren("wd:ID");					 
													 for(ReportElement shiftElement:shiftData)
													 {
														 workShiftMap = shiftElement.getAllAttributes();
														 if(workShiftMap.get("wd:type").equals("Work_Shift_ID"))
														 {
															 workShiftName = shiftElement.getValue().trim();
														 }
													 }		
												 }
												 else
												 {
													 workShiftName = ""; 
												 }
												 
												 ReportElement workHourData = element3.getChild("wd:Work_Hours_Profiles_Reference");
												 if(workHourData != null)
												 {
													 List<ReportElement> hourData = workHourData.getChildren("wd:ID");					 
													 for(ReportElement hourElement:hourData)
													 {
														 workHourProfileMap = hourElement.getAllAttributes();
														 if(workHourProfileMap.get("wd:type").equals("Work_Hours_Profile_ID"))
														 {
															 workHourProfileDesc = hourElement.getValue().trim();
														 }
													 }		
												 }
												 else
												 {
													 workHourProfileDesc = ""; 
												 }
											 }
											 else
											 {
												 positionId = "";
												 positionTitle = "";
												 businessTitle = "";
												 empTypeName = "";
												 timeType = "";
												 defaultWeeklyHours = "";
												 scheduledWeeklyHour = "";
												 payTypeName = "";
												 jobCode = "";
												 jobPositionTitle = "";
												 location = "";
												 workShiftName = ""; 
												 workSpaceName = "";												 
												 jobClassificationNameArr = "";
												 workHourProfileDesc = "";
												 locName = "";												 
												 legalFirstName = "";
												 legalLastName = "";
												 managerId = "";
											 }
										 }
										 else
										 {
											 positionId = "";
											 positionTitle = "";
											 businessTitle = "";
											 empTypeName = "";
											 timeType = "";
											 defaultWeeklyHours = "";
											 scheduledWeeklyHour = "";
											 payTypeName = "";
											 jobCode = "";
											 jobPositionTitle = "";
											 location = "";
											 workShiftName = ""; 
											 workSpaceName = "";											 
											 jobClassificationNameArr = "";
											 workHourProfileDesc = "";
											 locName = "";
											 legalFirstName = "";
											 legalLastName = "";
											 managerId = "";
										 }
										 
										 ReportElement element10 = reportElement.getChild("wd:Worker_Data")
						 							.getChild("wd:Employment_Data")
						 							.getChild("wd:Worker_Status_Data");
										 
										 if(element10 != null)
										 {
											 hireDate = element10.getChild("wd:Hire_Date") != null?element10.getChild("wd:Hire_Date").getValue().trim():"";
											 if(!hireDate.isEmpty())
											 {
												 hireDate = hireDate.substring(0, 10);
											 }
											 originalHireDate = element10.getChild("wd:Original_Hire_Date") != null?element10.getChild("wd:Original_Hire_Date").getValue().trim():"";
											 if(!originalHireDate.isEmpty())
											 {
												 originalHireDate = originalHireDate.substring(0, 10);
											 }
											 contServiceDate = element10.getChild("wd:Continuous_Service_Date") != null?element10.getChild("wd:Continuous_Service_Date").getValue().trim():"";
											 if(!contServiceDate.isEmpty())
											 {
												 contServiceDate = contServiceDate.substring(0, 10);
											 }
											 firstDayOfWork = element10.getChild("wd:First_Day_of_Work") != null?element10.getChild("wd:First_Day_of_Work").getValue().trim():"";
											 if(!firstDayOfWork.isEmpty())
											 {
												 firstDayOfWork = firstDayOfWork.substring(0, 10);
											 }
											 probStartDate = element10.getChild("wd:Probation_Start_Date") != null?element10.getChild("wd:Probation_Start_Date").getValue().trim():""; 
											 if(!probStartDate.isEmpty())
											 {
												 probStartDate = probStartDate.substring(0, 10);
											 }
											 probEndDate = element10.getChild("wd:Probation_End_Date") != null?element10.getChild("wd:Probation_End_Date").getValue().trim():"";
											 if(!probEndDate.isEmpty())
											 {
												 probEndDate = probEndDate.substring(0, 10);
											 }
											 benefitsServiceDate = element10.getChild("wd:Benefits_Service_Date") != null?element10.getChild("wd:Benefits_Service_Date").getValue().trim():"";
											 if(!benefitsServiceDate.isEmpty())
											 {
												 benefitsServiceDate = benefitsServiceDate.substring(0, 10);
											 }
											 companyServiceDate = element10.getChild("wd:Company_Service_Date") != null?element10.getChild("wd:Company_Service_Date").getValue().trim():""; 
											 if(!companyServiceDate.isEmpty())
											 {
												 companyServiceDate = companyServiceDate.substring(0, 10);
											 }
											 endEmpDate = element10.getChild("wd:End_Employment_Date") != null?element10.getChild("wd:End_Employment_Date").getValue().trim():"";
											 if(!endEmpDate.isEmpty())
											 {
												 endEmpDate = endEmpDate.substring(0, 10);
											 }
											 
											 ReportElement element11 = element10.getChild("wd:Hire_Reason_Reference");
											 if(element11 != null)
											 {
												 List<ReportElement> reasonData = element11.getChildren("wd:ID");					 
												 for(ReportElement reasonElement:reasonData)
												 {
													 hireReasonMap = reasonElement.getAllAttributes();
													 if(hireReasonMap.get("wd:type").equals("Event_Classification_Subcategory_ID") || hireReasonMap.get("wd:type").equals("General_Event_Subcategory_ID"))
													 {
														 hireReason = reasonElement.getValue().trim();
													 }
												 }
											 }
											 else
											 {
												 hireReason = "";
											 }
										 }
										 else
										 {
											 hireDate = "";
											 originalHireDate = "";
											 hireReason = "";
											 contServiceDate = "";
											 probStartDate = "";
											 probEndDate = "";
											 benefitsServiceDate = "";
											 companyServiceDate = "";
											 endEmpDate = "";
											 firstDayOfWork = "";
										 }
										 
										 ReportElement element12 = reportElement.getChild("wd:Worker_Data")
						 							.getChild("wd:Organization_Data");
										 
										 if(element12 != null)
										 {
											 List<ReportElement> orgData = element12.getChildren("wd:Worker_Organization_Data");
											 for(ReportElement orgElement:orgData)
											 {
												 ReportElement orgDataTypeElement = orgElement.getChild("wd:Organization_Data")
														 .getChild("wd:Organization_Type_Reference");
												 
												 List<ReportElement> orgElementData = orgDataTypeElement.getChildren("wd:ID");
												 for(ReportElement orgValElement:orgElementData)
												 {
													 orgMap = orgValElement.getAllAttributes();
												     if(orgMap.get("wd:type").equals("Organization_Type_ID") && orgValElement.getValue().trim().equalsIgnoreCase("SUPERVISORY"))
													 {
														 ReportElement element13 = orgElement.getChild("wd:Organization_Data");
														 supOrg = element13.getChild("wd:Organization_Reference_ID") != null?element13.getChild("wd:Organization_Reference_ID").getValue().trim():"";
													 }
												 }
											 }
										 }
										 else
										 {
											 supOrg = "";
										 }
										 
										 headingFromWD = "Employee_ID,First_Name,Last_name,Position_ID,Employee_Type_Name,Hire_Date,Original_Hire_Date,Hire_Reason,Continuous_Service_Date,Probation_Start_Date,Probation_End_Date,"
										 		         + "End_Employment_Date,Benefit_Service_Date,Company_Service_Date,First_Day_Of_Work,Supervisory_Organization,"
										 		         + "Job_Position_Title,Job_Profile,Position_Title,Business_Title,Location,Location_Name,Time_Type,Default_Weekly_Hours,"
										 		         + "Scheduled_Weekly_Hours,Pay_Type_Name,Work_Shift,Work_Space,Job_Classification,Work_Hours_Profile,Manager";
											 
										 headerStr = empId + "," + legalFirstName + "," + legalLastName + "," + positionId + "," + empTypeName + "," + hireDate + "," + originalHireDate + "," + hireReason + "," + contServiceDate + "," + probStartDate + "," + probEndDate + "," + 
												 endEmpDate + "," + benefitsServiceDate + "," + companyServiceDate + "," + firstDayOfWork + "," + supOrg + "," + jobPositionTitle + "," + jobCode + "," +
												 positionTitle + "," + businessTitle + "," +location + "," + locName  + "," + timeType + "," + defaultWeeklyHours + "," + scheduledWeeklyHour + "," + payTypeName + "," +
												 workShiftName + "," + workSpaceName + "," + jobClassificationNameArr + "," + workHourProfileDesc + "," + managerId;
										 
											 if(finalStr.equals(""))
											 {
												 finalStr = headingFromWD + "\n" + headerStr;
											 }
											 else
											 {
												 finalStr = finalStr + "\n" + headerStr;
											 }
									 }
								 }
							 }
						 }
						 columnList.removeAll(errorList);
						 wdCount = columnList.size();
					 }		 					 
					 System.out.println(finalStr);
					 targetContent = finalStr.toString().getBytes();					 					 
					 headingWd = selectColumnMapping(loadCycle, ruleName, "Employee_ID");					 
					 complete = true;
				}			 			 
			}
			catch (FileNotFoundException e)
			{
				e.printStackTrace();
			} 
			catch (IOException e) 
			{
				e.printStackTrace();
			} 
			catch (SOAPException e) 
			{
				e.printStackTrace();
			} 
			catch (Exception e) 
			{
				e.printStackTrace();
			}

			return headingWd;
		}
	
	private JSONArray createCSVFromWDTermination(Tenant tenant, InputStream is, SOAPConnection soapConnection,
			int startIndex, int endIndex, JSONArray headingWd, String loadCycle, String ruleName, String client) {

		targetContent = null;
		headingFromWD = "";
		try 
		{
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_TERMINATION_REQUEST_FILE = requestfile.getAbsolutePath();				
				 String outputfile = addHireIdList(GET_TERMINATION_REQUEST_FILE, columnList, ruleName, startIndex, columnList.size(), "Employee_ID");

				 is = new FileInputStream(outputfile);
			     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
			     SOAPPart soapPart = soapMessage.getSOAPPart();
			     SOAPEnvelope envelope = soapPart.getEnvelope();
				 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
				 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
				 {
					  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
					  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
				 }
				 soapMessage.saveChanges();
			     ByteArrayOutputStream out = new ByteArrayOutputStream();
			     soapMessage.writeTo(out);
			     String strMsg = new String(out.toByteArray());	
			     
			     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
			     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
				 soapConnection = soapConnectionFactory.createConnection();
				 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
				 out = new ByteArrayOutputStream();
				 soapResponse.writeTo(out);
				 strMsg = new String(out.toByteArray(), "utf-8");			 
				 
				 //if(faultStr == null)
				 {
					 ReportElement soapResp = XmlParserManager.parseXml(strMsg);				 
					 ReportElement pageData = soapResp.getChild("env:Body")
								.getChild("wd:Get_Workers_Response")
								.getChild("wd:Response_Results");
					 
					 String totalNoOfPages = pageData.getChild("wd:Total_Pages").getValue().trim();
					 String totalResults = pageData.getChild("wd:Total_Results").getValue().trim();
					 int totalResult = Integer.parseInt(totalResults);
					 System.out.println("totalNoOfPages-"+totalNoOfPages);
					 System.out.println("totalResult-"+totalResult);
					 wdCount = totalResult;
					 
					 String finalStr = "";
					 String headerStr = "";
					 String empId = "";
					 String terminationDate = "";
					 String lastDayOfWork = "";
					 String payThroughDate = "";
					 String resignationDate = "";
					 String notificationDate = "";
					 String lastPaidDate = "";
					 String expectedReturnDate = "";
					 String regretTermination = "";
					 String notReturning = "";
					 String returnUnknown = "";
					 String primaryReason = "";
					 String secondaryReason = "";
					 String localReason = "";
					 String elegibleForHire = "";
					 String endEmpDate = "";
					 
					 Map<String,String> idMap = null;
					 Map<String,String> primaryReasonMap = null;
					 Map<String,String> secReasonMap = null;
					 Map<String,String> localReasonMap = null;
					 Map<String,String> rehireMap = null;
					 
					 for (int j = 1; j <= Integer.parseInt(totalNoOfPages); j++) 
					 {					 
						 if(j == 1)
						 {
							startIndex = 0;
							if(999 > totalResult)
							{
								endIndex = totalResult;
							}
							else
							{
								endIndex = j*999;
							}
						 }
						 else
						 {
							startIndex = endIndex;
							if(j*999 > totalResult)
							{
								endIndex = totalResult;
							}
							else
							{
								endIndex = (j*999);
							}
						 }
						 outputfile = addHireIdList(GET_TERMINATION_REQUEST_FILE, columnList, ruleName, startIndex, endIndex, "Employee_ID");
						 is = new FileInputStream(outputfile);
					     soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     soapPart = soapMessage.getSOAPPart();
					     envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
								envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
								createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
				         out = new ByteArrayOutputStream();
				         soapMessage.writeTo(out);
				         strMsg = new String(out.toByteArray());
				        
				         soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
				         soapResponse = soapConnection.call(soapMessage, sourceUrl);
				         out = new ByteArrayOutputStream();
				         soapResponse.writeTo(out);
				         strMsg = new String(out.toByteArray(), "utf-8");
				        
				         soapResp = XmlParserManager.parseXml(strMsg);
					 
						 ReportElement responseData = soapResp.getChild("env:Body")
									.getChild("wd:Get_Workers_Response")
									.getChild("wd:Response_Data");
						 
						 List<ReportElement> workerData = responseData.getChildren("wd:Worker");
							
						 for(ReportElement reportElement : workerData)
						 {
							 ReportElement element1 = reportElement.getChild("wd:Worker_Reference");
							 if(element1 != null)
							 {
								 List<ReportElement> idData = element1.getChildren("wd:ID");					 
								 for(ReportElement wdElement:idData)
								 {
									 idMap = wdElement.getAllAttributes();
									 if(idMap.get("wd:type").equals("Employee_ID"))
									 {
										 empId = wdElement.getValue().trim();
									 }
								 }
							 }
							 
							 ReportElement element12 = reportElement.getChild("wd:Worker_Data")
			 							.getChild("wd:Employment_Data")
			 							.getChild("wd:Worker_Job_Data");
							 
							 if(element12 != null)
							 {
								 ReportElement positionData = element12.getChild("wd:Position_Data");
								 if(positionData != null)
								 {
									 endEmpDate = positionData.getChild("wd:End_Employment_Date") != null?positionData.getChild("wd:End_Employment_Date").getValue().trim():"";
								 }
							 }
							 
							 ReportElement element2 = reportElement.getChild("wd:Worker_Data")
			 							.getChild("wd:Employment_Data")
			 							.getChild("wd:Worker_Status_Data");
							 
							 if(element2 != null)
							 {
								 terminationDate = element2.getChild("wd:Termination_Date") != null?element2.getChild("wd:Termination_Date").getValue().trim():"";
								 if(!terminationDate.isEmpty())
								 {
									 terminationDate = terminationDate.substring(0, 10);
								 }
								 lastDayOfWork = element2.getChild("wd:Termination_Last_Day_of_Work") != null?element2.getChild("wd:Termination_Last_Day_of_Work").getValue().trim():"";
								 if(!lastDayOfWork.isEmpty())
								 {
									 lastDayOfWork = lastDayOfWork.substring(0, 10);
								 }
								 payThroughDate = element2.getChild("wd:Pay_Through_Date") != null?element2.getChild("wd:Pay_Through_Date").getValue().trim():""; 
								 if(!payThroughDate.isEmpty())
								 {
									 payThroughDate = payThroughDate.substring(0, 10);
								 }
								 resignationDate = element2.getChild("wd:Resignation_Date") != null?element2.getChild("wd:Resignation_Date").getValue().trim():"";
								 if(!resignationDate.isEmpty())
								 {
									 resignationDate = resignationDate.substring(0, 10);
								 }
								 notificationDate = resignationDate;
								 lastPaidDate = element2.getChild("wd:Last_Date_for_Which_Paid") != null?element2.getChild("wd:Last_Date_for_Which_Paid").getValue().trim():"";
								 if(!lastPaidDate.isEmpty())
								 {
									 lastPaidDate = lastPaidDate.substring(0, 10);
									 //lastPaidDate = convertDate(lastPaidDate, "yyyy-MM-dd", "dd-MM-yyyy");
								 }
								 expectedReturnDate = element2.getChild("wd:Expected_Date_of_Return") != null?element2.getChild("wd:Expected_Date_of_Return").getValue().trim():"";
								 regretTermination = element2.getChild("wd:Regrettable_Termination") != null?element2.getChild("wd:Regrettable_Termination").getValue().trim():"";
								 if(regretTermination.equalsIgnoreCase("1"))
								 {
									 regretTermination = "Yes";
								 }
								 else if(regretTermination.equalsIgnoreCase("0"))
								 {
									 regretTermination = "No";
								 }
								 notReturning = element2.getChild("wd:Not_Returning") != null?element2.getChild("wd:Not_Returning").getValue().trim():"";
								 if(notReturning.equalsIgnoreCase("1"))
								 {
									 notReturning = "true";
								 }
								 else if(notReturning.equalsIgnoreCase("0"))
								 {
									 notReturning = "false";
								 }
								 returnUnknown = element2.getChild("wd:Return_Unknown") != null?element2.getChild("wd:Return_Unknown").getValue().trim():"";
								 if(returnUnknown.equalsIgnoreCase("1"))
								 {
									 returnUnknown = "Y";
								 }
								 else if(returnUnknown.equalsIgnoreCase("0"))
								 {
									 returnUnknown = "N";
								 }
								 
								 ReportElement element3 = element2.getChild("wd:Primary_Termination_Reason_Reference");
								 if(element3 != null)
								 {
									 List<ReportElement> priReasonData = element3.getChildren("wd:ID");					 
									 for(ReportElement priReasonElement:priReasonData)
									 {
										 primaryReasonMap = priReasonElement.getAllAttributes();
										 if(primaryReasonMap.get("wd:type").equals("Event_Classification_Subcategory_ID") || primaryReasonMap.get("wd:type").equals("Termination_Subcategory_ID"))
										 {
											 primaryReason = priReasonElement.getValue().trim();
										 }
									 }
								 }
								 else
								 {
									 primaryReason = "";
								 }
								 
								 ReportElement element4 = element2.getChild("wd:Secondary_Termination_Reasons_Data");
								 if(element4 != null)
								 {
									 ReportElement element5 = element4.getChild("wd:Secondary_Termination_Reason_Reference");
									 if(element5 != null)
									 {
										 List<ReportElement> secReasonData = element5.getChildren("wd:ID");					 
										 for(ReportElement secReasonElement:secReasonData)
										 {
											 secReasonMap = secReasonElement.getAllAttributes();
											 if(secReasonMap.get("wd:type").equals("Event_Classification_Subcategory_ID") || secReasonMap.get("wd:type").equals("Termination_Subcategory_ID"))
											 {
												 secondaryReason = secReasonElement.getValue().trim();
											 }
										 }
									 }
									 else
									 {
										 secondaryReason = "";
									 }
								 }
								 else
								 {
									 secondaryReason = "";
								 }
								 
								 ReportElement element6 = element2.getChild("wd:Local_Termination_Reason_Reference");
								 if(element6 != null)
								 {
									 List<ReportElement> localReasonData = element6.getChildren("wd:ID");					 
									 for(ReportElement localReasonElement:localReasonData)
									 {
										 localReasonMap = localReasonElement.getAllAttributes();
										 if(localReasonMap.get("wd:type").equals("Local_Termination_Reason_ID"))
										 {
											 localReason = localReasonElement.getValue().trim();
										 }
									 }
								 }
								 else
								 {
									 localReason = "";
								 }
								 
								 ReportElement element7 = element2.getChild("wd:Eligible_for_Hire_Reference");
								 if(element7 != null)
								 {
									 List<ReportElement> rehireData = element7.getChildren("wd:ID");					 
									 for(ReportElement rehireElement:rehireData)
									 {
										 rehireMap = rehireElement.getAllAttributes();
										 if(rehireMap.get("wd:type").equals("Yes_No_Type_ID"))
										 {
											 elegibleForHire = rehireElement.getValue().trim();
										 }
									 }
								 }
								 else
								 {
									 elegibleForHire = "";
								 }
								 
								 if(elegibleForHire.isEmpty())
								 {
									 elegibleForHire = element2.getChild("wd:Not_Eligible_for_Rehire") != null?element2.getChild("wd:Not_Eligible_for_Rehire").getValue().trim():"";
									 if(elegibleForHire.equalsIgnoreCase("0"))
									 {
										 elegibleForHire = "Yes";
									 }
									 else if(elegibleForHire.equalsIgnoreCase("1"))
									 {
										 elegibleForHire = "No";
									 }
								 }
							 }
							 else
							 {
								 terminationDate = "";
								 lastDayOfWork = "";
								 payThroughDate = "";
								 resignationDate = "";
								 notificationDate = "";
								 lastPaidDate = "";
								 expectedReturnDate = "";
								 regretTermination = "";
								 notReturning = "";
								 returnUnknown = "";
								 primaryReason = "";
								 secondaryReason = "";
								 localReason = "";
								 elegibleForHire = "";
							 }
							 
							 headingFromWD = "Employee_ID,Termination_Date,Last_Day_of_Work,Primary_Reason,Secondary_Reason,Local_Termination_Reason,Pay_Through_Date,Resignation_Date,Notification_Date,"
							 		         + "Regrettable,Last_Date_for_Which_Paid,Expected_Date_of_Return,Not_Returning,Return_Unknown,Elegible_For_Hire,End_Employment_Date";
								 
							 headerStr = empId + "," + terminationDate + "," + lastDayOfWork + "," + primaryReason + "," + secondaryReason + "," + localReason + "," + payThroughDate + "," + 
									 resignationDate + "," + notificationDate + "," + regretTermination + "," + lastPaidDate + "," + expectedReturnDate + "," + notReturning + "," + 
									 returnUnknown + "," + elegibleForHire + "," + endEmpDate;
							 
							 if(finalStr.equals(""))
							 {
								 finalStr = headingFromWD + "\n" + headerStr;
							 }
							 else
							 {
								 finalStr = finalStr + "\n" + headerStr;
							 }					 
						 }
					 }
					 
					 System.out.println(finalStr);
					 targetContent = finalStr.toString().getBytes();
					 
					 headingWd = selectColumnMapping(loadCycle, ruleName, "Employee_ID");
					 
					 complete = true;
				 }
			 }
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		return headingWd;
	}
	
	private JSONArray createCSVFromWDApplicantMultiplePh(Tenant tenant, InputStream is, SOAPConnection soapConnection, int startIndex,
			int endIndex, JSONArray headingWd, String loadCycle, String ruleName, String client) {
		
		 targetContent = null;
		 headingFromWD = "";
		 String checkFile = null;

		 String legalFirstName = "";
		 String legalMiddleName = "";
		 String legalLastName = "";
		 String countryISOCode = "";
		 String applicantName = "";
		 /*String prefix = "";
		 String suffix = "";
		 String legalSecondaryName = "";
		 String localFirstName = "";
		 String localMiddleName = "";
		 String localLastName = "";
		 String localSecondaryName = "";
		 String localFirstName2 = "";
		 String localScript = "";
		 String preferredFirstName = "";
		 String preferredMiddleName = "";
		 String preferredLastName = "";
		 String preferredSecondaryName = "";*/


		 String email = "";
		 String usageType = "";
		 String emailArr = "";
		 String usageTypeArr = "";					 
		 String finalStr = "";
		 String headerStr = "";
		 
		 Map<String,String> keyMap = null;
		 //Map<String,String> prefixMap = null;
		 //Map<String,String> scriptMap = null;
		 Map<String,String> usageMap = null;
		 
		 try 
		 {			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_APPLICANT_REQUEST_FILE = requestfile.getAbsolutePath();
				 //columnList.removeAll(errorList);
				 if(errorList.isEmpty())
				 {
					 for(int i = 0; i<columnList.size();i++)
					 {
						 checkFile = addIdListToFindError(GET_APPLICANT_REQUEST_FILE, columnList.get(i), ruleName, "Applicant_ID");
						 is = new FileInputStream(checkFile);
					     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     SOAPPart soapPart = soapMessage.getSOAPPart();
					     SOAPEnvelope envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
							  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
					     ByteArrayOutputStream out = new ByteArrayOutputStream();
					     soapMessage.writeTo(out);
					     String strMsgChk = new String(out.toByteArray());	
					     
					     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
					     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
						 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
						 out = new ByteArrayOutputStream();
						 soapResponse.writeTo(out);
						 strMsgChk = new String(out.toByteArray(), "utf-8");
						 if(strMsgChk.contains("faultstring"))
						 {
							 errorList.add(columnList.get(i)) ;
						 }
						 else
						 {
							 ReportElement rptElement = XmlParserManager.parseXml(strMsgChk);				 
							 ReportElement pageResults = rptElement.getChild("env:Body")
										.getChild("wd:Get_Applicants_Response")
										.getChild("wd:Response_Results");
							 
							 String result = pageResults.getChild("wd:Total_Results").getValue().trim();
							 if(result.equalsIgnoreCase("0"))
							 {
								 errorList.add(columnList.get(i));
							 }
							 else
							 {						        
								ReportElement responseData = rptElement.getChild("env:Body")
											.getChild("wd:Get_Applicants_Response")
											.getChild("wd:Response_Data");
								 
								 List<ReportElement> applicantData = responseData.getChildren("wd:Applicant");
									
								 for(ReportElement reportElement : applicantData)
								 {
									 ReportElement element1 = reportElement.getChild("wd:Applicant_Data");
									 String applicantId = element1.getChild("wd:Applicant_ID").getValue().trim();
									 System.out.println("applicantId-"+applicantId);
									 
									 ReportElement elementNameData = reportElement.getChild("wd:Applicant_Data")
									 			.getChild("wd:Personal_Data")
									 			.getChild("wd:Name_Data");
									 
									 if(elementNameData != null)
									 {
										 ReportElement element2 = reportElement.getChild("wd:Applicant_Data")
												 			.getChild("wd:Personal_Data")
												 			.getChild("wd:Name_Data")
										 					.getChild("wd:Legal_Name_Data")
										 					.getChild("wd:Name_Detail_Data");
										 
										 legalFirstName = element2.getChild("wd:First_Name") != null?element2.getChild("wd:First_Name").getValue().trim():"";
										 legalMiddleName = element2.getChild("wd:Middle_Name")!= null?element2.getChild("wd:Middle_Name").getValue().trim():"";
										 legalLastName = element2.getChild("wd:Last_Name") != null?element2.getChild("wd:Last_Name").getValue().trim():"";
										 if(legalMiddleName.length() > 0)
										 {
											 applicantName = legalFirstName + " " +legalMiddleName + " " +legalLastName;
										 }
										 else
										 {
											 applicantName = legalFirstName + " " + legalLastName;
										 }
										 
										 ReportElement element5 = reportElement.getChild("wd:Applicant_Data")
										 			.getChild("wd:Personal_Data")
										 			.getChild("wd:Name_Data")
								 					.getChild("wd:Legal_Name_Data")
								 					.getChild("wd:Name_Detail_Data")
								 					.getChild("wd:Country_Reference");
										 
										 List<ReportElement> wdData = element5.getChildren("wd:ID");
										 
										 for(ReportElement wdElement:wdData)
										 {
											 keyMap = wdElement.getAllAttributes();
											 if(keyMap.get("wd:type").equals("ISO_3166-1_Alpha-3_Code"))
											 {
												 countryISOCode = wdElement.getValue().trim();
											 }
										 }										 
									 }
									 else
									 {
										 countryISOCode = "";
										 legalFirstName = "";
										 legalMiddleName = "";
										 legalLastName = "";
									 }									 
									 					 
									 List<ReportElement> emailList = reportElement.getChild("wd:Applicant_Data")
									 			.getChild("wd:Personal_Data")
									 			.getChild("wd:Contact_Data")
							 					.getChildren("wd:Email_Address_Data");
									 
									 if(emailList != null && emailList.size() >0)
									 {
										 emailArr = "";
										 usageTypeArr = "";
										 
										 for(ReportElement emailElement:emailList)
										 {
											 email = emailElement.getChild("wd:Email_Address") != null?emailElement.getChild("wd:Email_Address").getValue().trim():"";
											 if(emailArr.equals(""))
											 {
												 emailArr = email;
											 }
											 else
											 {
												 emailArr = emailArr + "~" + email;
											 }
											 ReportElement element9 = emailElement.getChild("wd:Usage_Data");
											 if(element9 != null)
											 {
												 ReportElement element10 = element9.getChild("wd:Type_Data");
												 if(element10 != null)
												 {
													 ReportElement element11 = element10.getChild("wd:Type_Reference");
													 if(element11 !=null)
													 {
														 List<ReportElement> usageData = element11.getChildren("wd:ID");					 
														 for(ReportElement wdElement:usageData)
														 {
															 usageMap = wdElement.getAllAttributes();
															 if(usageMap.get("wd:type").equals("Communication_Usage_Type_ID"))
															 {
																 usageType = wdElement.getValue().trim();
																 if(usageTypeArr.equals(""))
																 {
																	 usageTypeArr = usageType;
																 }
																 else
																 {
																	 usageTypeArr = usageTypeArr + "~" + usageType;
																 }
															 }
														 }
													 }
												 }
											 }											 
										 }
									 }
									 else
									 {
										 emailArr = "";
										 usageTypeArr = "";
									 }
									
									 headingFromWD = "Applicant_ID,Applicant_Name,Country_ISO_Code,Legal_First_Name,Legal_Middle_Name,Legal_Last_Name,Email_Address,Usage_Type_Email";									 		
									 
									 headerStr = applicantId + "," + applicantName + "," + countryISOCode + "," + legalFirstName + "," + legalMiddleName + "," + legalLastName + "," + emailArr + ","  + usageTypeArr;
									 
									 if(finalStr.equals(""))
									 {
										 finalStr = headingFromWD + "\n" + headerStr;
									 }
									 else
									 {
										 finalStr = finalStr + "\n" + headerStr;
									 }
								 }
							 }
						 }
					 }
					 	wdCount = columnList.size();
					 	columnList.removeAll(errorList);
					 }
				 
					 System.out.println(finalStr);
					 targetContent = finalStr.toString().getBytes();
					 
					 headingWd = selectColumnMapping(loadCycle, ruleName, "Applicant_ID");
					 complete = true;
			 }

		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}

		return headingWd;
	}
	
	private JSONArray createCSVFromWDPosition(Tenant tenant, InputStream is, SOAPConnection soapConnection, int startIndex,
			int endIndex, JSONArray headingWd, String loadCycle, String ruleName, String client) {
		
		 targetContent = null;
		 headingFromWD = "";
		 String checkFile = null;

		 String positionId = "";
		 String jobPostingTitle = "";
		 String orgRefId = "";
		 String availabilityDate = "";
		 String earliestHireDateDate = "";
		 String finalStr = "";
		 String headerStr = "";
		 
		 Map<String,String> idMap = null;
		 Map<String,String> orgMap = null;
		 
		 try 
		 {			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_POSITION_REQUEST_FILE = requestfile.getAbsolutePath();
				 if(errorList.isEmpty())
				 {
					 for(int i = 0; i<columnList.size();i++)
					 {
						 checkFile = addPositionIdList(GET_POSITION_REQUEST_FILE, columnList.get(i), ruleName, "Position_ID");
						 is = new FileInputStream(checkFile);
					     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     SOAPPart soapPart = soapMessage.getSOAPPart();
					     SOAPEnvelope envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
							  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
					     ByteArrayOutputStream out = new ByteArrayOutputStream();
					     soapMessage.writeTo(out);
					     String strMsgChk = new String(out.toByteArray());	
					     
					     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
					     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
						 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
						 out = new ByteArrayOutputStream();
						 soapResponse.writeTo(out);
						 strMsgChk = new String(out.toByteArray(), "utf-8");
						 if(strMsgChk.contains("faultstring"))
						 {
							 errorList.add(columnList.get(i)) ;
						 }
						 else
						 {
							 ReportElement rptElement = XmlParserManager.parseXml(strMsgChk);				 
							 ReportElement pageResults = rptElement.getChild("env:Body")
										.getChild("wd:Get_Positions_Response")
										.getChild("wd:Response_Results");
							 
							 String result = pageResults.getChild("wd:Total_Results").getValue().trim();
							 if(result.equalsIgnoreCase("0"))
							 {
								 errorList.add(columnList.get(i));
							 }
							 else
							 {						        
								ReportElement responseData = rptElement.getChild("env:Body")
											.getChild("wd:Get_Positions_Response")
											.getChild("wd:Response_Data");
								 
								 List<ReportElement> positionData = responseData.getChildren("wd:Position");
									
								 for(ReportElement reportElement : positionData)
								 {
									 ReportElement element1 = reportElement.getChild("wd:Position_Reference");
									 if(element1 != null)
									 {
										 List<ReportElement> idData = element1.getChildren("wd:ID");					 
										 for(ReportElement wdElement:idData)
										 {
											 idMap = wdElement.getAllAttributes();
											 if(idMap.get("wd:type").equals("Position_ID"))
											 {
												 positionId = wdElement.getValue().trim();
												 System.out.println("positionId --"+ positionId);
											 }
										 }
									 }
									 ReportElement element2 = reportElement.getChild("wd:Position_Data")
									 							.getChild("wd:Position_Definition_Data");
									 if(element2 != null)
									 {
										 jobPostingTitle = element2.getChild("wd:Job_Posting_Title") != null?element2.getChild("wd:Job_Posting_Title").getValue().trim():"";
										 if(jobPostingTitle.contains(","))
										 {
											 jobPostingTitle = jobPostingTitle.replaceAll(",", "|");
										 }
									 }
									 else
									 {
										 jobPostingTitle = "";
									 }
									 
									 ReportElement element3 = reportElement.getChild("wd:Position_Data")
					 							.getChild("wd:Supervisory_Organization_Reference");
									 
									 if(element3 != null)
									 {
										 List<ReportElement> orgData = element3.getChildren("wd:ID");					 
										 for(ReportElement orgElement:orgData)
										 {
											 orgMap = orgElement.getAllAttributes();
											 if(orgMap.get("wd:type").equals("Organization_Reference_ID"))
											 {
												 orgRefId = orgElement.getValue().trim();								 
											 }
											 else
											 {
												 orgRefId = "";
											 }							 
										 }
									 }
									 else
									 {
										 orgRefId = ""; 
									 }
									 
									 ReportElement element4 = reportElement.getChild("wd:Position_Data")
					 							.getChild("wd:Position_Restrictions_Data");
									 if(element4 != null)
									 {
										 availabilityDate = element4.getChild("wd:Availability_Date") != null?element4.getChild("wd:Availability_Date").getValue().trim():"";
										 if(!availabilityDate.isEmpty())
										 {
											 availabilityDate = availabilityDate.substring(0, 10);
										 }
										 earliestHireDateDate = element4.getChild("wd:Earliest_Hire_Date") != null?element4.getChild("wd:Earliest_Hire_Date").getValue().trim():"";
										 if(!earliestHireDateDate.isEmpty())
										 {
											 earliestHireDateDate = earliestHireDateDate.substring(0, 10);
										 }
									 }
									 else
									 {
										 availabilityDate = "";
										 earliestHireDateDate = "";								 
									 }							 
									 
									 headingFromWD = "Position_ID,Job_Posting_Title,Organization_Reference_ID,Availability_Date,Earliest_Hire_Date";
										 
									 headerStr = positionId + "," + jobPostingTitle + "," + orgRefId + "," + availabilityDate + "," + earliestHireDateDate;
									 
									 if(finalStr.equals(""))
									 {
										 finalStr = headingFromWD + "\n" + headerStr;
									 }
									 else
									 {
										 finalStr = finalStr + "\n" + headerStr;
									 }
								 }
							 }
						 }
					 }
					 	wdCount = columnList.size();
					 	columnList.removeAll(errorList);
					 }
				 
					 System.out.println(finalStr);
					 targetContent = finalStr.toString().getBytes();
					 
					 headingWd = selectColumnMapping(loadCycle, ruleName, "Position_ID");
					 complete = true;
			 }

		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}

		return headingWd;
	}
	
	private JSONArray createCSVFromWDNationalID(Tenant tenant, InputStream is, SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd,
			String loadCycle, String ruleName, String client) {

		 targetContent = null;
		 headingFromWD = "";
		 String checkFile = "";
		
		 String employeeId = "";
		 String nationalId = "";
		 String nationalIdTypeCode = "";
		 String countryISOCode = "";
		 String issuedDate = "";
		 String expirationDate = "";
		 String verificationDate = "";
		 String issuingAgency = "";
		 String nationalIdArr = "";
		 String nationalIdTypeCodeArr = "";
		 String countryISOCodeArr = "";	
		 String issuedDateArr = "";
		 String expirationDateArr = "";
		 String verificationDateArr = "";
		 String issuingAgencyArr = "";
		 
		 Map<String,String> nationalIdMap = null;
		 Map<String,String> countryNidMap = null;

		 String finalStr = "";
		 String headerStr = "";
		 try 
		 {			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_NATIONAL_ID_REQUEST_FILE = requestfile.getAbsolutePath();
				 
				 if(errorList.isEmpty())
				 {
					 for(int i = 0; i<columnList.size();i++)
					 {
						 checkFile = addWorkerIdListToFindError(GET_NATIONAL_ID_REQUEST_FILE, columnList.get(i), ruleName, "Employee_ID");
						 is = new FileInputStream(checkFile);
					     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     SOAPPart soapPart = soapMessage.getSOAPPart();
					     SOAPEnvelope envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
							  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
					     ByteArrayOutputStream out = new ByteArrayOutputStream();
					     soapMessage.writeTo(out);
					     String strMsgChk = new String(out.toByteArray());	
					     
					     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
					     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
						 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
						 out = new ByteArrayOutputStream();
						 soapResponse.writeTo(out);
						 strMsgChk = new String(out.toByteArray(), "utf-8");
						 if(strMsgChk.contains("faultstring"))
						 {
							 errorList.add(columnList.get(i));
						 }
						 else
						 {
							 ReportElement rptElement = XmlParserManager.parseXml(strMsgChk);				 
							 ReportElement pageResults = rptElement.getChild("env:Body")
										.getChild("wd:Get_Workers_Response")
										.getChild("wd:Response_Results");
							 
							 String result = pageResults.getChild("wd:Total_Results").getValue().trim();
							 if(result.equalsIgnoreCase("0"))
							 {
								 errorList.add(columnList.get(i));
							 }
							 else
							 {
								 ReportElement responseData = rptElement.getChild("env:Body")
											.getChild("wd:Get_Workers_Response")
											.getChild("wd:Response_Data");
								 
								 List<ReportElement> applicantData = responseData.getChildren("wd:Worker");
									
								 for(ReportElement reportElement : applicantData)
								 {
									 ReportElement element1 = reportElement.getChild("wd:Worker_Data");
						        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
						        		System.out.println("employeeId--"+ employeeId);										 										
										
						        		ReportElement identificationData = reportElement.getChild("wd:Worker_Data")
									 			.getChild("wd:Personal_Data")
									 			.getChild("wd:Identification_Data");
									 
										 if(identificationData != null)
										 {	
											 List<ReportElement> nationalIDList = identificationData.getChildren("wd:National_ID");
											 if(nationalIDList != null && nationalIDList.size() >0)
											 {
												 nationalIdArr = "";
												 nationalIdTypeCodeArr = "";
												 countryISOCodeArr = "";
												 issuedDateArr = "";
												 expirationDateArr = "";
												 verificationDateArr = "";
												 issuingAgencyArr = "";
												 for(ReportElement nationalElement : nationalIDList)
												 {
													 ReportElement nationalIdData = nationalElement.getChild("wd:National_ID_Data");
													 if(nationalIdData != null)
													 {
														 nationalId = nationalIdData.getChild("wd:ID") != null?nationalIdData.getChild("wd:ID").getValue().trim():""; 
														 if(nationalId.contains(","))
														 {
															 nationalId = nationalId.replaceAll(",", "|");
														 }
														 if(nationalIdArr.equals(""))
														 {
															 nationalIdArr = nationalId;
														 }
														 else
														 {
															 nationalIdArr = nationalIdArr + "~" + nationalId;
														 }											 
														 
														 ReportElement idTypeRef = nationalIdData.getChild("wd:ID_Type_Reference");
														 if(idTypeRef != null)
														 {
															 List<ReportElement> idTypeData = idTypeRef.getChildren("wd:ID");								 
															 for(ReportElement idTypeElement:idTypeData)
															 {
																 nationalIdMap = idTypeElement.getAllAttributes();
																 if(nationalIdMap.get("wd:type").equals("National_ID_Type_Code"))
																 {
																	 nationalIdTypeCode = idTypeElement.getValue().trim();
																	 if(nationalIdTypeCodeArr.equals(""))
																	 {
																		 nationalIdTypeCodeArr = nationalIdTypeCode;
																	 }
																	 else
																	 {
																		 nationalIdTypeCodeArr = nationalIdTypeCodeArr + "~" + nationalIdTypeCode;
																	 }
																 }
															 }
														 }
														 
														 ReportElement countryReference = nationalIdData.getChild("wd:Country_Reference");
														 if(countryReference != null)
														 {
															 List<ReportElement> countryData = countryReference.getChildren("wd:ID");								 
															 for(ReportElement countryElement:countryData)
															 {
																 countryNidMap = countryElement.getAllAttributes();
																 if(countryNidMap.get("wd:type").equals("ISO_3166-1_Alpha-3_Code"))
																 {
																	 countryISOCode = countryElement.getValue().trim();
																	 if(countryISOCodeArr.equals(""))
																	 {
																		 countryISOCodeArr = countryISOCode;
																	 }
																	 else
																	 {
																		 countryISOCodeArr = countryISOCodeArr + "~" + countryISOCode;
																	 }
																 }
															 }
														 }
														 
														 issuingAgency = nationalIdData.getChild("wd:Issuing_Agency") != null?nationalIdData.getChild("wd:Issuing_Agency").getValue().trim():""; 
														 if(issuingAgencyArr.equals(""))
														 {
															 issuingAgencyArr = issuingAgency;
														 }
														 else
														 {
															 if(!issuingAgency.isEmpty())
															 {
																 issuingAgencyArr = issuingAgencyArr + "~" + issuingAgency;
															 }
														 }
														 
														 issuedDate = nationalIdData.getChild("wd:Issued_Date") != null?nationalIdData.getChild("wd:Issued_Date").getValue().trim():"";
														 if(!issuedDate.isEmpty())
														 {
															 issuedDate = issuedDate.substring(0, 10);
														 }
														 if(issuedDateArr.equals(""))
														 {
															 issuedDateArr = issuedDate;
														 }
														 else
														 {
															 if(!issuedDate.isEmpty())
															 {
																 issuedDateArr = issuedDateArr + "~" + issuedDate;
															 }
														 }
														 expirationDate = nationalIdData.getChild("wd:Expiration_Date") != null?nationalIdData.getChild("wd:Expiration_Date").getValue().trim():"";
														 if(!expirationDate.isEmpty())
														 {
															 expirationDate = expirationDate.substring(0, 10);
														 }
														 if(expirationDateArr.equals(""))
														 {
															 expirationDateArr = expirationDate;
														 }
														 else
														 {
															 if(!expirationDate.isEmpty())
															 {
																 expirationDateArr = expirationDateArr + "~" + expirationDate;
															 }
														 }
														 verificationDate = nationalIdData.getChild("wd:Verification_Date") != null?nationalIdData.getChild("wd:Verification_Date").getValue().trim():""; 
														 if(!verificationDate.isEmpty())
														 {
															 verificationDate = verificationDate.substring(0, 10);
														 }
														 if(verificationDateArr.equals(""))
														 {
															 verificationDateArr = verificationDate;
														 }
														 else
														 {
															 if(!verificationDate.isEmpty())
															 {
																 verificationDateArr = verificationDateArr + "~" + verificationDate;
															 }
														 }
													 }
												 }
											 }
											 else
											 {
												 errorList.add(columnList.get(i));
												 nationalIdArr = "";
												 nationalIdTypeCodeArr = "";
												 countryISOCodeArr = "";
												 issuedDateArr = "";
												 expirationDateArr = "";
												 verificationDateArr = "";
												 issuingAgencyArr = "";
											 }
										 }
										 else
										 {
											 errorList.add(columnList.get(i));
											 nationalIdArr = "";
											 nationalIdTypeCodeArr = "";
											 countryISOCodeArr = "";
											 issuedDateArr = "";
											 expirationDateArr = "";
											 verificationDateArr = "";
											 issuingAgencyArr = "";
										 }
											 								 								 
										 headingFromWD = "Employee_ID,National_ID,National_ID_Type_Code,Country_ISO_Code,Issueing_Agency,Issued_Date,Expiration_Date,Verification_Date";
										 
										 headerStr = employeeId + "," + nationalIdArr + "," + nationalIdTypeCodeArr + "," + countryISOCodeArr + "," + issuingAgencyArr + "," + issuedDateArr
												     + "," + expirationDateArr + "," + verificationDateArr;
										 
										 if(finalStr.equals(""))
										 {
											 finalStr = headingFromWD + "\n" + headerStr;
										 }
										 else
										 {
											 finalStr = finalStr + "\n" + headerStr;
										 } 
								 }
							 }
						 }
					 }
					 columnList.removeAll(errorList);
					 wdCount = columnList.size();
				 }		 					 
				 System.out.println(finalStr);
				 targetContent = finalStr.toString().getBytes();					 					 
				 headingWd = selectColumnMapping(loadCycle, ruleName, "Employee_ID");					 
				 complete = true;
			}			 			 
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}

		return headingWd;
	}
	
	private JSONArray createCSVFromWDGovernmentID(Tenant tenant, InputStream is, SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd,
			String loadCycle, String ruleName, String client) {

		 targetContent = null;
		 headingFromWD = "";
		 String checkFile = "";
		
		 String employeeId = "";
		 String govtId = "";
		 String govtIdType = "";
		 String goviIdCountry = "";
		 String govtIdIssuedDate = "";
		 String govtIdExpirationDate = "";
		 String govtIdIVerificationDate = "";
		 String govtIdVerifiedBy = "";
		 String govtIdArr = "";
		 String govtIdTypeArr = "";
		 String goviIdCountryArr = "";
		 String govtIdIssuedDateArr = "";
		 String govtIdExpirationDateArr = "";
		 String govtIdIVerificationDateArr = "";
		 String govtIdVerifiedByArr = "";
		 
		 Map<String,String> govtIdTypeMap = null;
		 Map<String,String> govtCountryMap = null;
		 Map<String,String> govtIdVerifiedByMap = null;

		 String finalStr = "";
		 String headerStr = "";
		 try 
		 {			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_GOVERNMENT_ID_REQUEST_FILE = requestfile.getAbsolutePath();
				 
				 if(errorList.isEmpty())
				 {
					 for(int i = 0; i<columnList.size();i++)
					 {
						 checkFile = addWorkerIdListToFindError(GET_GOVERNMENT_ID_REQUEST_FILE, columnList.get(i), ruleName, "Employee_ID");
						 is = new FileInputStream(checkFile);
					     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     SOAPPart soapPart = soapMessage.getSOAPPart();
					     SOAPEnvelope envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
							  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
					     ByteArrayOutputStream out = new ByteArrayOutputStream();
					     soapMessage.writeTo(out);
					     String strMsgChk = new String(out.toByteArray());	
					     
					     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
					     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
						 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
						 out = new ByteArrayOutputStream();
						 soapResponse.writeTo(out);
						 strMsgChk = new String(out.toByteArray(), "utf-8");
						 if(strMsgChk.contains("faultstring"))
						 {
							 errorList.add(columnList.get(i));
						 }
						 else
						 {
							 ReportElement rptElement = XmlParserManager.parseXml(strMsgChk);				 
							 ReportElement pageResults = rptElement.getChild("env:Body")
										.getChild("wd:Get_Workers_Response")
										.getChild("wd:Response_Results");
							 
							 String result = pageResults.getChild("wd:Total_Results").getValue().trim();
							 if(result.equalsIgnoreCase("0"))
							 {
								 errorList.add(columnList.get(i));
							 }
							 else
							 {
								 ReportElement responseData = rptElement.getChild("env:Body")
											.getChild("wd:Get_Workers_Response")
											.getChild("wd:Response_Data");
								 
								 List<ReportElement> applicantData = responseData.getChildren("wd:Worker");
									
								 for(ReportElement reportElement : applicantData)
								 {
									 ReportElement element1 = reportElement.getChild("wd:Worker_Data");
						        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
						        		System.out.println("employeeId--"+ employeeId);										 										
										
						        		ReportElement identificationData = reportElement.getChild("wd:Worker_Data")
									 			.getChild("wd:Personal_Data")
									 			.getChild("wd:Identification_Data");
									 
										 if(identificationData != null)
										 {	
											 List<ReportElement> governmentIDList = identificationData.getChildren("wd:Government_ID");
											 if(governmentIDList != null && governmentIDList.size() >0)
											 {
												 govtIdArr = "";
												 govtIdTypeArr = "";
												 goviIdCountryArr = "";
												 govtIdIssuedDateArr = "";
												 govtIdExpirationDateArr = "";
												 govtIdIVerificationDateArr = "";
												 govtIdVerifiedByArr = "";
												 
												 for(ReportElement governmentIdElement : governmentIDList)
												 {
													 ReportElement governmentIdData = governmentIdElement.getChild("wd:Government_ID_Data");
													 if(governmentIdData != null)
													 {
														 govtId = governmentIdData.getChild("wd:ID") != null?governmentIdData.getChild("wd:ID").getValue().trim():""; 
														 if(govtIdArr.equals(""))
														 {
															 govtIdArr = govtId;
														 }
														 else
														 {
															 govtIdArr = govtIdArr + "~" + govtId;
														 }
														 govtIdIssuedDate = governmentIdData.getChild("wd:Issued_Date") != null?governmentIdData.getChild("wd:Issued_Date").getValue().trim():"";
														 if(!govtIdIssuedDate.isEmpty())
														 {
															 govtIdIssuedDate = govtIdIssuedDate.substring(0, 10);
														 }
														 if(govtIdIssuedDateArr.equals(""))
														 {
															 govtIdIssuedDateArr = govtIdIssuedDate;
														 }
														 else
														 {
															 if(!govtIdIssuedDate.isEmpty())
															 {
																 govtIdIssuedDateArr = govtIdIssuedDateArr + "~" + govtIdIssuedDate;
															 }
														 }
														 govtIdExpirationDate = governmentIdData.getChild("wd:Expiration_Date") != null?governmentIdData.getChild("wd:Expiration_Date").getValue().trim():"";
														 if(!govtIdExpirationDate.isEmpty())
														 {
															 govtIdExpirationDate = govtIdExpirationDate.substring(0, 10);
														 }
														 if(govtIdExpirationDateArr.equals(""))
														 {
															 govtIdExpirationDateArr = govtIdExpirationDate;
														 }
														 else
														 {
															 if(!govtIdExpirationDate.isEmpty())
															 {
																 govtIdExpirationDateArr = govtIdExpirationDateArr + "~" + govtIdExpirationDate;
															 }
														 }
														 govtIdIVerificationDate = governmentIdData.getChild("wd:Verification_Date") != null?governmentIdData.getChild("wd:Verification_Date").getValue().trim():"";
														 if(!govtIdIVerificationDate.isEmpty())
														 {
															 govtIdIVerificationDate = govtIdIVerificationDate.substring(0, 10);
														 }
														 if(govtIdIVerificationDateArr.equals(""))
														 {
															 govtIdIVerificationDateArr = govtIdIVerificationDate;
														 }
														 else
														 {
															 if(!govtIdIVerificationDate.isEmpty())
															 {
																 govtIdIVerificationDateArr = govtIdIVerificationDateArr + "~" + govtIdIVerificationDate;
															 }
														 }
														 
														 ReportElement govtTypeRef = governmentIdData.getChild("wd:ID_Type_Reference");
														 if(govtTypeRef != null)
														 {
															 List<ReportElement> govtIdTypeData = govtTypeRef.getChildren("wd:ID");								 
															 for(ReportElement idTypeElement:govtIdTypeData)
															 {
																 govtIdTypeMap = idTypeElement.getAllAttributes();
																 if(govtIdTypeMap.get("wd:type").equals("Government_ID_Type_ID"))
																 {
																	 govtIdType = idTypeElement.getValue().trim();
																	 if(govtIdTypeArr.equals(""))
																	 {
																		 govtIdTypeArr = govtIdType;
																	 }
																	 else
																	 {
																		 govtIdTypeArr = govtIdTypeArr + "~" + govtIdType;
																	 }
																 }
															 }
														 }
														 
														 ReportElement govtCountryReference = governmentIdData.getChild("wd:Country_Reference");
														 if(govtCountryReference != null)
														 {
															 List<ReportElement> govtCountryData = govtCountryReference.getChildren("wd:ID");								 
															 for(ReportElement countryElement:govtCountryData)
															 {
																 govtCountryMap = countryElement.getAllAttributes();
																 if(govtCountryMap.get("wd:type").equals("ISO_3166-1_Alpha-3_Code"))
																 {
																	 goviIdCountry = countryElement.getValue().trim();
																	 if(goviIdCountryArr.equals(""))
																	 {
																		 goviIdCountryArr = goviIdCountry;
																	 }
																	 else
																	 {
																		 goviIdCountryArr = goviIdCountryArr + "~" + goviIdCountry;
																	 }
																 }
															 }
														 }
														 
														 ReportElement govtVerifiedByRef = governmentIdData.getChild("wd:Verified_by_Reference");
														 if(govtVerifiedByRef != null)
														 {
															 List<ReportElement> govtIdVerifiedByData = govtVerifiedByRef.getChildren("wd:ID");								 
															 for(ReportElement verifiedByElement:govtIdVerifiedByData)
															 {
																 govtIdVerifiedByMap = verifiedByElement.getAllAttributes();
																 if(govtIdVerifiedByMap.get("wd:type").equals("Employee_ID"))
																 {
																	 govtIdVerifiedBy = verifiedByElement.getValue().trim();
																	 if(govtIdVerifiedByArr.equals(""))
																	 {
																		 govtIdVerifiedByArr = govtIdVerifiedBy;
																	 }
																	 else
																	 {
																		 govtIdVerifiedByArr = govtIdVerifiedByArr + "~" + govtIdVerifiedBy;
																	 }
																 }
															 }
														 }
													 }
												 }
											 }
											 else
											 {
												 errorList.add(columnList.get(i));
												 govtIdArr = "";
												 govtIdTypeArr = "";
												 goviIdCountryArr = "";
												 govtIdIssuedDateArr = "";
												 govtIdExpirationDateArr = "";
												 govtIdIVerificationDateArr = "";
												 govtIdVerifiedByArr = "";
											 }
										 }
										 else
										 {
											 errorList.add(columnList.get(i));
											 govtIdArr = "";
											 govtIdTypeArr = "";
											 goviIdCountryArr = "";
											 govtIdIssuedDateArr = "";
											 govtIdExpirationDateArr = "";
											 govtIdIVerificationDateArr = "";
											 govtIdVerifiedByArr = "";
										 }
											 								 								 
										 headingFromWD = "Employee_ID,Government_ID,Government_ID_Type,Country_ISO_Code,Issued_Date,Expiration_Date,Verification_Date,Government_ID_Verified_By";
										 
										 headerStr = employeeId + "," + govtIdArr + "," + govtIdTypeArr + "," + goviIdCountryArr + "," + govtIdIssuedDateArr + "," + govtIdExpirationDateArr 
												    + "," + govtIdIVerificationDateArr + "," + govtIdVerifiedByArr;
										 
										 if(finalStr.equals(""))
										 {
											 finalStr = headingFromWD + "\n" + headerStr;
										 }
										 else
										 {
											 finalStr = finalStr + "\n" + headerStr;
										 } 
								 }
							 }
						 }
					 }
					 columnList.removeAll(errorList);
					 wdCount = columnList.size();
				 }		 					 
				 System.out.println(finalStr);
				 targetContent = finalStr.toString().getBytes();					 					 
				 headingWd = selectColumnMapping(loadCycle, ruleName, "Employee_ID");					 
				 complete = true;
			}			 			 
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}

		return headingWd;
	}
	
	private JSONArray createCSVFromWDLeaveOfAbsence(Tenant tenant, InputStream is, SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd,
			String loadCycle, String ruleName, String client) {

		 targetContent = null;
		 headingFromWD = "";
		 String checkFile = "";
		
		 String employeeId = "";
		 String leaveTypeName = "";
		 String leaveDesc = "";
		 String lastDayOfWork = "";
		 String firstDayOfLeave = "";
		 String estLastDayOfLeave = "";
		 String firstDayOfWork = "";
		 //String lastDayOfLeave = "";
		 String lastDateForWhichPaid = "";
		 String expectedDueDate = "";
		 String childsBirthDate = "";
		 String stillbirthBabyDeceased = "";
		 String babyArrivalHomeDate = "";
		 String adoptionPlacementDate = "";
		 String childEnteredCountryDate = "";
		 String multipleChildIndicator = "";
		 String noOfBabiesAdopted = "";
		 String noOfPreviousBirth = "";
		 String noOfPreviousMaternityLeaves = "";
		 String noOfChildDependents = "";
		 String singleParentIndicator = "";
		 String ageOfDependent = "";
		 String lastDateForWhichPaidArr = "";
		 String expectedDueDateArr = "";
		 String childsBirthDateArr = "";
		 String stillbirthBabyDeceasedArr = "";
		 String babyArrivalHomeDateArr = "";
		 String adoptionPlacementDateArr = "";
		 String childEnteredCountryDateArr = "";
		 String multipleChildIndicatorArr = "";
		 String noOfBabiesAdoptedArr = "";
		 String noOfPreviousBirthArr = "";
		 String noOfPreviousMaternityLeavesArr = "";
		 String noOfChildDependentsArr = "";
		 String singleParentIndicatorArr = "";
		 String ageOfDependentArr = "";
		 String leaveTypeNameArr = "";
		 String leaveDescArr = "";
		 String lastDayOfWorkArr = "";
		 String firstDayOfLeaveArr = "";
		 String estLastDayOfLeaveArr = "";
		 String firstDayOfWorkArr = "";
		 //String lastDayOfLeaveArr = "";				 
		 
		 Map<String,String> leaveMap = null;

		 String finalStr = "";
		 String headerStr = "";
		 try 
		 {			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_LEAVE_OF_ABSENCE_FILE = requestfile.getAbsolutePath();
				 
				 if(errorList.isEmpty())
				 {
					 for(int i = 0; i<columnList.size();i++)
					 {
						 checkFile = addWorkerIdListToFindError(GET_LEAVE_OF_ABSENCE_FILE, columnList.get(i), ruleName, "Employee_ID");
						 is = new FileInputStream(checkFile);
					     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     SOAPPart soapPart = soapMessage.getSOAPPart();
					     SOAPEnvelope envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
							  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
					     ByteArrayOutputStream out = new ByteArrayOutputStream();
					     soapMessage.writeTo(out);
					     String strMsgChk = new String(out.toByteArray());	
					     
					     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
					     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
						 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
						 out = new ByteArrayOutputStream();
						 soapResponse.writeTo(out);
						 strMsgChk = new String(out.toByteArray(), "utf-8");
						 if(strMsgChk.contains("faultstring"))
						 {
							 errorList.add(columnList.get(i));
						 }
						 else
						 {
							 ReportElement rptElement = XmlParserManager.parseXml(strMsgChk);				 
							 ReportElement pageResults = rptElement.getChild("env:Body")
										.getChild("wd:Get_Workers_Response")
										.getChild("wd:Response_Results");
							 
							 String result = pageResults.getChild("wd:Total_Results").getValue().trim();
							 if(result.equalsIgnoreCase("0"))
							 {
								 errorList.add(columnList.get(i));
							 }
							 else
							 {
								 ReportElement responseData = rptElement.getChild("env:Body")
											.getChild("wd:Get_Workers_Response")
											.getChild("wd:Response_Data");
								 
								 List<ReportElement> applicantData = responseData.getChildren("wd:Worker");
									
								 for(ReportElement reportElement : applicantData)
								 {
									 ReportElement element1 = reportElement.getChild("wd:Worker_Data");
						        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
						        		System.out.println("employeeId--"+ employeeId);										 										
										
						        		List<ReportElement> leaveData = reportElement.getChild("wd:Worker_Data")
									 			.getChild("wd:Employment_Data")
									 			.getChild("wd:Worker_Status_Data")
									 			.getChildren("wd:Leave_Status_Data");
									 
									 if(leaveData != null && leaveData.size() >0)
									 {
										 leaveTypeNameArr = "";
										 leaveDescArr = "";
										 lastDayOfWorkArr = "";
										 firstDayOfLeaveArr = "";
										 estLastDayOfLeaveArr = "";
										 firstDayOfWorkArr = "";
										 //lastDayOfLeaveArr = "";
										 lastDateForWhichPaidArr = "";
										 expectedDueDateArr = "";
										 childsBirthDateArr = "";
										 stillbirthBabyDeceasedArr = "";
										 babyArrivalHomeDateArr = "";
										 adoptionPlacementDateArr = "";
										 childEnteredCountryDateArr = "";
										 multipleChildIndicatorArr = "";
										 noOfBabiesAdoptedArr = "";
										 noOfPreviousBirthArr = "";
										 noOfPreviousMaternityLeavesArr = "";
										 noOfChildDependentsArr = "";
										 singleParentIndicatorArr = "";
										 ageOfDependentArr = "";
										 
										 for(ReportElement leaveElement : leaveData)
										 {
											 ReportElement element2 = leaveElement.getChild("wd:Leave_of_Absence_Type_Reference");
											 if(element2 != null)
											 {
												 List<ReportElement> leaveTypeData = element2.getChildren("wd:ID");								 
												 for(ReportElement leaveTypeElement:leaveTypeData)
												 {
													 leaveMap = leaveTypeElement.getAllAttributes();
													 if(leaveMap.get("wd:type").equals("Leave_of_Absence_Type_ID"))
													 {
														 leaveTypeName = leaveTypeElement.getValue().trim();
														 if(leaveTypeName.contains(","))
														 {
															 leaveTypeName = leaveTypeName.replaceAll(",", "|");														 
														 }
														 if(leaveTypeNameArr.equals(""))
														 {
															 leaveTypeNameArr = leaveTypeName;
														 }
														 else
														 {
															 if(!leaveTypeName.equals(""))
															 {
																 leaveTypeNameArr = leaveTypeNameArr + "~" + leaveTypeName;
															 }
														 }
													 }
												 }
											 }
											 
											 leaveDesc = leaveElement.getChild("wd:Leave_Request_Description") != null?leaveElement.getChild("wd:Leave_Request_Description").getValue().trim():"";
											 if(leaveDesc.contains(","))
											 {
												 leaveDesc = leaveDesc.replaceAll(",", "|");
											 }
											 if(leaveDescArr.equals(""))
											 {
												 leaveDescArr = leaveDesc;
											 }
											 else
											 {
												 if(!leaveDesc.equals(""))
												 {
													 leaveDescArr = leaveDescArr + "~" + leaveDesc;
												 }
											 }
											 lastDayOfWork = leaveElement.getChild("wd:Leave_Last_Day_of_Work") != null?leaveElement.getChild("wd:Leave_Last_Day_of_Work").getValue().trim():"";
											 if(!lastDayOfWork.isEmpty())
											 {
												 lastDayOfWork = lastDayOfWork.substring(0, 10);
											 }
											 if(lastDayOfWorkArr.equals(""))
											 {
												 lastDayOfWorkArr = lastDayOfWork;
											 }
											 else
											 {
												 if(!lastDayOfWork.equals(""))
												 {
													 lastDayOfWorkArr = lastDayOfWorkArr + "~" + lastDayOfWork;
												 }
											 }
											 firstDayOfLeave = leaveElement.getChild("wd:Leave_Start_Date") != null?leaveElement.getChild("wd:Leave_Start_Date").getValue().trim():"";
											 if(!firstDayOfLeave.isEmpty())
											 {
												 firstDayOfLeave = firstDayOfLeave.substring(0, 10);
											 }
											 if(firstDayOfLeaveArr.equals(""))
											 {
												 firstDayOfLeaveArr = firstDayOfLeave;
											 }
											 else
											 {
												 if(!firstDayOfLeave.equals(""))
												 {
													 firstDayOfLeaveArr = firstDayOfLeaveArr + "~" + firstDayOfLeave;
												 }
											 }
											 estLastDayOfLeave = leaveElement.getChild("wd:Estimated_Leave_End_Date") != null?leaveElement.getChild("wd:Estimated_Leave_End_Date").getValue().trim():"";
											 if(!estLastDayOfLeave.isEmpty())
											 {
												 estLastDayOfLeave = estLastDayOfLeave.substring(0, 10);
											 }
											 if(estLastDayOfLeaveArr.equals(""))
											 {
												 estLastDayOfLeaveArr = estLastDayOfLeave;
											 }
											 else
											 {
												 if(!estLastDayOfLeave.equals(""))
												 {
													 estLastDayOfLeaveArr = estLastDayOfLeaveArr + "~" + estLastDayOfLeave;
												 }
											 }
											 firstDayOfWork = leaveElement.getChild("wd:First_Day_Of_Work") != null?leaveElement.getChild("wd:First_Day_Of_Work").getValue().trim():"";
											 if(!firstDayOfWork.isEmpty())
											 {
												 firstDayOfWork = firstDayOfWork.substring(0, 10);
											 }
											 if(firstDayOfWorkArr.equals(""))
											 {
												 firstDayOfWorkArr = firstDayOfWork;
											 }
											 else
											 {
												 if(!firstDayOfWork.equals(""))
												 {
													 firstDayOfWorkArr = firstDayOfWorkArr + "~" + firstDayOfWork;
												 }
											 }
											 
											 ReportElement leaveAdditionalData = leaveElement.getChild("wd:Leave_Request_Additional_Fields");
											 if(leaveAdditionalData != null)
											 {
												 lastDateForWhichPaid = leaveAdditionalData.getChild("wd:Last_Date_for_Which_Paid") != null?leaveAdditionalData.getChild("wd:Last_Date_for_Which_Paid").getValue().trim():"";
												 if(!lastDateForWhichPaid.isEmpty())
												 {
													 lastDateForWhichPaid = lastDateForWhichPaid.substring(0, 10);
												 }
												 if(lastDateForWhichPaidArr.equals(""))
												 {
													 lastDateForWhichPaidArr = lastDateForWhichPaid;
												 }
												 else
												 {
													 if(!lastDateForWhichPaid.equals(""))
													 {
														 lastDateForWhichPaidArr = lastDateForWhichPaidArr + "~" + lastDateForWhichPaid;
													 }
												 }
												 expectedDueDate = leaveAdditionalData.getChild("wd:Expected_Due_Date") != null?leaveAdditionalData.getChild("wd:Expected_Due_Date").getValue().trim():"";
												 if(!expectedDueDate.isEmpty())
												 {
													 expectedDueDate = expectedDueDate.substring(0, 10);
												 }
												 if(expectedDueDateArr.equals(""))
												 {
													 expectedDueDateArr = expectedDueDate;
												 }
												 else
												 {
													 if(!expectedDueDate.equals(""))
													 {
														 expectedDueDateArr = expectedDueDateArr + "~" + expectedDueDate;
													 }
												 }
												 childsBirthDate = leaveAdditionalData.getChild("wd:Child_s_Birth_Date") != null?leaveAdditionalData.getChild("wd:Child_s_Birth_Date").getValue().trim():"";
												 if(!childsBirthDate.isEmpty())
												 {
													 childsBirthDate = childsBirthDate.substring(0, 10);
												 }
												 if(childsBirthDateArr.equals(""))
												 {
													 childsBirthDateArr = childsBirthDate;
												 }
												 else
												 {
													 if(!childsBirthDate.equals(""))
													 {
														 childsBirthDateArr = childsBirthDateArr + "~" + childsBirthDate;
													 }
												 }
												 stillbirthBabyDeceased = leaveAdditionalData.getChild("wd:Stillbirth_Baby_Deceased") != null?leaveAdditionalData.getChild("wd:Stillbirth_Baby_Deceased").getValue().trim():"";
												 if(stillbirthBabyDeceased.equalsIgnoreCase("1"))
												 {
													 stillbirthBabyDeceased = "true";
												 }
												 else
												 {
													 stillbirthBabyDeceased = "false";
												 }
												 if(stillbirthBabyDeceasedArr.equals(""))
												 {
													 stillbirthBabyDeceasedArr = stillbirthBabyDeceased;
												 }
												 else
												 {
													 if(!stillbirthBabyDeceased.equals(""))
													 {
														 stillbirthBabyDeceasedArr = stillbirthBabyDeceasedArr + "~" + stillbirthBabyDeceased;
													 }
												 }
												 babyArrivalHomeDate = leaveAdditionalData.getChild("wd:Date_Baby_Arrived_Home_From_Hospital") != null?leaveAdditionalData.getChild("wd:Date_Baby_Arrived_Home_From_Hospital").getValue().trim():"";
												 if(!babyArrivalHomeDate.isEmpty())
												 {
													 babyArrivalHomeDate = babyArrivalHomeDate.substring(0, 10);
												 }
												 if(babyArrivalHomeDateArr.equals(""))
												 {
													 babyArrivalHomeDateArr = babyArrivalHomeDate;
												 }
												 else
												 {
													 if(!babyArrivalHomeDate.equals(""))
													 {
														 babyArrivalHomeDateArr = babyArrivalHomeDateArr + "~" + babyArrivalHomeDate;
													 }
												 }
												 adoptionPlacementDate = leaveAdditionalData.getChild("wd:Adoption_Placement_Date") != null?leaveAdditionalData.getChild("wd:CAdoption_Placement_Date").getValue().trim():"";
												 if(!adoptionPlacementDate.isEmpty())
												 {
													 adoptionPlacementDate = adoptionPlacementDate.substring(0, 10);
												 }
												 if(adoptionPlacementDateArr.equals(""))
												 {
													 adoptionPlacementDateArr = adoptionPlacementDate;
												 }
												 else
												 {
													 if(!adoptionPlacementDate.equals(""))
													 {
														 adoptionPlacementDateArr = adoptionPlacementDateArr + "~" + adoptionPlacementDate;
													 }
												 }
												 multipleChildIndicator = leaveAdditionalData.getChild("wd:Multiple_Child_Indicator") != null?leaveAdditionalData.getChild("wd:Multiple_Child_Indicator").getValue().trim():"";
												 if(multipleChildIndicator.equalsIgnoreCase("1"))
												 {
													 multipleChildIndicator = "true";
												 }
												 else
												 {
													 multipleChildIndicator = "false";
												 }
												 if(multipleChildIndicatorArr.equals(""))
												 {
													 multipleChildIndicatorArr = multipleChildIndicator;
												 }
												 else
												 {
													 if(!multipleChildIndicator.equals(""))
													 {
														 multipleChildIndicatorArr = multipleChildIndicatorArr + "~" + multipleChildIndicator;
													 }
												 }
												 noOfBabiesAdopted = leaveAdditionalData.getChild("wd:Number_of_Babies_Adopted_Children") != null?leaveAdditionalData.getChild("wd:Number_of_Babies_Adopted_Children").getValue().trim():"";
												 if(noOfBabiesAdoptedArr.equals(""))
												 {
													 noOfBabiesAdoptedArr = noOfBabiesAdopted;
												 }
												 else
												 {
													 if(!noOfBabiesAdopted.equals(""))
													 {
														 noOfBabiesAdoptedArr = noOfBabiesAdoptedArr + "~" + noOfBabiesAdopted;
													 }
												 }
												 childEnteredCountryDate = leaveAdditionalData.getChild("wd:Date_Child_Entered_Country") != null?leaveAdditionalData.getChild("wd:Date_Child_Entered_Country").getValue().trim():"";
												 if(!adoptionPlacementDate.isEmpty())
												 {
													 childEnteredCountryDate = childEnteredCountryDate.substring(0, 10);
												 }
												 if(childEnteredCountryDateArr.equals(""))
												 {
													 childEnteredCountryDateArr = childEnteredCountryDate;
												 }
												 else
												 {
													 if(!childEnteredCountryDate.equals(""))
													 {
														 childEnteredCountryDateArr = childEnteredCountryDateArr + "~" + childEnteredCountryDate;
													 }
												 }
												 noOfPreviousBirth = leaveAdditionalData.getChild("wd:Number_of_Previous_Births") != null?leaveAdditionalData.getChild("wd:Number_of_Previous_Births").getValue().trim():"";
												 if(noOfPreviousBirthArr.equals(""))
												 {
													 noOfPreviousBirthArr = noOfPreviousBirth;
												 }
												 else
												 {
													 if(!noOfPreviousBirth.equals(""))
													 {
														 noOfPreviousBirthArr = noOfPreviousBirthArr + "~" + noOfPreviousBirth;
													 }
												 }
												 noOfPreviousMaternityLeaves = leaveAdditionalData.getChild("wd:Number_of_Previous_Maternity_Leaves") != null?leaveAdditionalData.getChild("wd:Number_of_Previous_Maternity_Leaves").getValue().trim():"";
												 if(noOfPreviousMaternityLeavesArr.equals(""))
												 {
													 noOfPreviousMaternityLeavesArr = noOfPreviousMaternityLeaves;
												 }
												 else
												 {
													 if(!noOfPreviousMaternityLeaves.equals(""))
													 {
														 noOfPreviousMaternityLeavesArr = noOfPreviousMaternityLeavesArr + "~" + noOfPreviousMaternityLeaves;
													 }
												 }
												 noOfChildDependents = leaveAdditionalData.getChild("wd:Number_of_Child_Dependents") != null?leaveAdditionalData.getChild("wd:Number_of_Child_Dependents").getValue().trim():"";
												 if(noOfChildDependentsArr.equals(""))
												 {
													 noOfChildDependentsArr = noOfChildDependents;
												 }
												 else
												 {
													 if(!noOfChildDependents.equals(""))
													 {
														 noOfChildDependentsArr = noOfChildDependentsArr + "~" + noOfChildDependents;
													 }
												 }
												 singleParentIndicator = leaveAdditionalData.getChild("wd:Single_Parent_Indicator") != null?leaveAdditionalData.getChild("wd:Single_Parent_Indicator").getValue().trim():"";
												 if(singleParentIndicator.equalsIgnoreCase("1"))
												 {
													 singleParentIndicator = "true";
												 }
												 else
												 {
													 singleParentIndicator = "false";
												 }
												 if(singleParentIndicatorArr.equals(""))
												 {
													 singleParentIndicatorArr = singleParentIndicator;
												 }
												 else
												 {
													 if(!singleParentIndicator.equals(""))
													 {
														 singleParentIndicatorArr = singleParentIndicatorArr + "~" + singleParentIndicator;
													 }
												 }
												 ageOfDependent = leaveAdditionalData.getChild("wd:Age_of_Dependent") != null?leaveAdditionalData.getChild("wd:Age_of_Dependent").getValue().trim():"";
												 if(ageOfDependentArr.equals(""))
												 {
													 ageOfDependentArr = ageOfDependent;
												 }
												 else
												 {
													 if(!ageOfDependent.equals(""))
													 {
														 ageOfDependentArr = ageOfDependentArr + "~" + ageOfDependent;
													 }
												 }												 
											 }
											 else
											 {
												 lastDateForWhichPaidArr = "";
												 expectedDueDateArr = "";
												 childsBirthDateArr = "";
												 stillbirthBabyDeceasedArr = "";
												 babyArrivalHomeDateArr = "";
												 adoptionPlacementDateArr = "";
												 childEnteredCountryDateArr = "";
												 multipleChildIndicatorArr = "";
												 noOfBabiesAdoptedArr = "";
												 noOfPreviousBirthArr = "";
												 noOfPreviousMaternityLeavesArr = "";
												 noOfChildDependentsArr = "";
												 singleParentIndicatorArr = "";
												 ageOfDependentArr = "";
											 }
										 }
									 }
									 else
									 {
										 errorList.add(columnList.get(i));
										 leaveTypeNameArr = "";
										 leaveDescArr = "";
										 lastDayOfWorkArr = "";
										 firstDayOfLeaveArr = "";
										 estLastDayOfLeaveArr = "";
										 firstDayOfWorkArr = "";
										 //lastDayOfLeaveArr = "";
										 lastDateForWhichPaidArr = "";
										 expectedDueDateArr = "";
										 childsBirthDateArr = "";
										 stillbirthBabyDeceasedArr = "";
										 babyArrivalHomeDateArr = "";
										 adoptionPlacementDateArr = "";
										 childEnteredCountryDateArr = "";
										 multipleChildIndicatorArr = "";
										 noOfBabiesAdoptedArr = "";
										 noOfPreviousBirthArr = "";
										 noOfPreviousMaternityLeavesArr = "";
										 noOfChildDependentsArr = "";
										 singleParentIndicatorArr = "";
										 ageOfDependentArr = "";
									 }
											 								 								 
									 headingFromWD = "Employee_ID,Leave_of_Absence_Type,Last_Day_Of_Work,First_Day_Of_Leave,Estimated_Last_Day_Of_Leave,Last_Date_for_Which_Paid,"
									 		+ "Expected_Due_Date,Childs_Birth_Date,Stillbirth_Baby_Deceased,Date_Baby_Arr_Home,Adoption_Placement_Date,Date_Child_Entered_Country,"
									 		+ "Multiple_Child_Indicator,Number_Of_Babies_Adopted_Child,Number_Of_Previous_Births,Number_Of_Prev_Mater_Leaves,Number_Of_Child_Dependents,"
									 		+ "Single_Parent_Indicator,Age_Of_Dependent";
									 
									 headerStr = employeeId + "," + leaveTypeNameArr + "," + lastDayOfWorkArr + "," + firstDayOfLeaveArr + "," + estLastDayOfLeaveArr + "," + lastDateForWhichPaidArr
											 + "," + expectedDueDateArr + "," + childsBirthDateArr + "," + stillbirthBabyDeceasedArr + "," + babyArrivalHomeDateArr + "," + adoptionPlacementDateArr
											 + "," + childEnteredCountryDateArr + "," + multipleChildIndicatorArr + "," + noOfBabiesAdoptedArr + "," + noOfPreviousBirthArr + "," + noOfPreviousMaternityLeavesArr
											 + "," + noOfChildDependentsArr + "," + singleParentIndicatorArr + "," + ageOfDependentArr;
									 
									 if(finalStr.equals(""))
									 {
										 finalStr = headingFromWD + "\n" + headerStr;
									 }
									 else
									 {
										 finalStr = finalStr + "\n" + headerStr;
									 } 
								 }
							 }
						 }
					 }
					 columnList.removeAll(errorList);
					 wdCount = columnList.size();
				 }		 					 
				 System.out.println(finalStr);
				 targetContent = finalStr.toString().getBytes();					 					 
				 headingWd = selectColumnMapping(loadCycle, ruleName, "Employee_ID");					 
				 complete = true;
			}			 			 
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}

		return headingWd;
	}
	
	private JSONArray createCSVFromWDLicenseID(Tenant tenant, InputStream is, SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd,
			String loadCycle, String ruleName, String client) {
		
		 targetContent = null;
		 headingFromWD = "";
		 
		 String checkFile = "";
		
		 String employeeId = "";
		 String licenseNumber = "";
		 String licenseType = "";
		 String licenseCountry = "";
		 String licenseIssuedDate = "";
		 String licenseExpirationDate = "";
		 String licenseNumberArr = "";
		 String licenseTypeArr = "";
		 String licenseCountryArr = "";
		 String licenseIssuedDateArr = "";
		 String licenseExpirationDateArr = "";
		 
		 Map<String,String> licenseTypeMap = null;
		 Map<String,String> licenseCountryMap = null;

		 String finalStr = "";
		 String headerStr = "";
		  try 
		{			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_LICENSE_ID_REQUEST_FILE = requestfile.getAbsolutePath();
				 
				 if(errorList.isEmpty())
				 {
					 for(int i = 0; i<columnList.size();i++)
					 {
						 checkFile = addWorkerIdListToFindError(GET_LICENSE_ID_REQUEST_FILE, columnList.get(i), ruleName, "Employee_ID");
						 is = new FileInputStream(checkFile);
					     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     SOAPPart soapPart = soapMessage.getSOAPPart();
					     SOAPEnvelope envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
							  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
					     ByteArrayOutputStream out = new ByteArrayOutputStream();
					     soapMessage.writeTo(out);
					     String strMsgChk = new String(out.toByteArray());	
					     
					     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
					     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
						 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
						 out = new ByteArrayOutputStream();
						 soapResponse.writeTo(out);
						 strMsgChk = new String(out.toByteArray(), "utf-8");
						 if(strMsgChk.contains("faultstring"))
						 {
							 errorList.add(columnList.get(i)) ;
						 }
						 else
						 {
							 ReportElement rptElement = XmlParserManager.parseXml(strMsgChk);				 
							 ReportElement pageResults = rptElement.getChild("env:Body")
										.getChild("wd:Get_Workers_Response")
										.getChild("wd:Response_Results");
							 
							 String result = pageResults.getChild("wd:Total_Results").getValue().trim();
							 if(result.equalsIgnoreCase("0"))
							 {
								 errorList.add(columnList.get(i));
							 }
							 else
							 {
								 ReportElement responseData = rptElement.getChild("env:Body")
											.getChild("wd:Get_Workers_Response")
											.getChild("wd:Response_Data");
								 
								 List<ReportElement> applicantData = responseData.getChildren("wd:Worker");
									
								 for(ReportElement reportElement : applicantData)
								 {
									 ReportElement element1 = reportElement.getChild("wd:Worker_Data");
						        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
						        		System.out.println("employeeId--"+ employeeId);										 										
										
						        		ReportElement identificationData = reportElement.getChild("wd:Worker_Data")
									 			.getChild("wd:Personal_Data")
									 			.getChild("wd:Identification_Data");
									 
						        		if(identificationData != null)
										{										 									 
											 List<ReportElement> passportIDList = identificationData.getChildren("wd:License_ID");
											 if(passportIDList != null && passportIDList.size() >0)
											 {
												 licenseNumberArr = "";
												 licenseTypeArr = "";
												 licenseCountryArr = "";
												 licenseIssuedDateArr = "";
												 licenseExpirationDateArr = "";
												 
												 for(ReportElement passportElement : passportIDList)
												 {
													 ReportElement passportIdData = passportElement.getChild("wd:License_ID_Data");
													 if(passportIdData != null)
													 {
														 licenseNumber = passportIdData.getChild("wd:ID") != null?passportIdData.getChild("wd:ID").getValue().trim():""; 
														 if(licenseNumberArr.equals(""))
														 {
															 licenseNumberArr = licenseNumber;
														 }
														 else
														 {
															 licenseNumberArr = licenseNumberArr + "~" + licenseNumber;
														 }
														 licenseIssuedDate = passportIdData.getChild("wd:Issued_Date") != null?passportIdData.getChild("wd:Issued_Date").getValue().trim():"";
														 if(!licenseIssuedDate.isEmpty())
														 {
															 licenseIssuedDate = licenseIssuedDate.substring(0, 10);
														 }
														 if(licenseIssuedDateArr.equals(""))
														 {
															 licenseIssuedDateArr = licenseIssuedDate;
														 }
														 else
														 {
															 if(!licenseIssuedDate.isEmpty())
															 {
																 licenseIssuedDateArr = licenseIssuedDateArr + "~" + licenseIssuedDate;
															 }
														 }
														 licenseExpirationDate = passportIdData.getChild("wd:Expiration_Date") != null?passportIdData.getChild("wd:Expiration_Date").getValue().trim():"";
														 if(!licenseExpirationDate.isEmpty())
														 {
															 licenseExpirationDate = licenseExpirationDate.substring(0, 10);
														 }
														 if(licenseExpirationDateArr.equals(""))
														 {
															 licenseExpirationDateArr = licenseExpirationDate;
														 }
														 else
														 {
															 if(!licenseExpirationDate.isEmpty())
															 {
																 licenseExpirationDateArr = licenseExpirationDateArr + "~" + licenseExpirationDate;
															 }
														 }
														 
														 ReportElement passportTypeRef = passportIdData.getChild("wd:ID_Type_Reference");
														 if(passportTypeRef != null)
														 {
															 List<ReportElement> passportIdTypeData = passportTypeRef.getChildren("wd:ID");								 
															 for(ReportElement idTypeElement:passportIdTypeData)
															 {
																 licenseTypeMap = idTypeElement.getAllAttributes();
																 if(licenseTypeMap.get("wd:type").equals("License_ID_Type_ID"))
																 {
																	 licenseType = idTypeElement.getValue().trim();
																	 if(licenseTypeArr.equals(""))
																	 {
																		 licenseTypeArr = licenseType;
																	 }
																	 else
																	 {
																		 licenseTypeArr = licenseTypeArr + "~" + licenseType;
																	 }
																 }
															 }
														 }
														 
														 ReportElement passportCountryReference = passportIdData.getChild("wd:Country_Region_Reference");
														 if(passportCountryReference != null)
														 {
															 List<ReportElement> passportCountryData = passportCountryReference.getChildren("wd:ID");								 
															 for(ReportElement countryElement:passportCountryData)
															 {
																 licenseCountryMap = countryElement.getAllAttributes();
																 if(licenseCountryMap.get("wd:type").equals("Country_Region_ID"))
																 {
																	 licenseCountry = countryElement.getValue().trim();
																	 if(licenseCountryArr.equals(""))
																	 {
																		 licenseCountryArr = licenseCountry;
																	 }
																	 else
																	 {
																		 licenseCountryArr = licenseCountryArr + "~" + licenseCountry;
																	 }
																 }
															 }
														 }
													 }
												 }
											 }
											 else
											 {
												 errorList.add(columnList.get(i));
												 licenseNumberArr = "";
												 licenseTypeArr = "";
												 licenseCountryArr = "";
												 licenseIssuedDateArr = "";
												 licenseExpirationDateArr = "";
											 }
										 }
						        		 else
										 {
						        			 errorList.add(columnList.get(i));
						        			 licenseNumberArr = "";
											 licenseTypeArr = "";
											 licenseCountryArr = "";
											 licenseIssuedDateArr = "";
											 licenseExpirationDateArr = "";
										 }
											 								 								 
										 headingFromWD = "Employee_ID,License_Number,License_Type,License_Country,Issued_Date,Expiration_Date";
										 
										 headerStr = employeeId + "," + licenseNumberArr + "," + licenseTypeArr + "," + licenseCountryArr + "," + licenseIssuedDateArr + "," + licenseExpirationDateArr;
										 
										 if(finalStr.equals(""))
										 {
											 finalStr = headingFromWD + "\n" + headerStr;
										 }
										 else
										 {
											 finalStr = finalStr + "\n" + headerStr;
										 }
								 }
							 }
						 }
					 }
					 columnList.removeAll(errorList);
					 wdCount = columnList.size();
				 }		 					 
				 System.out.println(finalStr);
				 targetContent = finalStr.toString().getBytes();					 					 
				 headingWd = selectColumnMapping(loadCycle, ruleName, "Employee_ID");					 
				 complete = true;
			}			 			 
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}

		return headingWd;
	}
	
	private JSONArray createCSVFromWDPassportID(Tenant tenant, InputStream is, SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd,
			String loadCycle, String ruleName, String client) {

		 targetContent = null;
		 headingFromWD = "";
		 
		 String checkFile = "";
		
		 String employeeId = "";
		 String passportNumber = "";
		 String passportType = "";
		 String passportCountry = "";
		 String passportIssuedDate = "";
		 String passportExpirationDate = "";
		 String passportVerificationDate = "";
		 String passportNumberArr = "";
		 String passportTypeArr = "";
		 String passportCountryArr = "";
		 String passportIssuedDateArr = "";
		 String passportExpirationDateArr = "";
		 String passportVerificationDateArr = "";
		 
		 Map<String,String> passportTypeMap = null;
		 Map<String,String> passportCountryMap = null;

		 String finalStr = "";
		 String headerStr = "";
		  try 
		{			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_PASSPORT_ID_REQUEST_FILE = requestfile.getAbsolutePath();
				 
				 if(errorList.isEmpty())
				 {
					 for(int i = 0; i<columnList.size();i++)
					 {
						 checkFile = addWorkerIdListToFindError(GET_PASSPORT_ID_REQUEST_FILE, columnList.get(i), ruleName, "Employee_ID");
						 is = new FileInputStream(checkFile);
					     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     SOAPPart soapPart = soapMessage.getSOAPPart();
					     SOAPEnvelope envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
							  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
					     ByteArrayOutputStream out = new ByteArrayOutputStream();
					     soapMessage.writeTo(out);
					     String strMsgChk = new String(out.toByteArray());	
					     
					     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
					     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
						 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
						 out = new ByteArrayOutputStream();
						 soapResponse.writeTo(out);
						 strMsgChk = new String(out.toByteArray(), "utf-8");
						 if(strMsgChk.contains("faultstring"))
						 {
							 errorList.add(columnList.get(i)) ;
						 }
						 else
						 {
							 ReportElement rptElement = XmlParserManager.parseXml(strMsgChk);				 
							 ReportElement pageResults = rptElement.getChild("env:Body")
										.getChild("wd:Get_Workers_Response")
										.getChild("wd:Response_Results");
							 
							 String result = pageResults.getChild("wd:Total_Results").getValue().trim();
							 if(result.equalsIgnoreCase("0"))
							 {
								 errorList.add(columnList.get(i));
							 }
							 else
							 {
								 ReportElement responseData = rptElement.getChild("env:Body")
											.getChild("wd:Get_Workers_Response")
											.getChild("wd:Response_Data");
								 
								 List<ReportElement> applicantData = responseData.getChildren("wd:Worker");
									
								 for(ReportElement reportElement : applicantData)
								 {
									 ReportElement element1 = reportElement.getChild("wd:Worker_Data");
						        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
						        		System.out.println("employeeId--"+ employeeId);										 										
										
						        		ReportElement identificationData = reportElement.getChild("wd:Worker_Data")
									 			.getChild("wd:Personal_Data")
									 			.getChild("wd:Identification_Data");
									 
						        		if(identificationData != null)
										{										 									 
											 List<ReportElement> passportIDList = identificationData.getChildren("wd:Passport_ID");
											 if(passportIDList != null && passportIDList.size() >0)
											 {
												 passportNumberArr = "";
												 passportTypeArr = "";
												 passportCountryArr = "";
												 passportIssuedDateArr = "";
												 passportExpirationDateArr = "";
												 passportVerificationDateArr = "";
												 
												 for(ReportElement passportElement : passportIDList)
												 {
													 ReportElement passportIdData = passportElement.getChild("wd:Passport_ID_Data");
													 if(passportIdData != null)
													 {
														 passportNumber = passportIdData.getChild("wd:ID") != null?passportIdData.getChild("wd:ID").getValue().trim():""; 
														 if(passportNumberArr.equals(""))
														 {
															 passportNumberArr = passportNumber;
														 }
														 else
														 {
															 passportNumberArr = passportNumberArr + "~" + passportNumber;
														 }
														 passportIssuedDate = passportIdData.getChild("wd:Issued_Date") != null?passportIdData.getChild("wd:Issued_Date").getValue().trim():"";
														 if(!passportIssuedDate.isEmpty())
														 {
															 passportIssuedDate = passportIssuedDate.substring(0, 10);
														 }
														 if(passportIssuedDateArr.equals(""))
														 {
															 passportIssuedDateArr = passportIssuedDate;
														 }
														 else
														 {
															 if(!passportIssuedDate.isEmpty())
															 {
																 passportIssuedDateArr = passportIssuedDateArr + "~" + passportIssuedDate;
															 }
														 }
														 passportExpirationDate = passportIdData.getChild("wd:Expiration_Date") != null?passportIdData.getChild("wd:Expiration_Date").getValue().trim():"";
														 if(!passportExpirationDate.isEmpty())
														 {
															 passportExpirationDate = passportExpirationDate.substring(0, 10);
														 }
														 if(passportExpirationDateArr.equals(""))
														 {
															 passportExpirationDateArr = passportExpirationDate;
														 }
														 else
														 {
															 if(!passportExpirationDate.isEmpty())
															 {
																 passportExpirationDateArr = passportExpirationDateArr + "~" + passportExpirationDate;
															 }
														 }
														 passportVerificationDate = passportIdData.getChild("wd:Verification_Date") != null?passportIdData.getChild("wd:Verification_Date").getValue().trim():""; 
														 if(!passportVerificationDate.isEmpty())
														 {
															 passportVerificationDate = passportVerificationDate.substring(0, 10);
														 }
														 if(passportVerificationDateArr.equals(""))
														 {
															 passportVerificationDateArr = passportVerificationDate;
														 }
														 else
														 {
															 if(!passportVerificationDate.isEmpty())
															 {
																 passportVerificationDateArr = passportVerificationDateArr + "~" + passportVerificationDate;
															 }
														 }
														 
														 ReportElement passportTypeRef = passportIdData.getChild("wd:ID_Type_Reference");
														 if(passportTypeRef != null)
														 {
															 List<ReportElement> passportIdTypeData = passportTypeRef.getChildren("wd:ID");								 
															 for(ReportElement idTypeElement:passportIdTypeData)
															 {
																 passportTypeMap = idTypeElement.getAllAttributes();
																 if(passportTypeMap.get("wd:type").equals("Passport_ID_Type_ID"))
																 {
																	 passportType = idTypeElement.getValue().trim();
																	 if(passportTypeArr.equals(""))
																	 {
																		 passportTypeArr = passportType;
																	 }
																	 else
																	 {
																		 passportTypeArr = passportTypeArr + "~" + passportType;
																	 }
																 }
															 }
														 }
														 
														 ReportElement passportCountryReference = passportIdData.getChild("wd:Country_Reference");
														 if(passportCountryReference != null)
														 {
															 List<ReportElement> passportCountryData = passportCountryReference.getChildren("wd:ID");								 
															 for(ReportElement countryElement:passportCountryData)
															 {
																 passportCountryMap = countryElement.getAllAttributes();
																 if(passportCountryMap.get("wd:type").equals("ISO_3166-1_Alpha-3_Code"))
																 {
																	 passportCountry = countryElement.getValue().trim();
																	 if(passportCountryArr.equals(""))
																	 {
																		 passportCountryArr = passportCountry;
																	 }
																	 else
																	 {
																		 passportCountryArr = passportCountryArr + "~" + passportCountry;
																	 }
																 }
															 }
														 }
													 }
												 }
											 }
											 else
											 {
												 errorList.add(columnList.get(i));
												 passportNumberArr = "";
												 passportTypeArr = "";
												 passportCountryArr = "";
												 passportIssuedDateArr = "";
												 passportExpirationDateArr = "";
												 passportVerificationDateArr = "";
											 }
										 }
						        		 else
										 {
						        			 errorList.add(columnList.get(i));
											 passportNumberArr = "";
											 passportTypeArr = "";
											 passportCountryArr = "";
											 passportIssuedDateArr = "";
											 passportExpirationDateArr = "";
											 passportVerificationDateArr = "";
										 }
											 								 								 
										 headingFromWD = "Employee_ID,Passport_Number,Passport_Type,Passport_Country,Issued_Date,Expiration_Date,Verification_Date";
										 
										 headerStr = employeeId + "," + passportNumberArr + "," + passportTypeArr + "," + passportCountryArr + "," + passportIssuedDateArr + "," + passportExpirationDateArr
												 + "," + passportVerificationDateArr;
										 
										 if(finalStr.equals(""))
										 {
											 finalStr = headingFromWD + "\n" + headerStr;
										 }
										 else
										 {
											 finalStr = finalStr + "\n" + headerStr;
										 }
								 }
							 }
						 }
					 }
					 columnList.removeAll(errorList);
					 wdCount = columnList.size();
				 }		 					 
				 System.out.println(finalStr);
				 targetContent = finalStr.toString().getBytes();					 					 
				 headingWd = selectColumnMapping(loadCycle, ruleName, "Employee_ID");					 
				 complete = true;
			}			 			 
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}

		return headingWd;
	}
	
	private JSONArray createCSVFromWDVisaID(Tenant tenant, InputStream is, SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd,
			String loadCycle, String ruleName, String client) {
		
		 targetContent = null;
		 headingFromWD = "";
		 String checkFile = "";
		 
		 String employeeId = "";
		 String visaId = "";
		 String visaType = "";
		 String visaCountry = "";
		 String visaIssuedDate = "";
		 String visaExpirationDate = "";
		 String visaVerificationDate = "";
		 String visaIdArr = "";
		 String visaTypeArr = "";
		 String visaCountryArr = "";
		 String visaIssuedDateArr = "";
		 String visaExpirationDateArr = "";
		 String visaVerificationDateArr = "";
		 
		 Map<String,String> visaIdTypeMap = null;
		 Map<String,String> visaCountryMap = null;

		 String finalStr = "";
		 String headerStr = "";
		 try 
		 {			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_VISA_ID_REQUEST_FILE = requestfile.getAbsolutePath();
				 
				 if(errorList.isEmpty())
				 {
					 for(int i = 0; i<columnList.size();i++)
					 {
						 checkFile = addWorkerIdListToFindError(GET_VISA_ID_REQUEST_FILE, columnList.get(i), ruleName, "Employee_ID");
						 is = new FileInputStream(checkFile);
					     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     SOAPPart soapPart = soapMessage.getSOAPPart();
					     SOAPEnvelope envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
							  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
					     ByteArrayOutputStream out = new ByteArrayOutputStream();
					     soapMessage.writeTo(out);
					     String strMsgChk = new String(out.toByteArray());	
					     
					     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
					     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
						 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
						 out = new ByteArrayOutputStream();
						 soapResponse.writeTo(out);
						 strMsgChk = new String(out.toByteArray(), "utf-8");
						 if(strMsgChk.contains("faultstring"))
						 {
							 errorList.add(columnList.get(i)) ;
						 }
						 else
						 {
							 ReportElement rptElement = XmlParserManager.parseXml(strMsgChk);				 
							 ReportElement pageResults = rptElement.getChild("env:Body")
										.getChild("wd:Get_Workers_Response")
										.getChild("wd:Response_Results");
							 
							 String result = pageResults.getChild("wd:Total_Results").getValue().trim();
							 if(result.equalsIgnoreCase("0"))
							 {
								 errorList.add(columnList.get(i));
							 }
							 else
							 {
								 ReportElement responseData = rptElement.getChild("env:Body")
											.getChild("wd:Get_Workers_Response")
											.getChild("wd:Response_Data");
								 
								 List<ReportElement> applicantData = responseData.getChildren("wd:Worker");
									
								 for(ReportElement reportElement : applicantData)
								 {
									 ReportElement element1 = reportElement.getChild("wd:Worker_Data");
						        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
						        		System.out.println("employeeId--"+ employeeId);										 										
										
						        		ReportElement identificationData = reportElement.getChild("wd:Worker_Data")
									 			.getChild("wd:Personal_Data")
									 			.getChild("wd:Identification_Data");
									 
						        		if(identificationData != null)
										{										 									 
						        			List<ReportElement> visaIDList = identificationData.getChildren("wd:Visa_ID");
											 if(visaIDList != null && visaIDList.size() >0)
											 {
												 visaIdArr = "";
												 visaTypeArr = "";
												 visaCountryArr = "";
												 visaIssuedDateArr = "";
												 visaExpirationDateArr = "";
												 visaVerificationDateArr = "";
												 
												 for(ReportElement visaElement : visaIDList)
												 {
													 ReportElement visaIdData = visaElement.getChild("wd:Visa_ID_Data");
													 if(visaIdData != null)
													 {
														 visaId = visaIdData.getChild("wd:ID") != null?visaIdData.getChild("wd:ID").getValue().trim():""; 
														 if(visaIdArr.equals(""))
														 {
															 visaIdArr = visaId;
														 }
														 else
														 {
															 visaIdArr = visaIdArr + "~" + visaId;
														 }
														 visaIssuedDate = visaIdData.getChild("wd:Issued_Date") != null?visaIdData.getChild("wd:Issued_Date").getValue().trim():"";
														 if(!visaIssuedDate.isEmpty())
														 {
															 visaIssuedDate = visaIssuedDate.substring(0, 10);
														 }
														 if(visaIssuedDateArr.equals(""))
														 {
															 visaIssuedDateArr = visaIssuedDate;
														 }
														 else
														 {
															 if(!visaIssuedDate.isEmpty())
															 {
																 visaIssuedDateArr = visaIssuedDateArr + "~" + visaIssuedDate;
															 }
														 }
														 visaExpirationDate = visaIdData.getChild("wd:Expiration_Date") != null?visaIdData.getChild("wd:Expiration_Date").getValue().trim():"";
														 if(!visaExpirationDate.isEmpty())
														 {
															 visaExpirationDate = visaExpirationDate.substring(0, 10);
														 }
														 if(visaExpirationDateArr.equals(""))
														 {
															 visaExpirationDateArr = visaExpirationDate;
														 }
														 else
														 {
															 if(!visaExpirationDate.isEmpty())
															 {
																 visaExpirationDateArr = visaExpirationDateArr + "~" + visaExpirationDate;
															 }
														 }
														 visaVerificationDate = visaIdData.getChild("wd:Verification_Date") != null?visaIdData.getChild("wd:Verification_Date").getValue().trim():"";
														 if(!visaVerificationDate.isEmpty())
														 {
															 visaVerificationDate = visaVerificationDate.substring(0, 10);
														 }
														 if(visaVerificationDateArr.equals(""))
														 {
															 visaVerificationDateArr = visaVerificationDate;
														 }
														 else
														 {
															 if(!visaVerificationDate.isEmpty())
															 {
																 visaVerificationDateArr = visaVerificationDateArr + "~" + visaVerificationDate;
															 }
														 }
														 
														 ReportElement visaTypeRef = visaIdData.getChild("wd:ID_Type_Reference");
														 if(visaTypeRef != null)
														 {
															 List<ReportElement> visaTypeData = visaTypeRef.getChildren("wd:ID");								 
															 for(ReportElement idTypeElement:visaTypeData)
															 {
																 visaIdTypeMap = idTypeElement.getAllAttributes();
																 if(visaIdTypeMap.get("wd:type").equals("Visa_ID_Type_ID"))
																 {
																	 visaType = idTypeElement.getValue().trim();
																	 if(visaTypeArr.equals(""))
																	 {
																		 visaTypeArr = visaType;
																	 }
																	 else
																	 {
																		 visaTypeArr = visaTypeArr + "~" + visaType;
																	 }
																 }
															 }
														 }
														 
														 ReportElement visaCountryReference = visaIdData.getChild("wd:Country_Reference");
														 if(visaCountryReference != null)
														 {
															 List<ReportElement> visaCountryData = visaCountryReference.getChildren("wd:ID");								 
															 for(ReportElement countryElement:visaCountryData)
															 {
																 visaCountryMap = countryElement.getAllAttributes();
																 if(visaCountryMap.get("wd:type").equals("ISO_3166-1_Alpha-3_Code"))
																 {
																	 visaCountry = countryElement.getValue().trim();
																	 if(visaCountryArr.equals(""))
																	 {
																		 visaCountryArr = visaCountry;
																	 }
																	 else
																	 {
																		 visaCountryArr = visaCountryArr + "~" + visaCountry;
																	 }
																 }
															 }
														 }												 												 
													 }
												 }
											 }
											 else
											 {
												 errorList.add(columnList.get(i));
												 visaIdArr = "";
												 visaTypeArr = "";
												 visaCountryArr = "";
												 visaIssuedDateArr = "";
												 visaExpirationDateArr = "";
												 visaVerificationDateArr = "";
											 }					
										 }
						        		 else
										 {
						        			 errorList.add(columnList.get(i));
											 visaIdArr = "";
											 visaTypeArr = "";
											 visaCountryArr = "";
											 visaIssuedDateArr = "";
											 visaExpirationDateArr = "";
											 visaVerificationDateArr = "";
										 }		
											 								 								 
										 headingFromWD = "Employee_ID,Visa_ID,Visa_Type,Visa_Country,Issued_Date,Expiration_Date,Verification_Date";
										 
										 headerStr = employeeId + "," + visaIdArr + "," + visaTypeArr + "," + visaCountryArr + "," + visaIssuedDateArr + "," + visaExpirationDateArr
												 + "," + visaVerificationDateArr;
										 
										 if(finalStr.equals(""))
										 {
											 finalStr = headingFromWD + "\n" + headerStr;
										 }
										 else
										 {
											 finalStr = finalStr + "\n" + headerStr;
										 }
								 }
							 }
						 }
					 }
					 columnList.removeAll(errorList);
					 wdCount = columnList.size();
				 }		 					 
				 System.out.println(finalStr);
				 targetContent = finalStr.toString().getBytes();					 					 
				 headingWd = selectColumnMapping(loadCycle, ruleName, "Employee_ID");					 
				 complete = true;
			}			 			 
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}

		return headingWd;
	}
	
	private JSONArray createCSVFromWDOtherID(Tenant tenant, InputStream is, SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd,
			String loadCycle, String ruleName, String client) {
		
		 targetContent = null;
		 headingFromWD = "";
		 String checkFile = "";
		 
		 String employeeId = "";
		 String customIdNumber = "";
		 String customIdNumberArr = "";
		 String customType = "";
		 String customTypeArr = "";
		 String customDesc = "";
		 String customDescArr = "";
		 String issuedDate = "";
		 String issuedDateArr = "";
		 String expirationDate = "";
		 String expirationDateArr = "";
		 
		 Map<String,String> customTypeMap = null;

		 String finalStr = "";
		 String headerStr = "";
		 
		 try 
		 {			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_OTHER_ID_REQUEST_FILE = requestfile.getAbsolutePath();
				 
				 if(errorList.isEmpty())
				 {
					 for(int i = 0; i<columnList.size();i++)
					 {
						 checkFile = addWorkerIdListToFindError(GET_OTHER_ID_REQUEST_FILE, columnList.get(i), ruleName, "Employee_ID");
						 is = new FileInputStream(checkFile);
					     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     SOAPPart soapPart = soapMessage.getSOAPPart();
					     SOAPEnvelope envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
							  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
					     ByteArrayOutputStream out = new ByteArrayOutputStream();
					     soapMessage.writeTo(out);
					     String strMsgChk = new String(out.toByteArray());	
					     
					     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
					     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
						 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
						 out = new ByteArrayOutputStream();
						 soapResponse.writeTo(out);
						 strMsgChk = new String(out.toByteArray(), "utf-8");
						 if(strMsgChk.contains("faultstring"))
						 {
							 errorList.add(columnList.get(i)) ;
						 }
						 else
						 {
							 ReportElement rptElement = XmlParserManager.parseXml(strMsgChk);				 
							 ReportElement pageResults = rptElement.getChild("env:Body")
										.getChild("wd:Get_Workers_Response")
										.getChild("wd:Response_Results");
							 
							 String result = pageResults.getChild("wd:Total_Results").getValue().trim();
							 if(result.equalsIgnoreCase("0"))
							 {
								 errorList.add(columnList.get(i));
							 }
							 else
							 {
								 ReportElement responseData = rptElement.getChild("env:Body")
											.getChild("wd:Get_Workers_Response")
											.getChild("wd:Response_Data");
								 
								 List<ReportElement> applicantData = responseData.getChildren("wd:Worker");
									
								 for(ReportElement reportElement : applicantData)
								 {
									 ReportElement element1 = reportElement.getChild("wd:Worker_Data");
						        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
						        		System.out.println("employeeId--"+ employeeId);										 										
										
						        		ReportElement identificationData = reportElement.getChild("wd:Worker_Data")
									 			.getChild("wd:Personal_Data")
									 			.getChild("wd:Identification_Data");
									 
						        		if(identificationData != null)
										{										 
											 List<ReportElement> customIDList = identificationData.getChildren("wd:Custom_ID");
											 if(customIDList != null && customIDList.size() >0)
											 {
												 customIdNumberArr = "" ;
												 customTypeArr = "";
												 for(ReportElement customElement : customIDList)
												 {
													 ReportElement customIdData = customElement.getChild("wd:Custom_ID_Data");
													 if(customIdData != null)
													 {
														 customIdNumber = customIdData.getChild("wd:ID") != null?customIdData.getChild("wd:ID").getValue().trim():"";
														 if(customIdNumber.contains(","))
														 {
															 customIdNumber = customIdNumber.replaceAll(",", "|");
														 }
														 if(customIdNumberArr.equals(""))
														 {
															 customIdNumberArr = customIdNumber;
														 }
														 else
														 {
															 customIdNumberArr = customIdNumberArr + "~" + customIdNumber;
														 }	
														 
														 ReportElement customTypeRef = customIdData.getChild("wd:ID_Type_Reference");
														 if(customTypeRef != null)
														 {
															 List<ReportElement> customIdTypeData = customTypeRef.getChildren("wd:ID");								 
															 for(ReportElement idTypeElement:customIdTypeData)
															 {
																 customTypeMap = idTypeElement.getAllAttributes();
																 if(customTypeMap.get("wd:type").equals("Custom_ID_Type_ID"))
																 {
																	 customType = idTypeElement.getValue().trim();
																	 if(customTypeArr.equals(""))
																	 {
																		 customTypeArr = customType;
																	 }
																	 else
																	 {
																		 customTypeArr = customTypeArr + "~" + customType;
																	 }																 
																 }														 
															 }
														 }
														 
														 customDesc = customIdData.getChild("wd:Custom_Description") != null?customIdData.getChild("wd:Custom_Description").getValue().trim():"";
														 //customDesc = customDesc.replaceAll("\\s", "");
														 if(customDescArr.equals(""))
														 {
															 customDescArr = customDesc;
														 }
														 else
														 {
															 if(!customDesc.isEmpty())
															 {
																 customDescArr = customDescArr + "~" + customDesc;
															 }
														 }
														 issuedDate = customIdData.getChild("wd:Issued_Date") != null?customIdData.getChild("wd:Issued_Date").getValue().trim():"";
														 if(!issuedDate.isEmpty())
														 {
															 issuedDate = issuedDate.substring(0, 10);
															 //customIdIssuedDate = convertDate(customIdIssuedDate, "yyyy-MM-dd", "dd-MM-yyyy");
														 }
														 if(issuedDateArr.equals(""))
														 {
															 issuedDateArr = issuedDate;
														 }
														 else
														 {
															 if(!issuedDate.isEmpty())
															 {
																 issuedDateArr = issuedDateArr + "~" + issuedDate;
															 }
														 }
														 expirationDate = customIdData.getChild("wd:Expiration_Date") != null?customIdData.getChild("wd:Expiration_Date").getValue().trim():"";
														 if(!expirationDate.isEmpty())
														 {
															 expirationDate = expirationDate.substring(0, 10);
														 }
														 if(expirationDateArr.equals(""))
														 {
															 expirationDateArr = expirationDate;
														 }
														 else
														 {
															 if(!expirationDate.isEmpty())
															 {
																 expirationDateArr = expirationDateArr + "~" + expirationDate;
															 }
														 }
													 }
												 }
											 }
											 else
											 {
												 errorList.add(employeeId);
												 customIdNumberArr = "" ;
												 customTypeArr = "";
												 customDescArr = "";
												 issuedDateArr = "";
												 expirationDateArr = "";
											 }
										 }
						        		 else
										 {
						        			 errorList.add(employeeId);
											 customIdNumberArr = "" ;
											 customTypeArr = "";
											 customDescArr = "";
											 issuedDateArr = "";
											 expirationDateArr = "";
										 }
											 								 								 
										 headingFromWD = "Employee_ID,Custom_ID_Number,Custom_ID_Type,Custom_Description,Issued_Date,Expiration_Date";
										 
										 headerStr = employeeId + "," + customIdNumberArr + "," + customTypeArr + "," + customDescArr + "," + issuedDateArr + "," + expirationDateArr;
										 
										 if(finalStr.equals(""))
										 {
											 finalStr = headingFromWD + "\n" + headerStr;
										 }
										 else
										 {
											 finalStr = finalStr + "\n" + headerStr;
										 }
								 }
							 }
						 }
					 }
					 columnList.removeAll(errorList);
					 wdCount = columnList.size();
				 }		 					 
				 System.out.println(finalStr);
				 targetContent = finalStr.toString().getBytes();					 					 
				 headingWd = selectColumnMapping(loadCycle, ruleName, "Employee_ID");					 
				 complete = true;
			}			 			 
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}

		return headingWd;
	}
	
	private JSONArray createCSVFromWDPersonalInformation(Tenant tenant, InputStream is, SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd,
			String loadCycle, String ruleName, String client) {
		
		 targetContent = null;
		 headingFromWD = "";
		 String checkFile = "";
		
		 String employeeId = "";
		 String birthDate = "";
		 String birthCity = "";
		 String birthRegion = "";
		 String tobaccoUse = "";
		 String birthCountry = "";
		 String genderDesc = "";
		 String religion = "";
		 String maritalStatusName = "";
		 String maritalStatusDate = "";
		 String ethnicityName = "";
		 String citizenName = "";
		 String primaryNationality = "";
		 String ethnicityNameArr = "";
		 String citizenNameArr = "";
		 String disabilityId = "";
		 String disabilityDegree = "";
		 String disabilityAuthRefId = "";
		 String disabilityCertifyAt = "";
		 String disabilityCertificateId = "";
		 String militaryStatusId = "";
		 String hispanic = "";
		 
		 Map<String,String> countryMap = null;
		 Map<String,String> genderMap = null;
		 Map<String,String> maritalMap = null;
		 Map<String,String> ethnMap = null;
		 Map<String,String> citizenMap = null;
		 Map<String,String> religionMap = null;
		 Map<String,String> disabilityRefMap = null;
		 Map<String,String> disabilityAuthMap = null;
		 Map<String,String> militaryStatusMap = null;
		 Map<String,String> primaryNationalityMap = null;

		 String finalStr = "";
		 String headerStr = "";
		 try 
		 {			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_PERSONAL_INFORMATION_REQUEST_FILE = requestfile.getAbsolutePath();				 
				 
				 if(errorList.isEmpty())
				 {
					 for(int i = 0; i<columnList.size();i++)
					 {
						 checkFile = addWorkerIdListToFindError(GET_PERSONAL_INFORMATION_REQUEST_FILE, columnList.get(i), ruleName, "Employee_ID");
						 is = new FileInputStream(checkFile);
					     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     SOAPPart soapPart = soapMessage.getSOAPPart();
					     SOAPEnvelope envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
							  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
					     ByteArrayOutputStream out = new ByteArrayOutputStream();
					     soapMessage.writeTo(out);
					     String strMsgChk = new String(out.toByteArray());	
					     
					     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
					     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
						 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
						 out = new ByteArrayOutputStream();
						 soapResponse.writeTo(out);
						 strMsgChk = new String(out.toByteArray(), "utf-8");
						 if(strMsgChk.contains("faultstring"))
						 {
							 errorList.add(columnList.get(i)) ;
						 }
						 else
						 {
							 ReportElement rptElement = XmlParserManager.parseXml(strMsgChk);				 
							 ReportElement pageResults = rptElement.getChild("env:Body")
										.getChild("wd:Get_Workers_Response")
										.getChild("wd:Response_Results");
							 
							 String result = pageResults.getChild("wd:Total_Results").getValue().trim();
							 if(result.equalsIgnoreCase("0"))
							 {
								 errorList.add(columnList.get(i));
							 }
							 else
							 {
								 ReportElement responseData = rptElement.getChild("env:Body")
											.getChild("wd:Get_Workers_Response")
											.getChild("wd:Response_Data");
								 
								 List<ReportElement> applicantData = responseData.getChildren("wd:Worker");
									
								 for(ReportElement reportElement : applicantData)
								 {
									 ReportElement element1 = reportElement.getChild("wd:Worker_Data");
						        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
						        		System.out.println("employeeId--"+ employeeId);										 										
										
						        		ReportElement personalData = reportElement.getChild("wd:Worker_Data")
					 							.getChild("wd:Personal_Data");
									 
									 if(personalData != null)
									 {
										 birthDate = personalData.getChild("wd:Birth_Date") != null?personalData.getChild("wd:Birth_Date").getValue().trim():"";
										 if(!birthDate.isEmpty())
										 {
											 birthDate = birthDate.substring(0, 10);
										 }
										 birthCity = personalData.getChild("wd:City_of_Birth") != null?personalData.getChild("wd:City_of_Birth").getValue().trim():"";
										 if(birthCity.contains(","))
										 {
											 birthCity =  birthCity.replace(",", "|");
										 }
										 birthRegion = personalData.getChild("wd:Region_of_Birth_Descriptor") != null?personalData.getChild("wd:Region_of_Birth_Descriptor").getValue().trim():"";
										 tobaccoUse = personalData.getChild("wd:Tobacco_Use") != null?personalData.getChild("wd:Tobacco_Use").getValue().trim():"";
										 if(tobaccoUse.equals("1"))
										 {
											 tobaccoUse = "true";
										 }
										 else
										 {
											 tobaccoUse = "false";
										 }
										 hispanic = personalData.getChild("wd:Hispanic_or_Latino") != null?personalData.getChild("wd:Hispanic_or_Latino").getValue().trim():"";
										 if(hispanic.equals("1"))
										 {
											 hispanic = "Yes";
										 }
										 else
										 {
											 hispanic = "No";
										 }
										 
										 ReportElement countryBirthData = personalData.getChild("wd:Country_of_Birth_Reference");
										 if(countryBirthData != null)
										 {
											 List<ReportElement> countryData = countryBirthData.getChildren("wd:ID");					 
											 for(ReportElement countryElement:countryData)
											 {
												 countryMap = countryElement.getAllAttributes();
												 if(countryMap.get("wd:type").equals("ISO_3166-1_Alpha-3_Code"))
												 {
													 birthCountry = countryElement.getValue().trim();
												 }
											 }
										 }
										 else
										 {
											 birthCountry = "";
										 }
										 
										 ReportElement religionData = personalData.getChild("wd:Religion_Reference");
										 if(religionData != null)
										 {
											 List<ReportElement> relgnData = religionData.getChildren("wd:ID");					 
											 for(ReportElement religionElement:relgnData)
											 {
												 religionMap = religionElement.getAllAttributes();
												 if(religionMap.get("wd:type").equals("Religion_ID"))
												 {
													 religion = religionElement.getValue().trim();
												 }
											 }
										 }
										 else
										 {
											 religion = "";
										 }
										 
										 ReportElement genderData = personalData.getChild("wd:Gender_Reference");
										 if(genderData != null)
										 {
											 List<ReportElement> genderList = genderData.getChildren("wd:ID");					 
											 for(ReportElement genderElement:genderList)
											 {
												 genderMap = genderElement.getAllAttributes();
												 if(genderMap.get("wd:type").equals("Gender_Code"))
												 {
													 genderDesc = genderElement.getValue().trim();
												 }
											 }
										 }
										 else
										 {
											 genderDesc = "";
										 }
										 
										 ReportElement maritalStatusData = personalData.getChild("wd:Marital_Status_Reference");
										 if(maritalStatusData != null)
										 {
											 List<ReportElement> maritalStatusList = maritalStatusData.getChildren("wd:ID");					 
											 for(ReportElement maritalElement:maritalStatusList)
											 {
												 maritalMap = maritalElement.getAllAttributes();
												 if(maritalMap.get("wd:type").equals("Marital_Status_ID"))
												 {
													 maritalStatusName = maritalElement.getValue().trim();
													 maritalStatusName = maritalStatusName.substring(maritalStatusName.indexOf("_")+1, maritalStatusName.length());
												 }
											 }
										 }
										 else
										 {
											 maritalStatusName = "";
										 }
										 
										 maritalStatusDate = personalData.getChild("wd:Marital_Status_Date") != null?personalData.getChild("wd:Marital_Status_Date").getValue().trim():"";
										 if(!maritalStatusDate.isEmpty())
										 {
											 maritalStatusDate = maritalStatusDate.substring(0, 10);
										 }
										 
										 List<ReportElement> ethnicityList = personalData.getChildren("wd:Ethnicity_Reference");
										 if(ethnicityList != null && ethnicityList.size() >0)
										 {
											 ethnicityNameArr = "";
											 for(ReportElement ethnicityElement : ethnicityList)
											 {
												 List<ReportElement> ethnData = ethnicityElement.getChildren("wd:ID");					 
												 for(ReportElement ethnElement:ethnData)
												 {
													 ethnMap = ethnElement.getAllAttributes();
													 if(ethnMap.get("wd:type").equals("Ethnicity_ID"))
													 {
														 ethnicityName = ethnElement.getValue().trim();
														 ethnicityName = ethnicityName.substring(ethnicityName.indexOf("_")+1, ethnicityName.length());
														 if(ethnicityNameArr.equals(""))
														 {
															 ethnicityNameArr = ethnicityName;
														 }
														 else
														 {
															 if(!ethnicityName.isEmpty())
															 {
																 ethnicityNameArr = ethnicityNameArr + "~" + ethnicityName;
															 }
														 }
													 }
												 }
											 }
										 }
										 else
										 {
											 ethnicityNameArr = ""; 
										 }
										 
										 List<ReportElement> citizenshipList = personalData.getChildren("wd:Citizenship_Status_Reference");
										 if(citizenshipList != null && citizenshipList.size() >0)
										 {
											 citizenNameArr = "";
											 for(ReportElement citizenshipElement : citizenshipList)
											 {
												 List<ReportElement> citizenData = citizenshipElement.getChildren("wd:ID");					 
												 for(ReportElement citizenElement:citizenData)
												 {
													 citizenMap = citizenElement.getAllAttributes();
													 if(citizenMap.get("wd:type").equals("Citizenship_Status_Code"))
													 {
														 citizenName = citizenElement.getValue().trim();
														 if(citizenNameArr.equals(""))
														 {
															 citizenNameArr = citizenName;
														 }
														 else
														 {
															 if(!citizenName.isEmpty())
															 {
																 citizenNameArr = citizenNameArr + "~" + citizenName;
															 }
														 }
													 }
												 }
											 }
										 }
										 else
										 {
											 citizenNameArr = ""; 
										 }
										 
										 ReportElement priNationData = personalData.getChild("wd:Primary_Nationality_Reference");
										 if(priNationData != null)
										 {
											 List<ReportElement> nationalityData = priNationData.getChildren("wd:ID");					 
											 for(ReportElement nationalityElement:nationalityData)
											 {
												 primaryNationalityMap = nationalityElement.getAllAttributes();
												 if(primaryNationalityMap.get("wd:type").equals("ISO_3166-1_Alpha-3_Code"))
												 {
													 primaryNationality = nationalityElement.getValue().trim();
												 }
											 }
										 }
										 else
										 {
											 primaryNationality = "";
										 }
										 
										 ReportElement disabilityStatusData = personalData.getChild("wd:Disability_Status_Data");
										 if(disabilityStatusData != null)
										 {
											 List<ReportElement> disabilityRefList = disabilityStatusData.getChildren("wd:Disability_Reference");
											 if(disabilityRefList != null && disabilityRefList.size() >0)
											 {
												 for(ReportElement disabilityElement : disabilityRefList)
												 {
													 List<ReportElement> disabilityData = disabilityElement.getChildren("wd:ID");					 
													 for(ReportElement disabElement:disabilityData)
													 {
														 disabilityRefMap = disabElement.getAllAttributes();
														 if(disabilityRefMap.get("wd:type").equals("Disability_ID"))
														 {
															 disabilityId = disabElement.getValue().trim();															 
														 }
													 }
												 }
											 }
											 
											 disabilityDegree = disabilityStatusData.getChild("wd:Disability_Degree") != null?disabilityStatusData.getChild("wd:Disability_Degree").getValue().trim():"";
											 disabilityCertifyAt = disabilityStatusData.getChild("wd:Disability_Certified_At") != null?disabilityStatusData.getChild("wd:Disability_Certified_At").getValue().trim():"";
											 disabilityCertificateId = disabilityStatusData.getChild("wd:Disability_Certification_ID") != null?disabilityStatusData.getChild("wd:Disability_Certification_ID").getValue().trim():"";
											 
											 List<ReportElement> disabilityCertList = disabilityStatusData.getChildren("wd:Disability_Certification_Authority_Reference");
											 if(disabilityCertList != null && disabilityCertList.size() >0)
											 {
												 for(ReportElement disabilityCertElement : disabilityCertList)
												 {
													 List<ReportElement> disabilityCertData = disabilityCertElement.getChildren("wd:ID");					 
													 for(ReportElement disabCerElement:disabilityCertData)
													 {
														 disabilityAuthMap = disabCerElement.getAllAttributes();
														 if(disabilityAuthMap.get("wd:type").equals("Disability_Certification_Authority_ID"))
														 {
															 disabilityAuthRefId = disabCerElement.getValue().trim();															 
														 }
													 }
												 }
											 }
										 }
										 else
										 {
											 disabilityId = "";
											 disabilityDegree = "";
											 disabilityCertifyAt = "";
											 disabilityCertificateId = "";
											 disabilityAuthRefId = "";
										 }
										 
										 ReportElement militaryStatusData = personalData.getChild("wd:Military_Service_Data");
										 if(militaryStatusData != null)
										 {
											 List<ReportElement> militaryList = militaryStatusData.getChildren("wd:Status_Reference");
											 if(militaryList != null && militaryList.size() >0)
											 {
												 for(ReportElement militaryElement : militaryList)
												 {
													 List<ReportElement> militaryData = militaryElement.getChildren("wd:ID");					 
													 for(ReportElement statusElement:militaryData)
													 {
														 militaryStatusMap = statusElement.getAllAttributes();
														 if(militaryStatusMap.get("wd:type").equals("Military_Status_ID"))
														 {
															 militaryStatusId = statusElement.getValue().trim();															 
														 }
													 }
												 }
											 }
										 }
										 else
										 {
											 militaryStatusId = "";
										 }										 										 									 											 											 
									 }
									 else
									 {
										 errorList.add(columnList.get(i));
										 birthDate = "";
										 birthCity = "";
										 birthRegion = "";
										 birthCountry = "";
										 genderDesc = "";
										 tobaccoUse = "";
										 maritalStatusName = "";
										 maritalStatusDate = "";
										 ethnicityNameArr = "";
										 citizenNameArr = "";
										 disabilityId = "";
										 disabilityDegree = "";
										 disabilityCertifyAt = "";
										 disabilityCertificateId = "";
										 disabilityAuthRefId = "";
										 militaryStatusId = "";
										 primaryNationality = "";
										 hispanic = "";
									 }
											 								 
										 
									 headingFromWD = "Employee_ID,Birth_Date,Birth_City,Birth_Country,Birth_Region,Gender,Religion,Tobacco_Use,Marital_Status,Marital_Status_Date,Ethnicity,Citizenship,"
									 		+ "Disability_ID,Disability_Degree,Disability_Certification_Authority,Disability_Certify_At,Disability_Certificate_Id,Military_Status,Primary_Nationality,Hispanic_or_Latino";
									 
									 headerStr = employeeId + "," + birthDate + "," + birthCity + "," + birthCountry + "," + birthRegion + "," + genderDesc + "," + religion + "," + tobaccoUse + "," + maritalStatusName
											 + "," + maritalStatusDate + "," + ethnicityNameArr + "," + citizenNameArr + "," + disabilityId + "," + disabilityDegree + "," + disabilityAuthRefId + "," + disabilityCertifyAt 
											 + "," + disabilityCertificateId + "," + militaryStatusId + "," + primaryNationality + "," + hispanic;
									 
									 if(finalStr.equals(""))
									 {
										 finalStr = headingFromWD + "\n" + headerStr;
									 }
									 else
									 {
										 finalStr = finalStr + "\n" + headerStr;
									 }
								 }
							 }
						 }
					 }
					 columnList.removeAll(errorList);
					 wdCount = columnList.size();
				 }		 					 
				 System.out.println(finalStr);
				 targetContent = finalStr.toString().getBytes();					 					 
				 headingWd = selectColumnMapping(loadCycle, ruleName, "Employee_ID");					 
				 complete = true;
			}			 			 
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}

		return headingWd;
	}
	
	private JSONArray createCSVFromWDPersonalInformationCW(Tenant tenant, InputStream is, SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd,
			String loadCycle, String ruleName, String client) {

		 targetContent = null;
		 headingFromWD = "";
		 String checkFile = "";
		
		 String employeeId = "";
		 String birthDate = "";
		 String birthCity = "";
		 String birthRegion = "";
		 String tobaccoUse = "";
		 String birthCountry = "";
		 String genderDesc = "";
		 String religion = "";
		 String maritalStatusName = "";
		 String maritalStatusDate = "";
		 String ethnicityName = "";
		 String citizenName = "";
		 String ethnicityNameArr = "";
		 String citizenNameArr = "";
		 String legalFirstName = "";
		 String legalMiddleName = "";
		 String legalLastName = "";
		 String title = "";
		 String countryISOCode = "";
		 String prefix = "";
		 String originalHireDate = "";
		 String seniorityDate = "";
		 String benefitsServiceDate = "";
		 String contServiceDate = "";
		 String hispanic = "";
		 
		 Map<String,String> countryMap = null;
		 Map<String,String> genderMap = null;
		 Map<String,String> maritalMap = null;
		 Map<String,String> ethnMap = null;
		 Map<String,String> citizenMap = null;
		 Map<String,String> religionMap = null;
		 Map<String,String> prefixMap = null;
		 Map<String,String> keyMap = null;

		 String finalStr = "";
		 String headerStr = "";
		 try 
		 {			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_PERSONAL_INFORMATION_CW_REQUEST_FILE = requestfile.getAbsolutePath();				 
				 
				 if(errorList.isEmpty())
				 {
					 for(int i = 0; i<columnList.size();i++)
					 {
						 checkFile = addWorkerIdListToFindError(GET_PERSONAL_INFORMATION_CW_REQUEST_FILE, columnList.get(i), ruleName, "Contingent_Worker_ID");
						 is = new FileInputStream(checkFile);
					     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     SOAPPart soapPart = soapMessage.getSOAPPart();
					     SOAPEnvelope envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
							  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
					     ByteArrayOutputStream out = new ByteArrayOutputStream();
					     soapMessage.writeTo(out);
					     String strMsgChk = new String(out.toByteArray());	
					     
					     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
					     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
						 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
						 out = new ByteArrayOutputStream();
						 soapResponse.writeTo(out);
						 strMsgChk = new String(out.toByteArray(), "utf-8");
						 if(strMsgChk.contains("faultstring"))
						 {
							 errorList.add(columnList.get(i)) ;
						 }
						 else
						 {
							 ReportElement rptElement = XmlParserManager.parseXml(strMsgChk);				 
							 ReportElement pageResults = rptElement.getChild("env:Body")
										.getChild("wd:Get_Workers_Response")
										.getChild("wd:Response_Results");
							 
							 String result = pageResults.getChild("wd:Total_Results").getValue().trim();
							 if(result.equalsIgnoreCase("0"))
							 {
								 errorList.add(columnList.get(i));
							 }
							 else
							 {
								 ReportElement responseData = rptElement.getChild("env:Body")
											.getChild("wd:Get_Workers_Response")
											.getChild("wd:Response_Data");
								 
								 List<ReportElement> applicantData = responseData.getChildren("wd:Worker");
									
								 for(ReportElement reportElement : applicantData)
								 {
									 ReportElement element1 = reportElement.getChild("wd:Worker_Data");
						        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
						        		System.out.println("employeeId--"+ employeeId);										 										
										
						        		ReportElement personalData = reportElement.getChild("wd:Worker_Data")
					 							.getChild("wd:Personal_Data");
									 
									 if(personalData != null)
									 {
										 birthDate = personalData.getChild("wd:Birth_Date") != null?personalData.getChild("wd:Birth_Date").getValue().trim():"";
										 if(!birthDate.isEmpty())
										 {
											 birthDate = birthDate.substring(0, 10);
										 }
										 birthCity = personalData.getChild("wd:City_of_Birth") != null?personalData.getChild("wd:City_of_Birth").getValue().trim():"";
										 if(birthCity.contains(","))
										 {
											 birthCity =  birthCity.replace(",", "|");
										 }
										 birthRegion = personalData.getChild("wd:Region_of_Birth_Descriptor") != null?personalData.getChild("wd:Region_of_Birth_Descriptor").getValue().trim():"";
										 tobaccoUse = personalData.getChild("wd:Tobacco_Use") != null?personalData.getChild("wd:Tobacco_Use").getValue().trim():"";
										 if(tobaccoUse.equals("1"))
										 {
											 tobaccoUse = "true";
										 }
										 else
										 {
											 tobaccoUse = "false";
										 }
										 hispanic = personalData.getChild("wd:Hispanic_or_Latino") != null?personalData.getChild("wd:Hispanic_or_Latino").getValue().trim():"";
										 if(hispanic.equals("1"))
										 {
											 hispanic = "Yes";
										 }
										 else
										 {
											 hispanic = "No";
										 }
										 
										 ReportElement countryBirthData = personalData.getChild("wd:Country_of_Birth_Reference");
										 if(countryBirthData != null)
										 {
											 List<ReportElement> countryData = countryBirthData.getChildren("wd:ID");					 
											 for(ReportElement countryElement:countryData)
											 {
												 countryMap = countryElement.getAllAttributes();
												 if(countryMap.get("wd:type").equals("ISO_3166-1_Alpha-3_Code"))
												 {
													 birthCountry = countryElement.getValue().trim();
												 }
											 }
										 }
										 else
										 {
											 birthCountry = "";
										 }
										 
										 ReportElement religionData = personalData.getChild("wd:Religion_Reference");
										 if(religionData != null)
										 {
											 List<ReportElement> relgnData = religionData.getChildren("wd:ID");					 
											 for(ReportElement religionElement:relgnData)
											 {
												 religionMap = religionElement.getAllAttributes();
												 if(religionMap.get("wd:type").equals("Religion_ID"))
												 {
													 religion = religionElement.getValue().trim();
												 }
											 }
										 }
										 else
										 {
											 religion = "";
										 }
										 
										 ReportElement genderData = personalData.getChild("wd:Gender_Reference");
										 if(genderData != null)
										 {
											 List<ReportElement> genderList = genderData.getChildren("wd:ID");					 
											 for(ReportElement genderElement:genderList)
											 {
												 genderMap = genderElement.getAllAttributes();
												 if(genderMap.get("wd:type").equals("Gender_Code"))
												 {
													 genderDesc = genderElement.getValue().trim();
												 }
											 }
										 }
										 else
										 {
											 genderDesc = "";
										 }
										 
										 ReportElement maritalStatusData = personalData.getChild("wd:Marital_Status_Reference");
										 if(maritalStatusData != null)
										 {
											 List<ReportElement> maritalStatusList = maritalStatusData.getChildren("wd:ID");					 
											 for(ReportElement maritalElement:maritalStatusList)
											 {
												 maritalMap = maritalElement.getAllAttributes();
												 if(maritalMap.get("wd:type").equals("Marital_Status_ID"))
												 {
													 maritalStatusName = maritalElement.getValue().trim();
													 maritalStatusName = maritalStatusName.substring(maritalStatusName.indexOf("_")+1, maritalStatusName.length());
												 }
											 }
										 }
										 else
										 {
											 maritalStatusName = "";
										 }
										 
										 maritalStatusDate = personalData.getChild("wd:Marital_Status_Date") != null?personalData.getChild("wd:Marital_Status_Date").getValue().trim():"";
										 if(!maritalStatusDate.isEmpty())
										 {
											 maritalStatusDate = maritalStatusDate.substring(0, 10);
										 }
										 
										 List<ReportElement> ethnicityList = personalData.getChildren("wd:Ethnicity_Reference");
										 if(ethnicityList != null && ethnicityList.size() >0)
										 {
											 ethnicityNameArr = "";
											 for(ReportElement ethnicityElement : ethnicityList)
											 {
												 List<ReportElement> ethnData = ethnicityElement.getChildren("wd:ID");					 
												 for(ReportElement ethnElement:ethnData)
												 {
													 ethnMap = ethnElement.getAllAttributes();
													 if(ethnMap.get("wd:type").equals("Ethnicity_ID"))
													 {
														 ethnicityName = ethnElement.getValue().trim();
														 ethnicityName = ethnicityName.substring(ethnicityName.indexOf("_")+1, ethnicityName.length());
														 if(ethnicityNameArr.equals(""))
														 {
															 ethnicityNameArr = ethnicityName;
														 }
														 else
														 {
															 if(!ethnicityName.isEmpty())
															 {
																 ethnicityNameArr = ethnicityNameArr + "~" + ethnicityName;
															 }
														 }
													 }
												 }
											 }
										 }
										 else
										 {
											 ethnicityNameArr = ""; 
										 }
										 
										 List<ReportElement> citizenshipList = personalData.getChildren("wd:Citizenship_Status_Reference");
										 if(citizenshipList != null && citizenshipList.size() >0)
										 {
											 citizenNameArr = "";
											 for(ReportElement citizenshipElement : citizenshipList)
											 {
												 List<ReportElement> citizenData = citizenshipElement.getChildren("wd:ID");					 
												 for(ReportElement citizenElement:citizenData)
												 {
													 citizenMap = citizenElement.getAllAttributes();
													 if(citizenMap.get("wd:type").equals("Citizenship_Status_Code"))
													 {
														 citizenName = citizenElement.getValue().trim();
														 if(citizenNameArr.equals(""))
														 {
															 citizenNameArr = citizenName;
														 }
														 else
														 {
															 if(!citizenName.isEmpty())
															 {
																 citizenNameArr = citizenNameArr + "~" + citizenName;
															 }
														 }
													 }
												 }
											 }
										 }
										 else
										 {
											 citizenNameArr = ""; 
										 }
										 
										 ReportElement legalNameData = personalData
										 			.getChild("wd:Name_Data")
							        				.getChild("wd:Legal_Name_Data")
							        				.getChild("wd:Name_Detail_Data");
							        		
											 legalFirstName = legalNameData.getChild("wd:First_Name") != null?legalNameData.getChild("wd:First_Name").getValue().trim():"";
											 legalMiddleName = legalNameData.getChild("wd:Middle_Name")!= null?legalNameData.getChild("wd:Middle_Name").getValue().trim():"";										 
											 legalLastName = legalNameData.getChild("wd:Last_Name") != null?legalNameData.getChild("wd:Last_Name").getValue().trim():"";
											 if(legalLastName.contains(","))
											 {
												 legalLastName = legalLastName.replaceAll(",", "|");
											 }
											 
											 ReportElement prefixData = legalNameData.getChild("wd:Prefix_Data");								 													 
											 if(prefixData != null)
											 {
												 ReportElement prefixTitleRef = prefixData.getChild("wd:Title_Reference");
												 if(prefixTitleRef != null)
												 {
													 List<ReportElement> prefixList = prefixTitleRef.getChildren("wd:ID");
													 for(ReportElement prefixElement:prefixList)
													 {
														 prefixMap = prefixElement.getAllAttributes();
														 if(prefixMap.get("wd:type").equals("Predefined_Name_Component_ID"))
														 {
															 prefix = prefixElement.getValue().trim();
														 }
													 }
												 }
												 else
												 {
													 prefix = "";
												 }
												 title = prefixData.getChild("wd:Title_Descriptor") != null?prefixData.getChild("wd:Title_Descriptor").getValue().trim():"";
											 }
											 else
											 {
												 prefix = "";
											 }
											 
											 ReportElement countryRef = legalNameData.getChild("wd:Country_Reference");
											 if(countryRef != null)
											 {
												 List<ReportElement> wdData = countryRef.getChildren("wd:ID");											 
												 for(ReportElement wdElement:wdData)
												 {
													 keyMap = wdElement.getAllAttributes();
													 if(keyMap.get("wd:type").equals("ISO_3166-1_Alpha-3_Code"))
													 {
														 countryISOCode = wdElement.getValue().trim();
													 }
												 }
											 }
											 else
											 {
												 countryISOCode = "";
											 }
											 
											 ReportElement workerStatusData = reportElement.getChild("wd:Worker_Data")
							 							.getChild("wd:Employment_Data")
							 							.getChild("wd:Worker_Status_Data");
											 
											 if(workerStatusData != null)
											 {
												 originalHireDate = workerStatusData.getChild("wd:Original_Hire_Date") != null?workerStatusData.getChild("wd:Original_Hire_Date").getValue().trim():"";
												 if(!originalHireDate.isEmpty())
												 {
													 originalHireDate = originalHireDate.substring(0, 10);
												 }
												 seniorityDate = workerStatusData.getChild("wd:Seniority_Date") != null?workerStatusData.getChild("wd:Seniority_Date").getValue().trim():"";
												 if(!seniorityDate.isEmpty())
												 {
													 seniorityDate = seniorityDate.substring(0, 10);
												 }
												 contServiceDate = workerStatusData.getChild("wd:Continuous_Service_Date") != null?workerStatusData.getChild("wd:Continuous_Service_Date").getValue().trim():"";
												 if(!contServiceDate.isEmpty())
												 {
													 contServiceDate = contServiceDate.substring(0, 10);
												 }
												 benefitsServiceDate = workerStatusData.getChild("wd:Benefits_Service_Date") != null?workerStatusData.getChild("wd:Benefits_Service_Date").getValue().trim():"";
												 if(!benefitsServiceDate.isEmpty())
												 {
													 benefitsServiceDate = benefitsServiceDate.substring(0, 10);
												 }
											 }
										 									 											 											 
									 }
									 else
									 {
										 errorList.add(columnList.get(i));
										 birthDate = "";
										 birthCity = "";
										 birthRegion = "";
										 birthCountry = "";
										 genderDesc = "";
										 tobaccoUse = "";
										 maritalStatusName = "";
										 maritalStatusDate = "";
										 ethnicityNameArr = "";
										 citizenNameArr = "";
										 legalFirstName = "";
										 legalMiddleName = "";										 
										 legalLastName = "";
										 title = "";
										 prefix = "";
										 countryISOCode = "";
										 originalHireDate = "";
										 contServiceDate = "";
										 seniorityDate = "";
										 benefitsServiceDate = "";
										 hispanic = "";
									 }
											 								 
										 
									 headingFromWD = "Contingent_Worker_ID,Birth_Date,Birth_City,Birth_Country,Birth_Region,Gender,Religion,Tobacco_Use,Marital_Status,Marital_Status_Date,Ethnicity,Citizenship,"
									 		+ "Country_ISO_Code,Prefix,Legal_First_Name,Legal_Middle_Name,Legal_Last_Name,Original_Hire_Date,Contenuous_Service_Date,Seniority_Date,Benefit_Service_Date,Title,Hispanic_or_Latino";
									 
									 headerStr = employeeId + "," + birthDate + "," + birthCity + "," + birthCountry + "," + birthRegion + "," + genderDesc + "," + religion + "," + tobaccoUse + "," + maritalStatusName
											 + "," + maritalStatusDate + "," + ethnicityNameArr + "," + citizenNameArr + "," + countryISOCode + "," + prefix + "," + legalFirstName + "," + legalMiddleName + "," + legalLastName
											 + "," + originalHireDate + "," + contServiceDate + "," + seniorityDate + "," + benefitsServiceDate + "," + title + "," + hispanic;
									 
									 if(finalStr.equals(""))
									 {
										 finalStr = headingFromWD + "\n" + headerStr;
									 }
									 else
									 {
										 finalStr = finalStr + "\n" + headerStr;
									 }
								 }
							 }
						 }
					 }
					 columnList.removeAll(errorList);
					 wdCount = columnList.size();
				 }		 					 
				 System.out.println(finalStr);
				 targetContent = finalStr.toString().getBytes();					 					 
				 headingWd = selectColumnMapping(loadCycle, ruleName, "Contingent_Worker_ID");					 
				 complete = true;
			}			 			 
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}

		return headingWd;
	}
	
	private JSONArray createCSVFromWDServiceDate(Tenant tenant, InputStream is, SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd,
			String loadCycle, String ruleName, String client) {

		targetContent = null;
		headingFromWD = "";
		try 
		{			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_SERVICE_DATE_REQUEST_FILE = requestfile.getAbsolutePath();
				 
				 String outputfile = addHireIdList(GET_SERVICE_DATE_REQUEST_FILE, columnList, ruleName, startIndex, columnList.size(), "Employee_ID");
				 is = new FileInputStream(outputfile);
			     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
			     SOAPPart soapPart = soapMessage.getSOAPPart();
			     SOAPEnvelope envelope = soapPart.getEnvelope();
				 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
				 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
				 {
					  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
					  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
				 }
				 soapMessage.saveChanges();
			     ByteArrayOutputStream out = new ByteArrayOutputStream();
			     soapMessage.writeTo(out);
			     String strMsg = new String(out.toByteArray());	
			     
			     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
			     //String sourceUrl = "https://wd5-services1.myworkday.com/ccx/service/Staffing";
			     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
				 soapConnection = soapConnectionFactory.createConnection();
				 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
				 out = new ByteArrayOutputStream();
				 soapResponse.writeTo(out);
				 strMsg = new String(out.toByteArray(), "utf-8");
				 
				 {
					 ReportElement soapResp = XmlParserManager.parseXml(strMsg);				 
					 ReportElement pageData = soapResp.getChild("env:Body")
								.getChild("wd:Get_Workers_Response")
								.getChild("wd:Response_Results");
					 
					 String totalNoOfPages = pageData.getChild("wd:Total_Pages").getValue().trim();
					 String totalResults = pageData.getChild("wd:Total_Results").getValue().trim();
					 int totalResult = Integer.parseInt(totalResults);
					 System.out.println("totalNoOfPages-"+totalNoOfPages);
					 System.out.println("totalResult-"+totalResult);
					 wdCount = totalResult;
					 
					 String employeeId = "";
					 String originalHireDate = "";
					 String seniorityDate = "";
					 String benefitsServiceDate = "";
					 String contServiceDate = "";
					 String expectedRetirementDate = "";
					 String retirementElegibilityDate = "";
					 String endEmploymentDate = "";							 
					 String severanceDate = "";								  
					 String companyServiceDate = "";
					 String timeOffServiceDate = ""; 
					 String vestingDate = "";
					 String workforceEnteredDate = "";
					 String contractEndDate = ""; 

					 String finalStr = "";
					 String headerStr = "";
					 
					 for (int j = 1; j <= Integer.parseInt(totalNoOfPages); j++) 
					 {
						 if(j == 1)
						 {
							startIndex = 0;
							if(999 > totalResult)
							{
								endIndex = totalResult;
							}
							else
							{
								endIndex = j*999;
							}
						 }
						 else
						 {
							startIndex = endIndex;
							if(j*999 > totalResult)
							{
								endIndex = totalResult;
							}
							else
							{
								endIndex = (j*999);
							}
						 }
						outputfile = addHireIdList(GET_SERVICE_DATE_REQUEST_FILE, columnList, ruleName, startIndex, endIndex, "Employee_ID");
						is = new FileInputStream(outputfile);
					    soapMessage = MessageFactory.newInstance().createMessage(null, is);
					    soapPart = soapMessage.getSOAPPart();
					    envelope = soapPart.getEnvelope();
						envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						{
								envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
								createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						}
						soapMessage.saveChanges();
				        out = new ByteArrayOutputStream();
				        soapMessage.writeTo(out);
				        strMsg = new String(out.toByteArray());
				        
				        soapConnectionFactory = SOAPConnectionFactory.newInstance();
						soapConnection = soapConnectionFactory.createConnection();
				        soapResponse = soapConnection.call(soapMessage, sourceUrl);
				        out = new ByteArrayOutputStream();
				        soapResponse.writeTo(out);
				        strMsg = new String(out.toByteArray(), "utf-8");
				        soapResp = XmlParserManager.parseXml(strMsg);
					        
						ReportElement responseData = soapResp.getChild("env:Body")
									.getChild("wd:Get_Workers_Response")
									.getChild("wd:Response_Data");
						 
						 List<ReportElement> applicantData = responseData.getChildren("wd:Worker");
							
						 for(ReportElement reportElement : applicantData)
						 {
							 ReportElement element1 = reportElement.getChild("wd:Worker_Data");
				        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
				        		System.out.println("employeeId--"+ employeeId);										 										
								
				        		ReportElement workerStatusData = reportElement.getChild("wd:Worker_Data")
			 							.getChild("wd:Employment_Data")
			 							.getChild("wd:Worker_Status_Data");
							 
							 if(workerStatusData != null)
							 {
								 originalHireDate = workerStatusData.getChild("wd:Original_Hire_Date") != null?workerStatusData.getChild("wd:Original_Hire_Date").getValue().trim():"";
								 if(!originalHireDate.isEmpty())
								 {
									 originalHireDate = originalHireDate.substring(0, 10);
								 }
								 seniorityDate = workerStatusData.getChild("wd:Seniority_Date") != null?workerStatusData.getChild("wd:Seniority_Date").getValue().trim():"";
								 if(!seniorityDate.isEmpty())
								 {
									 seniorityDate = seniorityDate.substring(0, 10);
								 }
								 contServiceDate = workerStatusData.getChild("wd:Continuous_Service_Date") != null?workerStatusData.getChild("wd:Continuous_Service_Date").getValue().trim():"";
								 if(!contServiceDate.isEmpty())
								 {
									 contServiceDate = contServiceDate.substring(0, 10);
								 }
								 benefitsServiceDate = workerStatusData.getChild("wd:Benefits_Service_Date") != null?workerStatusData.getChild("wd:Benefits_Service_Date").getValue().trim():"";
								 if(!benefitsServiceDate.isEmpty())
								 {
									 benefitsServiceDate = benefitsServiceDate.substring(0, 10);
								 }							  
								 expectedRetirementDate = workerStatusData.getChild("wd:Expected_Retirement_Date") != null?workerStatusData.getChild("wd:Expected_Retirement_Date").getValue().trim():"";
								 if(!expectedRetirementDate.isEmpty())
								 {
									 expectedRetirementDate = expectedRetirementDate.substring(0, 10);
								 }	
								 retirementElegibilityDate = workerStatusData.getChild("wd:Retirement_Eligibility_Date") != null?workerStatusData.getChild("wd:Retirement_Eligibility_Date").getValue().trim():"";
								 if(!retirementElegibilityDate.isEmpty())
								 {
									 retirementElegibilityDate = retirementElegibilityDate.substring(0, 10);
								 }	
								 endEmploymentDate = workerStatusData.getChild("wd:End_Employment_Date") != null?workerStatusData.getChild("wd:End_Employment_Date").getValue().trim():"";
								 if(!endEmploymentDate.isEmpty())
								 {
									 endEmploymentDate = endEmploymentDate.substring(0, 10);
								 }	
								 severanceDate = workerStatusData.getChild("wd:Severance_Date") != null?workerStatusData.getChild("wd:Severance_Date").getValue().trim():""; 
								 if(!severanceDate.isEmpty())
								 {
									 severanceDate = severanceDate.substring(0, 10);
								 }	
								 companyServiceDate = workerStatusData.getChild("wd:Company_Service_Date") != null?workerStatusData.getChild("wd:Company_Service_Date").getValue().trim():"";
								 if(!companyServiceDate.isEmpty())
								 {
									 companyServiceDate = companyServiceDate.substring(0, 10);
								 }	
								 timeOffServiceDate = workerStatusData.getChild("wd:Time_Off_Service_Date") != null?workerStatusData.getChild("wd:Time_Off_Service_Date").getValue().trim():"";
								 if(!timeOffServiceDate.isEmpty())
								 {
									 timeOffServiceDate = timeOffServiceDate.substring(0, 10);
								 }	
								 vestingDate = workerStatusData.getChild("wd:Vesting_Date") != null?workerStatusData.getChild("wd:Vesting_Date").getValue().trim():"";
								 if(!vestingDate.isEmpty())
								 {
									 vestingDate = vestingDate.substring(0, 10);
								 }
								 workforceEnteredDate = workerStatusData.getChild("wd:Date_Entered_Workforce") != null?workerStatusData.getChild("wd:Date_Entered_Workforce").getValue().trim():"";
								 if(!workforceEnteredDate.isEmpty())
								 {
									 workforceEnteredDate = workforceEnteredDate.substring(0, 10);
								 }
							 }
							 
							 ReportElement workerContractData = reportElement.getChild("wd:Worker_Data")
			 							.getChild("wd:Employment_Data")
			 							.getChild("wd:Worker_Contract_Data");
							 
							 if(workerContractData != null)
							 {
								 contractEndDate = workerContractData.getChild("wd:Contract_End_Date") != null?workerContractData.getChild("wd:Contract_End_Date").getValue().trim():""; 
								 if(!contractEndDate.isEmpty())
								 {
									 contractEndDate = contractEndDate.substring(0, 10);
								 }								 
							 }
							 else
							 {
								 contractEndDate = "";
							 }
									 								 
								 
							 headingFromWD = "Employee_ID,Original_Hire_Date,Contenuous_Service_Date,Seniority_Date,Benefit_Service_Date,Expected_Retirement_Date,Retirement_Eligibility_Date,"
							 				+ "End_Employment_Date,Severance_Date,Company_Service_Date,TimeOff_Service_Date,Vesting_Date,Workforce_Entered_Date,Contract_End_Date";
							 
							 headerStr = employeeId + "," + originalHireDate + "," + contServiceDate + "," + seniorityDate + "," + benefitsServiceDate + "," + expectedRetirementDate + "," +
									 retirementElegibilityDate + "," + endEmploymentDate + "," + severanceDate + "," + companyServiceDate + "," + timeOffServiceDate + "," + vestingDate + "," +
									 workforceEnteredDate + "," + contractEndDate;
							 
							 if(finalStr.equals(""))
							 {
								 finalStr = headingFromWD + "\n" + headerStr;
							 }
							 else
							 {
								 finalStr = finalStr + "\n" + headerStr;
							 }
								 							 							 
						 }						 
					 }				 
					 				     
				     System.out.println(finalStr);
				     targetContent = finalStr.toString().getBytes();
					 
					 headingWd = selectColumnMapping(loadCycle, ruleName, "Employee_ID");
					 complete = true;
				 }
			 }
			 
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}

		return headingWd;
	}
	
	private JSONArray createCSVFromWDSupervisoryOrganization(Tenant tenant, InputStream is,
			SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd, String loadCycle,
			String ruleName, String client) {

		targetContent = null;
		headingFromWD = "";
		try 
		{
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_SUP_ORG_REQUEST_FILE = requestfile.getAbsolutePath();				 
				 String outputfile = addCostCenterIdList(GET_SUP_ORG_REQUEST_FILE, columnList, ruleName, startIndex, columnList.size(), "Organization_Reference_ID");

				 is = new FileInputStream(outputfile);
			     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
			     SOAPPart soapPart = soapMessage.getSOAPPart();
			     SOAPEnvelope envelope = soapPart.getEnvelope();
				 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
				 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
				 {
					  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
					  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
				 }
				 soapMessage.saveChanges();
			     ByteArrayOutputStream out = new ByteArrayOutputStream();
			     soapMessage.writeTo(out);
			     String strMsg = new String(out.toByteArray());	
			     
			     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
			     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
				 soapConnection = soapConnectionFactory.createConnection();
				 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
				 out = new ByteArrayOutputStream();
				 soapResponse.writeTo(out);
				 strMsg = new String(out.toByteArray(), "utf-8");
	
				 {
					 ReportElement soapResp = XmlParserManager.parseXml(strMsg);				 
					 ReportElement pageData = soapResp.getChild("env:Body")
								.getChild("wd:Get_Organizations_Response")
								.getChild("wd:Response_Results");
					 
					 String totalNoOfPages = pageData.getChild("wd:Total_Pages").getValue().trim();
					 String totalResults = pageData.getChild("wd:Total_Results").getValue().trim();
					 int totalResult = Integer.parseInt(totalResults);
					 System.out.println("totalNoOfPages-"+totalNoOfPages);
					 System.out.println("totalResult-"+totalResult);
					 wdCount = totalResult;
					 
					 String finalStr = "";
					 String headerStr = "";
					 String orgRefId = "";
					 String supOrgCode = "";
					 String supOrgName = "";
					 String locationId = "";
					 String staffingModel = "";
					 String subType = "";
					 String superiorSupOrgId = "";
					 String superiorSupOrgName = "";
					 String includeManagerInName = "";
					 String includeOrgCodeInName = "";
					 
					 Map<String,String> subTypeMap = null;
					 Map<String,String> locationMap = null;
					 Map<String,String> superiorIdMap = null;
					 
					 for (int j = 1; j <= Integer.parseInt(totalNoOfPages); j++) 
					 {					 
						 if(j == 1)
						 {
							startIndex = 0;
							if(999 > totalResult)
							{
								endIndex = totalResult;
							}
							else
							{
								endIndex = j*999;
							}
						 }
						 else
						 {
							startIndex = endIndex;
							if(j*999 > totalResult)
							{
								endIndex = totalResult;
							}
							else
							{
								endIndex = (j*999);
							}
						 }
						 outputfile = addCostCenterIdList(GET_SUP_ORG_REQUEST_FILE, columnList, ruleName, startIndex, endIndex, "Organization_Reference_ID");
						 is = new FileInputStream(outputfile);
					     soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     soapPart = soapMessage.getSOAPPart();
					     envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
								envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
								createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
				         out = new ByteArrayOutputStream();
				         soapMessage.writeTo(out);
				         strMsg = new String(out.toByteArray());
				        
				         soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
				         soapResponse = soapConnection.call(soapMessage, sourceUrl);
				         out = new ByteArrayOutputStream();
				         soapResponse.writeTo(out);
				         strMsg = new String(out.toByteArray(), "utf-8");
				        
				         soapResp = XmlParserManager.parseXml(strMsg);
					 
						 ReportElement responseData = soapResp.getChild("env:Body")
									.getChild("wd:Get_Organizations_Response")
									.getChild("wd:Response_Data");
						 
						 List<ReportElement> orgData = responseData.getChildren("wd:Organization");
							
						 for(ReportElement reportElement : orgData)
						 {
							 ReportElement element1 = reportElement.getChild("wd:Organization_Data");
							 if(element1 != null)
							 {
								 orgRefId = element1.getChild("wd:Reference_ID") != null?element1.getChild("wd:Reference_ID").getValue().trim():"";
								 supOrgCode = element1.getChild("wd:Organization_Code") != null?element1.getChild("wd:Organization_Code").getValue().trim():"";
								 supOrgName = element1.getChild("wd:Name") != null?element1.getChild("wd:Name").getValue().trim():"";
								 if(supOrgName.contains(","))
								 {
									 supOrgName =  supOrgName.replace(",", "|");
								 }
								 includeManagerInName = element1.getChild("wd:Include_Manager_in_Name") != null?element1.getChild("wd:Include_Manager_in_Name").getValue().trim():"";
								 if(includeManagerInName.equals("1"))
								 {
									 includeManagerInName = "Yes";
								 }
								 else if(includeManagerInName.equals("0"))
								 {
									 includeManagerInName = "No";
								 }
								 includeOrgCodeInName = element1.getChild("wd:Include_Organization_Code_in_Name") != null?element1.getChild("wd:Include_Organization_Code_in_Name").getValue().trim():"";
								 if(includeOrgCodeInName.equals("1"))
								 {
									 includeOrgCodeInName = "Yes";
								 }
								 else if(includeOrgCodeInName.equals("0"))
								 {
									 includeOrgCodeInName = "No";
								 }
								 
								 
								 ReportElement element2 = element1.getChild("wd:Organization_Subtype_Reference");
								 if(element2 != null)
								 {
									 List<ReportElement> subTypeData = element2.getChildren("wd:ID");					 
									 for(ReportElement subTypeElement:subTypeData)
									 {
										 subTypeMap = subTypeElement.getAllAttributes();
										 if(subTypeMap.get("wd:type").equals("Organization_Subtype_ID"))
										 {
											 subType = subTypeElement.getValue().trim();
										 }
									 }
								 }
								 else
								 {
									 subType = "";
								 }
								 
								 ReportElement element4 = element1.getChild("wd:Supervisory_Data");
								 if(element4 != null)
								 {
									 staffingModel = element4.getChild("wd:Staffing_Model") != null?element4.getChild("wd:Staffing_Model").getValue().trim():"";
									 
									 ReportElement element5 = element4.getChild("wd:Location_Reference");
									 if(element5 != null)
									 {
										 List<ReportElement> locationData = element5.getChildren("wd:ID");					 
										 for(ReportElement locationElement:locationData)
										 {
											 locationMap = locationElement.getAllAttributes();
											 if(locationMap.get("wd:type").equals("Location_ID"))
											 {
												 locationId = locationElement.getValue().trim();
											 }
										 }
									 }
									 else
									 {
										 locationId = "";
									 }
								 }
								 
								 ReportElement element6 = element1.getChild("wd:Hierarchy_Data");
								 if(element6 != null)
								 {
									 ReportElement element7 = element6.getChild("wd:Superior_Organization_Reference");
									 if(element7 != null)
									 {
										 List<ReportElement> supIdData = element7.getChildren("wd:ID");					 
										 for(ReportElement supIdElement:supIdData)
										 {
											 superiorIdMap = supIdElement.getAllAttributes();
											 if(superiorIdMap.get("wd:type").equals("Organization_Reference_ID"))
											 {
												 superiorSupOrgId = supIdElement.getValue().trim();
											 }
										 }
									 }
									 else
									 {
										 superiorSupOrgId = "";
									 }
								 }
								 else
								 {
									 superiorSupOrgId = "";
								 }
								 
								 /*if(superiorSupOrgId.length() > 0)
								 {
									 superiorSupOrgName = getSuperiorHierarchyName(GET_SUP_ORG_REQUEST_FILE, superiorSupOrgId, "Organization_Reference_ID");
								 }*/
								 
								 headingFromWD = "Organization_Reference_ID,Supervisory_Organization_Code,Supervisory_Organization_Name,Sup_Org_Location_ID,Superior_Sup_Org_ID,Superior_Sup_Org_Name,Staffing_Model,Sub_Type,Include_Manager_in_Name,Include_Organization_Code_in_Name";
								 if(orgRefId.length() > 0)
								 {
									 headerStr = orgRefId + "," + supOrgCode + "," + supOrgName + "," + locationId + "," + superiorSupOrgId + "," + superiorSupOrgName + "," + staffingModel + "," + subType + "," + includeManagerInName + "," + includeOrgCodeInName;
									 if(finalStr.equals(""))
									 {
										 finalStr = headingFromWD + "\n" + headerStr;
									 }
									 else
									 {
										 finalStr = finalStr + "\n" + headerStr;
									 }
								 }							 							 
							 }					 
						 }
					 }
					 
					 System.out.println(finalStr);
					 targetContent = finalStr.toString().getBytes();
					 
					 headingWd = selectColumnMapping(loadCycle, ruleName, "Organization_Reference_ID");
					 complete = true;
				 }
			 }
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		return headingWd;
	}
	
	private JSONArray createCSVFromWDOrganizationRoles(Tenant tenant, InputStream is, SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd, String loadCycle,
			String ruleName, String client) {

		targetContent = null;
		headingFromWD = "";
		try 
		{
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_ASSIGN_ORG_ROLE_REQUEST_FILE = requestfile.getAbsolutePath();
				 String outputfile = addCostCenterIdList(GET_ASSIGN_ORG_ROLE_REQUEST_FILE, columnList, ruleName, startIndex, columnList.size(), "Organization_Reference_ID");

				 is = new FileInputStream(outputfile);
			     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
			     SOAPPart soapPart = soapMessage.getSOAPPart();
			     SOAPEnvelope envelope = soapPart.getEnvelope();
				 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
				 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
				 {
					  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
					  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
				 }
				 soapMessage.saveChanges();
			     ByteArrayOutputStream out = new ByteArrayOutputStream();
			     soapMessage.writeTo(out);
			     String strMsg = new String(out.toByteArray());	
			     
			     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
			     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
				 soapConnection = soapConnectionFactory.createConnection();
				 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
				 out = new ByteArrayOutputStream();
				 soapResponse.writeTo(out);
				 strMsg = new String(out.toByteArray(), "utf-8");
				 
				 //if(faultStr == null)
				 {
					 ReportElement soapResp = XmlParserManager.parseXml(strMsg);				 
					 ReportElement pageData = soapResp.getChild("env:Body")
								.getChild("wd:Get_Organizations_Response")
								.getChild("wd:Response_Results");
					 
					 String totalNoOfPages = pageData.getChild("wd:Total_Pages").getValue().trim();
					 String totalResults = pageData.getChild("wd:Total_Results").getValue().trim();
					 int totalResult = Integer.parseInt(totalResults);
					 System.out.println("totalNoOfPages-"+totalNoOfPages);
					 System.out.println("totalResult-"+totalResult);
					 wdCount = totalResult;
					 
					 String finalStr = "";
					 String headerStr = "";
					 String orgType = "";
					 String orgRef = "";
					 String managerRole = "";
					 String managerRoleArr = "";
					 
					 Map<String,String> managerMap = null;
					 Map<String,String> orgTypeMap = null;
					 Map<String,String> orgMap = null;
					 
					 for (int j = 1; j <= Integer.parseInt(totalNoOfPages); j++) 
					 {					 
						 if(j == 1)
						 {
							startIndex = 0;
							if(999 > totalResult)
							{
								endIndex = totalResult;
							}
							else
							{
								endIndex = j*999;
							}
						 }
						 else
						 {
							startIndex = endIndex;
							if(j*999 > totalResult)
							{
								endIndex = totalResult;
							}
							else
							{
								endIndex = (j*999);
							}
						 }
						 outputfile = addCostCenterIdList(GET_ASSIGN_ORG_ROLE_REQUEST_FILE, columnList, ruleName, startIndex, endIndex, "Organization_Reference_ID");
						 is = new FileInputStream(outputfile);
					     soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     soapPart = soapMessage.getSOAPPart();
					     envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
								envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
								createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
				         out = new ByteArrayOutputStream();
				         soapMessage.writeTo(out);
				         strMsg = new String(out.toByteArray());
				        
				         soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
				         soapResponse = soapConnection.call(soapMessage, sourceUrl);
				         out = new ByteArrayOutputStream();
				         soapResponse.writeTo(out);
				         strMsg = new String(out.toByteArray(), "utf-8");
				        
				         soapResp = XmlParserManager.parseXml(strMsg);
					 
						 ReportElement responseData = soapResp.getChild("env:Body")
									.getChild("wd:Get_Organizations_Response")
									.getChild("wd:Response_Data");
						 
						 List<ReportElement> orgData = responseData.getChildren("wd:Organization");
							
						 for(ReportElement reportElement : orgData)
						 {
							 ReportElement orgReference = reportElement.getChild("wd:Organization_Reference");
							 if(orgReference != null)
							 {
								 List<ReportElement> orgRefData = orgReference.getChildren("wd:ID");					 
								 for(ReportElement orgReferenceElement:orgRefData)
								 {
									 orgMap = orgReferenceElement.getAllAttributes();
									 if(orgMap.get("wd:type").equals("Organization_Reference_ID"))
									 {
										 orgRef = orgReferenceElement.getValue().trim();
									 }
								 }
							 }
							 
							 ReportElement organizationData = reportElement.getChild("wd:Organization_Data");
							 if(organizationData != null)
							 {								 
								 ReportElement orgTypeRef = organizationData.getChild("wd:Organization_Type_Reference");
								 if(orgTypeRef != null)
								 {
									 List<ReportElement> orgTypeData = orgTypeRef.getChildren("wd:ID");					 
									 for(ReportElement orgTypeElement:orgTypeData)
									 {
										 orgTypeMap = orgTypeElement.getAllAttributes();
										 if(orgTypeMap.get("wd:type").equals("Organization_Type_ID"))
										 {
											 orgType = orgTypeElement.getValue().trim();
										 }
									 }
								 }
								 
								 if(orgType.equalsIgnoreCase("SUPERVISORY"))
								 {
									 ReportElement roleData = organizationData.getChild("wd:Roles_Data");
									 if(roleData != null)
									 {
										 List<ReportElement> orgRoleList = roleData.getChildren("wd:Organization_Role_Data");
										 if(orgRoleList != null && orgRoleList.size() > 0)
										 {
											 for(ReportElement orgRoleElement : orgRoleList)
											 {
												 ReportElement roleRef = orgRoleElement.getChild("wd:Role_Reference");
												 if(roleRef != null)
												 {
													 List<ReportElement> orgRoleData = roleRef.getChildren("wd:ID");								 
													 for(ReportElement roleElement:orgRoleData)
													 {
														 managerMap = roleElement.getAllAttributes();
														 if(managerMap.get("wd:type").equals("Organization_Role_ID"))
														 {
															 //if(roleElement.getValue().trim().equalsIgnoreCase("Manager"))
															 //{
																 managerRole = roleElement.getValue().trim();
																 if(managerRoleArr.equals(""))
																 {
																	 managerRoleArr = managerRole;
																 }
																 else
																 {
																	 if(!managerRole.isEmpty())
																	 {
																		 managerRoleArr = managerRoleArr + "~" + managerRole;
																	 }
																 }
															 //}
														 }
													 }
												 }
											 }
										 }
									 }
									 
									 headingFromWD = "Organization_Reference_ID,Organization_Role_ID";
									 headerStr = orgRef + "," + managerRoleArr;
									 
									 if(finalStr.equals(""))
									 {
										 finalStr = headingFromWD + "\n" + headerStr;
									 }
									 else
									 {
										 finalStr = finalStr + "\n" + headerStr;
									 }
									 			
								 }								 								 				 							 
							 }					 
						 }
					 }
					 
					 System.out.println(finalStr);
					 targetContent = finalStr.toString().getBytes();
					 
					 headingWd = selectColumnMapping(loadCycle, ruleName, "Organization_Reference_ID");
					 complete = true;
				 }
			 }
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		return headingWd;
	}
	
	private JSONArray createCSVFromWDCostCenter(Tenant tenant, InputStream is, SOAPConnection soapConnection,
			int startIndex, int endIndex, JSONArray headingWd, String loadCycle, String ruleName, String client) {

		targetContent = null;
		headingFromWD = "";
		try 
		{
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_COST_CENTER_REQUEST_FILE = requestfile.getAbsolutePath();
				 String outputfile = addCostCenterIdList(GET_COST_CENTER_REQUEST_FILE, columnList, ruleName, startIndex, columnList.size(), "Organization_Reference_ID");

				 is = new FileInputStream(outputfile);
			     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
			     SOAPPart soapPart = soapMessage.getSOAPPart();
			     SOAPEnvelope envelope = soapPart.getEnvelope();
				 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
				 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
				 {
					  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
					  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
				 }
				 soapMessage.saveChanges();
			     ByteArrayOutputStream out = new ByteArrayOutputStream();
			     soapMessage.writeTo(out);
			     String strMsg = new String(out.toByteArray());	
			     
			     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
			     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
				 soapConnection = soapConnectionFactory.createConnection();
				 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
				 out = new ByteArrayOutputStream();
				 soapResponse.writeTo(out);
				 strMsg = new String(out.toByteArray(), "utf-8");
				 
				 {
					 ReportElement soapResp = XmlParserManager.parseXml(strMsg);				 
					 ReportElement pageData = soapResp.getChild("env:Body")
								.getChild("wd:Get_Organizations_Response")
								.getChild("wd:Response_Results");
					 
					 String totalNoOfPages = pageData.getChild("wd:Total_Pages").getValue().trim();
					 String totalResults = pageData.getChild("wd:Total_Results").getValue().trim();
					 int totalResult = Integer.parseInt(totalResults);
					 System.out.println("totalNoOfPages-"+totalNoOfPages);
					 System.out.println("totalResult-"+totalResult);
					 wdCount = totalResult;
					 
					 String finalStr = "";
					 String headerStr = "";
					 String costCenterId = "";
					 String costCenterName = "";
					 String costCenterCode = "";
					 String includeOrgCode = "";
					 String costCenterSubType = "";
					 
					 Map<String,String> subTypeMap = null;
					 
					 for (int j = 1; j <= Integer.parseInt(totalNoOfPages); j++) 
					 {					 
						 if(j == 1)
						 {
							startIndex = 0;
							if(999 > totalResult)
							{
								endIndex = totalResult;
							}
							else
							{
								endIndex = j*999;
							}
						 }
						 else
						 {
							startIndex = endIndex;
							if(j*1000 > totalResult)
							{
								endIndex = totalResult;
							}
							else
							{
								endIndex = (j*999);
							}
						 }
						 outputfile = addCostCenterIdList(GET_COST_CENTER_REQUEST_FILE, columnList, ruleName, startIndex, endIndex, "Organization_Reference_ID");
						 is = new FileInputStream(outputfile);
					     soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     soapPart = soapMessage.getSOAPPart();
					     envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
								envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
								createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
				         out = new ByteArrayOutputStream();
				         soapMessage.writeTo(out);
				         strMsg = new String(out.toByteArray());
				        
				         soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
				         soapResponse = soapConnection.call(soapMessage, sourceUrl);
				         out = new ByteArrayOutputStream();
				         soapResponse.writeTo(out);
				         strMsg = new String(out.toByteArray(), "utf-8");
				        
				         soapResp = XmlParserManager.parseXml(strMsg);
					 
						 ReportElement responseData = soapResp.getChild("env:Body")
									.getChild("wd:Get_Organizations_Response")
									.getChild("wd:Response_Data");
						 
						 List<ReportElement> orgData = responseData.getChildren("wd:Organization");
							
						 for(ReportElement reportElement : orgData)
						 {
							 ReportElement element1 = reportElement.getChild("wd:Organization_Data");
							 if(element1 != null)
							 {
								 costCenterId = element1.getChild("wd:Reference_ID") != null?element1.getChild("wd:Reference_ID").getValue().trim():"";
								 costCenterName = element1.getChild("wd:Name") != null?element1.getChild("wd:Name").getValue().trim():"";
								 if(costCenterName.contains(","))
								 {
									 costCenterName =  costCenterName.replace(",", "|");
								 }
								 costCenterCode = element1.getChild("wd:Organization_Code") != null?element1.getChild("wd:Organization_Code").getValue().trim():"";
								 includeOrgCode = element1.getChild("wd:Include_Organization_Code_in_Name") != null?element1.getChild("wd:Include_Organization_Code_in_Name").getValue().trim():"";
								 if(includeOrgCode.equals("1"))
								 {
									 includeOrgCode = "TRUE";
								 }
								 else if(includeOrgCode.equals("0"))
								 {
									 includeOrgCode = "FALSE";
								 }
								 
								 ReportElement subTypeRef = element1.getChild("wd:Organization_Subtype_Reference");
								 if(subTypeRef != null)
								 {
									 List<ReportElement> subTypeData = subTypeRef.getChildren("wd:ID");								 
									 for(ReportElement subTypeElement:subTypeData)
									 {
										 subTypeMap = subTypeElement.getAllAttributes();
										 if(subTypeMap.get("wd:type").equals("Organization_Subtype_ID"))
										 {
											 costCenterSubType = subTypeElement.getValue().trim();																 											 
										 }
									 }
								 }
								 
								 headingFromWD = "Organization_Reference_ID,Cost_Center_Name,Cost_Center_Code,Include_Organization_Code_in_Name,Sub_Type";							 
								 headerStr = costCenterId + "," + costCenterName + "," + costCenterCode + "," + includeOrgCode + "," + costCenterSubType;
								 
								 if(finalStr.equals(""))
								 {
									 finalStr = headingFromWD + "\n" + headerStr;
								 }
								 else
								 {
									 finalStr = finalStr + "\n" + headerStr;
								 }
							 }					 
						 }
					 }
					 
					 System.out.println(finalStr);
					 targetContent = finalStr.toString().getBytes();
					 
					 headingWd = selectColumnMapping(loadCycle, ruleName, "Organization_Reference_ID");
					 complete = true;
				 }
			 }
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		return headingWd;
	}
	
	private JSONArray createCSVFromWDCompany(Tenant tenant, InputStream is, SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd,
			String loadCycle, String ruleName, String client) {
		
		targetContent = null;
		headingFromWD = "";
		try 
		{
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_COMPANY_REQUEST_FILE = requestfile.getAbsolutePath();
				 String outputfile = addCostCenterIdList(GET_COMPANY_REQUEST_FILE, columnList, ruleName, startIndex, columnList.size(), "Organization_Reference_ID");

				 is = new FileInputStream(outputfile);
			     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
			     SOAPPart soapPart = soapMessage.getSOAPPart();
			     SOAPEnvelope envelope = soapPart.getEnvelope();
				 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
				 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
				 {
					  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
					  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
				 }
				 soapMessage.saveChanges();
			     ByteArrayOutputStream out = new ByteArrayOutputStream();
			     soapMessage.writeTo(out);
			     String strMsg = new String(out.toByteArray());	
			     
			     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
			     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
				 soapConnection = soapConnectionFactory.createConnection();
				 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
				 out = new ByteArrayOutputStream();
				 soapResponse.writeTo(out);
				 strMsg = new String(out.toByteArray(), "utf-8");
				 
				 {
					 ReportElement soapResp = XmlParserManager.parseXml(strMsg);				 
					 ReportElement pageData = soapResp.getChild("env:Body")
								.getChild("wd:Get_Organizations_Response")
								.getChild("wd:Response_Results");
					 
					 String totalNoOfPages = pageData.getChild("wd:Total_Pages").getValue().trim();
					 String totalResults = pageData.getChild("wd:Total_Results").getValue().trim();
					 int totalResult = Integer.parseInt(totalResults);
					 System.out.println("totalNoOfPages-"+totalNoOfPages);
					 System.out.println("totalResult-"+totalResult);
					 wdCount = totalResult;
					 
					 String finalStr = "";
					 String headerStr = "";
					 String companyId = "";
					 String companyName = "";
					 String companyCode = "";
					 String includeOrgCode = "";
					 String companySubType = "";
					 
					 Map<String,String> subTypeMap = null;
					 
					 for (int j = 1; j <= Integer.parseInt(totalNoOfPages); j++) 
					 {					 
						 if(j == 1)
						 {
							startIndex = 0;
							if(999 > totalResult)
							{
								endIndex = totalResult;
							}
							else
							{
								endIndex = j*999;
							}
						 }
						 else
						 {
							startIndex = endIndex;
							if(j*1000 > totalResult)
							{
								endIndex = totalResult;
							}
							else
							{
								endIndex = (j*999);
							}
						 }
						 outputfile = addCostCenterIdList(GET_COMPANY_REQUEST_FILE, columnList, ruleName, startIndex, endIndex, "Organization_Reference_ID");
						 is = new FileInputStream(outputfile);
					     soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     soapPart = soapMessage.getSOAPPart();
					     envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
								envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
								createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
				         out = new ByteArrayOutputStream();
				         soapMessage.writeTo(out);
				         strMsg = new String(out.toByteArray());
				        
				         soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
				         soapResponse = soapConnection.call(soapMessage, sourceUrl);
				         out = new ByteArrayOutputStream();
				         soapResponse.writeTo(out);
				         strMsg = new String(out.toByteArray(), "utf-8");
				        
				         soapResp = XmlParserManager.parseXml(strMsg);
					 
						 ReportElement responseData = soapResp.getChild("env:Body")
									.getChild("wd:Get_Organizations_Response")
									.getChild("wd:Response_Data");
						 
						 List<ReportElement> orgData = responseData.getChildren("wd:Organization");
							
						 for(ReportElement reportElement : orgData)
						 {
							 ReportElement element1 = reportElement.getChild("wd:Organization_Data");
							 if(element1 != null)
							 {
								 companyId = element1.getChild("wd:Reference_ID") != null?element1.getChild("wd:Reference_ID").getValue().trim():"";
								 companyName = element1.getChild("wd:Name") != null?element1.getChild("wd:Name").getValue().trim():"";
								 if(companyName.contains(","))
								 {
									 companyName =  companyName.replace(",", "|");
								 }
								 companyCode = element1.getChild("wd:Organization_Code") != null?element1.getChild("wd:Organization_Code").getValue().trim():"";
								 includeOrgCode = element1.getChild("wd:Include_Organization_Code_in_Name") != null?element1.getChild("wd:Include_Organization_Code_in_Name").getValue().trim():"";
								 if(includeOrgCode.equals("1"))
								 {
									 includeOrgCode = "true";
								 }
								 else if(includeOrgCode.equals("0"))
								 {
									 includeOrgCode = "false";
								 }
								 
								 ReportElement subTypeRef = element1.getChild("wd:Organization_Subtype_Reference");
								 if(subTypeRef != null)
								 {
									 List<ReportElement> subTypeData = subTypeRef.getChildren("wd:ID");								 
									 for(ReportElement subTypeElement:subTypeData)
									 {
										 subTypeMap = subTypeElement.getAllAttributes();
										 if(subTypeMap.get("wd:type").equals("Organization_Subtype_ID"))
										 {
											 companySubType = subTypeElement.getValue().trim();																 											 
										 }
									 }
								 }
								 
								 headingFromWD = "Organization_Reference_ID,Company_Name,Company_Code,Include_Organization_Code_in_Name,Sub_Type";							 
								 headerStr = companyId + "," + companyName + "," + companyCode + "," + includeOrgCode + "," + companySubType;
								 
								 if(finalStr.equals(""))
								 {
									 finalStr = headingFromWD + "\n" + headerStr;
								 }
								 else
								 {
									 finalStr = finalStr + "\n" + headerStr;
								 }
							 }					 
						 }
					 }
					 
					 System.out.println(finalStr);
					 targetContent = finalStr.toString().getBytes();
					 
					 headingWd = selectColumnMapping(loadCycle, ruleName, "Organization_Reference_ID");
					 complete = true;
				 }
			 }
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		return headingWd;
	}
	
	private JSONArray createCSVFromWDCostCenterHierarchy(Tenant tenant, InputStream is, SOAPConnection soapConnection,
			int startIndex, int endIndex, JSONArray headingWd, String loadCycle, String ruleName, String client) {

		targetContent = null;
		headingFromWD = "";
		try 
		{
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_COST_CENTER_HIERARCHY_REQUEST_FILE = requestfile.getAbsolutePath();
				 String outputfile = addCostCenterIdList(GET_COST_CENTER_HIERARCHY_REQUEST_FILE, columnList, ruleName, startIndex, columnList.size(), "Organization_Reference_ID");

				 is = new FileInputStream(outputfile);
			     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
			     SOAPPart soapPart = soapMessage.getSOAPPart();
			     SOAPEnvelope envelope = soapPart.getEnvelope();
				 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
				 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
				 {
					  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
					  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
				 }
				 soapMessage.saveChanges();
			     ByteArrayOutputStream out = new ByteArrayOutputStream();
			     soapMessage.writeTo(out);
			     String strMsg = new String(out.toByteArray());	
			     
			     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
			     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
				 soapConnection = soapConnectionFactory.createConnection();
				 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
				 out = new ByteArrayOutputStream();
				 soapResponse.writeTo(out);
				 strMsg = new String(out.toByteArray(), "utf-8");
				 
				 {
					 ReportElement soapResp = XmlParserManager.parseXml(strMsg);				 
					 ReportElement pageData = soapResp.getChild("env:Body")
								.getChild("wd:Get_Organizations_Response")
								.getChild("wd:Response_Results");
					 
					 String totalNoOfPages = pageData.getChild("wd:Total_Pages").getValue().trim();
					 String totalResults = pageData.getChild("wd:Total_Results").getValue().trim();
					 int totalResult = Integer.parseInt(totalResults);
					 System.out.println("totalNoOfPages-"+totalNoOfPages);
					 System.out.println("totalResult-"+totalResult);
					 wdCount = totalResult;
					 
					 String finalStr = "";
					 String headerStr = "";
					 String ccHierarchyId = "";
					 String ccHierarchyName = "";
					 String ccHierarchyCode = "";
					 String ccSuperiorHierarchyId = "";
					 String ccSuperiorHierarchyName = "";
					 String ccHierarchySubType = "";
					 
					 Map<String,String> ccHierarchyIdMap = null;
					 Map<String,String> subTypeMap = null;
					 
					 for (int j = 1; j <= Integer.parseInt(totalNoOfPages); j++) 
					 {					 
						 if(j == 1)
						 {
							startIndex = 0;
							if(999 > totalResult)
							{
								endIndex = totalResult;
							}
							else
							{
								endIndex = j*999;
							}
						 }
						 else
						 {
							startIndex = endIndex;
							if(j*999 > totalResult)
							{
								endIndex = totalResult;
							}
							else
							{
								endIndex = (j*999);
							}
						 }
						 outputfile = addCostCenterIdList(GET_COST_CENTER_HIERARCHY_REQUEST_FILE, columnList, ruleName, startIndex, endIndex, "Organization_Reference_ID");
						 is = new FileInputStream(outputfile);
					     soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     soapPart = soapMessage.getSOAPPart();
					     envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
								envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
								createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
				         out = new ByteArrayOutputStream();
				         soapMessage.writeTo(out);
				         strMsg = new String(out.toByteArray());
				        
				         soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
				         soapResponse = soapConnection.call(soapMessage, sourceUrl);
				         out = new ByteArrayOutputStream();
				         soapResponse.writeTo(out);
				         strMsg = new String(out.toByteArray(), "utf-8");
				        
				         soapResp = XmlParserManager.parseXml(strMsg);
					 
						 ReportElement responseData = soapResp.getChild("env:Body")
									.getChild("wd:Get_Organizations_Response")
									.getChild("wd:Response_Data");
						 
						 List<ReportElement> orgData = responseData.getChildren("wd:Organization");
							
						 for(ReportElement reportElement : orgData)
						 {
							 ReportElement element1 = reportElement.getChild("wd:Organization_Data");
							 if(element1 != null)
							 {
								 ccHierarchyId = element1.getChild("wd:Reference_ID") != null?element1.getChild("wd:Reference_ID").getValue().trim():"";
								 ccHierarchyName = element1.getChild("wd:Name") != null?element1.getChild("wd:Name").getValue().trim():"";
								 if(ccHierarchyName.contains(","))
								 {
									 ccHierarchyName =  ccHierarchyName.replace(",", "|");
								 }
								 ccHierarchyCode = element1.getChild("wd:Organization_Code") != null?element1.getChild("wd:Organization_Code").getValue().trim():"";
								 
								 ReportElement element2 = element1.getChild("wd:Hierarchy_Data");
								 if(element2 != null)
								 {
									 ReportElement element3 = element2.getChild("wd:Superior_Organization_Reference");
									 if(element3 != null)
									 {									 
										 List<ReportElement> ccIdData = element3.getChildren("wd:ID");					 
										 for(ReportElement ccIdElement:ccIdData)
										 {
											 ccHierarchyIdMap = ccIdElement.getAllAttributes();
											 if(ccHierarchyIdMap.get("wd:type").equals("Organization_Reference_ID"))
											 {
												 ccSuperiorHierarchyId = ccIdElement.getValue().trim();
												 /*ccSuperiorHierarchyName = getSuperiorHierarchyName(GET_COST_CENTER_HIERARCHY_REQUEST_FILE, ccSuperiorHierarchyId, "Organization_Reference_ID");
												 if(ccSuperiorHierarchyName.contains(","))
												 {
													 ccSuperiorHierarchyName = ccSuperiorHierarchyName.replace(",", "|");
												 }*/												
											 }
										 }										
									 }
									 else
									 {
										 ccSuperiorHierarchyId = "";
										 ccSuperiorHierarchyName = "";
									 }
								 }
								 
								 ReportElement subTypeRef = element1.getChild("wd:Organization_Subtype_Reference");
								 if(subTypeRef != null)
								 {
									 List<ReportElement> subTypeData = subTypeRef.getChildren("wd:ID");								 
									 for(ReportElement subTypeElement:subTypeData)
									 {
										 subTypeMap = subTypeElement.getAllAttributes();
										 if(subTypeMap.get("wd:type").equals("Organization_Subtype_ID"))
										 {
											 ccHierarchySubType = subTypeElement.getValue().trim();																 											 
										 }
									 }
								 }
								 
								 headingFromWD = "Organization_Reference_ID,Cost_Center_Hierarchy_Name,Cost_Center_Hierarchy_Code,Superior_Cost_Center_Hierarchy_ID,Superior_Cost_Center_Hierarchy_Name,Sub_Type";							 
								 headerStr = ccHierarchyId + "," + ccHierarchyName + "," + ccHierarchyCode + "," + ccSuperiorHierarchyId + "," + ccSuperiorHierarchyName + "," + ccHierarchySubType;
								 
								 if(finalStr.equals(""))
								 {
									 finalStr = headingFromWD + "\n" + headerStr;
								 }
								 else
								 {
									 finalStr = finalStr + "\n" + headerStr;
								 }
							 }					 
						 }
					 }
					 
					 System.out.println(finalStr);
					 targetContent = finalStr.toString().getBytes();
					 
					 headingWd = selectColumnMapping(loadCycle, ruleName, "Organization_Reference_ID");
					 complete = true;
				 }
			 }
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		return headingWd;
	}
	
	private JSONArray createCSVFromWDContactEmail(Tenant tenant, InputStream is, SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd,
			String loadCycle, String ruleName, String client) {

		 targetContent = null;
		 headingFromWD = "";
		 String checkFile = "";
		 
		 String employeeId = "";
		 String email = "";
		 String emailArr = "";
		 String usageType = "";
		 String usageTypeArr = "";
		 String primary = "";
		 String primaryArr = "";
		 String phPublic = "";
		 String phPublicArr = "";

		 String finalStr = "";
		 String headerStr = "";
		 
		 Map<String,String> usageMap = null;
		 Map<String,String> publicMap = null;
		 Map<String,String> primaryMap = null;
		 try 
		 {			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_CONTACT_EMAIL_REQUEST_FILE = requestfile.getAbsolutePath();
				 
				 if(errorList.isEmpty())
				 {
					 for(int i = 0; i<columnList.size();i++)
					 {
						 checkFile = addWorkerIdListToFindError(GET_CONTACT_EMAIL_REQUEST_FILE, columnList.get(i), ruleName, "Employee_ID");
						 is = new FileInputStream(checkFile);
					     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     SOAPPart soapPart = soapMessage.getSOAPPart();
					     SOAPEnvelope envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
							  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
					     ByteArrayOutputStream out = new ByteArrayOutputStream();
					     soapMessage.writeTo(out);
					     String strMsgChk = new String(out.toByteArray());	
					     
					     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
					     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
						 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
						 out = new ByteArrayOutputStream();
						 soapResponse.writeTo(out);
						 strMsgChk = new String(out.toByteArray(), "utf-8");
						 if(strMsgChk.contains("faultstring"))
						 {
							 errorList.add(columnList.get(i)) ;
						 }
						 else
						 {
							 ReportElement rptElement = XmlParserManager.parseXml(strMsgChk);				 
							 ReportElement pageResults = rptElement.getChild("env:Body")
										.getChild("wd:Get_Workers_Response")
										.getChild("wd:Response_Results");
							 
							 String result = pageResults.getChild("wd:Total_Results").getValue().trim();
							 if(result.equalsIgnoreCase("0"))
							 {
								 errorList.add(columnList.get(i));
							 }
							 else
							 {
								 ReportElement responseData = rptElement.getChild("env:Body")
											.getChild("wd:Get_Workers_Response")
											.getChild("wd:Response_Data");
								 
								 List<ReportElement> applicantData = responseData.getChildren("wd:Worker");
									
								 for(ReportElement reportElement : applicantData)
								 {
									 ReportElement element1 = reportElement.getChild("wd:Worker_Data");
						        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
						        		System.out.println("employeeId--"+ employeeId);
						        		
						        		ReportElement contactData = reportElement.getChild("wd:Worker_Data")
									 			.getChild("wd:Personal_Data")
									 			.getChild("wd:Contact_Data");
						        		
										if(contactData != null)
										{
							        		List<ReportElement> emailList = contactData
								 					.getChildren("wd:Email_Address_Data");
							        		
							        		if(emailList != null && emailList.size() >0)
											{
												 emailArr = "";
												 usageTypeArr = "";
												 phPublicArr = "";
												 primaryArr = "";
												 for(ReportElement emailElement:emailList)
												 {
													 email = emailElement.getChild("wd:Email_Address") != null?emailElement.getChild("wd:Email_Address").getValue().trim():"";
													 if(emailArr.equals(""))
													 {
														 emailArr = email;
													 }
													 else
													 {
														 emailArr = emailArr + "~" + email;
													 }
													 ReportElement usageData = emailElement.getChild("wd:Usage_Data");
													 if(usageData != null)
													 {
														 publicMap = usageData.getAllAttributes();
														 if(publicMap.get("wd:Public").equals("1"))
														 {
															 phPublic = "Yes";
														 }
														 else
														 {
															 phPublic = "No";
														 }
														 if(phPublicArr.equals(""))
														 {
															 phPublicArr = phPublic;
														 }
														 else
														 {
															 phPublicArr = phPublicArr + "~" + phPublic;
														 }
														 ReportElement typeDaya = usageData.getChild("wd:Type_Data");
														 if(typeDaya != null)
														 {
															 primaryMap = typeDaya.getAllAttributes();
															 if(primaryMap.get("wd:Primary").equals("1"))
															 {
																 primary = "Yes";
															 }
															 else
															 {
																 primary = "No";
															 }
															 if(primaryArr.equals(""))
															 {
																 primaryArr = primary;
															 }
															 else
															 {
																 primaryArr = primaryArr + "~" + primary;
															 }
															 ReportElement typeRef = typeDaya.getChild("wd:Type_Reference");
															 if(typeRef !=null)
															 {
																 List<ReportElement> typeRefData = typeRef.getChildren("wd:ID");					 
																 for(ReportElement wdElement:typeRefData)
																 {
																	 usageMap = wdElement.getAllAttributes();
																	 if(usageMap.get("wd:type").equals("Communication_Usage_Type_ID"))
																	 {
																		 usageType = wdElement.getValue().trim();
																		 if(usageTypeArr.equals(""))
																		 {
																			 usageTypeArr = usageType;
																		 }
																		 else
																		 {
																			 usageTypeArr = usageTypeArr + "~" + usageType;
																		 } 														
																	 }
																 }
															 }
														 }
													 }
												 }
											 }
											 else
											 {
												 errorList.add(columnList.get(i));
												 emailArr = ""; 
												 usageTypeArr = "";
												 phPublicArr = "";
												 primaryArr = "";
											 }
										}
										else
										{
											 errorList.add(columnList.get(i));
											 emailArr = ""; 
											 usageTypeArr = "";
											 phPublicArr = "";
											 primaryArr = "";
										}
										 
										 headingFromWD = "Employee_ID,Email_Address,Usage_Type,Public,Private";
										 
										 headerStr = employeeId + "," + emailArr + "," + usageTypeArr + "," + phPublicArr + "," + primaryArr;
										 
										 if(finalStr.equals(""))
										 {
											 finalStr = headingFromWD + "\n" + headerStr;
										 }
										 else
										 {
											 finalStr = finalStr + "\n" + headerStr;
										 } 
								 }
							 }
						 }
					 }
					 columnList.removeAll(errorList);
					 wdCount = columnList.size();
				 }		 					 
				 System.out.println(finalStr);
				 targetContent = finalStr.toString().getBytes();					 					 
				 headingWd = selectColumnMapping(loadCycle, ruleName, "Employee_ID");					 
				 complete = true;
			}			 			 
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}

		return headingWd;
	}
	
	private JSONArray createCSVFromWDContactPhone(Tenant tenant, InputStream is, SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd,
			String loadCycle, String ruleName, String client) {
		
		 targetContent = null;
		 headingFromWD = "";
		 String checkFile = "";
		 
		 String employeeId = "";
		 String	phoneNumber = "";
		 String	areaCode = "";
		 String	phoneDeviceType = "";
		 String	usageTypePhone = "";
		 String countryISOCode = "";
		 String extension = "";
		 String	phoneNumberArr = "";
		 String	phoneDeviceTypeArr = "";
		 String	usageTypePhoneArr = "";
		 String	areaCodeArr = "";
		 String countryISOCodeArr = "";
		 String extensionArr = "";
		 String primary = "";
		 String primaryArr = "";
		 String phPublic = "";
		 String phPublicArr = "";
		 
		 Map<String,String> phUsageMap = null;
		 Map<String,String> phDeviceMap = null;
		 Map<String,String> primaryMap = null;
		 Map<String,String> publicMap = null;

		 String finalStr = "";
		 String headerStr = "";
		 try 
		 {			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_CONTACT_PHONE_REQUEST_FILE = requestfile.getAbsolutePath();
				 
				 if(errorList.isEmpty())
				 {
					 for(int i = 0; i<columnList.size();i++)
					 {
						 checkFile = addWorkerIdListToFindError(GET_CONTACT_PHONE_REQUEST_FILE, columnList.get(i), ruleName, "Contingent_Worker_ID");
						 is = new FileInputStream(checkFile);
					     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     SOAPPart soapPart = soapMessage.getSOAPPart();
					     SOAPEnvelope envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
							  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
					     ByteArrayOutputStream out = new ByteArrayOutputStream();
					     soapMessage.writeTo(out);
					     String strMsgChk = new String(out.toByteArray());	
					     
					     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
					     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
						 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
						 out = new ByteArrayOutputStream();
						 soapResponse.writeTo(out);
						 strMsgChk = new String(out.toByteArray(), "utf-8");
						 if(strMsgChk.contains("faultstring"))
						 {
							 errorList.add(columnList.get(i)) ;
						 }
						 else
						 {
							 ReportElement rptElement = XmlParserManager.parseXml(strMsgChk);				 
							 ReportElement pageResults = rptElement.getChild("env:Body")
										.getChild("wd:Get_Workers_Response")
										.getChild("wd:Response_Results");
							 
							 String result = pageResults.getChild("wd:Total_Results").getValue().trim();
							 if(result.equalsIgnoreCase("0"))
							 {
								 errorList.add(columnList.get(i));
							 }
							 else
							 {
								 ReportElement responseData = rptElement.getChild("env:Body")
											.getChild("wd:Get_Workers_Response")
											.getChild("wd:Response_Data");
								 
								 List<ReportElement> applicantData = responseData.getChildren("wd:Worker");
									
								 for(ReportElement reportElement : applicantData)
								 {
									 ReportElement element1 = reportElement.getChild("wd:Worker_Data");
						        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
						        		System.out.println("employeeId--"+ employeeId);										 										
										
						        		ReportElement contactData = reportElement.getChild("wd:Worker_Data")
									 			.getChild("wd:Personal_Data")
									 			.getChild("wd:Contact_Data");
									 	
						        		if(contactData != null)
						        		{
							        		List<ReportElement> phoneList = contactData
								 					.getChildren("wd:Phone_Data");						
										 
											if(phoneList != null && phoneList.size() >0)
											{
												phoneNumberArr = "";
												areaCodeArr = "";
												phoneDeviceTypeArr = "";
												usageTypePhoneArr = "";
												countryISOCodeArr = "";
												extensionArr = "";
												primaryArr = "";
												phPublicArr = "";
												
												for(ReportElement phoneElement : phoneList)
												{
													phoneNumber = phoneElement.getChild("wd:Phone_Number") != null?phoneElement.getChild("wd:Phone_Number").getValue().trim():"";
													/*areaCode = phoneElement.getChild("wd:Area_Code") != null?phoneElement.getChild("wd:Area_Code").getValue().trim():"";
													if(!areaCode.isEmpty())
													{
														phoneNumber = areaCode + phoneNumber;
													}*/
													if(phoneNumberArr.equals(""))
													{
														 phoneNumberArr = phoneNumber;
													}
													else
													{
														 if(!phoneNumber.isEmpty())
														 {
															 phoneNumberArr = phoneNumberArr + "~" + phoneNumber;
														 }
													}
													
													areaCode = phoneElement.getChild("wd:Area_Code") != null?phoneElement.getChild("wd:Area_Code").getValue().trim():"";
													if(areaCodeArr.equals(""))
													{
														areaCodeArr = areaCode;
													}
													else
													{
														 if(!areaCode.isEmpty())
														 {
															 areaCodeArr = areaCodeArr + "~" + areaCode;
														 }
													}
													
													countryISOCode = phoneElement.getChild("wd:Country_ISO_Code") != null?phoneElement.getChild("wd:Country_ISO_Code").getValue().trim():"";
													if(countryISOCodeArr.equals(""))
													{
														countryISOCodeArr = countryISOCode;
													}
													else
													{
														 if(!countryISOCode.isEmpty())
														 {
															 countryISOCodeArr = countryISOCodeArr + "~" + countryISOCode;
														 }
													}
													
													extension = phoneElement.getChild("wd:Phone_Extension") != null?phoneElement.getChild("wd:Phone_Extension").getValue().trim():"";
													if(extensionArr.equals(""))
													{
														extensionArr = extension;
													}
													else
													{
														 if(!extension.isEmpty())
														 {
															 extensionArr = extensionArr + "~" + extension;
														 }
													}
													
													ReportElement phDeviceTypeData = phoneElement.getChild("wd:Phone_Device_Type_Reference");
													 if(phDeviceTypeData != null)
													 {
														 List<ReportElement> phDeviceData = phDeviceTypeData.getChildren("wd:ID");								 
														 for(ReportElement phDeviceElement:phDeviceData)
														 {
															 phDeviceMap = phDeviceElement.getAllAttributes();
															 if(phDeviceMap.get("wd:type").equals("Phone_Device_Type_ID"))
															 {
																 phoneDeviceType = phDeviceElement.getValue().trim();
																 if(phoneDeviceTypeArr.equals(""))
																 {
																	 phoneDeviceTypeArr = phoneDeviceType;
																 }
																 else
																 {
																	 phoneDeviceTypeArr = phoneDeviceTypeArr + "~" + phoneDeviceType;
																 }
															 }
														 }
													 }
													 
													 ReportElement phUsageData = phoneElement.getChild("wd:Usage_Data");
													 if(phUsageData != null)
													 {
														 publicMap = phUsageData.getAllAttributes();
														 if(publicMap.get("wd:Public").equals("1"))
														 {
															 phPublic = "Yes";
														 }
														 else
														 {
															 phPublic = "No";
														 }
														 if(phPublicArr.equals(""))
														 {
															 phPublicArr = phPublic;
														 }
														 else
														 {
															 phPublicArr = phPublicArr + "~" + phPublic;
														 }
														 ReportElement phTypeData = phUsageData.getChild("wd:Type_Data");
														 if(phTypeData != null)
														 {
															 primaryMap = phTypeData.getAllAttributes();
															 if(primaryMap.get("wd:Primary").equals("1"))
															 {
																 primary = "Yes";
															 }
															 else
															 {
																 primary = "No";
															 }
															 if(primaryArr.equals(""))
															 {
																 primaryArr = primary;
															 }
															 else
															 {
																 primaryArr = primaryArr + "~" + primary;
															 }
															 ReportElement phTypeRef = phTypeData.getChild("wd:Type_Reference");
															 if(phTypeRef != null)
															 {
																 List<ReportElement> phUsageList = phTypeRef.getChildren("wd:ID");					 
																 for(ReportElement wdElement:phUsageList)
																 {
																	 phUsageMap = wdElement.getAllAttributes();
																	 if(phUsageMap.get("wd:type").equals("Communication_Usage_Type_ID"))
																	 {
																		 usageTypePhone = wdElement.getValue().trim();
																		 if(usageTypePhoneArr.equals(""))
																		 {
																			 usageTypePhoneArr = usageTypePhone;
																		 }
																		 else
																		 {
																			 usageTypePhoneArr = usageTypePhoneArr + "~" + usageTypePhone;
																		 }
																	 }
																 }
															 }
														 }
													 }
													 
												}
											}
											else
											{
												errorList.add(columnList.get(i));
												phoneNumberArr = "";
												areaCodeArr = "";
												phoneDeviceTypeArr = "";
												usageTypePhoneArr = "";
												countryISOCodeArr = "";
												extensionArr = "";
												primaryArr = "";
												phPublicArr = "";
											}
						        		}
						        		else
						        		{
						        			errorList.add(columnList.get(i));
											phoneNumberArr = "";
											areaCodeArr = "";
											phoneDeviceTypeArr = "";
											usageTypePhoneArr = "";
											countryISOCodeArr = "";
											extensionArr = "";
											primaryArr = "";
											phPublicArr = "";
						        		}
										 
										 headingFromWD = "Contingent_Worker_ID,Phone_Number,Area_Code,Country,Extension,Phone_Device_Type,Usage_Type,Public,Primary";
										 
										 headerStr = employeeId + "," + phoneNumberArr + "," + areaCodeArr + "," + countryISOCodeArr + "," + extensionArr + "," + phoneDeviceTypeArr 
												 + "," + usageTypePhoneArr + "," + phPublicArr + "," + primaryArr;
										 
										 if(finalStr.equals(""))
										 {
											 finalStr = headingFromWD + "\n" + headerStr;
										 }
										 else
										 {
											 finalStr = finalStr + "\n" + headerStr;
										 }
								 }
							 }
						 }
					 }
					 columnList.removeAll(errorList);
					 wdCount = columnList.size();
				 }		 					 
				 System.out.println(finalStr);
				 targetContent = finalStr.toString().getBytes();					 					 
				 headingWd = selectColumnMapping(loadCycle, ruleName, "Contingent_Worker_ID");					 
				 complete = true;
			}			 			 
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}

		return headingWd;
	}
	
	private JSONArray createCSVFromWDContactInfo(Tenant tenant, InputStream is, SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd,
			String loadCycle, String ruleName, String client) {
		
		 targetContent = null;
		 headingFromWD = "";
		 String checkFile = "";
		
		 String employeeId = "";
		 String country = "";
		 String city = "";
		 String region = "";
		 String postalCode = "";
		 String addrUsageType = "";
		 String countryArr = "";
		 String cityArr = "";
		 String regionArr = "";
		 String postalCodeArr = "";
		 String addrUsageTypeArr = "";
		 String addrLine_1 = "";
		 String addrLine_2 = "";
		 String addrLine_3 = "";
		 String addrLine_1Arr = "";
		 String addrLine_2Arr = "";
		 String addrLine_3Arr = "";
		 String primary = "";
		 String addressUsage = "";
		 String primaryArr = "";
		 String addressUsageArr = "";
		 
		 Map<String,String> countryMap = null;
		 //Map<String,String> countryRegionMap = null;
		 Map<String,String> usageMap = null;
		 Map<String,String> addrLineMap = null;
		 Map<String,String> primaryMap = null;
		 Map<String,String> addressUsageArrMap = null;

		 String finalStr = "";
		 String headerStr = "";
		 try 
		 {			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_CONTACT_ADDRESS_REQUEST_FILE = requestfile.getAbsolutePath();
				 
				 if(errorList.isEmpty())
				 {
					 for(int i = 0; i<columnList.size();i++)
					 {
						 checkFile = addWorkerIdListToFindError(GET_CONTACT_ADDRESS_REQUEST_FILE, columnList.get(i), ruleName, "Employee_ID");
						 is = new FileInputStream(checkFile);
					     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     SOAPPart soapPart = soapMessage.getSOAPPart();
					     SOAPEnvelope envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
							  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
					     ByteArrayOutputStream out = new ByteArrayOutputStream();
					     soapMessage.writeTo(out);
					     String strMsgChk = new String(out.toByteArray());	
					     
					     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
					     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
						 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
						 out = new ByteArrayOutputStream();
						 soapResponse.writeTo(out);
						 strMsgChk = new String(out.toByteArray(), "utf-8");
						 if(strMsgChk.contains("faultstring"))
						 {
							 errorList.add(columnList.get(i)) ;
						 }
						 else
						 {
							 ReportElement rptElement = XmlParserManager.parseXml(strMsgChk);				 
							 ReportElement pageResults = rptElement.getChild("env:Body")
										.getChild("wd:Get_Workers_Response")
										.getChild("wd:Response_Results");
							 
							 String result = pageResults.getChild("wd:Total_Results").getValue().trim();
							 if(result.equalsIgnoreCase("0"))
							 {
								 errorList.add(columnList.get(i));
							 }
							 else
							 {
								 ReportElement responseData = rptElement.getChild("env:Body")
											.getChild("wd:Get_Workers_Response")
											.getChild("wd:Response_Data");
								 
								 List<ReportElement> applicantData = responseData.getChildren("wd:Worker");
									
								 for(ReportElement reportElement : applicantData)
								 {
									 ReportElement element1 = reportElement.getChild("wd:Worker_Data");
						        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
						        		System.out.println("employeeId--"+ employeeId);										 										
										
						        	 List<ReportElement> addressList = reportElement.getChild("wd:Worker_Data")
									 			.getChild("wd:Personal_Data")
									 			.getChild("wd:Contact_Data")
							 					.getChildren("wd:Address_Data");
									 
									 if(addressList != null && addressList.size() > 0)
									 {
										 countryArr = "";
									     cityArr = "";
									     regionArr = "";
									     postalCodeArr = "";
										 addrUsageTypeArr = "";
										 addrLine_1Arr = "";
										 addrLine_2Arr = "";
										 addrLine_3Arr = "";
										 primaryArr = "";
										 addressUsageArr = "";
										 
										 for(ReportElement addressElement:addressList)
										 {	
											 ReportElement addrUsageData = addressElement.getChild("wd:Usage_Data");
											 if(addrUsageData != null)
											 {
												 ReportElement addrTypeData = addrUsageData.getChild("wd:Type_Data");
												 if(addrTypeData != null)
												 {
													 primaryMap = addrTypeData.getAllAttributes();
													 if(primaryMap.get("wd:Primary").equals("1"))
													 {
														 primary = "Yes";
													 }
													 else
													 {
														 primary = "No";
													 }
													 if(primaryArr.equals(""))
													 {
														 primaryArr = primary;
													 }
													 else
													 {
														 primaryArr = primaryArr + "~" + primary;
													 }
													 ReportElement addrTypeRef = addrTypeData.getChild("wd:Type_Reference");
													 if(addrTypeRef !=null)
													 {
														 List<ReportElement> usageData = addrTypeRef.getChildren("wd:ID");					 
														 for(ReportElement wdElement:usageData)
														 {
															 usageMap = wdElement.getAllAttributes();
															 if(usageMap.get("wd:type").equals("Communication_Usage_Type_ID"))
															 {
																 if(wdElement.getValue().trim().equalsIgnoreCase("HOME"))
																 {
																	 addrUsageType = wdElement.getValue().trim();
																	 if(addrUsageTypeArr.equals(""))
																	 {
																		 addrUsageTypeArr = addrUsageType;
																	 }
																	 else
																	 {
																		 if(!addrUsageType.isEmpty())
																		 {
																			 addrUsageTypeArr = addrUsageTypeArr + "~" + addrUsageType;
																		 }
																	 }
																	 ReportElement referenceData = addrUsageData.getChild("wd:Use_For_Reference");
																	 if(referenceData != null)
																	 {
																		 List<ReportElement> referenceDataList = referenceData.getChildren("wd:ID");					 
																		 for(ReportElement referenceElement:referenceDataList)
																		 {
																			 addressUsageArrMap = referenceElement.getAllAttributes();
																			 if(addressUsageArrMap.get("wd:type").equals("Communication_Usage_Behavior_ID"))
																			 {
																				 addressUsage = referenceElement.getValue().trim();
																				 if(countryArr.equals(""))
																				 {
																					 addressUsageArr = addressUsage;
																				 }
																				 else
																				 {
																					 if(!addressUsage.isEmpty())
																					 {
																						 addressUsageArr = addressUsageArr + "~" + addressUsage;
																					 }
																				 }
																			 }
																		 }
																	 }
																	 ReportElement countryData = addressElement.getChild("wd:Country_Reference");
																	 if(countryData != null)
																	 {
																		 List<ReportElement> countryDataList = countryData.getChildren("wd:ID");					 
																		 for(ReportElement countryElement:countryDataList)
																		 {
																			 countryMap = countryElement.getAllAttributes();
																			 if(countryMap.get("wd:type").equals("ISO_3166-1_Alpha-3_Code"))
																			 {
																				 country = countryElement.getValue().trim();
																			 }
																		 }
																	 }
																	 if(countryArr.equals(""))
																	 {
																		 countryArr = country;
																	 }
																	 else
																	 {
																		 if(!country.isEmpty())
																		 {
																			 countryArr = countryArr + "~" + country;
																		 }
																	 }
																	 
																	 city = addressElement.getChild("wd:Municipality") != null?addressElement.getChild("wd:Municipality").getValue().trim():"";
																	 if(city.contains(","))
																	 {
																		 city = city.replaceAll(",", "|");
																	 }
																	 if(cityArr.equals(""))
																	 {
																		 cityArr = city;
																	 }
																	 else
																	 {
																		 if(!city.isEmpty())
																		 {
																			 cityArr = cityArr + "~" + city;
																		 }
																	 }
																	 
																	 /*ReportElement countryRegionData = addressElement.getChild("wd:Country_Region_Reference");
																	 if(countryRegionData != null)
																	 {
																		 List<ReportElement> countryRegionDataList = countryRegionData.getChildren("wd:ID");					 
																		 for(ReportElement countryRegionElement:countryRegionDataList)
																		 {
																			 countryRegionMap = countryRegionElement.getAllAttributes();
																			 if(countryRegionMap.get("wd:type").equals("Country_Region_ID"))
																			 {
																				 region = countryRegionElement.getValue().trim();
																				 if(region.contains(","))
																				 {
																					 region = region.replaceAll(",", "|");
																				 }
																				 if(regionArr.equals(""))
																				 {
																					 regionArr = region;
																				 }
																				 else
																				 {
																					 if(!region.isEmpty())
																					 {
																						 regionArr = regionArr + "~" + region;
																					 }
																				 }
																			 }
																		 }
																	 }
																	 else
																	 {
																		 regionArr = "";
																	 }*/
																	 
																	 region = addressElement.getChild("wd:Country_Region_Descriptor") != null?addressElement.getChild("wd:Country_Region_Descriptor").getValue().trim():"";
																	 if(region.contains(","))
																	 {
																		 region = region.replaceAll(",", "|");
																	 }
																	 if(regionArr.equals(""))
																	 {
																		 regionArr = region;
																	 }
																	 else
																	 {
																		 if(!region.isEmpty())
																		 {
																			 regionArr = regionArr + "~" + region;
																		 }
																	 }
																	 
																	 postalCode = addressElement.getChild("wd:Postal_Code") != null?addressElement.getChild("wd:Postal_Code").getValue().trim():"";
																	 if(postalCodeArr.equals(""))
																	 {
																		 postalCodeArr = postalCode;
																	 }
																	 else
																	 {
																		 if(!postalCode.isEmpty())
																		 {
																			 postalCodeArr = postalCodeArr + "~" + postalCode;
																		 }
																	 }
																	 List<ReportElement> addrLineData = addressElement.getChildren("wd:Address_Line_Data");
																	 if(addrLineData != null)
																	 {
																		 for(ReportElement addrLineElement:addrLineData)
																		 {
																			 addrLineMap = addrLineElement.getAllAttributes();
																			 if(addrLineMap.get("wd:Type").equals("ADDRESS_LINE_1"))
																			 {
																				addrLine_1 =  addrLineElement.getValue().trim();
																				if(addrLine_1.contains(","))
																				{
																					addrLine_1 = addrLine_1.replaceAll(",", "|");
																				}
																				if(addrLine_1Arr.equals(""))
																				{
																					addrLine_1Arr = addrLine_1;
																				}
																				else
																				{
																					if(!addrLine_1.isEmpty())
																					{
																						addrLine_1Arr = addrLine_1Arr + "~" + addrLine_1;
																					}
																				}
																			 }
																			 else if(addrLineMap.get("wd:Type").equals("ADDRESS_LINE_2"))
																			 {
																				addrLine_2 =  addrLineElement.getValue().trim();
																				if(addrLine_2.contains(","))
																				{
																					addrLine_2 = addrLine_2.replaceAll(",", "|");
																				}
																				if(addrLine_2Arr.equals(""))
																				{
																					addrLine_2Arr = addrLine_2;
																				}
																				else
																				{
																					if(!addrLine_2.isEmpty())
																					{
																						addrLine_2Arr = addrLine_2Arr + "~" + addrLine_2;
																					}
																				}
																			 }
																			 else if(addrLineMap.get("wd:Type").equals("ADDRESS_LINE_3"))
																			 {
																				addrLine_3 =  addrLineElement.getValue().trim();
																				if(addrLine_3.contains(","))
																				{
																					addrLine_3 = addrLine_3.replaceAll(",", "|");
																				}
																				if(addrLine_3Arr.equals(""))
																				{
																					addrLine_3Arr = addrLine_3;
																				}
																				else
																				{
																					if(!addrLine_3.isEmpty())
																					{
																						addrLine_3Arr = addrLine_3Arr + "~" + addrLine_3;
																					}
																				}
																			 }
																		 }
																	 }
																	 else
																	 {
																		 addrLine_1Arr = "";
																		 addrLine_2Arr = "";
																		 addrLine_3Arr = "";
																	 }																
															     }
															 }
														 }
													 }											 
												 }
											 }
										 }
									 }
									 else
									 {
										 errorList.add(columnList.get(i));
										 countryArr = "";
									     cityArr = "";
									     regionArr = "";
									     postalCodeArr = "";
										 addrUsageTypeArr = "";
										 addrLine_1Arr = "";
										 addrLine_2Arr = "";
										 addrLine_3Arr = "";
										 primaryArr = "";
										 addressUsageArr = "";
									 }
										 
									 headingFromWD = "Employee_ID,Country,City,Region,Postal_Code,Usage_Type,Address_Line1,Address_Line2,Address_Line3,Address_Usage,Primary";
									 if(addrUsageTypeArr.equalsIgnoreCase(""))
									 {
										 errorList.add(columnList.get(i)); 
									 }
									 else
									 {
										 headerStr = employeeId + "," + countryArr + "," + cityArr + "," + regionArr + "," + postalCodeArr + "," + addrUsageTypeArr + "," + addrLine_1Arr 
												 + "," + addrLine_2Arr + "," + addrLine_3Arr + "," + addressUsageArr + "," + primaryArr;
									 }
									 
									 if(finalStr.equals(""))
									 {
										 finalStr = headingFromWD + "\n" + headerStr;
									 }
									 else
									 {
										 finalStr = finalStr + "\n" + headerStr;
									 }
								 }
							 }
						 }
					 }
					 columnList.removeAll(errorList);
					 wdCount = columnList.size();
				 }		 					 
				 System.out.println(finalStr);
				 targetContent = finalStr.toString().getBytes();					 					 
				 headingWd = selectColumnMapping(loadCycle, ruleName, "Employee_ID");					 
				 complete = true;
			}			 			 
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}

		return headingWd;
	}
	
	private JSONArray createCSVFromWDContactAddress(Tenant tenant, InputStream is, SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd,
			String loadCycle, String ruleName, String client) {

		 targetContent = null;
		 headingFromWD = "";
		 String checkFile = "";
		
		 String employeeId = "";
		 String country = "";
		 String city = "";
		 String region = "";
		 String postalCode = "";
		 String addrUsageType = "";
		 String countryArr = "";
		 String cityArr = "";
		 String regionArr = "";
		 String postalCodeArr = "";
		 String addrUsageTypeArr = "";
		 
		 Map<String,String> countryMap = null;
		 Map<String,String> countryRegionMap = null;
		 Map<String,String> usageMap = null;

		 String finalStr = "";
		 String headerStr = "";
		 try 
		 {			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_CONTACT_ADDRESS_REQUEST_FILE = requestfile.getAbsolutePath();
				 
				 if(errorList.isEmpty())
				 {
					 for(int i = 0; i<columnList.size();i++)
					 {
						 checkFile = addWorkerIdListToFindError(GET_CONTACT_ADDRESS_REQUEST_FILE, columnList.get(i), ruleName, "Employee_ID");
						 is = new FileInputStream(checkFile);
					     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     SOAPPart soapPart = soapMessage.getSOAPPart();
					     SOAPEnvelope envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
							  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
					     ByteArrayOutputStream out = new ByteArrayOutputStream();
					     soapMessage.writeTo(out);
					     String strMsgChk = new String(out.toByteArray());	
					     
					     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
					     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
						 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
						 out = new ByteArrayOutputStream();
						 soapResponse.writeTo(out);
						 strMsgChk = new String(out.toByteArray(), "utf-8");
						 if(strMsgChk.contains("faultstring"))
						 {
							 errorList.add(columnList.get(i)) ;
						 }
						 else
						 {
							 ReportElement rptElement = XmlParserManager.parseXml(strMsgChk);				 
							 ReportElement pageResults = rptElement.getChild("env:Body")
										.getChild("wd:Get_Workers_Response")
										.getChild("wd:Response_Results");
							 
							 String result = pageResults.getChild("wd:Total_Results").getValue().trim();
							 if(result.equalsIgnoreCase("0"))
							 {
								 errorList.add(columnList.get(i));
							 }
							 else
							 {
								 ReportElement responseData = rptElement.getChild("env:Body")
											.getChild("wd:Get_Workers_Response")
											.getChild("wd:Response_Data");
								 
								 List<ReportElement> applicantData = responseData.getChildren("wd:Worker");
									
								 for(ReportElement reportElement : applicantData)
								 {
									 ReportElement element1 = reportElement.getChild("wd:Worker_Data");
						        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
						        		System.out.println("employeeId--"+ employeeId);										 										
										
						        	 List<ReportElement> addressList = reportElement.getChild("wd:Worker_Data")
									 			.getChild("wd:Personal_Data")
									 			.getChild("wd:Contact_Data")
							 					.getChildren("wd:Address_Data");
									 
									 if(addressList != null && addressList.size() > 0)
									 {
										 countryArr = "";
									     cityArr = "";
									     regionArr = "";
									     postalCodeArr = "";
										 addrUsageTypeArr = "";
										 
										 for(ReportElement addressElement:addressList)
										 {	
											 ReportElement addrUsageData = addressElement.getChild("wd:Usage_Data");
											 if(addrUsageData != null)
											 {
												 ReportElement addrTypeData = addrUsageData.getChild("wd:Type_Data");
												 if(addrTypeData != null)
												 {
													 ReportElement addrTypeRef = addrTypeData.getChild("wd:Type_Reference");
													 if(addrTypeRef !=null)
													 {
														 List<ReportElement> usageData = addrTypeRef.getChildren("wd:ID");					 
														 for(ReportElement wdElement:usageData)
														 {
															 usageMap = wdElement.getAllAttributes();
															 if(usageMap.get("wd:type").equals("Communication_Usage_Type_ID"))
															 {
																 addrUsageType = wdElement.getValue().trim();
																 if(!addrUsageType.equalsIgnoreCase("WORK"))
																 {
																	 if(addrUsageTypeArr.equals(""))
																	 {
																		 addrUsageTypeArr = addrUsageType;
																	 }
																	 else
																	 {
																		 if(!addrUsageType.isEmpty())
																		 {
																			 addrUsageTypeArr = addrUsageTypeArr + "~" + addrUsageType;
																		 }
																	 }
																	 ReportElement countryData = addressElement.getChild("wd:Country_Reference");
																	 if(countryData != null)
																	 {
																		 List<ReportElement> countryDataList = countryData.getChildren("wd:ID");					 
																		 for(ReportElement countryElement:countryDataList)
																		 {
																			 countryMap = countryElement.getAllAttributes();
																			 if(countryMap.get("wd:type").equals("ISO_3166-1_Alpha-3_Code"))
																			 {
																				 country = countryElement.getValue().trim();
																			 }
																		 }
																	 }
																	 if(countryArr.equals(""))
																	 {
																		 countryArr = country;
																	 }
																	 else
																	 {
																		 if(!country.isEmpty())
																		 {
																			 countryArr = countryArr + "~" + country;
																		 }
																	 }
																	 
																	 city = addressElement.getChild("wd:Municipality") != null?addressElement.getChild("wd:Municipality").getValue().trim():"";
																	 if(city.contains(","))
																	 {
																		 city = city.replaceAll(",", "|");
																	 }
																	 if(cityArr.equals(""))
																	 {
																		 cityArr = city;
																	 }
																	 else
																	 {
																		 if(!city.isEmpty())
																		 {
																			 cityArr = cityArr + "~" + city;
																		 }
																	 }
																	 
																	 ReportElement countryRegionData = addressElement.getChild("wd:Country_Region_Reference");
																	 if(countryRegionData != null)
																	 {
																		 List<ReportElement> countryRegionDataList = countryRegionData.getChildren("wd:ID");					 
																		 for(ReportElement countryRegionElement:countryRegionDataList)
																		 {
																			 countryRegionMap = countryRegionElement.getAllAttributes();
																			 if(countryRegionMap.get("wd:type").equals("Country_Region_ID"))
																			 {
																				 region = countryRegionElement.getValue().trim();
																				 if(region.contains(","))
																				 {
																					 region = region.replaceAll(",", "|");
																				 }
																				 if(regionArr.equals(""))
																				 {
																					 regionArr = region;
																				 }
																				 else
																				 {
																					 if(!region.isEmpty())
																					 {
																						 regionArr = regionArr + "~" + region;
																					 }
																				 }
																			 }
																		 }
																	 }
																	 else
																	 {
																		 regionArr = "";
																	 }																	 
																	 
																	 postalCode = addressElement.getChild("wd:Postal_Code") != null?addressElement.getChild("wd:Postal_Code").getValue().trim():"";
																	 if(postalCodeArr.equals(""))
																	 {
																		 postalCodeArr = postalCode;
																	 }
																	 else
																	 {
																		 if(!postalCode.isEmpty())
																		 {
																			 postalCodeArr = postalCodeArr + "~" + postalCode;
																		 }
																	 }
																 }
																 else
																 {
																	 countryArr = "";
																     cityArr = "";
																     regionArr = "";
																     postalCodeArr = "";
																	 addrUsageTypeArr = "";
																 }
															 }
														 }
													 }											 
												 }
											 }
										 }
									 }
									 else
									 {
										 errorList.add(columnList.get(i));
										 countryArr = "";
									     cityArr = "";
									     regionArr = "";
									     postalCodeArr = "";
										 addrUsageTypeArr = "";
									 }
										 
									 headingFromWD = "Employee_ID,Country,City,Region,Postal_Code,Usage_Type";//,Address_Line1,Address_Line2,Address_Line3
									 if(addrUsageTypeArr.equalsIgnoreCase(""))
									 {
										 errorList.add(columnList.get(i)); 
									 }
									 else
									 {
										 headerStr = employeeId + "," + countryArr + "," + cityArr + "," + regionArr + "," + postalCodeArr + "," + addrUsageTypeArr;
									 }
									 
									 if(finalStr.equals(""))
									 {
										 finalStr = headingFromWD + "\n" + headerStr;
									 }
									 else
									 {
										 finalStr = finalStr + "\n" + headerStr;
									 }
								 }
							 }
						 }
					 }
					 columnList.removeAll(errorList);
					 wdCount = columnList.size();
				 }		 					 
				 System.out.println(finalStr);
				 targetContent = finalStr.toString().getBytes();					 					 
				 headingWd = selectColumnMapping(loadCycle, ruleName, "Employee_ID");					 
				 complete = true;
			}			 			 
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}

		return headingWd;
	}
	
	private JSONArray createCSVFromWDContactAddressLine(Tenant tenant, InputStream is, SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd,
			String loadCycle, String ruleName, String client) {

		 targetContent = null;
		 headingFromWD = "";
		 String checkFile = "";
		
		 String employeeId = "";
		 String addrLine_1 = "";
		 String addrLine_2 = "";
		 String addrLine_3 = "";
		 String addrLine_4 = "";
		 String addrUsageType = "";
		 String addrLine_1Arr = "";
		 String addrLine_2Arr = "";
		 String addrLine_3Arr = "";
		 String addrLine_4Arr = "";
		 String addrUsageTypeArr = "";
		 
		 Map<String,String> addrLineMap = null;
		 Map<String,String> usageMap = null;

		 String finalStr = "";
		 String headerStr = "";
		 try 
		 {			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_CONTACT_ADDRESS_LINE_REQUEST_FILE = requestfile.getAbsolutePath();
				 
				 if(errorList.isEmpty())
				 {
					 for(int i = 0; i<columnList.size();i++)
					 {
						 checkFile = addWorkerIdListToFindError(GET_CONTACT_ADDRESS_LINE_REQUEST_FILE, columnList.get(i), ruleName, "Employee_ID");
						 is = new FileInputStream(checkFile);
					     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     SOAPPart soapPart = soapMessage.getSOAPPart();
					     SOAPEnvelope envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
							  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
					     ByteArrayOutputStream out = new ByteArrayOutputStream();
					     soapMessage.writeTo(out);
					     String strMsgChk = new String(out.toByteArray());	
					     
					     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
					     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
						 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
						 out = new ByteArrayOutputStream();
						 soapResponse.writeTo(out);
						 strMsgChk = new String(out.toByteArray(), "utf-8");
						 if(strMsgChk.contains("faultstring"))
						 {
							 errorList.add(columnList.get(i)) ;
						 }
						 else
						 {
							 ReportElement rptElement = XmlParserManager.parseXml(strMsgChk);				 
							 ReportElement pageResults = rptElement.getChild("env:Body")
										.getChild("wd:Get_Workers_Response")
										.getChild("wd:Response_Results");
							 
							 String result = pageResults.getChild("wd:Total_Results").getValue().trim();
							 if(result.equalsIgnoreCase("0"))
							 {
								 errorList.add(columnList.get(i));
							 }
							 else
							 {
								 ReportElement responseData = rptElement.getChild("env:Body")
											.getChild("wd:Get_Workers_Response")
											.getChild("wd:Response_Data");
								 
								 List<ReportElement> applicantData = responseData.getChildren("wd:Worker");
									
								 for(ReportElement reportElement : applicantData)
								 {
									 ReportElement element1 = reportElement.getChild("wd:Worker_Data");
						        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
						        		System.out.println("employeeId--"+ employeeId);	
						        		
					        		ReportElement contactData = reportElement.getChild("wd:Worker_Data")
								 			.getChild("wd:Personal_Data")
								 			.getChild("wd:Contact_Data");
									
					        		 if(contactData != null)
					        		 {
							        	 List<ReportElement> addressList = contactData
								 					.getChildren("wd:Address_Data");
										 
										 if(addressList != null && addressList.size() > 0)
										 {
											 addrLine_1Arr = "";
											 addrLine_2Arr = "";
											 addrLine_3Arr = "";
											 addrLine_4Arr = "";
											 addrUsageTypeArr = "";
											 
											 for(ReportElement addressElement:addressList)
											 {												 											 
												 ReportElement addrUsageData = addressElement.getChild("wd:Usage_Data");
												 if(addrUsageData != null)
												 {
													 ReportElement addrTypeData = addrUsageData.getChild("wd:Type_Data");
													 if(addrTypeData != null)
													 {
														 ReportElement addrTypeRef = addrTypeData.getChild("wd:Type_Reference");
														 if(addrTypeRef !=null)
														 {
															 List<ReportElement> usageData = addrTypeRef.getChildren("wd:ID");					 
															 for(ReportElement wdElement:usageData)
															 {
																 usageMap = wdElement.getAllAttributes();
																 if(usageMap.get("wd:type").equals("Communication_Usage_Type_ID"))
																 {
																	 addrUsageType = wdElement.getValue().trim();
																	 if(!addrUsageType.equalsIgnoreCase("WORK"))
																	 {
																		 if(addrUsageTypeArr.equals(""))
																		 {
																			 addrUsageTypeArr = addrUsageType;
																		 }
																		 else
																		 {
																			 if(!addrUsageType.isEmpty())
																			 {
																				 addrUsageTypeArr = addrUsageTypeArr + "~" + addrUsageType;
																			 }
																		 }
																		 
																		 List<ReportElement> addrLineData = addressElement.getChildren("wd:Address_Line_Data");
																		 if(addrLineData != null)
																		 {
																			 for(ReportElement addrLineElement:addrLineData)
																			 {
																				 addrLineMap = addrLineElement.getAllAttributes();
																				 if(addrLineMap.get("wd:Type").equals("ADDRESS_LINE_1"))
																				 {
																					addrLine_1 =  addrLineElement.getValue().trim();
																					if(addrLine_1.contains(","))
																					{
																						addrLine_1 = addrLine_1.replaceAll(",", "|");
																					}
																					if(addrLine_1Arr.equals(""))
																					{
																						addrLine_1Arr = addrLine_1;
																					}
																					else
																					{
																						if(!addrLine_1.isEmpty())
																						{
																							addrLine_1Arr = addrLine_1Arr + "~" + addrLine_1;
																						}
																					}
																				 }
																				 else if(addrLineMap.get("wd:Type").equals("ADDRESS_LINE_2"))
																				 {
																					addrLine_2 =  addrLineElement.getValue().trim();
																					if(addrLine_2.contains(","))
																					{
																						addrLine_2 = addrLine_2.replaceAll(",", "|");
																					}
																					if(addrLine_2Arr.equals(""))
																					{
																						addrLine_2Arr = addrLine_2;
																					}
																					else
																					{
																						if(!addrLine_2.isEmpty())
																						{
																							addrLine_2Arr = addrLine_2Arr + "~" + addrLine_2;
																						}
																					}
																				 }
																				 else if(addrLineMap.get("wd:Type").equals("ADDRESS_LINE_3"))
																				 {
																					addrLine_3 =  addrLineElement.getValue().trim();
																					if(addrLine_3.contains(","))
																					{
																						addrLine_3 = addrLine_3.replaceAll(",", "|");
																					}
																					if(addrLine_3Arr.equals(""))
																					{
																						addrLine_3Arr = addrLine_3;
																					}
																					else
																					{
																						if(!addrLine_3.isEmpty())
																						{
																							addrLine_3Arr = addrLine_3Arr + "~" + addrLine_3;
																						}
																					}
																				 }
																				 else if(addrLineMap.get("wd:Type").equals("ADDRESS_LINE_4"))
																				 {
																					addrLine_4 =  addrLineElement.getValue().trim();
																					if(addrLine_4.contains(","))
																					{
																						addrLine_4 = addrLine_4.replaceAll(",", "|");
																					}
																					if(addrLine_4Arr.equals(""))
																					{
																						addrLine_4Arr = addrLine_4;
																					}
																					else
																					{
																						if(!addrLine_4.isEmpty())
																						{
																							addrLine_4Arr = addrLine_4Arr + "~" + addrLine_4;
																						}
																					}
																				 }
																			 }
																		 }
																	 }
																	 else
																	 {
																		 addrUsageTypeArr = "";
																		 addrLine_1Arr = "";
																		 addrLine_2Arr = "";
																		 addrLine_3Arr = "";
																		 addrLine_4Arr = "";
																	 }
																 }
															 }
														 }											 
													 }
												 }
											 }
										 }
										 else
										 {
											 errorList.add(columnList.get(i));
											 addrUsageTypeArr = "";
											 addrLine_1Arr = "";
											 addrLine_2Arr = "";
											 addrLine_3Arr = "";
											 addrLine_4Arr = "";
										 }
					        		 }
					        		 else
					        		 {
					        			 errorList.add(columnList.get(i));
										 addrUsageTypeArr = "";
										 addrLine_1Arr = "";
										 addrLine_2Arr = "";
										 addrLine_3Arr = "";
										 addrLine_4Arr = "";
					        		 }
										 
									 headingFromWD = "Employee_ID,Address_Line1,Address_Line2,Address_Line3,Address_Line4";
									 if(addrUsageTypeArr.equalsIgnoreCase(""))
									 {
										 errorList.add(columnList.get(i)); 
									 }
									 else
									 {
										 headerStr = employeeId + "," + addrLine_1Arr + "," + addrLine_2Arr + "," + addrLine_3Arr + "," + addrLine_4Arr;
									 }
									 
									 if(finalStr.equals(""))
									 {
										 finalStr = headingFromWD + "\n" + headerStr;
									 }
									 else
									 {
										 finalStr = finalStr + "\n" + headerStr;
									 }
								 }
							 }
						 }
					 }
					 columnList.removeAll(errorList);
					 wdCount = columnList.size();
				 }		 					 
				 System.out.println(finalStr);
				 targetContent = finalStr.toString().getBytes();					 					 
				 headingWd = selectColumnMapping(loadCycle, ruleName, "Employee_ID");					 
				 complete = true;
			}			 			 
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}

		return headingWd;
	}
	
	private JSONArray createCSVFromWDCompHistory(Tenant tenant, InputStream is, SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd,
			String loadCycle, String ruleName, String client) {

		 targetContent = null;
		 headingFromWD = "";
		 String checkFile = "";
		
		 String employeeId = "";
		 String workerHistoryName = "";
		 String actionDate = "";
		 String reason = "";
		 String amount = "";
		 String currency = "";
		 String frequency = "";
		 String amountChanged = "";
		 String description = "";
		 String workerHistoryNameArr = "";
		 String actionDateArr = "";
		 String reasonArr = "";
		 String amountArr = "";
		 String currencyArr = "";
		 String frequencyArr = "";
		 String amountChangedArr = "";
		 String descriptionArr = "";
		 
		 Map<String,String> workerMap = null;
		 Map<String,String> currencyMap = null;
		 Map<String,String> frequencyMap = null;

		 String finalStr = "";
		 String headerStr = "";
		 try 
		 {			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_COMP_HIST_REQUEST_FILE = requestfile.getAbsolutePath();
				 
				 if(errorList.isEmpty())
				 {
					 for(int i = 0; i<columnList.size();i++)
					 {
						 checkFile = addWorkerIdListToFindErrorFromCompHistory(GET_COMP_HIST_REQUEST_FILE, columnList.get(i), ruleName, "Employee_ID");
						 is = new FileInputStream(checkFile);
					     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     SOAPPart soapPart = soapMessage.getSOAPPart();
					     SOAPEnvelope envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
							  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
					     ByteArrayOutputStream out = new ByteArrayOutputStream();
					     soapMessage.writeTo(out);
					     String strMsgChk = new String(out.toByteArray());	
					     
					     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Compensation";
					     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
						 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
						 out = new ByteArrayOutputStream();
						 soapResponse.writeTo(out);
						 strMsgChk = new String(out.toByteArray(), "utf-8");
						 if(strMsgChk.contains("faultstring"))
						 {
							 errorList.add(columnList.get(i)) ;
						 }
						 else
						 {
							 ReportElement rptElement = XmlParserManager.parseXml(strMsgChk);				 
							 ReportElement pageResults = rptElement.getChild("env:Body")
										.getChild("wd:Get_Previous_System_Compensation_History_Response")
										.getChild("wd:Response_Results");
							 
							 String result = pageResults.getChild("wd:Total_Results").getValue().trim();
							 if(result.equalsIgnoreCase("0"))
							 {
								 errorList.add(columnList.get(i));
							 }
							 else
							 {
								 ReportElement responseData = rptElement.getChild("env:Body")
											.getChild("wd:Get_Previous_System_Compensation_History_Response")
											.getChild("wd:Response_Data");
								 
								 List<ReportElement> compensationData = responseData.getChildren("wd:Previous_System_Compensation_History");
									
								 for(ReportElement reportElement : compensationData)
								 {
										 ReportElement workerData = reportElement.getChild("wd:Worker_Reference");
										 if(workerData != null)
										 {
											 List<ReportElement> workerList = workerData.getChildren("wd:ID");					 
											 for(ReportElement workerElement:workerList)
											 {
												 workerMap = workerElement.getAllAttributes();
												 if(workerMap.get("wd:type").equals("Employee_ID"))
												 {
													 employeeId = workerElement.getValue().trim();
													 System.out.println("Employee Id-"+ employeeId);
												 }
											 }
										 }										 										
										
						        		ReportElement compHistoryData = reportElement.getChild("wd:Previous_System_Compensation_History_Data");
									 
						        		if(compHistoryData != null)
										{										 									 
											 List<ReportElement> compHistoryList = compHistoryData.getChildren("wd:Previous_System_Job_History");
											 if(compHistoryList != null && compHistoryList.size() >0)
											 {
												 workerHistoryNameArr = "";
												 actionDateArr = "";
												 reasonArr = "";
												 amountArr = "";
												 currencyArr = "";
												 frequencyArr = "";
												 amountChangedArr = "";
												 descriptionArr = "";
												 
												 for(ReportElement compHistoryElement : compHistoryList)
												 {
													 ReportElement compHistDetailData = compHistoryElement.getChild("wd:Previous_System_Compensation_History_Detail_Data");
													 if(compHistDetailData != null)
													 {
														 workerHistoryName = compHistDetailData.getChild("wd:Worker_History_Name") != null?compHistDetailData.getChild("wd:Worker_History_Name").getValue().trim():""; 
														 if(workerHistoryName.contains(","))
														 {
															 workerHistoryName = workerHistoryName.replaceAll(",", "|");
														 }
														 if(workerHistoryNameArr.equals(""))
														 {
															 workerHistoryNameArr = workerHistoryName;
														 }
														 else
														 {
															 if(!workerHistoryName.isEmpty())
															 {
																 workerHistoryNameArr = workerHistoryNameArr + "~" + workerHistoryName;
															 }
														 }
														 actionDate = compHistDetailData.getChild("wd:Action_Date") != null?compHistDetailData.getChild("wd:Action_Date").getValue().trim():"";
														 if(actionDateArr.equals(""))
														 {
															 actionDateArr = actionDate;
														 }
														 else
														 {
															 if(!actionDate.isEmpty())
															 {
																 actionDateArr = actionDateArr + "~" + actionDate;
															 }
														 }
														 reason = compHistDetailData.getChild("wd:Reason") != null?compHistDetailData.getChild("wd:Reason").getValue().trim():"";
														 if(reason.contains(","))
														 {
															 reason = reason.replaceAll(",", "|");
														 }
														 if(reasonArr.equals(""))
														 {
															 reasonArr = reason;
														 }
														 else
														 {
															 if(!reason.isEmpty())
															 {
																 reasonArr = reasonArr + "~" + reason;
															 }
														 }
														 amount = compHistDetailData.getChild("wd:Amount") != null?compHistDetailData.getChild("wd:Amount").getValue().trim():""; 
														 if(amountArr.equals(""))
														 {
															 amountArr = amount;
														 }
														 else
														 {
															 if(!amount.isEmpty())
															 {
																 amountArr = amountArr + "~" + amount;
															 }
														 }
														 
														 ReportElement currencyRef = compHistDetailData.getChild("wd:Currency_Reference");
														 if(currencyRef != null)
														 {
															 List<ReportElement> currencyData = currencyRef.getChildren("wd:ID");								 
															 for(ReportElement idTypeElement:currencyData)
															 {
																 currencyMap = idTypeElement.getAllAttributes();
																 if(currencyMap.get("wd:type").equals("Currency_ID"))
																 {
																	 currency = idTypeElement.getValue().trim();
																	 if(currencyArr.equals(""))
																	 {
																		 currencyArr = currency;
																	 }
																	 else
																	 {
																		 if(!currency.isEmpty())
																		 {
																			 currencyArr = currencyArr + "~" + currency;
																		 }
																	 }
																 }
															 }
														 }
														 else
														 {
															 currencyArr = "";
														 }
														 
														 ReportElement frequencyRef = compHistDetailData.getChild("wd:Frequency_Reference");
														 if(frequencyRef != null)
														 {
															 List<ReportElement> frequencyData = frequencyRef.getChildren("wd:ID");								 
															 for(ReportElement idTypeElement:frequencyData)
															 {
																 frequencyMap = idTypeElement.getAllAttributes();
																 if(frequencyMap.get("wd:type").equals("Frequency_ID"))
																 {
																	 frequency = idTypeElement.getValue().trim();
																	 if(frequencyArr.equals(""))
																	 {
																		 frequencyArr = frequency;
																	 }
																	 else
																	 {
																		 if(!frequency.isEmpty())
																		 {
																			 frequencyArr = frequencyArr + "~" + frequency;
																		 }
																	 }
																 }
															 }
														 }
														 else
														 {
															 frequencyArr = "";
														 }
														 
														 amountChanged = compHistDetailData.getChild("wd:Amount_Change") != null?compHistDetailData.getChild("wd:Amount_Change").getValue().trim():""; 
														 if(amountChangedArr.equals(""))
														 {
															 amountChangedArr = amountChanged;
														 }
														 else
														 {
															 if(!amountChanged.isEmpty())
															 {
																 amountChangedArr = amountChangedArr + "~" + amountChanged;
															 }
														 }
														 
														 description = compHistDetailData.getChild("wd:Description") != null?compHistDetailData.getChild("wd:Description").getValue().trim():""; 
														 if(descriptionArr.equals(""))
														 {
															 descriptionArr = description;
														 }
														 else
														 {
															 if(!description.isEmpty())
															 {
																 descriptionArr = descriptionArr + "~" + description;
															 }
														 }
													 }
												 }
											 }
											 else
											 {
												 errorList.add(columnList.get(i));
												 workerHistoryNameArr = "";
												 actionDateArr = "";
												 reasonArr = "";
												 amountArr = "";
												 currencyArr = "";
												 amountChangedArr = "";
												 descriptionArr = "";
												 frequencyArr = "";
											 }
										 }
						        		 else
										 {
						        			 errorList.add(columnList.get(i));
											 workerHistoryNameArr = "";
											 actionDateArr = "";
											 reasonArr = "";
											 amountArr = "";
											 currencyArr = "";
											 amountChangedArr = "";
											 descriptionArr = "";
											 frequencyArr = "";
										 }
											 								 								 
										 headingFromWD = "Employee_ID,Worker_History_Name,Action_Date,Reason,Amount,Currency,Frequency,Amount_Change,Description";
										 
										 headerStr = employeeId + "," + workerHistoryNameArr + "," + actionDateArr + "," + reasonArr + "," + amountArr + "," + currencyArr + "," + frequencyArr
												 + "," + amountChangedArr + "," + descriptionArr;
										 
										 if(finalStr.equals(""))
										 {
											 finalStr = headingFromWD + "\n" + headerStr;
										 }
										 else
										 {
											 finalStr = finalStr + "\n" + headerStr;
										 }
								 }
							 }
						 }
					 }
					 columnList.removeAll(errorList);
					 wdCount = columnList.size();
				 }		 					 
				 System.out.println(finalStr);
				 targetContent = finalStr.toString().getBytes();					 					 
				 headingWd = selectColumnMapping(loadCycle, ruleName, "Employee_ID");					 
				 complete = true;
			}			 			 
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}

		return headingWd;
	}
	
	private JSONArray createCSVFromWDSystemUser(Tenant tenant, InputStream is, SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd,
			String loadCycle, String ruleName, String client) {

		 targetContent = null;
		 headingFromWD = "";
		 String checkFile = "";
		
		 String employeeId = "";
		 String userName = "";
		 String sessiontimeoutMinutes = "";
		 String accountDisabled = "";
		 String reqNewPwd = "";
		 String showUserName = "";
		 String displayXMLIcon = "";
		 String enableWorkbox = "";
		 String allowMixedLan = "";
		 String passcodeExempt = "";
		 String passcodeGracePeriodEnabled = "";
		 String passcodeGracePeriodLoginRemaining = "";
		 String exepmtFromDelAuth = "";

		 String finalStr = "";
		 String headerStr = "";
		 try 
		 {			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_SYSTEM_USER_REQUEST_FILE = requestfile.getAbsolutePath();
				 
				 if(errorList.isEmpty())
				 {
					 for(int i = 0; i<columnList.size();i++)
					 {
						 checkFile = addWorkerIdListToFindErrorFromSystemUser(GET_SYSTEM_USER_REQUEST_FILE, columnList.get(i), ruleName, "Employee_ID");
						 is = new FileInputStream(checkFile);
					     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     SOAPPart soapPart = soapMessage.getSOAPPart();
					     SOAPEnvelope envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
							  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
					     ByteArrayOutputStream out = new ByteArrayOutputStream();
					     soapMessage.writeTo(out);
					     String strMsgChk = new String(out.toByteArray());	
					     
					     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Human_Resources";
					     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
						 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
						 out = new ByteArrayOutputStream();
						 soapResponse.writeTo(out);
						 strMsgChk = new String(out.toByteArray(), "utf-8");
						 if(strMsgChk.contains("faultstring"))
						 {
							 errorList.add(columnList.get(i)) ;
						 }
						 else
						 {
							 ReportElement rptElement = XmlParserManager.parseXml(strMsgChk);				 
							 ReportElement pageResults = rptElement.getChild("env:Body")
										.getChild("wd:Get_Workday_Account_Response")
										.getChild("wd:Response_Results");
							 
							 String result = pageResults.getChild("wd:Total_Results").getValue().trim();
							 if(result.equalsIgnoreCase("0"))
							 {
								 errorList.add(columnList.get(i));
							 }
							 else
							 {
								 ReportElement responseData = rptElement.getChild("env:Body")
											.getChild("wd:Get_Workday_Account_Response")
											.getChild("wd:Response_Data");
								 
								 List<ReportElement> accountData = responseData.getChildren("wd:Workday_Account_Response_Data");
									
								 for(ReportElement reportElement : accountData)
								 {
									 ReportElement workdayAccountData = reportElement.getChild("wd:Workday_Account_for_Worker_Data");
									 if(workdayAccountData != null)
									 {
										 employeeId = columnList.get(i);
										 System.out.println("Employee Id-"+ employeeId);
									 	
										 userName = workdayAccountData.getChild("wd:User_Name") != null?workdayAccountData.getChild("wd:User_Name").getValue().trim():"";
										 sessiontimeoutMinutes = workdayAccountData.getChild("wd:Session_Timeout_Minutes") != null?workdayAccountData.getChild("wd:Session_Timeout_Minutes").getValue().trim():"";
										 accountDisabled = workdayAccountData.getChild("wd:Account_Disabled") != null?workdayAccountData.getChild("wd:Account_Disabled").getValue().trim():"";
										 if(accountDisabled.equalsIgnoreCase("0"))
										 {
											 accountDisabled = "FALSE";
										 }
										 else if(accountDisabled.equalsIgnoreCase("1"))
										 {
											 accountDisabled = "TRUE";
										 }
										 reqNewPwd = workdayAccountData.getChild("wd:Require_New_Password_at_Next_Sign_In") != null?workdayAccountData.getChild("wd:Require_New_Password_at_Next_Sign_In").getValue().trim():"";
										 if(reqNewPwd.equalsIgnoreCase("0"))
										 {
											 reqNewPwd = "FALSE";
										 }
										 else if(reqNewPwd.equalsIgnoreCase("1"))
										 {
											 reqNewPwd = "TRUE";
										 }
										 showUserName = workdayAccountData.getChild("wd:Show_User_Name_in_Browser_Window") != null?workdayAccountData.getChild("wd:Show_User_Name_in_Browser_Window").getValue().trim():"";
										 if(showUserName.equalsIgnoreCase("0"))
										 {
											 showUserName = "FALSE";
										 }
										 else if(showUserName.equalsIgnoreCase("1"))
										 {
											 showUserName = "TRUE";
										 }
										 displayXMLIcon = workdayAccountData.getChild("wd:Display_XML_Icon_on_Reports") != null?workdayAccountData.getChild("wd:Display_XML_Icon_on_Reports").getValue().trim():"";
										 if(displayXMLIcon.equalsIgnoreCase("0"))
										 {
											 displayXMLIcon = "FALSE";
										 }
										 else if(displayXMLIcon.equalsIgnoreCase("1"))
										 {
											 displayXMLIcon = "TRUE";
										 }
										 enableWorkbox = workdayAccountData.getChild("wd:Enable_Workbox") != null?workdayAccountData.getChild("wd:Enable_Workbox").getValue().trim():"";
										 if(enableWorkbox.equalsIgnoreCase("0"))
										 {
											 enableWorkbox = "FALSE";
										 }
										 else if(enableWorkbox.equalsIgnoreCase("1"))
										 {
											 enableWorkbox = "TRUE";
										 }
										 allowMixedLan = workdayAccountData.getChild("wd:Allow_Mixed-Language_Transactions") != null?workdayAccountData.getChild("wd:Allow_Mixed-Language_Transactions").getValue().trim():"";
										 if(allowMixedLan.equalsIgnoreCase("0"))
										 {
											 allowMixedLan = "FALSE";
										 }
										 else if(allowMixedLan.equalsIgnoreCase("1"))
										 {
											 allowMixedLan = "TRUE";
										 }
										 passcodeExempt = workdayAccountData.getChild("wd:One-Time_Passcode_Exempt") != null?workdayAccountData.getChild("wd:One-Time_Passcode_Exempt").getValue().trim():"";
										 if(passcodeExempt.equalsIgnoreCase("0"))
										 {
											 passcodeExempt = "FALSE";
										 }
										 else if(passcodeExempt.equalsIgnoreCase("1"))
										 {
											 passcodeExempt = "TRUE";
										 }
										 passcodeGracePeriodEnabled = workdayAccountData.getChild("wd:One-Time_Passcode_Grace_Period_Enabled") != null?workdayAccountData.getChild("wd:One-Time_Passcode_Grace_Period_Enabled").getValue().trim():"";
										 if(passcodeGracePeriodEnabled.equalsIgnoreCase("0"))
										 {
											 passcodeGracePeriodEnabled = "FALSE";
										 }
										 else if(passcodeGracePeriodEnabled.equalsIgnoreCase("1"))
										 {
											 passcodeGracePeriodEnabled = "TRUE";
										 }
										 passcodeGracePeriodLoginRemaining = workdayAccountData.getChild("wd:One-Time_Passcode_Grace_Period_Login_Remaining_Count") != null?workdayAccountData.getChild("wd:One-Time_Passcode_Grace_Period_Login_Remaining_Count").getValue().trim():"";
										 exepmtFromDelAuth = workdayAccountData.getChild("wd:Exempt_from_Delegated_Authentication") != null?workdayAccountData.getChild("wd:Exempt_from_Delegated_Authentication").getValue().trim():"";
										 if(exepmtFromDelAuth.equalsIgnoreCase("0"))
										 {
											 exepmtFromDelAuth = "FALSE";
										 }
										 else if(exepmtFromDelAuth.equalsIgnoreCase("1"))
										 {
											 exepmtFromDelAuth = "TRUE";
										 }
									 }
									 else
									 {
										 userName = "";
										 sessiontimeoutMinutes = "";
										 accountDisabled = "";
										 reqNewPwd = "";
										 showUserName = "";
										 displayXMLIcon = "";
										 enableWorkbox = "";
										 allowMixedLan = "";
										 passcodeExempt = "";
										 passcodeGracePeriodEnabled = "";
										 passcodeGracePeriodLoginRemaining = "";
										 exepmtFromDelAuth = "";
									 }
											 								 								 
									 headingFromWD = "Employee_ID,User_Name,Session_Timeout_Minutes,Account_Disabled,Required_New_Password_At_Next_Login,Show_User_Name_in_Browser_Window,Display_XML_Icon_on_Reports,"
									 		+ "Enable_Workbox,Allow_Mixed_Language_Transactions,Passcode_Exempt,Passcode_Grace_Period_Enabled,Passcode_Grace_Period_Login_Remaining_Count,Exempt_from_Delegated_Authentication";
									 
									 headerStr = employeeId + "," + userName + "," + sessiontimeoutMinutes + "," + accountDisabled + "," + reqNewPwd + "," + showUserName + "," + displayXMLIcon + "," + enableWorkbox + "," + allowMixedLan
											 + "," + passcodeExempt + "," + passcodeGracePeriodEnabled + "," + passcodeGracePeriodLoginRemaining + "," + exepmtFromDelAuth;
									 
									 if(finalStr.equals(""))
									 {
										 finalStr = headingFromWD + "\n" + headerStr;
									 }
									 else
									 {
										 finalStr = finalStr + "\n" + headerStr;
									 }
								 }
							 }
						 }
					 }
					 columnList.removeAll(errorList);
					 wdCount = columnList.size();
				 }		 					 
				 System.out.println(finalStr);
				 targetContent = finalStr.toString().getBytes();					 					 
				 headingWd = selectColumnMapping(loadCycle, ruleName, "Employee_ID");					 
				 complete = true;
			}			 			 
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}

		return headingWd;
	}
	
	private JSONArray createCSVFromWDJobFamilies(Tenant tenant, InputStream is, SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd,
			String loadCycle, String ruleName, String client) {

		 targetContent = null;
		 headingFromWD = "";
		 String checkFile = "";
		
		 String jobFamilyId = "";
		 String jobFamilyName = "";
		 String jobProfileId = "";
		 String jobProfileIdArr = "";
		 
		 Map<String,String> familyMap = null;
		 Map<String,String> profileMap = null;

		 String finalStr = "";
		 String headerStr = "";
		 try 
		 {			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_JOB_FAMILY_REQUEST_FILE = requestfile.getAbsolutePath();
				 
				 if(errorList.isEmpty())
				 {
					 for(int i = 0; i<columnList.size();i++)
					 {
						 checkFile = addWorkerIdListToFindErrorFromJobFamily(GET_JOB_FAMILY_REQUEST_FILE, columnList.get(i), ruleName, "Job_Family_ID");
						 is = new FileInputStream(checkFile);
					     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     SOAPPart soapPart = soapMessage.getSOAPPart();
					     SOAPEnvelope envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
							  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
					     ByteArrayOutputStream out = new ByteArrayOutputStream();
					     soapMessage.writeTo(out);
					     String strMsgChk = new String(out.toByteArray());	
					     
					     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Human_Resources";
					     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
						 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
						 out = new ByteArrayOutputStream();
						 soapResponse.writeTo(out);
						 strMsgChk = new String(out.toByteArray(), "utf-8");
						 if(strMsgChk.contains("faultstring"))
						 {
							 errorList.add(columnList.get(i)) ;
						 }
						 else
						 {
							 ReportElement rptElement = XmlParserManager.parseXml(strMsgChk);				 
							 ReportElement pageResults = rptElement.getChild("env:Body")
										.getChild("wd:Get_Job_Families_Response")
										.getChild("wd:Response_Results");
							 
							 String result = pageResults.getChild("wd:Total_Results").getValue().trim();
							 if(result.equalsIgnoreCase("0"))
							 {
								 errorList.add(columnList.get(i));
							 }
							 else
							 {
								 ReportElement responseData = rptElement.getChild("env:Body")
											.getChild("wd:Get_Job_Families_Response")
											.getChild("wd:Response_Data");
								 
								 List<ReportElement> jobFamilyData = responseData.getChildren("wd:Job_Family");
									
								 for(ReportElement reportElement : jobFamilyData)
								 {
										 ReportElement familyData = reportElement.getChild("wd:Job_Family_Reference");
										 if(familyData != null)
										 {
											 List<ReportElement> familyList = familyData.getChildren("wd:ID");					 
											 for(ReportElement familyElement:familyList)
											 {
												 familyMap = familyElement.getAllAttributes();
												 if(familyMap.get("wd:type").equals("Job_Family_ID"))
												 {
													 jobFamilyId = familyElement.getValue().trim();
													 System.out.println("job Family Id-"+ jobFamilyId);
												 }
											 }
										 }										 										
										
						        		ReportElement jobFamilyDetailData = reportElement.getChild("wd:Job_Family_Data");
									 
						        		if(jobFamilyDetailData != null)
										{
						        			 jobFamilyName = jobFamilyDetailData.getChild("wd:Name") != null?jobFamilyDetailData.getChild("wd:Name").getValue().trim():""; 
						        			 
											 List<ReportElement> jobProfileList = jobFamilyDetailData.getChildren("wd:Job_Profile_Data");
											 if(jobProfileList != null && jobProfileList.size() >0)
											 {
												 jobProfileIdArr = "";
												 
												 for(ReportElement jobProfileElement : jobProfileList)
												 {														 
													 ReportElement profileRef = jobProfileElement.getChild("wd:Job_Profile_Reference");
													 if(profileRef != null)
													 {
														 List<ReportElement> profileData = profileRef.getChildren("wd:ID");								 
														 for(ReportElement idTypeElement:profileData)
														 {
															 profileMap = idTypeElement.getAllAttributes();
															 if(profileMap.get("wd:type").equals("Job_Profile_ID"))
															 {
																 jobProfileId = idTypeElement.getValue().trim();
																 if(jobProfileIdArr.equals(""))
																 {
																	 jobProfileIdArr = jobProfileId;
																 }
																 else
																 {
																	 if(!jobProfileId.isEmpty())
																	 {
																		 jobProfileIdArr = jobProfileIdArr + "~" + jobProfileId;
																	 }
																 }
															 }
														 }
													 }														 													 
												 }
											 }
											 else
											 {
												 errorList.add(columnList.get(i));
												 jobProfileIdArr = "";
											 }
										 }
						        		 else
										 {
						        			 errorList.add(columnList.get(i));
						        			 jobProfileIdArr = "";
										 }
											 								 								 
										 headingFromWD = "Job_Family_ID,Job_Family_Name,Job_Profile_ID";
										 
										 headerStr = jobFamilyId + "," + jobFamilyName + "," + jobProfileIdArr;
										 
										 if(finalStr.equals(""))
										 {
											 finalStr = headingFromWD + "\n" + headerStr;
										 }
										 else
										 {
											 finalStr = finalStr + "\n" + headerStr;
										 }
								 }
							 }
						 }
					 }
					 columnList.removeAll(errorList);
					 wdCount = columnList.size();
				 }		 					 
				 System.out.println(finalStr);
				 targetContent = finalStr.toString().getBytes();					 					 
				 headingWd = selectColumnMapping(loadCycle, ruleName, "Job_Family_ID");					 
				 complete = true;
			}			 			 
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}

		return headingWd;
	}
	
	private JSONArray createCSVFromWDJobFamilyGroup(Tenant tenant, InputStream is, SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd,
			String loadCycle, String ruleName, String client) {

		 targetContent = null;
		 headingFromWD = "";
		 String checkFile = "";
		
		 String jobFamilyGroupId = "";
		 String jobFamilyGroupName = "";
		 String jobFamilyId = "";
		 String jobFamilyIdArr = "";
		 String jobFamilyName = "";
		 String jobFamilyNameArr = "";
		 
		 Map<String,String> familyMap = null;
		 Map<String,String> familyGroupMap = null;

		 String finalStr = "";
		 String headerStr = "";
		 try 
		 {			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_JOB_FAMILY_GROUP_REQUEST_FILE = requestfile.getAbsolutePath();
				 
				 if(errorList.isEmpty())
				 {
					 for(int i = 0; i<columnList.size();i++)
					 {
						 checkFile = addWorkerIdListToFindErrorFromJobFamilyGroup(GET_JOB_FAMILY_GROUP_REQUEST_FILE, columnList.get(i), ruleName, "Job_Family_ID");
						 is = new FileInputStream(checkFile);
					     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     SOAPPart soapPart = soapMessage.getSOAPPart();
					     SOAPEnvelope envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
							  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
					     ByteArrayOutputStream out = new ByteArrayOutputStream();
					     soapMessage.writeTo(out);
					     String strMsgChk = new String(out.toByteArray());	
					     
					     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Human_Resources";
					     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
						 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
						 out = new ByteArrayOutputStream();
						 soapResponse.writeTo(out);
						 strMsgChk = new String(out.toByteArray(), "utf-8");
						 if(strMsgChk.contains("faultstring"))
						 {
							 errorList.add(columnList.get(i)) ;
						 }
						 else
						 {
							 ReportElement rptElement = XmlParserManager.parseXml(strMsgChk);				 
							 ReportElement pageResults = rptElement.getChild("env:Body")
										.getChild("wd:Get_Job_Family_Groups_Response")
										.getChild("wd:Response_Results");
							 
							 String result = pageResults.getChild("wd:Total_Results").getValue().trim();
							 if(result.equalsIgnoreCase("0"))
							 {
								 errorList.add(columnList.get(i));
							 }
							 else
							 {
								 ReportElement responseData = rptElement.getChild("env:Body")
											.getChild("wd:Get_Job_Family_Groups_Response")
											.getChild("wd:Response_Data");
								 
								 List<ReportElement> jobFamilyGroupData = responseData.getChildren("wd:Job_Family_Group");
									
								 for(ReportElement reportElement : jobFamilyGroupData)
								 {
										 ReportElement familyGroupData = reportElement.getChild("wd:Job_Family_Group_Reference");
										 if(familyGroupData != null)
										 {
											 List<ReportElement> familyGroupList = familyGroupData.getChildren("wd:ID");					 
											 for(ReportElement familyGroupElement:familyGroupList)
											 {
												 familyGroupMap = familyGroupElement.getAllAttributes();
												 if(familyGroupMap.get("wd:type").equals("Job_Family_ID"))
												 {
													 jobFamilyGroupId = familyGroupElement.getValue().trim();
													 System.out.println("job Family Group Id-"+ jobFamilyGroupId);
												 }
											 }
										 }										 										
										
						        		ReportElement jobFamilyGroupDetailData = reportElement.getChild("wd:Job_Family_Group_Data");
									 
						        		if(jobFamilyGroupDetailData != null)
										{
						        			 jobFamilyGroupName = jobFamilyGroupDetailData.getChild("wd:Name") != null?jobFamilyGroupDetailData.getChild("wd:Name").getValue().trim():""; 
						        			 
											 List<ReportElement> jobFamilyList = jobFamilyGroupDetailData.getChildren("wd:Job_Family_Data");
											 if(jobFamilyList != null && jobFamilyList.size() >0)
											 {
												 jobFamilyIdArr = "";
												 jobFamilyNameArr = "";
												 for(ReportElement jobFamilyElement : jobFamilyList)
												 {														 
													 ReportElement familyRef = jobFamilyElement.getChild("wd:Job_Family_Reference");
													 if(familyRef != null)
													 {
														 List<ReportElement> familyData = familyRef.getChildren("wd:ID");								 
														 for(ReportElement idTypeElement:familyData)
														 {
															 familyMap = idTypeElement.getAllAttributes();
															 if(familyMap.get("wd:type").equals("Job_Family_ID"))
															 {
																 jobFamilyId = idTypeElement.getValue().trim();
																 if(jobFamilyIdArr.equals(""))
																 {
																	 jobFamilyIdArr = jobFamilyId;
																 }
																 else
																 {
																	 if(!jobFamilyId.isEmpty())
																	 {
																		 jobFamilyIdArr = jobFamilyIdArr + "~" + jobFamilyId;
																	 }
																 }
															 }
														 }
													 }
													 ReportElement jobFamilyInfoData = jobFamilyElement.getChild("wd:Job_Family_Info_Data");
													 if(jobFamilyInfoData != null)
													 {
														 jobFamilyName = jobFamilyInfoData.getChild("wd:Job_Family_Name") != null?jobFamilyInfoData.getChild("wd:Job_Family_Name").getValue().trim():"";
														 if(jobFamilyNameArr.equals(""))
														 {
															 jobFamilyNameArr = jobFamilyName;
														 }
														 else
														 {
															 if(!jobFamilyName.isEmpty())
															 {
																 jobFamilyNameArr = jobFamilyNameArr + "~" + jobFamilyName;
															 }
														 }
													 }
												 }
											 }
											 else
											 {
												 errorList.add(columnList.get(i));
												 jobFamilyIdArr = "";
												 jobFamilyNameArr = "";
											 }
										 }
						        		 else
										 {
						        			 errorList.add(columnList.get(i));
						        			 jobFamilyIdArr = "";
						        			 jobFamilyNameArr = "";
										 }
											 								 								 
										 headingFromWD = "Job_Family_Group_ID,Job_Family_Group_Name,Job_Family_ID,Job_Family_Name";
										 
										 headerStr = jobFamilyGroupId + "," + jobFamilyGroupName + "," + jobFamilyIdArr + "," + jobFamilyNameArr;
										 
										 if(finalStr.equals(""))
										 {
											 finalStr = headingFromWD + "\n" + headerStr;
										 }
										 else
										 {
											 finalStr = finalStr + "\n" + headerStr;
										 }
								 }
							 }
						 }
					 }
					 columnList.removeAll(errorList);
					 wdCount = columnList.size();
				 }		 					 
				 System.out.println(finalStr);
				 targetContent = finalStr.toString().getBytes();					 					 
				 headingWd = selectColumnMapping(loadCycle, ruleName, "Job_Family_Group_ID");					 
				 complete = true;
			}			 			 
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}

		return headingWd;
	}
	
	private JSONArray createCSVFromWDJobProfile(Tenant tenant, InputStream is, SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd,
			String loadCycle, String ruleName, String client) {
		
		 targetContent = null;
		 headingFromWD = "";
		 String checkFile = "";
		
		 String jobProfileId = "";
		 String jobCode = "";
		 String jobTitle = "";
		 String managementLevelId = "";
		 String jobLevelId = "";
		 String jobFamilyId = "";
		 String jobFamilyIdArr = "";
		 String restrictCounrty = "";
		 String restrictCounrtyArr = "";
		 String jobClassificationId = "";
		 String payRateCountry = "";
		 String payRateCountryArr = "";
		 String payRateType = "";
		 String payRateTypeArr = "";
		 String jobExemptCountry = "";
		 String jobExempt = "";
		 String compensationId = "";
		 
		 Map<String,String> profileMap = null;
		 Map<String,String> managementMap = null;
		 Map<String,String> jobLevelMap = null;
		 Map<String,String> familyMap = null;
		 Map<String,String> restrictCounrtyMap = null;
		 Map<String,String> classificationMap = null;
		 Map<String,String> payRateCountryMap = null;
		 Map<String,String> payRateTypeMap = null;
		 Map<String,String> exemptCountryMap = null;
		 Map<String,String> compensationMap = null;

		 String finalStr = "";
		 String headerStr = "";
		 try 
		 {			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_JOB_PROFILE_REQUEST_FILE = requestfile.getAbsolutePath();
				 
				 if(errorList.isEmpty())
				 {
					 for(int i = 0; i<columnList.size();i++)
					 {
						 checkFile = addWorkerIdListToFindErrorFromJobProfile(GET_JOB_PROFILE_REQUEST_FILE, columnList.get(i), ruleName, "Job_Profile_ID");
						 is = new FileInputStream(checkFile);
					     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     SOAPPart soapPart = soapMessage.getSOAPPart();
					     SOAPEnvelope envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
							  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
					     ByteArrayOutputStream out = new ByteArrayOutputStream();
					     soapMessage.writeTo(out);
					     String strMsgChk = new String(out.toByteArray());	
					     
					     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Human_Resources";
					     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
						 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
						 out = new ByteArrayOutputStream();
						 soapResponse.writeTo(out);
						 strMsgChk = new String(out.toByteArray(), "utf-8");
						 if(strMsgChk.contains("faultstring"))
						 {
							 errorList.add(columnList.get(i)) ;
						 }
						 else
						 {
							 ReportElement rptElement = XmlParserManager.parseXml(strMsgChk);				 
							 ReportElement pageResults = rptElement.getChild("env:Body")
										.getChild("wd:Get_Job_Profiles_Response")
										.getChild("wd:Response_Results");
							 
							 String result = pageResults.getChild("wd:Total_Results").getValue().trim();
							 if(result.equalsIgnoreCase("0"))
							 {
								 errorList.add(columnList.get(i));
							 }
							 else
							 {
								 ReportElement responseData = rptElement.getChild("env:Body")
											.getChild("wd:Get_Job_Profiles_Response")
											.getChild("wd:Response_Data");
								 
								 List<ReportElement> jobProfileData = responseData.getChildren("wd:Job_Profile");
									
								 for(ReportElement reportElement : jobProfileData)
								 {
										 ReportElement profileData = reportElement.getChild("wd:Job_Profile_Reference");
										 if(profileData != null)
										 {
											 List<ReportElement> profileList = profileData.getChildren("wd:ID");					 
											 for(ReportElement profileElement:profileList)
											 {
												 profileMap = profileElement.getAllAttributes();
												 if(profileMap.get("wd:type").equals("Job_Profile_ID"))
												 {
													 jobProfileId = profileElement.getValue().trim();
													 System.out.println("job Profile Id-"+ jobProfileId);
												 }
											 }
										 }
										
						        		ReportElement jobProfileDetailData = reportElement.getChild("wd:Job_Profile_Data");									 
						        		if(jobProfileDetailData != null)
										{
						        			 jobCode = jobProfileDetailData.getChild("wd:Job_Code") != null?jobProfileDetailData.getChild("wd:Job_Code").getValue().trim():""; 
						        			 ReportElement jobProfileBasicData = jobProfileDetailData.getChild("wd:Job_Profile_Basic_Data");
						        			 if(jobProfileBasicData != null)
						        			 {
						        				 jobTitle = jobProfileBasicData.getChild("wd:Job_Title") != null?jobProfileBasicData.getChild("wd:Job_Title").getValue().trim():"";
						        				 ReportElement managementData = jobProfileBasicData.getChild("wd:Management_Level_Reference");
												 if(managementData != null)
												 {
													 List<ReportElement> managementList = managementData.getChildren("wd:ID");					 
													 for(ReportElement managementElement:managementList)
													 {
														 managementMap = managementElement.getAllAttributes();
														 if(managementMap.get("wd:type").equals("Management_Level_ID"))
														 {
															 managementLevelId = managementElement.getValue().trim();
														 }
													 }
												 }
												 else
												 {
													 managementLevelId = "";
												 }
												 
												 ReportElement jobLevelData = jobProfileBasicData.getChild("wd:Job_Level_Reference");
												 if(jobLevelData != null)
												 {
													 List<ReportElement> jobLevelList = jobLevelData.getChildren("wd:ID");					 
													 for(ReportElement jobLevelElement:jobLevelList)
													 {
														 jobLevelMap = jobLevelElement.getAllAttributes();
														 if(jobLevelMap.get("wd:type").equals("Job_Level_ID"))
														 {
															 jobLevelId = jobLevelElement.getValue().trim();
														 }
													 }
												 }
												 else
												 {
													 jobLevelId = "";
												 }
												 
												 List<ReportElement> jobFamilyList = jobProfileBasicData.getChildren("wd:Job_Family_Data");
												 if(jobFamilyList != null && jobFamilyList.size() >0)
												 {
													 jobFamilyIdArr = "";
													 for(ReportElement jobFamilyElement : jobFamilyList)
													 {														 
														 ReportElement familyRef = jobFamilyElement.getChild("wd:Job_Family_Reference");
														 if(familyRef != null)
														 {
															 List<ReportElement> familyData = familyRef.getChildren("wd:ID");								 
															 for(ReportElement idTypeElement:familyData)
															 {
																 familyMap = idTypeElement.getAllAttributes();
																 if(familyMap.get("wd:type").equals("Job_Family_ID"))
																 {
																	 jobFamilyId = idTypeElement.getValue().trim();
																	 if(jobFamilyIdArr.equals(""))
																	 {
																		 jobFamilyIdArr = jobFamilyId;
																	 }
																	 else
																	 {
																		 if(!jobFamilyId.isEmpty())
																		 {
																			 jobFamilyIdArr = jobFamilyIdArr + "~" + jobFamilyId;
																		 }
																	 }
																 }
															 }
														 }
														 else
														 {
															 jobFamilyIdArr = "";
														 }
													 }
												 }
												 else
												 {
													 jobFamilyIdArr = "";
												 }
												 
												 List<ReportElement> restrictCountryList = jobProfileBasicData.getChildren("wd:Restrict_to_Country_Reference");
												 if(restrictCountryList != null && restrictCountryList.size() >0)
												 {
													 restrictCounrtyArr = "";
													 for(ReportElement restrictCountryElement : restrictCountryList)
													 {
														 List<ReportElement> restrictCntData = restrictCountryElement.getChildren("wd:ID");								 
														 for(ReportElement idTypeElement:restrictCntData)
														 {
															 restrictCounrtyMap = idTypeElement.getAllAttributes();
															 if(restrictCounrtyMap.get("wd:type").equals("ISO_3166-1_Alpha-3_Code"))
															 {
																 restrictCounrty = idTypeElement.getValue().trim();
																 if(restrictCounrtyArr.equals(""))
																 {
																	 restrictCounrtyArr = restrictCounrty;
																 }
																 else
																 {
																	 if(!restrictCounrty.isEmpty())
																	 {
																		 restrictCounrtyArr = restrictCounrtyArr + "~" + restrictCounrty;
																	 }
																 }
															 }
														 }
													 }
												 }
												 else
												 {
													 restrictCounrtyArr = "";
												 }
						        			 }
						        			 
						        			 ReportElement jobclassificationData = jobProfileDetailData.getChild("wd:Job_Classification_Data");
						        			 if(jobclassificationData != null)
						        			 {
							        			 ReportElement classificationData = jobclassificationData.getChild("wd:Job_Classifications_Reference");
												 if(classificationData != null)
												 {
													 List<ReportElement> classificationList = classificationData.getChildren("wd:ID");					 
													 for(ReportElement classificationElement:classificationList)
													 {
														 classificationMap = classificationElement.getAllAttributes();
														 if(classificationMap.get("wd:type").equals("Job_Classification_Reference_ID"))
														 {
															 jobClassificationId = classificationElement.getValue().trim();
														 }
													 }
												 }
						        			 }
						        			 else
						        			 {
						        				 jobClassificationId = "";
						        			 }
						        			 
						        			 List<ReportElement> jobProfilePayRateList = jobProfileDetailData.getChildren("wd:Job_Profile_Pay_Rate_Data");
						        			 if(jobProfilePayRateList != null && jobProfilePayRateList.size() >0)
											 {
						        				 payRateCountryArr = "";
						        				 payRateTypeArr = "";
						        				 for(ReportElement jobProfileCountryElement : jobProfilePayRateList)
												 {														 
													 ReportElement payRateCountryRef = jobProfileCountryElement.getChild("wd:Country_Reference");
													 if(payRateCountryRef != null)
													 {
														 List<ReportElement> countryData = payRateCountryRef.getChildren("wd:ID");								 
														 for(ReportElement idTypeCountryElement:countryData)
														 {
															 payRateCountryMap = idTypeCountryElement.getAllAttributes();
															 if(payRateCountryMap.get("wd:type").equals("ISO_3166-1_Alpha-3_Code"))
															 {
																 payRateCountry = idTypeCountryElement.getValue().trim();
																 if(payRateCountryArr.equals(""))
																 {
																	 payRateCountryArr = payRateCountry;
																 }
																 else
																 {
																	 if(!payRateCountry.isEmpty())
																	 {
																		 payRateCountryArr = payRateCountryArr + "~" + payRateCountry;
																	 }
																 }
															 }
														 }
													 }
													 
													 ReportElement payRateTyprRef = jobProfileCountryElement.getChild("wd:Pay_Rate_Type_Reference");
													 if(payRateTyprRef != null)
													 {
														 List<ReportElement> typeData = payRateTyprRef.getChildren("wd:ID");								 
														 for(ReportElement idTypePayRateElement:typeData)
														 {
															 payRateTypeMap = idTypePayRateElement.getAllAttributes();
															 if(payRateTypeMap.get("wd:type").equals("Pay_Rate_Type_ID"))
															 {
																 payRateType = idTypePayRateElement.getValue().trim();
																 if(payRateTypeArr.equals(""))
																 {
																	 payRateTypeArr = payRateType;
																 }
																 else
																 {
																	 if(!payRateType.isEmpty())
																	 {
																		 payRateTypeArr = payRateTypeArr + "~" + payRateType;
																	 }
																 }
															 }
														 }
													 }
												 }
											 }
						        			 else
						        			 {
						        				 payRateCountryArr = "";
						        				 payRateTypeArr = "";
						        			 }
						        			 
						        			 ReportElement jobExemptData = jobProfileDetailData.getChild("wd:Job_Profile_Exempt_Data");
						        			 if(jobExemptData != null)
						        			 {
							        			 ReportElement exemptRef = jobExemptData.getChild("wd:Location_Context_Reference");
												 if(exemptRef != null)
												 {
													 List<ReportElement> exemptCountryList = exemptRef.getChildren("wd:ID");					 
													 for(ReportElement exemptCountryElement:exemptCountryList)
													 {
														 exemptCountryMap = exemptCountryElement.getAllAttributes();
														 if(exemptCountryMap.get("wd:type").equals("ISO_3166-1_Alpha-3_Code"))
														 {
															 jobExemptCountry = exemptCountryElement.getValue().trim();
														 }
													 }
												 }
												 jobExempt = jobExemptData.getChild("wd:Job_Exempt") != null?jobExemptData.getChild("wd:Job_Exempt").getValue().trim():"";
												 if(jobExempt.equalsIgnoreCase("0"))
												 {
													 jobExempt = "Nonexempt";
												 }
												 else
												 {
													 jobExempt = "Exempt";
												 }
						        			 }
						        			 
						        			 ReportElement compensationData = jobProfileDetailData.getChild("wd:Workers_Compensation_Code_Replacement_Data");
						        			 if(compensationData != null)
						        			 {
						        				 ReportElement compensationRef = compensationData.getChild("wd:Workers_Compensation_Code_Reference");
												 if(compensationRef != null)
												 {
													 List<ReportElement> compensationList = compensationRef.getChildren("wd:ID");					 
													 for(ReportElement compensationElement:compensationList)
													 {
														 compensationMap = compensationElement.getAllAttributes();
														 if(compensationMap.get("wd:type").equals("Workers_Compensation_ID"))
														 {
															 compensationId = compensationElement.getValue().trim();
														 }
													 }
												 }
						        			 }
						        			 
										 }
							        	 else
							        	 {
							        		errorList.add(columnList.get(i));
							        	 }
											 								 								 
										 headingFromWD = "Job_Profile_ID,Job_Code,Job_Title,Management_Level_ID,Job_Level_ID,Job_Family_ID,Restrict_To_Country,Job_Classification_ID,"
										 					+ "Pay_Rate_Country,Pay_Rate_Type,Job_Exempt_Country,Job_Exempt,Workers_Compensation_ID";
										 
										 headerStr = jobProfileId + "," + jobCode + "," + jobTitle + "," + managementLevelId + "," + jobLevelId + "," + jobFamilyIdArr + "," + restrictCounrtyArr
												 + "," + jobClassificationId + "," + payRateCountryArr + "," + payRateTypeArr + "," + jobExemptCountry + "," + jobExempt + "," + compensationId;
										 
										 if(finalStr.equals(""))
										 {
											 finalStr = headingFromWD + "\n" + headerStr;
										 }
										 else
										 {
											 finalStr = finalStr + "\n" + headerStr;
										 }
								 }
							 }
						 }
					 }
					 columnList.removeAll(errorList);
					 wdCount = columnList.size();
				 }		 					 
				 System.out.println(finalStr);
				 targetContent = finalStr.toString().getBytes();					 					 
				 headingWd = selectColumnMapping(loadCycle, ruleName, "Job_Profile_ID");					 
				 complete = true;
			}			 			 
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}

		return headingWd;
	}
	
	private JSONArray createCSVFromWDManageJobHistory(Tenant tenant, InputStream is, SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd,
			String loadCycle, String ruleName, String client) {
		
		 targetContent = null;
		 headingFromWD = "";
		 String checkFile = "";
		
		 String employeeId = "";
		 String WID = "";
		 String jobTitle = "";
		 String jobTitleArr = "";
		 String company = "";
		 String companyArr = "";
		 String startDate = "";
		 String startDateArr = "";
		 String endDate = "";
		 String endDateArr = "";
		 String location = "";
		 String locationArr = "";
		 
		 Map<String,String> widMap = null;

		 String finalStr = "";
		 String headerStr = "";
		 String reportURL = "";
		 
		 try 
		 {			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_MANAGE_EDUCATION_REQUEST_FILE = requestfile.getAbsolutePath();
				 
				 if(errorList.isEmpty())
				 {
					 for(int i = 0; i<columnList.size();i++)
					 {
						 checkFile = addWorkerIdListToFindError(GET_MANAGE_EDUCATION_REQUEST_FILE, columnList.get(i), ruleName, "Employee_ID");
						 is = new FileInputStream(checkFile);
					     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     SOAPPart soapPart = soapMessage.getSOAPPart();
					     SOAPEnvelope envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
							  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
					     ByteArrayOutputStream out = new ByteArrayOutputStream();
					     soapMessage.writeTo(out);
					     String strMsgChk = new String(out.toByteArray());	
					     
					     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
					     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
						 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
						 out = new ByteArrayOutputStream();
						 soapResponse.writeTo(out);
						 strMsgChk = new String(out.toByteArray(), "utf-8");
						 if(strMsgChk.contains("faultstring"))
						 {
							 errorList.add(columnList.get(i)) ;
						 }
						 else
						 {
							 ReportElement rptElement = XmlParserManager.parseXml(strMsgChk);				 
							 ReportElement pageResults = rptElement.getChild("env:Body")
										.getChild("wd:Get_Workers_Response")
										.getChild("wd:Response_Results");
							 
							 String result = pageResults.getChild("wd:Total_Results").getValue().trim();
							 if(result.equalsIgnoreCase("0"))
							 {
								 errorList.add(columnList.get(i));
							 }
							 else
							 {
								 ReportElement responseData = rptElement.getChild("env:Body")
											.getChild("wd:Get_Workers_Response")
											.getChild("wd:Response_Data");
								 
								 List<ReportElement> workerData = responseData.getChildren("wd:Worker");
									
								 for(ReportElement reportElement : workerData)
								 {
									 ReportElement element1 = reportElement.getChild("wd:Worker_Data");
						        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
						        		System.out.println("employeeId--"+ employeeId);
						        		
						        		ReportElement widRef = reportElement.getChild("wd:Worker_Reference");
										 if(widRef != null)
										 {
											 List<ReportElement> idList = widRef.getChildren("wd:ID");
											 for(ReportElement idElement:idList)
											 {
												 widMap = idElement.getAllAttributes();
												 if(widMap.get("wd:type").equals("WID"))
												 {
													 WID = idElement.getValue().trim();
												 }
											 }
										 }
										 else
										 {
											 WID = "";
										 }
										
										 reportURL = "https://" + tenant.getTenantUrl() + "customreport2/" + tenant.getTenantName() + "/ISU_Verify/" + "Manage_Job_History?Employee!WID=" + WID;
										 
										 JSONArray jArr = createJobHistoryData(reportURL);
											if(jArr != null && jArr.size() >1)
											{
												 jobTitleArr = "";
												 companyArr = "";
												 startDateArr = "";
												 endDateArr = "";
												 locationArr = "";
												 for(int a = 0; a<jArr.length(); a++) 
										         {
													JSONObject objects = jArr.getJSONObject(a);
													jobTitle = objects.isNull("jobTitle")?"":objects.getString("jobTitle");
													if(jobTitleArr.equals(""))
													{
														jobTitleArr = jobTitle;
													}
													else
													{
														if(!jobTitle.isEmpty())
														{
															jobTitleArr = jobTitleArr + "~" + jobTitle;
														}
													}
													company = objects.isNull("company")?"":objects.getString("company");
													if(companyArr.equals(""))
													{
														companyArr = company;
													}
													else
													{
														if(!company.isEmpty())
														{
															companyArr = companyArr + "~" + company;
														}
													}
													startDate = objects.isNull("startDate")?"":objects.getString("startDate");
													if(startDateArr.equals(""))
													{
														startDateArr = startDate;
													}
													else
													{
														if(!startDate.isEmpty())
														{
															startDateArr = startDateArr + "~" + startDate;
														}
													}
													endDate = objects.isNull("endDate")?"":objects.getString("endDate");
													if(endDateArr.equals(""))
													{
														endDateArr = endDate;
													}
													else
													{
														if(!endDate.isEmpty())
														{
															endDateArr = endDateArr + "~" + endDate;
														}
													}
													location = objects.isNull("location")?"":objects.getString("location");
													if(locationArr.equals(""))
													{
														locationArr = location;
													}
													else
													{
														if(!location.isEmpty())
														{
															locationArr = locationArr + "~" + location;
														}
													}
										        }
											}
											else
											{
												 errorList.add(columnList.get(i));
												 jobTitleArr = "";
												 companyArr = "";
												 startDateArr = "";
												 endDateArr = "";
												 locationArr = "";
											}
										 
										 headingFromWD = "Employee_ID,Job_Title,Company,Start_Date,End_Date,Location";
										 
										 headerStr = employeeId + "," + jobTitleArr + "," + companyArr + "," + startDateArr + "," + endDateArr + "," + locationArr;
										 
										 if(finalStr.equals(""))
										 {
											 finalStr = headingFromWD + "\n" + headerStr;
										 }
										 else
										 {
											 finalStr = finalStr + "\n" + headerStr;
										 }
								 }
							 }
						 }
					 }
					 columnList.removeAll(errorList);
					 wdCount = columnList.size();
				 }		 					 
				 System.out.println(finalStr);
				 targetContent = finalStr.toString().getBytes();					 					 
				 headingWd = selectColumnMapping(loadCycle, ruleName, "Employee_ID");					 
				 complete = true;
			}			 			 
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}

		return headingWd;
	}
	
	private JSONArray createCSVFromWDCustomOrg(Tenant tenant, InputStream is, SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd,
			String loadCycle, String ruleName, String client) {

		 targetContent = null;
		 headingFromWD = "";
		 String checkFile = "";
		
		 String employeeId = "";
		 String WID = "";
		 String customOrg = "";
		 
		 Map<String,String> widMap = null;

		 String finalStr = "";
		 String headerStr = "";
		 String reportURL = "";
		 
		 try 
		 {			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_CUSTOM_ORG_REQUEST_FILE = requestfile.getAbsolutePath();
				 
				 if(errorList.isEmpty())
				 {
					 for(int i = 0; i<columnList.size();i++)
					 {
						 checkFile = addWorkerIdListToFindError(GET_CUSTOM_ORG_REQUEST_FILE, columnList.get(i), ruleName, "Employee_ID");
						 is = new FileInputStream(checkFile);
					     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     SOAPPart soapPart = soapMessage.getSOAPPart();
					     SOAPEnvelope envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
							  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
					     ByteArrayOutputStream out = new ByteArrayOutputStream();
					     soapMessage.writeTo(out);
					     String strMsgChk = new String(out.toByteArray());	
					     
					     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
					     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
						 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
						 out = new ByteArrayOutputStream();
						 soapResponse.writeTo(out);
						 strMsgChk = new String(out.toByteArray(), "utf-8");
						 if(strMsgChk.contains("faultstring"))
						 {
							 errorList.add(columnList.get(i)) ;
						 }
						 else
						 {
							 ReportElement rptElement = XmlParserManager.parseXml(strMsgChk);				 
							 ReportElement pageResults = rptElement.getChild("env:Body")
										.getChild("wd:Get_Workers_Response")
										.getChild("wd:Response_Results");
							 
							 String result = pageResults.getChild("wd:Total_Results").getValue().trim();
							 if(result.equalsIgnoreCase("0"))
							 {
								 errorList.add(columnList.get(i));
							 }
							 else
							 {
								 ReportElement responseData = rptElement.getChild("env:Body")
											.getChild("wd:Get_Workers_Response")
											.getChild("wd:Response_Data");
								 
								 List<ReportElement> workerData = responseData.getChildren("wd:Worker");
									
								 for(ReportElement reportElement : workerData)
								 {
									 ReportElement element1 = reportElement.getChild("wd:Worker_Data");
						        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
						        		System.out.println("employeeId--"+ employeeId);
						        		
						        		ReportElement widRef = reportElement.getChild("wd:Worker_Reference");
										 if(widRef != null)
										 {
											 List<ReportElement> idList = widRef.getChildren("wd:ID");
											 for(ReportElement idElement:idList)
											 {
												 widMap = idElement.getAllAttributes();
												 if(widMap.get("wd:type").equals("WID"))
												 {
													 WID = idElement.getValue().trim();
												 }
											 }
										 }
										 else
										 {
											 WID = "";
										 }
										
										 reportURL = "https://" + tenant.getTenantUrl() + "customreport2/" + tenant.getTenantName() + "/ISU_Verify_Payroll/" + "USPAY_Validate_Custom_Org?Employee!WID=" + WID;
										 
										 JSONArray jArr = createCustomOrg(reportURL);
											if(jArr != null && jArr.size() >1)
											{
												 for(int a = 0; a<jArr.length(); a++) 
										         {
													JSONObject objects = jArr.getJSONObject(a);
													customOrg = objects.isNull("customOrg")?"":objects.getString("customOrg");
													if(customOrg.contains(","))
													{
														customOrg = customOrg.replaceAll(",", "|");
													}
										        }
											}
											else
											{
												 errorList.add(columnList.get(i));
												 customOrg = "";
											}
										 
										 headingFromWD = "Employee_ID,Custom_Organization";
										 
										 headerStr = employeeId + "," + customOrg;
										 
										 if(finalStr.equals(""))
										 {
											 finalStr = headingFromWD + "\n" + headerStr;
										 }
										 else
										 {
											 finalStr = finalStr + "\n" + headerStr;
										 }
								 }
							 }
						 }
					 }
					 columnList.removeAll(errorList);
					 wdCount = columnList.size();
				 }		 					 
				 System.out.println(finalStr);
				 targetContent = finalStr.toString().getBytes();					 					 
				 headingWd = selectColumnMapping(loadCycle, ruleName, "Employee_ID");					 
				 complete = true;
			}			 			 
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}

		return headingWd;
	}
	
	private JSONArray createCSVFromWDEditAdditionalData(Tenant tenant, InputStream is, SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd,
			String loadCycle, String ruleName, String client) {

		 targetContent = null;
		 headingFromWD = "";
		 String checkFile = "";
		
		 String employeeId = "";
		 String WID = "";
		 String firstName = "";
		 
		 Map<String,String> widMap = null;

		 String finalStr = "";
		 String headerStr = "";
		 String reportURL = "";
		 
		 try 
		 {			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_ADDITIONAL_DATA_REQUEST_FILE = requestfile.getAbsolutePath();
				 
				 if(errorList.isEmpty())
				 {
					 for(int i = 0; i<columnList.size();i++)
					 {
						 checkFile = addWorkerIdListToFindError(GET_ADDITIONAL_DATA_REQUEST_FILE, columnList.get(i), ruleName, "Employee_ID");
						 is = new FileInputStream(checkFile);
					     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     SOAPPart soapPart = soapMessage.getSOAPPart();
					     SOAPEnvelope envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
							  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
					     ByteArrayOutputStream out = new ByteArrayOutputStream();
					     soapMessage.writeTo(out);
					     String strMsgChk = new String(out.toByteArray());	
					     
					     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
					     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
						 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
						 out = new ByteArrayOutputStream();
						 soapResponse.writeTo(out);
						 strMsgChk = new String(out.toByteArray(), "utf-8");
						 if(strMsgChk.contains("faultstring"))
						 {
							 errorList.add(columnList.get(i)) ;
						 }
						 else
						 {
							 ReportElement rptElement = XmlParserManager.parseXml(strMsgChk);				 
							 ReportElement pageResults = rptElement.getChild("env:Body")
										.getChild("wd:Get_Workers_Response")
										.getChild("wd:Response_Results");
							 
							 String result = pageResults.getChild("wd:Total_Results").getValue().trim();
							 if(result.equalsIgnoreCase("0"))
							 {
								 errorList.add(columnList.get(i));
							 }
							 else
							 {
								 ReportElement responseData = rptElement.getChild("env:Body")
											.getChild("wd:Get_Workers_Response")
											.getChild("wd:Response_Data");
								 
								 List<ReportElement> workerData = responseData.getChildren("wd:Worker");
									
								 for(ReportElement reportElement : workerData)
								 {
									 ReportElement element1 = reportElement.getChild("wd:Worker_Data");
						        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
						        		System.out.println("employeeId--"+ employeeId);
						        		
						        		ReportElement widRef = reportElement.getChild("wd:Worker_Reference");
										 if(widRef != null)
										 {
											 List<ReportElement> idList = widRef.getChildren("wd:ID");
											 for(ReportElement idElement:idList)
											 {
												 widMap = idElement.getAllAttributes();
												 if(widMap.get("wd:type").equals("WID"))
												 {
													 WID = idElement.getValue().trim();
												 }
											 }
										 }
										 else
										 {
											 WID = "";
										 }
										
										 reportURL = "https://" + tenant.getTenantUrl() + "customreport2/" + tenant.getTenantName() + "/ISU_Verify_Payroll/" + "USPAY_VALIDATE_Edit_Additional_Data?Employee!WID=" + WID;
										 
										 JSONArray jArr = createAdditionalData(reportURL);
											if(jArr != null && jArr.size() >1)
											{
												 for(int a = 0; a<jArr.length(); a++) 
										         {
													JSONObject objects = jArr.getJSONObject(a);
													firstName = objects.isNull("firstName")?"":objects.getString("firstName");
													if(firstName.contains(","))
													{
														firstName = firstName.replaceAll(",", "|");
													}
										        }
											}
											else
											{
												 errorList.add(columnList.get(i));
												 firstName = "";
											}
										 
										 headingFromWD = "Employee_ID,First_Name";
										 
										 headerStr = employeeId + "," + firstName;
										 
										 if(finalStr.equals(""))
										 {
											 finalStr = headingFromWD + "\n" + headerStr;
										 }
										 else
										 {
											 finalStr = finalStr + "\n" + headerStr;
										 }
								 }
							 }
						 }
					 }
					 columnList.removeAll(errorList);
					 wdCount = columnList.size();
				 }		 					 
				 System.out.println(finalStr);
				 targetContent = finalStr.toString().getBytes();					 					 
				 headingWd = selectColumnMapping(loadCycle, ruleName, "Employee_ID");					 
				 complete = true;
			}			 			 
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}

		return headingWd;
	}	
	
	private JSONArray createCSVFromWDManageEducation(Tenant tenant, InputStream is, SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd,
			String loadCycle, String ruleName, String client) {

		 targetContent = null;
		 headingFromWD = "";
		 String checkFile = "";
		
		 String employeeId = "";
		 String WID = "";
		 String school = "";
		 String schoolArr = "";
		 String country = "";
		 String countryArr = "";
		 String degree = "";
		 String degreeArr = "";
		 String degreeDate = "";
		 String degreeDateArr = "";
		 String fieldOfStudy = "";
		 String fieldOfStudyArr = "";
		 
		 Map<String,String> widMap = null;

		 String finalStr = "";
		 String headerStr = "";
		 String reportURL = "";
		 
		 try 
		 {			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_MANAGE_EDUCATION_REQUEST_FILE = requestfile.getAbsolutePath();
				 
				 if(errorList.isEmpty())
				 {
					 for(int i = 0; i<columnList.size();i++)
					 {
						 checkFile = addWorkerIdListToFindError(GET_MANAGE_EDUCATION_REQUEST_FILE, columnList.get(i), ruleName, "Employee_ID");
						 is = new FileInputStream(checkFile);
					     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     SOAPPart soapPart = soapMessage.getSOAPPart();
					     SOAPEnvelope envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
							  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
					     ByteArrayOutputStream out = new ByteArrayOutputStream();
					     soapMessage.writeTo(out);
					     String strMsgChk = new String(out.toByteArray());	
					     
					     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
					     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
						 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
						 out = new ByteArrayOutputStream();
						 soapResponse.writeTo(out);
						 strMsgChk = new String(out.toByteArray(), "utf-8");
						 if(strMsgChk.contains("faultstring"))
						 {
							 errorList.add(columnList.get(i)) ;
						 }
						 else
						 {
							 ReportElement rptElement = XmlParserManager.parseXml(strMsgChk);				 
							 ReportElement pageResults = rptElement.getChild("env:Body")
										.getChild("wd:Get_Workers_Response")
										.getChild("wd:Response_Results");
							 
							 String result = pageResults.getChild("wd:Total_Results").getValue().trim();
							 if(result.equalsIgnoreCase("0"))
							 {
								 errorList.add(columnList.get(i));
							 }
							 else
							 {
								 ReportElement responseData = rptElement.getChild("env:Body")
											.getChild("wd:Get_Workers_Response")
											.getChild("wd:Response_Data");
								 
								 List<ReportElement> workerData = responseData.getChildren("wd:Worker");
									
								 for(ReportElement reportElement : workerData)
								 {
									 ReportElement element1 = reportElement.getChild("wd:Worker_Data");
						        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
						        		System.out.println("employeeId--"+ employeeId);
						        		
						        		ReportElement widRef = reportElement.getChild("wd:Worker_Reference");
										 if(widRef != null)
										 {
											 List<ReportElement> idList = widRef.getChildren("wd:ID");
											 for(ReportElement idElement:idList)
											 {
												 widMap = idElement.getAllAttributes();
												 if(widMap.get("wd:type").equals("WID"))
												 {
													 WID = idElement.getValue().trim();
												 }
											 }
										 }
										 else
										 {
											 WID = "";
										 }
										
										 reportURL = "https://" + tenant.getTenantUrl() + "customreport2/" + tenant.getTenantName() + "/ISU_Verify/" + "Manage_Education?Employee!WID=" + WID;
										 
										 JSONArray jArr = createEducationData(reportURL);
											if(jArr != null && jArr.size() >1)
											{
												 schoolArr = "";
												 countryArr = "";
												 degreeArr = "";
												 degreeDateArr = "";
												 fieldOfStudyArr = "";
												 for(int a = 0; a<jArr.length(); a++) 
										         {
													JSONObject objects = jArr.getJSONObject(a);
													school = objects.isNull("school")?"":objects.getString("school");
													if(schoolArr.equals(""))
													{
														schoolArr = school;
													}
													else
													{
														if(!school.isEmpty())
														{
															schoolArr = schoolArr + "~" + school;
														}
													}
													country = objects.isNull("schoolLocation")?"":objects.getString("schoolLocation");
													if(countryArr.equals(""))
													{
														countryArr = country;
													}
													else
													{
														if(!country.isEmpty())
														{
															countryArr = countryArr + "~" + country;
														}
													}
													degree = objects.isNull("degree")?"":objects.getString("degree");
													if(degreeArr.equals(""))
													{
														degreeArr = degree;
													}
													else
													{
														if(!degree.isEmpty())
														{
															degreeArr = degreeArr + "~" + degree;
														}
													}
													degreeDate = objects.isNull("degreeDate")?"":objects.getString("degreeDate");
													if(!degreeDate.isEmpty())
													{
														degreeDate = degreeDate.substring(0, 10);
													}
													if(degreeDateArr.equals(""))
													{
														degreeDateArr = degreeDate;
													}
													else
													{
														if(!degreeDate.isEmpty())
														{
															degreeDateArr = degreeDateArr + "~" + degreeDate;
														}
													}
													fieldOfStudy = objects.isNull("fieldOfStudy")?"":objects.getString("fieldOfStudy");
													if(fieldOfStudyArr.equals(""))
													{
														fieldOfStudyArr = fieldOfStudy;
													}
													else
													{
														if(!fieldOfStudy.isEmpty())
														{
															fieldOfStudyArr = fieldOfStudyArr + "~" + fieldOfStudy;
														}
													}
										        }
											}
											else
											{
												 errorList.add(columnList.get(i));
												 schoolArr = "";
												 countryArr = "";
												 degreeArr = "";
												 degreeDateArr = "";
												 fieldOfStudyArr = "";
											}
										 
										 headingFromWD = "Employee_ID,Country,School,Degree,Degree_Received_Date,Field_Of_Study";
										 
										 headerStr = employeeId + "," + countryArr + "," + schoolArr + "," + degreeArr + "," + degreeDateArr + "," + fieldOfStudyArr;
										 
										 if(finalStr.equals(""))
										 {
											 finalStr = headingFromWD + "\n" + headerStr;
										 }
										 else
										 {
											 finalStr = finalStr + "\n" + headerStr;
										 }
								 }
							 }
						 }
					 }
					 columnList.removeAll(errorList);
					 wdCount = columnList.size();
				 }		 					 
				 System.out.println(finalStr);
				 targetContent = finalStr.toString().getBytes();					 					 
				 headingWd = selectColumnMapping(loadCycle, ruleName, "Employee_ID");					 
				 complete = true;
			}			 			 
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}

		return headingWd;
	}
	
	private JSONArray createCSVFromWDAddDependent(Tenant tenant, InputStream is, SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd,
			String loadCycle, String ruleName, String client) {
		
		 targetContent = null;
		 headingFromWD = "";
		 String checkFile = "";
		
		 String employeeId = "";
		 String relatedPersonRelationShipName = "";
		 String legalFirstName = "";
		 String legalMiddleName = "";
		 String legalLastName = "";
		 String genderDesc = "";
		 String countryISOCode = "";
		 String relatedPersonRelationShipNameArr = "";
		 String legalFirstNameArr = "";
		 String legalMiddleNameArr = "";
		 String legalLastNameArr = "";
		 String genderDescArr = "";
		 String countryISOCodeArr = "";
		 
		 Map<String,String> relationshipMap = null;
		 Map<String,String> countryMap = null;
		 Map<String,String> genderMap = null;

		 String finalStr = "";
		 String headerStr = "";
		 try 
		 {			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_DEPENDENT_REQUEST_FILE = requestfile.getAbsolutePath();				 
				 
				 if(errorList.isEmpty())
				 {
					 for(int i = 0; i<columnList.size();i++)
					 {
						 checkFile = addWorkerIdListToFindError(GET_DEPENDENT_REQUEST_FILE, columnList.get(i), ruleName, "Employee_ID");
						 is = new FileInputStream(checkFile);
					     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     SOAPPart soapPart = soapMessage.getSOAPPart();
					     SOAPEnvelope envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
							  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
					     ByteArrayOutputStream out = new ByteArrayOutputStream();
					     soapMessage.writeTo(out);
					     String strMsgChk = new String(out.toByteArray());	
					     
					     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
					     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
						 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
						 out = new ByteArrayOutputStream();
						 soapResponse.writeTo(out);
						 strMsgChk = new String(out.toByteArray(), "utf-8");
						 if(strMsgChk.contains("faultstring"))
						 {
							 errorList.add(columnList.get(i)) ;
						 }
						 else
						 {
							 ReportElement rptElement = XmlParserManager.parseXml(strMsgChk);				 
							 ReportElement pageResults = rptElement.getChild("env:Body")
										.getChild("wd:Get_Workers_Response")
										.getChild("wd:Response_Results");
							 
							 String result = pageResults.getChild("wd:Total_Results").getValue().trim();
							 if(result.equalsIgnoreCase("0"))
							 {
								 errorList.add(columnList.get(i));
							 }
							 else
							 {
								 ReportElement rptElement1 = XmlParserManager.parseXml(strMsgChk);				 
								 ReportElement relatedPersonData = rptElement1.getChild("env:Body")
											.getChild("wd:Get_Workers_Response")
											.getChild("wd:Response_Data")
											.getChild("wd:Worker")
											.getChild("wd:Worker_Data")
				 							.getChild("wd:Related_Person_Data");
								 
								 if(relatedPersonData == null)
								 {
									 errorList.add(columnList.get(i));
								 }
								 else
								 {
									 ReportElement responseData = rptElement.getChild("env:Body")
												.getChild("wd:Get_Workers_Response")
												.getChild("wd:Response_Data");
									 
									 List<ReportElement> applicantData = responseData.getChildren("wd:Worker");
										
									 for(ReportElement reportElement : applicantData)
									 {
										 ReportElement element1 = reportElement.getChild("wd:Worker_Data");
							        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
							        		System.out.println("employeeId--"+ employeeId);										 										
											
							        		List<ReportElement> workerRelatedPersonDataList = reportElement.getChild("wd:Worker_Data")
						 							.getChild("wd:Related_Person_Data")
						 							.getChildren("wd:Related_Person");
							        		if(workerRelatedPersonDataList != null && workerRelatedPersonDataList.size() >0)
							        		{
							        			 relatedPersonRelationShipNameArr = "";
							        			 legalFirstNameArr = "";
							        			 legalMiddleNameArr = "";
							        			 legalLastNameArr = "";
							        			 genderDescArr = "";
							        			 countryISOCodeArr = "";
							    				 
												 for(ReportElement workerRelatedPersonData :workerRelatedPersonDataList)
												 {
													 ReportElement dependdentData = workerRelatedPersonData.getChild("wd:Dependent");
													 if(dependdentData != null)
													 {
														 ReportElement relationRef = workerRelatedPersonData.getChild("wd:Related_Person_Relationship_Reference");
														 if(relationRef != null)
														 {
															 List<ReportElement> relationData = relationRef.getChildren("wd:ID");					 
															 for(ReportElement relationElement:relationData)
															 {
																 relationshipMap = relationElement.getAllAttributes();
																 if(relationshipMap.get("wd:type").equals("Related_Person_Relationship_ID"))
																 {
																	 relatedPersonRelationShipName = relationElement.getValue().trim();
																	 if(relatedPersonRelationShipNameArr.equals(""))
																	 {
																		 relatedPersonRelationShipNameArr = relatedPersonRelationShipName;
																	 }
																	 else
																	 {
																		 if(!relatedPersonRelationShipName.isEmpty())
																		 {
																			 relatedPersonRelationShipNameArr = relatedPersonRelationShipNameArr + "~" + relatedPersonRelationShipName;
																		 }
																	 }
																 }
															 }
														 }
														 
														 ReportElement nameDetailData = workerRelatedPersonData.getChild("wd:Personal_Data")
										 							.getChild("wd:Name_Data")
										 							.getChild("wd:Legal_Name_Data")
														 			.getChild("wd:Name_Detail_Data");
														 
														 if(nameDetailData != null)
														 {
															 legalFirstName = nameDetailData.getChild("wd:First_Name") != null?nameDetailData.getChild("wd:First_Name").getValue().trim():"";
															 if(legalFirstNameArr.equals(""))
															 {
																 legalFirstNameArr = legalFirstName;
															 }
															 else
															 {
																 if(!legalFirstName.isEmpty())
																 {
																	 legalFirstNameArr = legalFirstNameArr + "~" + legalFirstName;
																 }
															 }
															 legalMiddleName = nameDetailData.getChild("wd:Middle_Name") != null?nameDetailData.getChild("wd:Middle_Name").getValue().trim():"";
															 if(legalMiddleNameArr.equals(""))
															 {
																 legalMiddleNameArr = legalMiddleName;
															 }
															 else
															 {
																 if(!legalMiddleName.isEmpty())
																 {
																	 legalMiddleNameArr = legalMiddleNameArr + "~" + legalMiddleName;
																 }
															 }
															 legalLastName = nameDetailData.getChild("wd:Last_Name") != null?nameDetailData.getChild("wd:Last_Name").getValue().trim():"";
															 if(legalLastNameArr.equals(""))
															 {
																 legalLastNameArr = legalLastName;
															 }
															 else
															 {
																 if(!legalLastName.isEmpty())
																 {
																	 legalLastNameArr = legalLastNameArr + "~" + legalLastName;
																 }
															 }
															 
															 ReportElement countryRef = nameDetailData.getChild("wd:Country_Reference");
															 if(countryRef != null)
															 {
																 List<ReportElement> countryData = countryRef.getChildren("wd:ID");					 
																 for(ReportElement countryElement:countryData)
																 {
																	 countryMap = countryElement.getAllAttributes();
																	 if(countryMap.get("wd:type").equals("ISO_3166-1_Alpha-3_Code"))
																	 {
																		 countryISOCode = countryElement.getValue().trim();
																		 if(countryISOCodeArr.equals(""))
																		 {
																			 countryISOCodeArr = countryISOCode;
																		 }
																		 else
																		 {
																			 if(!countryISOCode.isEmpty())
																			 {
																				 countryISOCodeArr = countryISOCodeArr + "~" + countryISOCode;
																			 }
																		 }
																	 }
																 }
															 }
														 }
														 
														 ReportElement personalData = workerRelatedPersonData.getChild("wd:Personal_Data");									 
														 ReportElement genderRef = personalData.getChild("wd:Gender_Reference");
														 if(genderRef != null)
														 {
															 List<ReportElement> genderData = genderRef.getChildren("wd:ID");					 
															 for(ReportElement genderElement:genderData)
															 {
																 genderMap = genderElement.getAllAttributes();
																 if(genderMap.get("wd:type").equals("Gender_Code"))
																 {
																	 genderDesc = genderElement.getValue().trim();
																	 if(genderDescArr.equals(""))
																	 {
																		 genderDescArr = genderDesc;
																	 }
																	 else
																	 {
																		 if(!genderDesc.isEmpty())
																		 {
																			 genderDescArr = genderDescArr + "~" + genderDesc;
																		 }
																	 }
																 }
															 }
														 }
													 }
												 }
							        		}
							        		else
							        		{
							        			 errorList.add(columnList.get(i));
							        			 relatedPersonRelationShipNameArr = "";
							        			 legalFirstNameArr = "";
							        			 legalMiddleNameArr = "";
							        			 legalLastNameArr = "";
							        			 genderDescArr = "";
							        			 countryISOCodeArr = "";
							        		}
												 								 
											 
										 headingFromWD = "Employee_ID,Related_Person_RelationShip_Name,Legal_First_Name,Legal_Middle_Name,Legal_Last_Name,Country_ISO_Code,Gender";
										 
										 headerStr = employeeId + "," + relatedPersonRelationShipNameArr + "," + legalFirstNameArr + "," + legalMiddleNameArr + "," + legalLastNameArr + "," + countryISOCodeArr
												 + "," + genderDescArr;
										 
										 if(finalStr.equals(""))
										 {
											 finalStr = headingFromWD + "\n" + headerStr;
										 }
										 else
										 {
											 finalStr = finalStr + "\n" + headerStr;
										 }
									 }
								 }
							 }
						 }
					 }
					 columnList.removeAll(errorList);
					 wdCount = columnList.size();
				 }		 					 
				 System.out.println(finalStr);
				 targetContent = finalStr.toString().getBytes();					 					 
				 headingWd = selectColumnMapping(loadCycle, ruleName, "Employee_ID");					 
				 complete = true;
			}			 			 
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}

		return headingWd;
	}
	
	private JSONArray createCSVFromWDAddDependentAddress(Tenant tenant, InputStream is, SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd,
			String loadCycle, String ruleName, String client) {

		 targetContent = null;
		 headingFromWD = "";
		 String checkFile = "";
		
		 String employeeId = "";
		 String country = "";
		 String city = "";
		 String postalCode = "";
		 String usageType = "";
		 String countryArr = "";
		 String cityArr = "";
		 String postalCodeArr = "";
		 String usageTypeArr = "";
		 
		 Map<String,String> countryMap = null;
		 Map<String,String> usageMap = null;

		 String finalStr = "";
		 String headerStr = "";
		 try 
		 {			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_DEPENDENT_ADDRESS_REQUEST_FILE = requestfile.getAbsolutePath();				 
				 
				 if(errorList.isEmpty())
				 {
					 for(int i = 0; i<columnList.size();i++)
					 {
						 checkFile = addWorkerIdListToFindError(GET_DEPENDENT_ADDRESS_REQUEST_FILE, columnList.get(i), ruleName, "Employee_ID");
						 is = new FileInputStream(checkFile);
					     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     SOAPPart soapPart = soapMessage.getSOAPPart();
					     SOAPEnvelope envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
							  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
					     ByteArrayOutputStream out = new ByteArrayOutputStream();
					     soapMessage.writeTo(out);
					     String strMsgChk = new String(out.toByteArray());	
					     
					     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
					     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
						 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
						 out = new ByteArrayOutputStream();
						 soapResponse.writeTo(out);
						 strMsgChk = new String(out.toByteArray(), "utf-8");
						 if(strMsgChk.contains("faultstring"))
						 {
							 errorList.add(columnList.get(i)) ;
						 }
						 else
						 {
							 ReportElement rptElement = XmlParserManager.parseXml(strMsgChk);				 
							 ReportElement pageResults = rptElement.getChild("env:Body")
										.getChild("wd:Get_Workers_Response")
										.getChild("wd:Response_Results");
							 
							 String result = pageResults.getChild("wd:Total_Results").getValue().trim();
							 if(result.equalsIgnoreCase("0"))
							 {
								 errorList.add(columnList.get(i));
							 }
							 else
							 {
								 ReportElement rptElement1 = XmlParserManager.parseXml(strMsgChk);				 
								 ReportElement relatedPersonData = rptElement1.getChild("env:Body")
											.getChild("wd:Get_Workers_Response")
											.getChild("wd:Response_Data")
											.getChild("wd:Worker")
											.getChild("wd:Worker_Data")
				 							.getChild("wd:Related_Person_Data");
								 
								 if(relatedPersonData == null)
								 {
									 errorList.add(columnList.get(i));
								 }
								 else
								 {
									 ReportElement responseData = rptElement.getChild("env:Body")
												.getChild("wd:Get_Workers_Response")
												.getChild("wd:Response_Data");
									 
									 List<ReportElement> applicantData = responseData.getChildren("wd:Worker");
										
									 for(ReportElement reportElement : applicantData)
									 {
										 ReportElement element1 = reportElement.getChild("wd:Worker_Data");
							        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
							        		System.out.println("employeeId--"+ employeeId);										 										
											
							        		List<ReportElement> workerRelatedPersonDataList = reportElement.getChild("wd:Worker_Data")
						 							.getChild("wd:Related_Person_Data")
						 							.getChildren("wd:Related_Person");
							        		if(workerRelatedPersonDataList != null && workerRelatedPersonDataList.size() >0)
							        		{
							        			 countryArr = "";
							        			 cityArr = "";
							        			 postalCodeArr = "";
							        			 usageTypeArr = "";
							    				 
												 for(ReportElement workerRelatedPersonData :workerRelatedPersonDataList)
												 {
													 ReportElement dependdentData = workerRelatedPersonData.getChild("wd:Dependent");
													 if(dependdentData != null)
													 {
														 ReportElement contactData = workerRelatedPersonData.getChild("wd:Personal_Data")
																    .getChild("wd:Contact_Data");
														 if(contactData != null)
														 {
															 ReportElement addressData = contactData.getChild("wd:Address_Data");
															 if(addressData != null) 
															 {
																 ReportElement countryRef = addressData.getChild("wd:Country_Reference");
																 if(countryRef != null)
																 {
																	 List<ReportElement> countryData = countryRef.getChildren("wd:ID");					 
																	 for(ReportElement countryElement:countryData)
																	 {
																		 countryMap = countryElement.getAllAttributes();
																		 if(countryMap.get("wd:type").equals("ISO_3166-1_Alpha-3_Code"))
																		 {
																			 country = countryElement.getValue().trim();
																			 if(countryArr.equals(""))
																			 {
																				 countryArr = country;
																			 }
																			 else
																			 {
																				 if(!country.isEmpty())
																				 {
																					 countryArr = countryArr + "~" + country;
																				 }
																			 }
																		 }
																	 }
																 }
															 
																 city = addressData.getChild("wd:Municipality") != null?addressData.getChild("wd:Municipality").getValue().trim():"";
																 if(city.contains(","))
																 {
																	 city = city.replaceAll(",", "|");
																 }
																 if(cityArr.equals(""))
																 {
																	 cityArr = city;
																 }
																 else
																 {
																	 if(!city.isEmpty())
																	 {
																		 cityArr = cityArr + "~" + city;
																	 }																	 
																 }
																 postalCode = addressData.getChild("wd:Postal_Code") != null?addressData.getChild("wd:Postal_Code").getValue().trim():"";
																 if(postalCodeArr.equals(""))
																 {
																	 postalCodeArr = postalCode;
																 }
																 else
																 {
																	 if(!postalCode.isEmpty())
																	 {
																		postalCodeArr = postalCodeArr + "~" + postalCode;																		 
																	 }
																 }
																 
																 ReportElement addrUsageData = addressData.getChild("wd:Usage_Data");
																 if(addrUsageData != null)
																 {
																	 ReportElement addrTypeData = addrUsageData.getChild("wd:Type_Data");
																	 if(addrTypeData != null)
																	 {
																		 ReportElement addrTypeRef = addrTypeData.getChild("wd:Type_Reference");
																		 if(addrTypeRef !=null)
																		 {
																			 List<ReportElement> usageData = addrTypeRef.getChildren("wd:ID");					 
																			 for(ReportElement wdElement:usageData)
																			 {
																				 usageMap = wdElement.getAllAttributes();
																				 if(usageMap.get("wd:type").equals("Communication_Usage_Type_ID"))
																				 {
																					 usageType = wdElement.getValue().trim();
																					 if(usageTypeArr.equals(""))
																					 {
																						 usageTypeArr = usageType;
																					 }
																					 else
																					 {
																						 if(!usageType.isEmpty())
																						 {
																							 usageTypeArr = usageTypeArr + "~" + usageType;
																						 }
																					 }
																				 }
																			 }
																		 }
																	 }
																 }
															 }
														 }
													 }
												 }
							        		}
							        		else
							        		{
							        			 errorList.add(columnList.get(i));
							        			 countryArr = "";
							        			 cityArr = "";
							        			 postalCodeArr = "";
							        			 usageTypeArr = "";
							        		}
												 								 
											 
										 headingFromWD = "Employee_ID,Country,City,Postal_Code,Usage_Type";
										 
										 headerStr = employeeId + "," + countryArr + "," + cityArr + "," + postalCodeArr + "," + usageTypeArr;
										 
										 if(finalStr.equals(""))
										 {
											 finalStr = headingFromWD + "\n" + headerStr;
										 }
										 else
										 {
											 finalStr = finalStr + "\n" + headerStr;
										 }
									 }
								 }
							 }
						 }
					 }
					 columnList.removeAll(errorList);
					 wdCount = columnList.size();
				 }		 					 
				 System.out.println(finalStr);
				 targetContent = finalStr.toString().getBytes();					 					 
				 headingWd = selectColumnMapping(loadCycle, ruleName, "Employee_ID");					 
				 complete = true;
			}			 			 
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}

		return headingWd;
	}
	
	private JSONArray createCSVFromWDAddDependentAddressLine(Tenant tenant, InputStream is,
			SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd,
			String loadCycle, String ruleName, String client) {

		 targetContent = null;
		 headingFromWD = "";
		 String checkFile = "";
		
		 String employeeId = "";
		 String addrLine_1 = "";
		 String addrLine_2 = "";
		 String addrLine_3 = "";
		 String addrLine_1Arr = "";
		 String addrLine_2Arr = "";
		 String addrLine_3Arr = "";
		 
		 Map<String,String> addrLineMap = null;

		 String finalStr = "";
		 String headerStr = "";
		 try 
		 {			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_DEPENDENT_ADDRESS_LINE_REQUEST_FILE = requestfile.getAbsolutePath();				 
				 
				 if(errorList.isEmpty())
				 {
					 for(int i = 0; i<columnList.size();i++)
					 {
						 checkFile = addWorkerIdListToFindError(GET_DEPENDENT_ADDRESS_LINE_REQUEST_FILE, columnList.get(i), ruleName, "Employee_ID");
						 is = new FileInputStream(checkFile);
					     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     SOAPPart soapPart = soapMessage.getSOAPPart();
					     SOAPEnvelope envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
							  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
					     ByteArrayOutputStream out = new ByteArrayOutputStream();
					     soapMessage.writeTo(out);
					     String strMsgChk = new String(out.toByteArray());	
					     
					     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
					     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
						 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
						 out = new ByteArrayOutputStream();
						 soapResponse.writeTo(out);
						 strMsgChk = new String(out.toByteArray(), "utf-8");
						 if(strMsgChk.contains("faultstring"))
						 {
							 errorList.add(columnList.get(i)) ;
						 }
						 else
						 {
							 ReportElement rptElement = XmlParserManager.parseXml(strMsgChk);				 
							 ReportElement pageResults = rptElement.getChild("env:Body")
										.getChild("wd:Get_Workers_Response")
										.getChild("wd:Response_Results");
							 
							 String result = pageResults.getChild("wd:Total_Results").getValue().trim();
							 if(result.equalsIgnoreCase("0"))
							 {
								 errorList.add(columnList.get(i));
							 }
							 else
							 {
								 ReportElement rptElement1 = XmlParserManager.parseXml(strMsgChk);				 
								 ReportElement relatedPersonData = rptElement1.getChild("env:Body")
											.getChild("wd:Get_Workers_Response")
											.getChild("wd:Response_Data")
											.getChild("wd:Worker")
											.getChild("wd:Worker_Data")
				 							.getChild("wd:Related_Person_Data");
								 
								 if(relatedPersonData == null)
								 {
									 errorList.add(columnList.get(i));
								 }
								 else
								 {
									 ReportElement responseData = rptElement.getChild("env:Body")
												.getChild("wd:Get_Workers_Response")
												.getChild("wd:Response_Data");
									 
									 List<ReportElement> applicantData = responseData.getChildren("wd:Worker");
										
									 for(ReportElement reportElement : applicantData)
									 {
										 ReportElement element1 = reportElement.getChild("wd:Worker_Data");
							        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
							        		System.out.println("employeeId--"+ employeeId);										 										
											
							        		List<ReportElement> workerRelatedPersonDataList = reportElement.getChild("wd:Worker_Data")
						 							.getChild("wd:Related_Person_Data")
						 							.getChildren("wd:Related_Person");
							        		if(workerRelatedPersonDataList != null && workerRelatedPersonDataList.size() >0)
							        		{
							        			 addrLine_1Arr = "";
							        			 addrLine_2Arr = "";
							        			 addrLine_3Arr = "";
							    				 
												 for(ReportElement workerRelatedPersonData :workerRelatedPersonDataList)
												 {
													 ReportElement dependdentData = workerRelatedPersonData.getChild("wd:Dependent");
													 if(dependdentData != null)
													 {
														 ReportElement contactData = workerRelatedPersonData.getChild("wd:Personal_Data")
																    .getChild("wd:Contact_Data");
														 if(contactData != null)
														 {
															 List<ReportElement> addrLineData = contactData.getChildren("wd:Address_Line_Data");
															 if(addrLineData != null)
															 {
																 for(ReportElement addrLineElement:addrLineData)
																 {
																	 addrLineMap = addrLineElement.getAllAttributes();
																	 if(addrLineMap.get("wd:Type").equals("ADDRESS_LINE_1"))
																	 {
																		addrLine_1 =  addrLineElement.getValue().trim();
																		if(addrLine_1.contains(","))
																		{
																			addrLine_1 = addrLine_1.replaceAll(",", "|");
																		}
																		if(addrLine_1Arr.equals(""))
																		{
																			addrLine_1Arr = addrLine_1;
																		}
																		else
																		{
																			if(!addrLine_1.isEmpty())
																			{
																				addrLine_1Arr = addrLine_1Arr + "~" + addrLine_1;
																			}
																		}
																	 }
																	 else if(addrLineMap.get("wd:Type").equals("ADDRESS_LINE_2"))
																	 {
																		addrLine_2 =  addrLineElement.getValue().trim();
																		if(addrLine_2.contains(","))
																		{
																			addrLine_2 = addrLine_2.replaceAll(",", "|");
																		}
																		if(addrLine_2Arr.equals(""))
																		{
																			addrLine_2Arr = addrLine_2;
																		}
																		else
																		{
																			if(!addrLine_2.isEmpty())
																			{
																				addrLine_2Arr = addrLine_2Arr + "~" + addrLine_2;
																			}
																		}
																	 }
																	 else if(addrLineMap.get("wd:Type").equals("ADDRESS_LINE_3"))
																	 {
																		addrLine_3 =  addrLineElement.getValue().trim();
																		if(addrLine_3.contains(","))
																		{
																			addrLine_3 = addrLine_3.replaceAll(",", "|");
																		}
																		if(addrLine_3Arr.equals(""))
																		{
																			addrLine_3Arr = addrLine_3;
																		}
																		else
																		{
																			if(!addrLine_3.isEmpty())
																			{
																				addrLine_3Arr = addrLine_3Arr + "~" + addrLine_3;
																			}
																		}
																	 }
																 }
															 }
														 }
													 }
												 }
							        		}
							        		else
							        		{
							        			 errorList.add(columnList.get(i));
							        			 addrLine_1Arr = "";
							        			 addrLine_2Arr = "";
							        			 addrLine_3Arr = "";
							        		}
												 								 
											 
										 headingFromWD = "Employee_ID,Address_Line1,Address_Line2,Address_Line3";
										 
										 headerStr = employeeId + "," + addrLine_1Arr + "," + addrLine_2Arr + "," + addrLine_3Arr;
										 
										 if(finalStr.equals(""))
										 {
											 finalStr = headingFromWD + "\n" + headerStr;
										 }
										 else
										 {
											 finalStr = finalStr + "\n" + headerStr;
										 }
									 }
								 }
							 }
						 }
					 }
					 columnList.removeAll(errorList);
					 wdCount = columnList.size();
				 }		 					 
				 System.out.println(finalStr);
				 targetContent = finalStr.toString().getBytes();					 					 
				 headingWd = selectColumnMapping(loadCycle, ruleName, "Employee_ID");					 
				 complete = true;
			}			 			 
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}

		return headingWd;
	}
	
	private JSONArray createCSVFromWDAddDependentPhone(Tenant tenant, InputStream is, SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd,
			String loadCycle, String ruleName, String client) {
		
		 targetContent = null;
		 headingFromWD = "";
		 String checkFile = "";
		
		 String employeeId = "";
		 String phoneNumber = "";
		 String phoneDeviceType = "";
		 String usageType = "";
		 String phoneNumberArr = "";
		 String phoneDeviceTypeArr = "";
		 String usageTypeArr = "";
		 
		 Map<String,String> phoneDeviceMap = null;
		 Map<String,String> usageMap = null;

		 String finalStr = "";
		 String headerStr = "";
		 try 
		 {			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_DEPENDENT_PHONE_REQUEST_FILE = requestfile.getAbsolutePath();				 
				 
				 if(errorList.isEmpty())
				 {
					 for(int i = 0; i<columnList.size();i++)
					 {
						 checkFile = addWorkerIdListToFindError(GET_DEPENDENT_PHONE_REQUEST_FILE, columnList.get(i), ruleName, "Employee_ID");
						 is = new FileInputStream(checkFile);
					     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     SOAPPart soapPart = soapMessage.getSOAPPart();
					     SOAPEnvelope envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
							  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
					     ByteArrayOutputStream out = new ByteArrayOutputStream();
					     soapMessage.writeTo(out);
					     String strMsgChk = new String(out.toByteArray());	
					     
					     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
					     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
						 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
						 out = new ByteArrayOutputStream();
						 soapResponse.writeTo(out);
						 strMsgChk = new String(out.toByteArray(), "utf-8");
						 if(strMsgChk.contains("faultstring"))
						 {
							 errorList.add(columnList.get(i)) ;
						 }
						 else
						 {
							 ReportElement rptElement = XmlParserManager.parseXml(strMsgChk);				 
							 ReportElement pageResults = rptElement.getChild("env:Body")
										.getChild("wd:Get_Workers_Response")
										.getChild("wd:Response_Results");
							 
							 String result = pageResults.getChild("wd:Total_Results").getValue().trim();
							 if(result.equalsIgnoreCase("0"))
							 {
								 errorList.add(columnList.get(i));
							 }
							 else
							 {
								 ReportElement rptElement1 = XmlParserManager.parseXml(strMsgChk);				 
								 ReportElement relatedPersonData = rptElement1.getChild("env:Body")
											.getChild("wd:Get_Workers_Response")
											.getChild("wd:Response_Data")
											.getChild("wd:Worker")
											.getChild("wd:Worker_Data")
				 							.getChild("wd:Related_Person_Data");
								 
								 if(relatedPersonData == null)
								 {
									 errorList.add(columnList.get(i));
								 }
								 else
								 {
									 ReportElement responseData = rptElement.getChild("env:Body")
												.getChild("wd:Get_Workers_Response")
												.getChild("wd:Response_Data");
									 
									 List<ReportElement> applicantData = responseData.getChildren("wd:Worker");
										
									 for(ReportElement reportElement : applicantData)
									 {
										 ReportElement element1 = reportElement.getChild("wd:Worker_Data");
							        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
							        		System.out.println("employeeId--"+ employeeId);										 										
											
							        		List<ReportElement> workerRelatedPersonDataList = reportElement.getChild("wd:Worker_Data")
						 							.getChild("wd:Related_Person_Data")
						 							.getChildren("wd:Related_Person");
							        		if(workerRelatedPersonDataList != null && workerRelatedPersonDataList.size() >0)
							        		{
							        			 phoneNumberArr = "";
							        			 phoneDeviceTypeArr = "";
							        			 usageTypeArr = "";
							    				 
												 for(ReportElement workerRelatedPersonData :workerRelatedPersonDataList)
												 {
													 ReportElement dependdentData = workerRelatedPersonData.getChild("wd:Dependent");
													 if(dependdentData != null)
													 {
														 ReportElement contactData = workerRelatedPersonData.getChild("wd:Personal_Data")
																    .getChild("wd:Contact_Data");
														 if(contactData != null)
														 {
															 ReportElement phoneData = contactData.getChild("wd:Phone_Data");
															 if(phoneData != null)
															 {
																 phoneNumber = phoneData.getChild("wd:Phone_Number") != null?phoneData.getChild("wd:Phone_Number").getValue().trim():"";
																 if(phoneNumberArr.equals(""))
																 {
																	 phoneNumberArr = phoneNumber;
																 }
																 else
																 {																	 
																	 if(!phoneNumber.isEmpty())
																	 {
																		 phoneNumberArr = phoneNumberArr + "~" + phoneNumber;
																	 }																	 
																 }
																 
																 ReportElement phDeviceRef = phoneData.getChild("wd:Phone_Device_Type_Reference");
																 if(phDeviceRef != null)
																 {
																	 List<ReportElement> phDeviceData = phDeviceRef.getChildren("wd:ID");					 
																	 for(ReportElement phDeviceElement:phDeviceData)
																	 {
																		 phoneDeviceMap = phDeviceElement.getAllAttributes();
																		 if(phoneDeviceMap.get("wd:type").equals("Phone_Device_Type_ID"))
																		 {
																			 phoneDeviceType = phDeviceElement.getValue().trim();
																			 if(phoneDeviceTypeArr.equals(""))
																			 {
																				 phoneDeviceTypeArr = phoneDeviceType;
																			 }
																			 else
																			 {
																				 if(!phoneDeviceType.isEmpty())
																				 {
																					 phoneDeviceTypeArr = phoneDeviceTypeArr + "~" + phoneDeviceType;
																				 }
																			 }
																		 }
																	 }
																 }
																 
																 ReportElement phUsageData = phoneData.getChild("wd:Usage_Data");
																 if(phUsageData != null)
																 {
																	 ReportElement addrTypeData = phUsageData.getChild("wd:Type_Data");
																	 if(addrTypeData != null)
																	 {
																		 ReportElement addrTypeRef = addrTypeData.getChild("wd:Type_Reference");
																		 if(addrTypeRef !=null)
																		 {
																			 List<ReportElement> usageData = addrTypeRef.getChildren("wd:ID");					 
																			 for(ReportElement wdElement:usageData)
																			 {
																				 usageMap = wdElement.getAllAttributes();
																				 if(usageMap.get("wd:type").equals("Communication_Usage_Type_ID"))
																				 {
																					 usageType = wdElement.getValue().trim();
																					 if(usageTypeArr.equals(""))
																					 {
																						 usageTypeArr = usageType;
																					 }
																					 else
																					 {
																						 if(!usageType.isEmpty())
																						 {
																							 usageTypeArr = usageTypeArr + "~" + usageType;
																						 }
																					 }
																				 }
																			 }
																		 }
																	 }
																 }
															 }
														 }
													 }
												 }
							        		}
							        		else
							        		{
							        			 errorList.add(columnList.get(i));
							        			 phoneNumberArr = "";
							        			 phoneDeviceTypeArr = "";
							        			 usageTypeArr = "";
							        		}
												 								 
											 
										 headingFromWD = "Employee_ID,Phone_Number,Phone_Device_Type,Usage_Type";
										 
										 headerStr = employeeId + "," + phoneNumberArr + "," + phoneDeviceTypeArr + "," + usageTypeArr;
										 
										 if(finalStr.equals(""))
										 {
											 finalStr = headingFromWD + "\n" + headerStr;
										 }
										 else
										 {
											 finalStr = finalStr + "\n" + headerStr;
										 }
									 }
								 }
							 }
						 }
					 }
					 columnList.removeAll(errorList);
					 wdCount = columnList.size();
				 }		 					 
				 System.out.println(finalStr);
				 targetContent = finalStr.toString().getBytes();					 					 
				 headingWd = selectColumnMapping(loadCycle, ruleName, "Employee_ID");					 
				 complete = true;
			}			 			 
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}

		return headingWd;
	}
	
	private JSONArray createEducationData(String reportURL) throws JSONException {

		JSONArray jArr = new JSONArray();
		DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilder dBuilder;
		XPath xPath = XPathFactory.newInstance().newXPath();
		HttpBasicAuthentication httpBasicAuthentication = new HttpBasicAuthentication();
		String output = httpBasicAuthentication.getWithBasicAuthentication(reportURL, tenant.getTenantUser(), tenant.getTenantUserPassword());
		Reader reader1 = new StringReader(output);
		Document doc;
		try 
		{
			dBuilder = dbFactory.newDocumentBuilder();
			doc = dBuilder.parse(new InputSource(reader1));
			doc.getDocumentElement().normalize();
			String expression = EMPLOYEE_APPLICANT_MAPPING_RESPONSE_EXPRESSION;
			NodeList nodeList = (NodeList) xPath.compile(expression).evaluate(doc, XPathConstants.NODESET);
			for (int i = 0; i < nodeList.getLength(); i++) 
			{
				try 
				{
					jArr = parseNodesForEducation(nodeList);
				} 
				catch (DOMException e)
				{
					e.printStackTrace();
				}
			}			
		} 
		catch (SAXException e) 
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (XPathExpressionException e) 
		{
			e.printStackTrace();
		} 
		catch (ParserConfigurationException e) 
		{
			e.printStackTrace();
		}
		return jArr;
	}
	
	private JSONArray createAdditionalData(String reportURL) throws JSONException {

		JSONArray jArr = new JSONArray();
		DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilder dBuilder;
		XPath xPath = XPathFactory.newInstance().newXPath();
		HttpBasicAuthentication httpBasicAuthentication = new HttpBasicAuthentication();
		String output = httpBasicAuthentication.getWithBasicAuthentication(reportURL, tenant.getTenantUser(), tenant.getTenantUserPassword());
		Reader reader1 = new StringReader(output);
		Document doc;
		try 
		{
			dBuilder = dbFactory.newDocumentBuilder();
			doc = dBuilder.parse(new InputSource(reader1));
			doc.getDocumentElement().normalize();
			String expression = EMPLOYEE_APPLICANT_MAPPING_RESPONSE_EXPRESSION;
			NodeList nodeList = (NodeList) xPath.compile(expression).evaluate(doc, XPathConstants.NODESET);
			for (int i = 0; i < nodeList.getLength(); i++) 
			{
				try 
				{
					jArr = parseNodesForAdditionalData(nodeList);
				} 
				catch (DOMException e)
				{
					e.printStackTrace();
				}
			}			
		} 
		catch (SAXException e) 
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (XPathExpressionException e) 
		{
			e.printStackTrace();
		} 
		catch (ParserConfigurationException e) 
		{
			e.printStackTrace();
		}
		return jArr;
	}
	
	private JSONArray createCustomOrg(String reportURL) throws JSONException {

		JSONArray jArr = new JSONArray();
		DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilder dBuilder;
		XPath xPath = XPathFactory.newInstance().newXPath();
		HttpBasicAuthentication httpBasicAuthentication = new HttpBasicAuthentication();
		String output = httpBasicAuthentication.getWithBasicAuthentication(reportURL, tenant.getTenantUser(), tenant.getTenantUserPassword());
		Reader reader1 = new StringReader(output);
		Document doc;
		try 
		{
			dBuilder = dbFactory.newDocumentBuilder();
			doc = dBuilder.parse(new InputSource(reader1));
			doc.getDocumentElement().normalize();
			String expression = EMPLOYEE_APPLICANT_MAPPING_RESPONSE_EXPRESSION;
			NodeList nodeList = (NodeList) xPath.compile(expression).evaluate(doc, XPathConstants.NODESET);
			for (int i = 0; i < nodeList.getLength(); i++) 
			{
				try 
				{
					jArr = parseNodesForCustomOrg(nodeList);
				} 
				catch (DOMException e)
				{
					e.printStackTrace();
				}
			}			
		} 
		catch (SAXException e) 
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (XPathExpressionException e) 
		{
			e.printStackTrace();
		} 
		catch (ParserConfigurationException e) 
		{
			e.printStackTrace();
		}
		return jArr;
	}
	
	private JSONArray createJobHistoryData(String reportURL) throws JSONException {

		JSONArray jArr = new JSONArray();
		DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilder dBuilder;
		XPath xPath = XPathFactory.newInstance().newXPath();
		HttpBasicAuthentication httpBasicAuthentication = new HttpBasicAuthentication();
		String output = httpBasicAuthentication.getWithBasicAuthentication(reportURL, tenant.getTenantUser(), tenant.getTenantUserPassword());
		Reader reader1 = new StringReader(output);
		Document doc;
		try 
		{
			dBuilder = dbFactory.newDocumentBuilder();
			doc = dBuilder.parse(new InputSource(reader1));
			doc.getDocumentElement().normalize();
			String expression = EMPLOYEE_APPLICANT_MAPPING_RESPONSE_EXPRESSION;
			NodeList nodeList = (NodeList) xPath.compile(expression).evaluate(doc, XPathConstants.NODESET);
			for (int i = 0; i < nodeList.getLength(); i++) 
			{
				try 
				{
					jArr = parseNodesForEducation(nodeList);
				} 
				catch (DOMException e)
				{
					e.printStackTrace();
				}
			}			
		} 
		catch (SAXException e) 
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (XPathExpressionException e) 
		{
			e.printStackTrace();
		} 
		catch (ParserConfigurationException e) 
		{
			e.printStackTrace();
		}
		return jArr;
	}
	
	
	private JSONArray parseNodesForEducation(NodeList nodeList) throws JSONException {

		JSONArray details = new JSONArray();
		for (int i = 0; i < nodeList.getLength(); i++) 
		{
		    Node nNode = nodeList.item(i);
		    if (nNode.getNodeName().equals("wd:Report_Data")) 
		    {
				if (nNode.getNodeType() == Node.ELEMENT_NODE) 
				{
					Element eElement = (Element) nNode;
					if (eElement.hasChildNodes()) 
					{
						NodeList childNodes = eElement.getChildNodes();
						for (int j = 0; j < childNodes.getLength(); j++) 
						{
							Node aChildNode = childNodes.item(j);
							if (aChildNode.getNodeName().equals("wd:Report_Entry")) 
							{
								Element eElementEntry = (Element) aChildNode;
								if (eElement.hasChildNodes()) 
								{
									NodeList childNodesEntry = eElementEntry.getChildNodes();
									for (int k = 0; k < childNodesEntry.getLength(); k++) 
									{										
										Node aChildNodeEntry = childNodesEntry.item(k);
										JSONObject obj = new JSONObject();
										if(aChildNodeEntry.getNodeName().equals("wd:education_group"))
										{
											Element eElemEntry = (Element) aChildNodeEntry;
											if (eElementEntry.hasChildNodes()) 
											{												
												NodeList childNodesEnt = eElemEntry.getChildNodes();
												for (int l = 0; l < childNodesEnt.getLength(); l++) 
												{													
													Node nChildNodeEntry = childNodesEnt.item(l);
													if(nChildNodeEntry.getNodeName().equals("wd:School"))
													{
														String schVal = nChildNodeEntry.getAttributes().getNamedItem("wd:Descriptor").toString();
														String schoolVal = schVal.replaceAll("\"", "");
														int pos = schoolVal.trim().indexOf("=") + 1;
														String actualSchoolVal = schoolVal.substring(pos, schoolVal.length());
														obj.put("school", actualSchoolVal);	
													}
													else if(nChildNodeEntry.getNodeName().equals("wd:School_Location"))
													{
														obj.put("schoolLocation", nChildNodeEntry.getTextContent());													
													}
													else if(nChildNodeEntry.getNodeName().equals("wd:Country"))
													{
														obj.put("country", nChildNodeEntry.getTextContent());													
													}
													else if(nChildNodeEntry.getNodeName().equals("wd:Degree"))
													{
														String degVal = nChildNodeEntry.getAttributes().getNamedItem("wd:Descriptor").toString();
														String degreeVal = degVal.replaceAll("\"", "");
														int pos = degreeVal.trim().indexOf("=") + 1;
														String actualDegreeVal = degreeVal.substring(pos, degreeVal.length());
														obj.put("degree", actualDegreeVal);	
													}
													else if(nChildNodeEntry.getNodeName().equals("wd:Year_Degree_Recd"))
													{
														obj.put("degreeDate", nChildNodeEntry.getTextContent());													
													}
													else if(nChildNodeEntry.getNodeName().equals("wd:Field_of_Study"))
													{
														String fieldVal = nChildNodeEntry.getAttributes().getNamedItem("wd:Descriptor").toString();
														String studyVal = fieldVal.replaceAll("\"", "");
														int pos = studyVal.trim().indexOf("=") + 1;
														String actualStudyVal = studyVal.substring(pos, studyVal.length());
														obj.put("fieldOfStudy", actualStudyVal);	
													}
												}
											}
										}
										details.put(obj);
									}
								}
							}
						}
					}
				}
		    }
		}
		return details;
	}
	
	private JSONArray parseNodesForAdditionalData(NodeList nodeList) throws JSONException {

		JSONArray details = new JSONArray();
		for (int i = 0; i < nodeList.getLength(); i++) 
		{
		    Node nNode = nodeList.item(i);
		    if (nNode.getNodeName().equals("wd:Report_Data")) 
		    {
				if (nNode.getNodeType() == Node.ELEMENT_NODE) 
				{
					Element eElement = (Element) nNode;
					if (eElement.hasChildNodes()) 
					{
						NodeList childNodes = eElement.getChildNodes();
						for (int j = 0; j < childNodes.getLength(); j++) 
						{
							Node aChildNode = childNodes.item(j);
							if (aChildNode.getNodeName().equals("wd:Report_Entry")) 
							{
								Element eElementEntry = (Element) aChildNode;
								if (eElement.hasChildNodes()) 
								{
									NodeList childNodesEntry = eElementEntry.getChildNodes();
									for (int k = 0; k < childNodesEntry.getLength(); k++) 
									{										
										Node aChildNodeEntry = childNodesEntry.item(k);
										JSONObject obj = new JSONObject();
										if(aChildNodeEntry.getNodeName().equals("wd:Worker_Additional_Data_group"))
										{
											Element eElemEntry = (Element) aChildNodeEntry;
											if (eElementEntry.hasChildNodes()) 
											{												
												NodeList childNodesEnt = eElemEntry.getChildNodes();
												for (int l = 0; l < childNodesEnt.getLength(); l++) 
												{													
													Node nChildNodeEntry = childNodesEnt.item(l);													
													if(nChildNodeEntry.getNodeName().equals("wd:firstName"))
													{
														obj.put("firstName", nChildNodeEntry.getTextContent());													
													}													
												}
											}
										}
										details.put(obj);
									}
								}
							}
						}
					}
				}
		    }
		}
		return details;
	}
	
	private JSONArray parseNodesForCustomOrg(NodeList nodeList) throws JSONException {

		JSONArray details = new JSONArray();
		for (int i = 0; i < nodeList.getLength(); i++) 
		{
		    Node nNode = nodeList.item(i);
		    if (nNode.getNodeName().equals("wd:Report_Data")) 
		    {
				if (nNode.getNodeType() == Node.ELEMENT_NODE) 
				{
					Element eElement = (Element) nNode;
					if (eElement.hasChildNodes()) 
					{
						NodeList childNodes = eElement.getChildNodes();
						for (int j = 0; j < childNodes.getLength(); j++) 
						{
							Node aChildNode = childNodes.item(j);
							if (aChildNode.getNodeName().equals("wd:Report_Entry")) 
							{
								Element eElementEntry = (Element) aChildNode;
								if (eElement.hasChildNodes()) 
								{
									NodeList childNodesEntry = eElementEntry.getChildNodes();
									for (int k = 0; k < childNodesEntry.getLength(); k++) 
									{										
										Node aChildNodeEntry = childNodesEntry.item(k);
										JSONObject obj = new JSONObject();
										if(aChildNodeEntry.getNodeName().equals("wd:CF_-_Extract_Workplace_Indicator_group"))
										{
											Element eElemEntry = (Element) aChildNodeEntry;
											if (eElementEntry.hasChildNodes()) 
											{												
												NodeList childNodesEnt = eElemEntry.getChildNodes();
												for (int l = 0; l < childNodesEnt.getLength(); l++) 
												{													
													Node nChildNodeEntry = childNodesEnt.item(l);													
													if(nChildNodeEntry.getNodeName().equals("wd:referenceID"))
													{
														obj.put("customOrg", nChildNodeEntry.getTextContent());													
													}													
												}
											}
										}
										details.put(obj);
									}
								}
							}
						}
					}
				}
		    }
		}
		return details;
	}
	
	private JSONArray createCSVFromWDOneTimePayment(Tenant tenant, InputStream is, SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd,
			String loadCycle, String ruleName, String client) {
		
		 targetContent = null;
		 headingFromWD = "";
		 String checkFile = "";
		
		 String employeeId = "";
		 String WID = "";
		 String positionId = "";
		 String otpReason = "";
		 String otpPlan = "";
		 String schPaymentDate = "";
		 String coverageStartDate = "";
		 String coverageEndDate = "";
		 String amount = "";
		 String currency = "";

		 String finalStr = "";
		 String headerStr = "";					 
		 String reportURL = "";
		 
		 Map<String,String> widMap = null;
		 
		 try 
		 {			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_ONE_TIME_PAYMENT_REQUEST_FILE = requestfile.getAbsolutePath();
				 
				 if(errorList.isEmpty())
				 {
					 for(int i = 0; i<columnList.size();i++)
					 {
						 checkFile = addWorkerIdListToFindError(GET_ONE_TIME_PAYMENT_REQUEST_FILE, columnList.get(i), ruleName, "Employee_ID");
						 is = new FileInputStream(checkFile);
					     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     SOAPPart soapPart = soapMessage.getSOAPPart();
					     SOAPEnvelope envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
							  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
					     ByteArrayOutputStream out = new ByteArrayOutputStream();
					     soapMessage.writeTo(out);
					     String strMsgChk = new String(out.toByteArray());	
					     
					     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
					     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
						 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
						 out = new ByteArrayOutputStream();
						 soapResponse.writeTo(out);
						 strMsgChk = new String(out.toByteArray(), "utf-8");
						 if(strMsgChk.contains("faultstring"))
						 {
							 errorList.add(columnList.get(i)) ;
						 }
						 else
						 {
							 ReportElement rptElement = XmlParserManager.parseXml(strMsgChk);				 
							 ReportElement pageResults = rptElement.getChild("env:Body")
										.getChild("wd:Get_Workers_Response")
										.getChild("wd:Response_Results");
							 
							 String result = pageResults.getChild("wd:Total_Results").getValue().trim();
							 if(result.equalsIgnoreCase("0"))
							 {
								 errorList.add(columnList.get(i));
							 }
							 else
							 {
								 ReportElement responseData = rptElement.getChild("env:Body")
											.getChild("wd:Get_Workers_Response")
											.getChild("wd:Response_Data");
								 
								 List<ReportElement> workerData = responseData.getChildren("wd:Worker");
									
								 for(ReportElement reportElement : workerData)
								 {
									 ReportElement element1 = reportElement.getChild("wd:Worker_Data");
						        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
						        		System.out.println("employeeId--"+ employeeId);
						        		
						        		ReportElement widRef = reportElement.getChild("wd:Worker_Reference");
										 if(widRef != null)
										 {
											 List<ReportElement> idList = widRef.getChildren("wd:ID");
											 for(ReportElement idElement:idList)
											 {
												 widMap = idElement.getAllAttributes();
												 if(widMap.get("wd:type").equals("WID"))
												 {
													 WID = idElement.getValue().trim();
												 }
											 }
										 }
										 else
										 {
											 WID = "";
										 }
																				
										 reportURL = "https://" + tenant.getTenantUrl() + "customreport2/" + tenant.getTenantName() + "/ISU_Verify_Payroll/" + "International_Assignment?Employee!WID=" + WID;										 
									     JSONArray jArr = createOneTimePaymentData(reportURL);
									     if(jArr != null && jArr.length() >0)
										 {
									    	 for(int ii = 0; ii<jArr.length(); ii++) 
										     {
												JSONObject objects = jArr.getJSONObject(ii);
												positionId = objects.isNull("positionId")?"":objects.getString("positionId");
												otpReason = objects.isNull("otpReason")?"":objects.getString("otpReason");
												otpPlan = objects.isNull("otpPlan")?"":objects.getString("otpPlan");
												schPaymentDate = objects.isNull("schPaymentDate")?"":objects.getString("schPaymentDate");
												if(!schPaymentDate.isEmpty())
												{
													schPaymentDate = schPaymentDate.substring(0, 10);
												}
												coverageStartDate = objects.isNull("coverageStartDate")?"":objects.getString("coverageStartDate");
												if(!coverageStartDate.isEmpty())
												{
													coverageStartDate = coverageStartDate.substring(0, 10);
												}
												coverageEndDate = objects.isNull("coverageEndDate")?"":objects.getString("coverageEndDate");
												if(!coverageEndDate.isEmpty())
												{
													coverageEndDate = coverageEndDate.substring(0, 10);
												}
												amount = objects.isNull("amount")?"":objects.getString("amount");
												currency = objects.isNull("currency")?"":objects.getString("currency");
										     }
										 }
									     else
									     {
												positionId = "";
												otpReason = "";
												otpPlan = "";
												schPaymentDate = "";
												coverageStartDate = "";
												coverageEndDate = "";
												amount = "";
												currency = "";
									     }
										 headingFromWD = "Employee_ID,Position_ID,One_Time_Payment_Reason,One_Time_Payment_Plan,Scheduled_Payment_Date,Coverage_Start_Date,Coverage_End_Date,"
										 				+ "Amount,Currency";
										 
										 headerStr = employeeId + "," + positionId + "," + otpReason + "," + otpPlan + "," + schPaymentDate + "," + coverageStartDate + "," + coverageEndDate
												 + "," + amount + "," + currency;
										    					 		  
										 
										 if(finalStr.equals(""))
										 {
											 finalStr = headingFromWD + "\n" + headerStr;
										 }
										 else
										 {
											 finalStr = finalStr + "\n" + headerStr;
										 }
								 }
							 }
						 }
					 }
					 columnList.removeAll(errorList);
					 wdCount = columnList.size();
				 }		 					 
				 System.out.println(finalStr);
				 targetContent = finalStr.toString().getBytes();					 					 
				 headingWd = selectColumnMapping(loadCycle, ruleName, "Employee_ID");					 
				 complete = true;
			}			 			 
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}

		return headingWd;
	}
	
	private JSONArray createCSVFromWDEndIA(Tenant tenant, InputStream is, SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd, 
			String loadCycle, String ruleName, String client) {

		 targetContent = null;
		 headingFromWD = "";
		 String checkFile = "";
		
		 String employeeId = "";
		 String WID = "";
		 String positionId = "";
		 String payThroughDate = "";
		 String endAssignmentDate = "";
		 String lastDayOfWork = "";
		 String endAssignmentReason = "";

		 String finalStr = "";
		 String headerStr = "";					 
		 String reportURL = "";
		 
		 Map<String,String> widMap = null;
		 
		 try 
		 {			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_END_INTERNATIONAL_ASSIGNMENT_REQUEST_FILE = requestfile.getAbsolutePath();
				 
				 if(errorList.isEmpty())
				 {
					 for(int i = 0; i<columnList.size();i++)
					 {
						 checkFile = addWorkerIdListToFindError(GET_END_INTERNATIONAL_ASSIGNMENT_REQUEST_FILE, columnList.get(i), ruleName, "Employee_ID");
						 is = new FileInputStream(checkFile);
					     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     SOAPPart soapPart = soapMessage.getSOAPPart();
					     SOAPEnvelope envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
							  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
					     ByteArrayOutputStream out = new ByteArrayOutputStream();
					     soapMessage.writeTo(out);
					     String strMsgChk = new String(out.toByteArray());	
					     
					     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
					     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
						 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
						 out = new ByteArrayOutputStream();
						 soapResponse.writeTo(out);
						 strMsgChk = new String(out.toByteArray(), "utf-8");
						 if(strMsgChk.contains("faultstring"))
						 {
							 errorList.add(columnList.get(i)) ;
						 }
						 else
						 {
							 ReportElement rptElement = XmlParserManager.parseXml(strMsgChk);				 
							 ReportElement pageResults = rptElement.getChild("env:Body")
										.getChild("wd:Get_Workers_Response")
										.getChild("wd:Response_Results");
							 
							 String result = pageResults.getChild("wd:Total_Results").getValue().trim();
							 if(result.equalsIgnoreCase("0"))
							 {
								 errorList.add(columnList.get(i));
							 }
							 else
							 {
								 ReportElement responseData = rptElement.getChild("env:Body")
											.getChild("wd:Get_Workers_Response")
											.getChild("wd:Response_Data");
								 
								 List<ReportElement> workerData = responseData.getChildren("wd:Worker");
									
								 for(ReportElement reportElement : workerData)
								 {
									 ReportElement element1 = reportElement.getChild("wd:Worker_Data");
						        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
						        		System.out.println("employeeId--"+ employeeId);
						        		
						        		ReportElement widRef = reportElement.getChild("wd:Worker_Reference");
										 if(widRef != null)
										 {
											 List<ReportElement> idList = widRef.getChildren("wd:ID");
											 for(ReportElement idElement:idList)
											 {
												 widMap = idElement.getAllAttributes();
												 if(widMap.get("wd:type").equals("WID"))
												 {
													 WID = idElement.getValue().trim();
												 }
											 }
										 }
										 else
										 {
											 WID = "";
										 }
																				
										 reportURL = "https://" + tenant.getTenantUrl() + "customreport2/" + tenant.getTenantName() + "/ISU_Verify_Payroll/" + "International_Assignment?Employee!WID=" + WID;										 
									     JSONArray jArr = createInternationalAssignmentData(reportURL);
									     if(jArr != null && jArr.length() >0)
										 {
									    	 for(int ii = 0; ii<jArr.length(); ii++) 
										     {
												JSONObject objects = jArr.getJSONObject(ii);
												positionId = objects.isNull("positionId")?"":objects.getString("positionId");
												payThroughDate = objects.isNull("payThroughDate")?"":objects.getString("payThroughDate");
												if(!payThroughDate.isEmpty())
												{
													payThroughDate = payThroughDate.substring(0, 10);
													//payThroughDate = convertDate(payThroughDate, "yyyy-MM-dd", "dd-MM-yyyy");
												}
												endAssignmentDate = objects.isNull("endAssignmentDate")?"":objects.getString("endAssignmentDate");
												if(!endAssignmentDate.isEmpty())
												{
													endAssignmentDate = endAssignmentDate.substring(0, 10);
													//endAssignmentDate = convertDate(endAssignmentDate, "yyyy-MM-dd", "dd-MM-yyyy");
												}
												lastDayOfWork = endAssignmentDate;
												endAssignmentReason = objects.isNull("endAssignmentReason")?"":objects.getString("endAssignmentReason");
										     }
										 }
									     else
									     {
												positionId = "";
												payThroughDate = "";
												endAssignmentDate = "";
												lastDayOfWork = "";
												endAssignmentReason = "";
									     }
										 headingFromWD = "Employee_ID,Position_ID,Pay_Through_Date,End_International_Assignment_Date,Last_Day_Of_Work,End_International_Assignment_Reason";
										 
										 headerStr = employeeId + "," + positionId + "," + payThroughDate + "," + endAssignmentDate + "," + lastDayOfWork + "," + endAssignmentReason;
										    					 		  
										 
										 if(finalStr.equals(""))
										 {
											 finalStr = headingFromWD + "\n" + headerStr;
										 }
										 else
										 {
											 finalStr = finalStr + "\n" + headerStr;
										 }
								 }
							 }
						 }
					 }
					 columnList.removeAll(errorList);
					 wdCount = columnList.size();
				 }		 					 
				 System.out.println(finalStr);
				 targetContent = finalStr.toString().getBytes();					 					 
				 headingWd = selectColumnMapping(loadCycle, ruleName, "Employee_ID");					 
				 complete = true;
			}			 			 
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}

		return headingWd;
	}
	
	private JSONArray createInternationalAssignmentData(String reportURL) throws JSONException {
		
		JSONArray jArr = new JSONArray();
		DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilder dBuilder;
		XPath xPath = XPathFactory.newInstance().newXPath();
		HttpBasicAuthentication httpBasicAuthentication = new HttpBasicAuthentication();
		String output = httpBasicAuthentication.getWithBasicAuthentication(reportURL, tenant.getTenantUser(), tenant.getTenantUserPassword());
		Reader reader1 = new StringReader(output);
		Document doc;
		try 
		{
			dBuilder = dbFactory.newDocumentBuilder();
			doc = dBuilder.parse(new InputSource(reader1));
			doc.getDocumentElement().normalize();
			String expression = EMPLOYEE_APPLICANT_MAPPING_RESPONSE_EXPRESSION;
			NodeList nodeList = (NodeList) xPath.compile(expression).evaluate(doc, XPathConstants.NODESET);
			for (int i = 0; i < nodeList.getLength(); i++) 
			{
				try 
				{
					jArr = parseNodesForInternationalAssignment(nodeList);
				} 
				catch (DOMException e)
				{
					e.printStackTrace();
				}
			}			
		} 
		catch (SAXException e) 
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (XPathExpressionException e) 
		{
			e.printStackTrace();
		} 
		catch (ParserConfigurationException e) 
		{
			e.printStackTrace();
		}
		return jArr;
	}
	
	private JSONArray createOneTimePaymentData(String reportURL) throws JSONException {
		
		JSONArray jArr = new JSONArray();
		DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilder dBuilder;
		XPath xPath = XPathFactory.newInstance().newXPath();
		HttpBasicAuthentication httpBasicAuthentication = new HttpBasicAuthentication();
		String output = httpBasicAuthentication.getWithBasicAuthentication(reportURL, tenant.getTenantUser(), tenant.getTenantUserPassword());
		Reader reader1 = new StringReader(output);
		Document doc;
		try 
		{
			dBuilder = dbFactory.newDocumentBuilder();
			doc = dBuilder.parse(new InputSource(reader1));
			doc.getDocumentElement().normalize();
			String expression = EMPLOYEE_APPLICANT_MAPPING_RESPONSE_EXPRESSION;
			NodeList nodeList = (NodeList) xPath.compile(expression).evaluate(doc, XPathConstants.NODESET);
			for (int i = 0; i < nodeList.getLength(); i++) 
			{
				try 
				{
					jArr = parseNodesForInternationalAssignment(nodeList);
				} 
				catch (DOMException e)
				{
					e.printStackTrace();
				}
			}			
		} 
		catch (SAXException e) 
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (XPathExpressionException e) 
		{
			e.printStackTrace();
		} 
		catch (ParserConfigurationException e) 
		{
			e.printStackTrace();
		}
		return jArr;
	}
	
	private JSONArray parseNodesForInternationalAssignment(NodeList nodeList) throws DOMException, JSONException {
		
		JSONArray details = new JSONArray();
		for (int i = 0; i < nodeList.getLength(); i++) 
		{
		    Node nNode = nodeList.item(i);
		    if (nNode.getNodeName().equals("wd:Report_Data")) 
		    {
				if (nNode.getNodeType() == Node.ELEMENT_NODE) 
				{
					Element eElement = (Element) nNode;
					if (eElement.hasChildNodes()) 
					{
						NodeList childNodes = eElement.getChildNodes();
						for (int j = 0; j < childNodes.getLength(); j++) 
						{
							Node aChildNode = childNodes.item(j);
							JSONObject obj = new JSONObject();
							if (aChildNode.getNodeName().equals("wd:Report_Entry")) 
							{
								Element eElementEntry = (Element) aChildNode;
								if (eElement.hasChildNodes()) 
								{
									NodeList childNodesEntry = eElementEntry.getChildNodes();
									for (int k = 0; k < childNodesEntry.getLength(); k++) 
									{										
										Node aChildNodeEntry = childNodesEntry.item(k);
										if(aChildNodeEntry.getNodeName().equals("wd:CF_International_Assignee"))
										{											
											obj.put("positionId", aChildNodeEntry.getTextContent());											
										}
										else if(aChildNodeEntry.getNodeName().equals("wd:CF_Pay_Through_Date"))
										{
											obj.put("payThroughDate", aChildNodeEntry.getTextContent());	
										}
										else if(aChildNodeEntry.getNodeName().equals("wd:Last_End_International_Assignment_date"))
										{
											obj.put("endAssignmentDate", aChildNodeEntry.getTextContent());	
										}
										else if(aChildNodeEntry.getNodeName().equals("wd:Last_End_International_Assignment_Reason"))
										{
											obj.put("endAssignmentReason", aChildNodeEntry.getTextContent());	
										}
									}
								}
							}
							details.put(obj);
						}
					}
				}
		    }
		}
		return details;
	}	
	
	private JSONArray createCSVFromWDStartIA(Tenant tenant, InputStream is, SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd,
			String loadCycle, String ruleName, String client) {

		 targetContent = null;
		 headingFromWD = "";
		 String checkFile = "";
		
		 String employeeId = "";
		 String WID = "";
		 String startIADate = "";
		 String startIAReason = "";
		 String startIAType = "";
		 String supOrg = "";
		 String positionId = "";
		 String empType = "";
		 String jobProfile = "";
		 String location = "";
		 String timeType = "";

		 String finalStr = "";
		 String headerStr = "";					 
		 String reportURL = "";
		 
		 Map<String,String> widMap = null;
		 
		 try 
		 {			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_START_INTERNATIONAL_ASSIGNMENT_REQUEST_FILE = requestfile.getAbsolutePath();
				 
				 if(errorList.isEmpty())
				 {
					 for(int i = 0; i<columnList.size();i++)
					 {
						 checkFile = addWorkerIdListToFindError(GET_START_INTERNATIONAL_ASSIGNMENT_REQUEST_FILE, columnList.get(i), ruleName, "Employee_ID");
						 is = new FileInputStream(checkFile);
					     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     SOAPPart soapPart = soapMessage.getSOAPPart();
					     SOAPEnvelope envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
							  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
					     ByteArrayOutputStream out = new ByteArrayOutputStream();
					     soapMessage.writeTo(out);
					     String strMsgChk = new String(out.toByteArray());	
					     
					     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
					     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
						 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
						 out = new ByteArrayOutputStream();
						 soapResponse.writeTo(out);
						 strMsgChk = new String(out.toByteArray(), "utf-8");
						 if(strMsgChk.contains("faultstring"))
						 {
							 errorList.add(columnList.get(i)) ;
						 }
						 else
						 {
							 ReportElement rptElement = XmlParserManager.parseXml(strMsgChk);				 
							 ReportElement pageResults = rptElement.getChild("env:Body")
										.getChild("wd:Get_Workers_Response")
										.getChild("wd:Response_Results");
							 
							 String result = pageResults.getChild("wd:Total_Results").getValue().trim();
							 if(result.equalsIgnoreCase("0"))
							 {
								 errorList.add(columnList.get(i));
							 }
							 else
							 {
								 ReportElement responseData = rptElement.getChild("env:Body")
											.getChild("wd:Get_Workers_Response")
											.getChild("wd:Response_Data");
								 
								 List<ReportElement> workerData = responseData.getChildren("wd:Worker");
									
								 for(ReportElement reportElement : workerData)
								 {
									 ReportElement element1 = reportElement.getChild("wd:Worker_Data");
						        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
						        		System.out.println("employeeId--"+ employeeId);
						        		
						        		ReportElement widRef = reportElement.getChild("wd:Worker_Reference");
										 if(widRef != null)
										 {
											 List<ReportElement> idList = widRef.getChildren("wd:ID");
											 for(ReportElement idElement:idList)
											 {
												 widMap = idElement.getAllAttributes();
												 if(widMap.get("wd:type").equals("WID"))
												 {
													 WID = idElement.getValue().trim();
												 }
											 }
										 }
										 else
										 {
											 WID = "";
										 }
																				
										 reportURL = "https://" + tenant.getTenantUrl() + "customreport2/" + tenant.getTenantName() + "/ISU_Verify_Payroll/" + "Start_IA?Employee!WID=" + WID;
											
										 JSONArray jArr = createStartInternationalAssignmentData(reportURL);
									     if(jArr != null && jArr.length() >0)
										 {
									    	 for(int ii = 0; ii<jArr.length(); ii++) 
										     {
												 JSONObject objects = jArr.getJSONObject(ii);
												 startIADate = objects.isNull("startIADate")?"":objects.getString("startIADate");
												 if(!startIADate.isEmpty())
												 {
													 startIADate = startIADate.substring(0, 10);
												 }
												 startIAReason = objects.isNull("startIAReason")?"":objects.getString("startIAReason");
												 startIAType = objects.isNull("startIAType")?"":objects.getString("startIAType");
												 supOrg = objects.isNull("supOrg")?"":objects.getString("supOrg");
												 positionId = objects.isNull("positionId")?"":objects.getString("positionId");
												 empType = objects.isNull("empType")?"":objects.getString("empType");
												 jobProfile = objects.isNull("jobProfile")?"":objects.getString("jobProfile");
												 location = objects.isNull("location")?"":objects.getString("location");
												 timeType = objects.isNull("timeType")?"":objects.getString("timeType");
										     }
										 }
									     else
									     {
											 startIADate = "";
											 startIAReason = "";
											 startIAType = "";
											 supOrg = "";
											 positionId = "";
											 empType = "";
											 jobProfile = "";
											 location = "";
											 timeType = "";
									     }
										 headingFromWD = "Employee_ID,Start_Date,Organization,International_Assignment_Type,Start_International_Assignment_Reason,Employee_Type,Position_ID,"
										 				+ "Job_Profile,Location,Position_Time_Type";
										 
										 headerStr = employeeId + "," + startIADate + "," + supOrg + "," + startIAType + "," + startIAReason + "," + empType + "," + positionId + "," + jobProfile + "," +
										             location + "," + timeType;
										    					 		  
										 
										 if(finalStr.equals(""))
										 {
											 finalStr = headingFromWD + "\n" + headerStr;
										 }
										 else
										 {
											 finalStr = finalStr + "\n" + headerStr;
										 }
								 }
							 }
						 }
					 }
					 columnList.removeAll(errorList);
					 wdCount = columnList.size();
				 }		 					 
				 System.out.println(finalStr);
				 targetContent = finalStr.toString().getBytes();					 					 
				 headingWd = selectColumnMapping(loadCycle, ruleName, "Employee_ID");					 
				 complete = true;
			}			 			 
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}

		return headingWd;
	}
	
	private JSONArray createStartInternationalAssignmentData(String reportURL) throws JSONException {
		
		JSONArray jArr = new JSONArray();
		DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilder dBuilder;
		XPath xPath = XPathFactory.newInstance().newXPath();
		HttpBasicAuthentication httpBasicAuthentication = new HttpBasicAuthentication();
		String output = httpBasicAuthentication.getWithBasicAuthentication(reportURL, tenant.getTenantUser(), tenant.getTenantUserPassword());
		Reader reader1 = new StringReader(output);
		Document doc;
		try 
		{
			dBuilder = dbFactory.newDocumentBuilder();
			doc = dBuilder.parse(new InputSource(reader1));
			doc.getDocumentElement().normalize();
			String expression = EMPLOYEE_APPLICANT_MAPPING_RESPONSE_EXPRESSION;
			NodeList nodeList = (NodeList) xPath.compile(expression).evaluate(doc, XPathConstants.NODESET);
			for (int i = 0; i < nodeList.getLength(); i++) 
			{
				try 
				{
					jArr = parseNodesForStartInternationalAssignment(nodeList);
				} 
				catch (DOMException e)
				{
					e.printStackTrace();
				}
			}			
		} 
		catch (SAXException e) 
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (XPathExpressionException e) 
		{
			e.printStackTrace();
		} 
		catch (ParserConfigurationException e) 
		{
			e.printStackTrace();
		}
		return jArr;
	}

	private JSONArray parseNodesForStartInternationalAssignment(NodeList nodeList) throws DOMException, JSONException {

		JSONArray details = new JSONArray();
		for (int i = 0; i < nodeList.getLength(); i++) 
		{
		    Node nNode = nodeList.item(i);
		    if (nNode.getNodeName().equals("wd:Report_Data")) 
		    {
				if (nNode.getNodeType() == Node.ELEMENT_NODE) 
				{
					Element eElement = (Element) nNode;
					if (eElement.hasChildNodes()) 
					{
						NodeList childNodes = eElement.getChildNodes();
						for (int j = 0; j < childNodes.getLength(); j++) 
						{
							Node aChildNode = childNodes.item(j);
							JSONObject obj = new JSONObject();
							if (aChildNode.getNodeName().equals("wd:Report_Entry")) 
							{
								Element eElementEntry = (Element) aChildNode;
								if (eElement.hasChildNodes()) 
								{
									NodeList childNodesEntry = eElementEntry.getChildNodes();
									for (int k = 0; k < childNodesEntry.getLength(); k++) 
									{										
										Node aChildNodeEntry = childNodesEntry.item(k);
										if(aChildNodeEntry.getNodeName().equals("wd:CF_LRV_Start_International_Assignment_date"))
										{											
											obj.put("startIADate", aChildNodeEntry.getTextContent());											
										}
										else if(aChildNodeEntry.getNodeName().equals("wd:CF_LRV_Start_International_Assignment_Reason"))
										{
											obj.put("startIAReason", aChildNodeEntry.getTextContent());	
										}
										else if(aChildNodeEntry.getNodeName().equals("wd:CF_LRV_Start_International_Assignment_Type"))
										{
											obj.put("startIAType", aChildNodeEntry.getTextContent());	
										}
										else if(aChildNodeEntry.getNodeName().equals("wd:CF_LRV_Supervisory_Organization"))
										{
											obj.put("supOrg", aChildNodeEntry.getTextContent());	
										}
										else if(aChildNodeEntry.getNodeName().equals("wd:CF_LRV_Employee_Type"))
										{
											obj.put("empType", aChildNodeEntry.getTextContent());	
										}
										else if(aChildNodeEntry.getNodeName().equals("wd:CF_LRV_Position"))
										{
											obj.put("positionId", aChildNodeEntry.getTextContent());	
										}
										else if(aChildNodeEntry.getNodeName().equals("wd:CF_LRV_Job_Profile"))
										{
											obj.put("jobProfile", aChildNodeEntry.getTextContent());	
										}
										else if(aChildNodeEntry.getNodeName().equals("wd:CF_LRV_Location"))
										{
											obj.put("location", aChildNodeEntry.getTextContent());	
										}
										else if(aChildNodeEntry.getNodeName().equals("wd:CF_LRV_Position_Time_Type"))
										{
											obj.put("timeType", aChildNodeEntry.getTextContent());	
										}
									}
								}
							}
							details.put(obj);
						}
					}
				}
		    }
		}
		return details;
	}
	
	private JSONArray createCSVFromWDEmployeeJobHistory(Tenant tenant, InputStream is, SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd,
			String loadCycle, String ruleName, String client) {

		 targetContent = null;
		 headingFromWD = "";
		 String checkFile = "";
		
		 String employeeId = "";
		 String workerHistoryName = "";
		 String actionDate = "";
		 String reason = "";
		 String histroyText1 = "";
		 String histroyText2 = "";
		 String histroyText3 = "";
		 String histroyText4 = "";
		 String histroyText5 = "";
		 String histroyText6 = "";
		 String histroyText7 = "";
		 String histroyText8 = "";
		 String workerHistoryNameArr = "";
		 String actionDateArr = "";
		 String reasonArr = "";
		 String histroyText1Arr = "";
		 String histroyText2Arr = "";
		 String histroyText3Arr = "";
		 String histroyText4Arr = "";
		 String histroyText5Arr = "";
		 String histroyText6Arr = "";
		 String histroyText7Arr = "";
		 String histroyText8Arr = "";
		 
		 Map<String,String> empMap = null;

		 String finalStr = "";
		 String headerStr = "";
		 
		 try 
		 {			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_JOB_HIST_REQUEST_FILE = requestfile.getAbsolutePath();
				 
				 if(errorList.isEmpty())
				 {
					 for(int i = 0; i<columnList.size();i++)
					 {
						 checkFile = addJobHistoryIdListToFindError(GET_JOB_HIST_REQUEST_FILE, columnList.get(i), ruleName, "Employee_ID");
						 is = new FileInputStream(checkFile);
					     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     SOAPPart soapPart = soapMessage.getSOAPPart();
					     SOAPEnvelope envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
							  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
					     ByteArrayOutputStream out = new ByteArrayOutputStream();
					     soapMessage.writeTo(out);
					     String strMsgChk = new String(out.toByteArray());	
					     
					     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Human_Resources";
					     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
						 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
						 out = new ByteArrayOutputStream();
						 soapResponse.writeTo(out);
						 strMsgChk = new String(out.toByteArray(), "utf-8");
						 if(strMsgChk.contains("faultstring"))
						 {
							 errorList.add(columnList.get(i)) ;
						 }
						 else
						 {
							 ReportElement rptElement = XmlParserManager.parseXml(strMsgChk);				 
							 ReportElement pageResults = rptElement.getChild("env:Body")
										.getChild("wd:Get_Previous_System_Job_History_Response")
										.getChild("wd:Response_Results");
							 
							 String result = pageResults.getChild("wd:Total_Results").getValue().trim();
							 if(result.equalsIgnoreCase("0"))
							 {
								 errorList.add(columnList.get(i));
							 }
							 else
							 {
								 ReportElement responseData = rptElement.getChild("env:Body")
											.getChild("wd:Get_Previous_System_Job_History_Response")
											.getChild("wd:Response_Data");
								 
								 List<ReportElement> jobData = responseData.getChildren("wd:Previous_System_Job_History");
									
								 for(ReportElement reportElement : jobData)
								 {
									 ReportElement jobHistoryData = reportElement.getChild("wd:Previous_System_Job_History_Data");
						        	 if(jobHistoryData != null)
						        	 {
						        		 ReportElement empRef = jobHistoryData.getChild("wd:Worker_Reference");
										 if(empRef != null)
										 {
											 List<ReportElement> idList = empRef.getChildren("wd:ID");
											 for(ReportElement idElement:idList)
											 {
												 empMap = idElement.getAllAttributes();
												 if(empMap.get("wd:type").equals("Employee_ID"))
												 {
													 employeeId = idElement.getValue().trim();
													 System.out.println("employeeId -- "+employeeId);
												 }
											 }
										 }
										 
										 List<ReportElement> jobhistoryList = jobHistoryData.getChildren("wd:Previous_System_Job_History");
										 if(jobhistoryList != null && jobhistoryList.size() >0)
										 {
											 workerHistoryNameArr = "";
											 actionDateArr = "";
											 reasonArr = "";
											 histroyText1Arr = "";
											 histroyText2Arr = "";
											 histroyText3Arr = "";
											 histroyText4Arr = "";
											 histroyText5Arr = "";
											 histroyText6Arr = "";
											 histroyText7Arr = "";
											 histroyText8Arr = "";
											 
											 for(ReportElement jobHistElement : jobhistoryList)
											 {
												 ReportElement jobHistoryDetailData = jobHistElement.getChild("wd:Previous_System_Job_History_Detail_Data");
												 if(jobHistoryDetailData != null)
												 {
													 workerHistoryName = jobHistoryDetailData.getChild("wd:Worker_History_Name") != null?jobHistoryDetailData.getChild("wd:Worker_History_Name").getValue().trim():"";
													 if(workerHistoryName.contains(","))
													 {
														 workerHistoryName = workerHistoryName.replaceAll(",", "|");
													 }
													 if(workerHistoryNameArr.equals(""))
													 {
														 workerHistoryNameArr = workerHistoryName;
													 }
													 else
													 {
														 if(!workerHistoryName.isEmpty())
														 {
															 workerHistoryNameArr = workerHistoryNameArr + "~" + workerHistoryName;
														 }
													 }
													 actionDate = jobHistoryDetailData.getChild("wd:Action_Date") != null?jobHistoryDetailData.getChild("wd:Action_Date").getValue().trim():"";
													 if(actionDateArr.equals(""))
													 {
														 actionDateArr = actionDate;
													 }
													 else
													 {
														 if(!actionDate.isEmpty())
														 {
															 actionDateArr = actionDateArr + "~" + actionDate;
														 }
													 }
													 reason = jobHistoryDetailData.getChild("wd:Reason") != null?jobHistoryDetailData.getChild("wd:Reason").getValue().trim():"";
													 if(reason.contains(","))
													 {
														 reason = reason.replaceAll(",", "|");
													 }
													 if(reasonArr.equals(""))
													 {
														 reasonArr = reason;
													 }
													 else
													 {
														 if(!reason.isEmpty())
														 {
															 reasonArr = reasonArr + "~" + reason;
														 }
													 }
													 histroyText1 = jobHistoryDetailData.getChild("wd:Job_Previous_System_History_Text_1") != null?jobHistoryDetailData.getChild("wd:Job_Previous_System_History_Text_1").getValue().trim():"";
													 if(histroyText1.contains(","))
													 {
														 histroyText1 = histroyText1.replaceAll(",", "|");
													 }
													 if(histroyText1Arr.equals(""))
													 {
														 histroyText1Arr = histroyText1;
													 }
													 else
													 {
														 if(!histroyText1.isEmpty())
														 {
															 histroyText1Arr = histroyText1Arr + "~" + histroyText1;
														 }
													 }
													 histroyText2 = jobHistoryDetailData.getChild("wd:Job_Previous_System_History_Text_2") != null?jobHistoryDetailData.getChild("wd:Job_Previous_System_History_Text_2").getValue().trim():"";
													 if(histroyText2.contains(","))
													 {
														 histroyText2 = histroyText2.replaceAll(",", "|");
													 }
													 if(histroyText2Arr.equals(""))
													 {
														 histroyText2Arr = histroyText2;
													 }
													 else
													 {
														 if(!histroyText2.isEmpty())
														 {
															 histroyText2Arr = histroyText2Arr + "~" + histroyText2;
														 }
													 }
													 histroyText3 = jobHistoryDetailData.getChild("wd:Job_Previous_System_History_Text_3") != null?jobHistoryDetailData.getChild("wd:Job_Previous_System_History_Text_3").getValue().trim():"";
													 if(histroyText3.contains(","))
													 {
														 histroyText3 = histroyText3.replaceAll(",", "|");
													 }
													 if(histroyText3Arr.equals(""))
													 {
														 histroyText3Arr = histroyText3;
													 }
													 else
													 {
														 if(!histroyText3.isEmpty())
														 {
															 histroyText3Arr = histroyText3Arr + "~" + histroyText3;
														 }
													 }
													 histroyText4 = jobHistoryDetailData.getChild("wd:Job_Previous_System_History_Text_4") != null?jobHistoryDetailData.getChild("wd:Job_Previous_System_History_Text_4").getValue().trim():"";
													 if(histroyText4.contains(","))
													 {
														 histroyText4 = histroyText4.replaceAll(",", "|");
													 }
													 if(histroyText4Arr.equals(""))
													 {
														 histroyText4Arr = histroyText4;
													 }
													 else
													 {
														 if(!histroyText4.isEmpty())
														 {
															 histroyText4Arr = histroyText4Arr + "~" + histroyText4;
														 }
													 }
													 histroyText5 = jobHistoryDetailData.getChild("wd:Job_Previous_System_History_Text_5") != null?jobHistoryDetailData.getChild("wd:Job_Previous_System_History_Text_5").getValue().trim():"";
													 if(histroyText5.contains(","))
													 {
														 histroyText5 = histroyText5.replaceAll(",", "|");
													 }
													 if(histroyText5Arr.equals(""))
													 {
														 histroyText5Arr = histroyText5;
													 }
													 else
													 {
														 if(!histroyText5.isEmpty())
														 {
															 histroyText5Arr = histroyText5Arr + "~" + histroyText5;
														 }
													 }
													 histroyText6 = jobHistoryDetailData.getChild("wd:Job_Previous_System_History_Text_6") != null?jobHistoryDetailData.getChild("wd:Job_Previous_System_History_Text_6").getValue().trim():"";
													 if(histroyText6.contains(","))
													 {
														 histroyText6 = histroyText6.replaceAll(",", "|");
													 }
													 if(histroyText6Arr.equals(""))
													 {
														 histroyText6Arr = histroyText6;
													 }
													 else
													 {
														 if(!histroyText6.isEmpty())
														 {
															 histroyText6Arr = histroyText6Arr + "~" + histroyText6;
														 }
													 }
													 histroyText7 = jobHistoryDetailData.getChild("wd:Job_Previous_System_History_Text_7") != null?jobHistoryDetailData.getChild("wd:Job_Previous_System_History_Text_7").getValue().trim():"";
													 if(histroyText7.contains(","))
													 {
														 histroyText7 = histroyText7.replaceAll(",", "|");
													 }
													 if(histroyText7Arr.equals(""))
													 {
														 histroyText7Arr = histroyText7;
													 }
													 else
													 {
														 if(!histroyText7.isEmpty())
														 {
															 histroyText7Arr = histroyText7Arr + "~" + histroyText7;
														 }
													 }
													 histroyText8 = jobHistoryDetailData.getChild("wd:Job_Previous_System_History_Text_8") != null?jobHistoryDetailData.getChild("wd:Job_Previous_System_History_Text_8").getValue().trim():"";
													 if(histroyText8.contains(","))
													 {
														 histroyText8 = histroyText8.replaceAll(",", "|");
													 }
													 if(histroyText8Arr.equals(""))
													 {
														 histroyText8Arr = histroyText8;
													 }
													 else
													 {
														 if(!histroyText8.isEmpty())
														 {
															 histroyText8Arr = histroyText8Arr + "~" + histroyText8;
														 }
													 }
												 }
												 else
												 {
													 workerHistoryNameArr = "";
													 actionDateArr = "";
													 reasonArr = "";
													 histroyText1Arr = "";
													 histroyText2Arr = "";
													 histroyText3Arr = "";
													 histroyText4Arr = "";
													 histroyText5Arr = "";
													 histroyText6Arr = "";
													 histroyText7Arr = "";
													 histroyText8Arr = "";
												 }
											 }
										 }
										 else
										 {
											 workerHistoryNameArr = "";
											 actionDateArr = "";
											 reasonArr = "";
											 histroyText1Arr = "";
											 histroyText2Arr = "";
											 histroyText3Arr = "";
											 histroyText4Arr = "";
											 histroyText5Arr = "";
											 histroyText6Arr = "";
											 histroyText7Arr = "";
											 histroyText8Arr = "";
										 }
						        	 }
						        		
										
										 
											 								 								 
									 headingFromWD = "Employee_ID,Worker_History_Name,Action_Date,Reason,Job_Previous_System_History_Text_1,Job_Previous_System_History_Text_2,Job_Previous_System_History_Text_3,"
									 		+ "Job_Previous_System_History_Text_4,Job_Previous_System_History_Text_5,Job_Previous_System_History_Text_6,Job_Previous_System_History_Text_7,Job_Previous_System_History_Text_8";
									 
									 headerStr = employeeId + "," + workerHistoryNameArr + "," + actionDateArr + "," + reasonArr + "," + histroyText1Arr + "," + histroyText2Arr + "," + histroyText3Arr
											 + "," + histroyText4Arr + "," + histroyText5Arr + "," + histroyText6Arr + "," + histroyText7Arr + "," + histroyText8Arr;
									 
									 if(finalStr.equals(""))
									 {
										 finalStr = headingFromWD + "\n" + headerStr;
									 }
									 else
									 {
										 finalStr = finalStr + "\n" + headerStr;
									 }
								 }
							 }
						 }
					 }
					 columnList.removeAll(errorList);
					 wdCount = columnList.size();
				 }		 					 
				 System.out.println(finalStr);
				 targetContent = finalStr.toString().getBytes();					 					 
				 headingWd = selectColumnMapping(loadCycle, ruleName, "Employee_ID");					 
				 complete = true;
			}			 			 
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}

		return headingWd;
	}
	
	private JSONArray createCSVFromWDAddWorkSchedule(Tenant tenant, InputStream is, SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd,
			String loadCycle, String ruleName, String client) {

		 targetContent = null;
		 headingFromWD = "";
		 String checkFile = "";
		
		 String employeeId = "";
		 String WID = "";
		 String startDate = "";
		 String endDate = "";
		 String workScheduleCalendar = "";
		 
		 Map<String,String> widMap = null;

		 String finalStr = "";
		 String headerStr = "";
		 String reportURL = "";
		 
		 try 
		 {			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_WORK_SCHEDULE_REQUEST_FILE = requestfile.getAbsolutePath();
				 
				 if(errorList.isEmpty())
				 {
					 for(int i = 0; i<columnList.size();i++)
					 {
						 checkFile = addWorkerIdListToFindError(GET_WORK_SCHEDULE_REQUEST_FILE, columnList.get(i), ruleName, "Employee_ID");
						 is = new FileInputStream(checkFile);
					     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     SOAPPart soapPart = soapMessage.getSOAPPart();
					     SOAPEnvelope envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
							  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
					     ByteArrayOutputStream out = new ByteArrayOutputStream();
					     soapMessage.writeTo(out);
					     String strMsgChk = new String(out.toByteArray());	
					     
					     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
					     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
						 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
						 out = new ByteArrayOutputStream();
						 soapResponse.writeTo(out);
						 strMsgChk = new String(out.toByteArray(), "utf-8");
						 if(strMsgChk.contains("faultstring"))
						 {
							 errorList.add(columnList.get(i)) ;
						 }
						 else
						 {
							 ReportElement rptElement = XmlParserManager.parseXml(strMsgChk);				 
							 ReportElement pageResults = rptElement.getChild("env:Body")
										.getChild("wd:Get_Workers_Response")
										.getChild("wd:Response_Results");
							 
							 String result = pageResults.getChild("wd:Total_Results").getValue().trim();
							 if(result.equalsIgnoreCase("0"))
							 {
								 errorList.add(columnList.get(i));
							 }
							 else
							 {
								 ReportElement responseData = rptElement.getChild("env:Body")
											.getChild("wd:Get_Workers_Response")
											.getChild("wd:Response_Data");
								 
								 List<ReportElement> workerData = responseData.getChildren("wd:Worker");
									
								 for(ReportElement reportElement : workerData)
								 {
									 ReportElement element1 = reportElement.getChild("wd:Worker_Data");
						        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
						        		System.out.println("employeeId--"+ employeeId);
						        		
						        		ReportElement widRef = reportElement.getChild("wd:Worker_Reference");
										 if(widRef != null)
										 {
											 List<ReportElement> idList = widRef.getChildren("wd:ID");
											 for(ReportElement idElement:idList)
											 {
												 widMap = idElement.getAllAttributes();
												 if(widMap.get("wd:type").equals("WID"))
												 {
													 WID = idElement.getValue().trim();
												 }
											 }
										 }
										 else
										 {
											 WID = "";
										 }
										
										 reportURL = "https://" + tenant.getTenantUrl() + "customreport2/" + tenant.getTenantName() + "/ISU_Verify_Payroll/" + "Work_Schedule?Employee!WID=" + WID;
										 //reportURL = "https://" + tenant.getTenantUrl() + "customreport2/" + tenant.getTenantName() + "/ISU_Verify_Payroll/" + "Work_Schedule?Effective_as_of_Date=2023-01-02-08:00&Employee!WID=" + WID;
										 
										    JSONArray jArr = createWorkScheduleData(reportURL);
										    if(jArr != null && jArr.length() >0)
											{
												 for(int ii = 0; ii<jArr.length(); ii++) 
											     {
													JSONObject objects = jArr.getJSONObject(ii);
													startDate = objects.isNull("startDate")?"":objects.getString("startDate");
													endDate = objects.isNull("endDate")?"":objects.getString("endDate");
													workScheduleCalendar = objects.isNull("workSchedule")?"":objects.getString("workSchedule");
													if(workScheduleCalendar.contains(","))
													{
														workScheduleCalendar = workScheduleCalendar.replaceAll(",", "|");
													}
											     }
											 }
											 else
											 {
												 startDate = "";
												 endDate = "";
												 workScheduleCalendar = "";
											 }				
											 								 								 
										 headingFromWD = "Employee_ID,Work_Schedule_Start_Date,Work_Schedule_End_Date,Work_Schedule_Calendar";
								        	headerStr = employeeId + "," + startDate + "," + endDate + "," + workScheduleCalendar;						 		  
										 
										 if(finalStr.equals(""))
										 {
											 finalStr = headingFromWD + "\n" + headerStr;
										 }
										 else
										 {
											 finalStr = finalStr + "\n" + headerStr;
										 }
								 }
							 }
						 }
					 }
					 columnList.removeAll(errorList);
					 wdCount = columnList.size();
				 }		 					 
				 System.out.println(finalStr);
				 targetContent = finalStr.toString().getBytes();					 					 
				 headingWd = selectColumnMapping(loadCycle, ruleName, "Employee_ID");					 
				 complete = true;
			}			 			 
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}

		return headingWd;
	}
	
	private JSONArray createWorkScheduleData(String reportURL) throws JSONException {

		JSONArray jArr = new JSONArray();
		DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilder dBuilder;
		XPath xPath = XPathFactory.newInstance().newXPath();
		HttpBasicAuthentication httpBasicAuthentication = new HttpBasicAuthentication();
		String output = httpBasicAuthentication.getWithBasicAuthentication(reportURL, tenant.getTenantUser(), tenant.getTenantUserPassword());
		Reader reader1 = new StringReader(output);
		Document doc;
		try 
		{
			dBuilder = dbFactory.newDocumentBuilder();
			doc = dBuilder.parse(new InputSource(reader1));
			doc.getDocumentElement().normalize();
			String expression = EMPLOYEE_APPLICANT_MAPPING_RESPONSE_EXPRESSION;
			NodeList nodeList = (NodeList) xPath.compile(expression).evaluate(doc, XPathConstants.NODESET);
			for (int i = 0; i < nodeList.getLength(); i++) 
			{
				try 
				{
					jArr = parseNodesForWorkSchedule(nodeList);
				} 
				catch (DOMException e)
				{
					e.printStackTrace();
				}
			}			
		} 
		catch (SAXException e) 
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (XPathExpressionException e) 
		{
			e.printStackTrace();
		} 
		catch (ParserConfigurationException e) 
		{
			e.printStackTrace();
		}
		return jArr;
	}
	
	private JSONArray parseNodesForWorkSchedule(NodeList nodeList) throws DOMException, JSONException {
		
		JSONArray details = new JSONArray();
		for (int i = 0; i < nodeList.getLength(); i++) 
		{
		    Node nNode = nodeList.item(i);
		    if (nNode.getNodeName().equals("wd:Report_Data")) 
		    {
				if (nNode.getNodeType() == Node.ELEMENT_NODE) 
				{
					Element eElement = (Element) nNode;
					if (eElement.hasChildNodes()) 
					{
						NodeList childNodes = eElement.getChildNodes();
						for (int j = 0; j < childNodes.getLength(); j++) 
						{
							Node aChildNode = childNodes.item(j);
							JSONObject obj = new JSONObject();
							if (aChildNode.getNodeName().equals("wd:Report_Entry")) 
							{
								Element eElementEntry = (Element) aChildNode;
								if (eElement.hasChildNodes()) 
								{
									NodeList childNodesEntry = eElementEntry.getChildNodes();
									for (int k = 0; k < childNodesEntry.getLength(); k++) 
									{										
										Node aChildNodeEntry = childNodesEntry.item(k);
										if(aChildNodeEntry.getNodeName().equals("wd:CF_LRV_Start_Date_Time_from_Work_Schedule_Event"))
										{											
											obj.put("startDate", aChildNodeEntry.getTextContent());											
										}
										else if(aChildNodeEntry.getNodeName().equals("wd:CF_LRV_End_Date_Time_from_Work_Schedule_Event"))
										{
											obj.put("endDate", aChildNodeEntry.getTextContent());	
										}
										else if(aChildNodeEntry.getNodeName().equals("wd:Work_Schedule_Calendars"))
										{
											String workSchVal = aChildNodeEntry.getAttributes().getNamedItem("wd:Descriptor").toString();
											String workScheduleVal = workSchVal.replaceAll("\"", "");
											int pos = workScheduleVal.trim().indexOf("=") + 1;
											String actualWorkSchVal = workScheduleVal.substring(pos, workScheduleVal.length());
											obj.put("workSchedule", actualWorkSchVal);	
										}
									}
								}
							}
							details.put(obj);
						}
					}
				}
		    }
		}
		return details;
	}
	
	private JSONArray createW2CPrintingData(String reportURL) throws JSONException {

		JSONArray jArr = new JSONArray();
		DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilder dBuilder;
		XPath xPath = XPathFactory.newInstance().newXPath();
		HttpBasicAuthentication httpBasicAuthentication = new HttpBasicAuthentication();
		String output = httpBasicAuthentication.getWithBasicAuthentication(reportURL, tenant.getTenantUser(), tenant.getTenantUserPassword());
		Reader reader1 = new StringReader(output);
		Document doc;
		try 
		{
			dBuilder = dbFactory.newDocumentBuilder();
			doc = dBuilder.parse(new InputSource(reader1));
			doc.getDocumentElement().normalize();
			String expression = EMPLOYEE_APPLICANT_MAPPING_RESPONSE_EXPRESSION;
			NodeList nodeList = (NodeList) xPath.compile(expression).evaluate(doc, XPathConstants.NODESET);
			for (int i = 0; i < nodeList.getLength(); i++) 
			{
				try 
				{
					jArr = parseNodesForW2CPrinting(nodeList);
				} 
				catch (DOMException e)
				{
					e.printStackTrace();
				}
			}			
		} 
		catch (SAXException e) 
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (XPathExpressionException e) 
		{
			e.printStackTrace();
		} 
		catch (ParserConfigurationException e) 
		{
			e.printStackTrace();
		}
		return jArr;
	}
	
	private JSONArray createHomeCountryData(String reportURL) throws JSONException {

		JSONArray jArr = new JSONArray();
		DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilder dBuilder;
		XPath xPath = XPathFactory.newInstance().newXPath();
		HttpBasicAuthentication httpBasicAuthentication = new HttpBasicAuthentication();
		String output = httpBasicAuthentication.getWithBasicAuthentication(reportURL, tenant.getTenantUser(), tenant.getTenantUserPassword());
		Reader reader1 = new StringReader(output);
		Document doc;
		try 
		{
			dBuilder = dbFactory.newDocumentBuilder();
			doc = dBuilder.parse(new InputSource(reader1));
			doc.getDocumentElement().normalize();
			String expression = EMPLOYEE_APPLICANT_MAPPING_RESPONSE_EXPRESSION;
			NodeList nodeList = (NodeList) xPath.compile(expression).evaluate(doc, XPathConstants.NODESET);
			for (int i = 0; i < nodeList.getLength(); i++) 
			{
				try 
				{
					jArr = parseNodesForHomeCountry(nodeList);
				} 
				catch (DOMException e)
				{
					e.printStackTrace();
				}
			}			
		} 
		catch (SAXException e) 
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (XPathExpressionException e) 
		{
			e.printStackTrace();
		} 
		catch (ParserConfigurationException e) 
		{
			e.printStackTrace();
		}
		return jArr;
	}
	
	private JSONArray createHomeSDData(String reportURL) throws JSONException {

		JSONArray jArr = new JSONArray();
		DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilder dBuilder;
		XPath xPath = XPathFactory.newInstance().newXPath();
		HttpBasicAuthentication httpBasicAuthentication = new HttpBasicAuthentication();
		String output = httpBasicAuthentication.getWithBasicAuthentication(reportURL, tenant.getTenantUser(), tenant.getTenantUserPassword());
		Reader reader1 = new StringReader(output);
		Document doc;
		try 
		{
			dBuilder = dbFactory.newDocumentBuilder();
			doc = dBuilder.parse(new InputSource(reader1));
			doc.getDocumentElement().normalize();
			String expression = EMPLOYEE_APPLICANT_MAPPING_RESPONSE_EXPRESSION;
			NodeList nodeList = (NodeList) xPath.compile(expression).evaluate(doc, XPathConstants.NODESET);
			for (int i = 0; i < nodeList.getLength(); i++) 
			{
				try 
				{
					jArr = parseNodesForHomeSD(nodeList);
				} 
				catch (DOMException e)
				{
					e.printStackTrace();
				}
			}			
		} 
		catch (SAXException e) 
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (XPathExpressionException e) 
		{
			e.printStackTrace();
		} 
		catch (ParserConfigurationException e) 
		{
			e.printStackTrace();
		}
		return jArr;
	}
	
	private JSONArray createWorkCountryData(String reportURL) throws JSONException {

		JSONArray jArr = new JSONArray();
		DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilder dBuilder;
		XPath xPath = XPathFactory.newInstance().newXPath();
		HttpBasicAuthentication httpBasicAuthentication = new HttpBasicAuthentication();
		String output = httpBasicAuthentication.getWithBasicAuthentication(reportURL, tenant.getTenantUser(), tenant.getTenantUserPassword());
		Reader reader1 = new StringReader(output);
		Document doc;
		try 
		{
			dBuilder = dbFactory.newDocumentBuilder();
			doc = dBuilder.parse(new InputSource(reader1));
			doc.getDocumentElement().normalize();
			String expression = EMPLOYEE_APPLICANT_MAPPING_RESPONSE_EXPRESSION;
			NodeList nodeList = (NodeList) xPath.compile(expression).evaluate(doc, XPathConstants.NODESET);
			for (int i = 0; i < nodeList.getLength(); i++) 
			{
				try 
				{
					jArr = parseNodesForWorkCountry(nodeList);
				} 
				catch (DOMException e)
				{
					e.printStackTrace();
				}
			}			
		} 
		catch (SAXException e) 
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (XPathExpressionException e) 
		{
			e.printStackTrace();
		} 
		catch (ParserConfigurationException e) 
		{
			e.printStackTrace();
		}
		return jArr;
	}
	
	private JSONArray createWorkOtherData(String reportURL) throws JSONException {

		JSONArray jArr = new JSONArray();
		DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilder dBuilder;
		XPath xPath = XPathFactory.newInstance().newXPath();
		HttpBasicAuthentication httpBasicAuthentication = new HttpBasicAuthentication();
		String output = httpBasicAuthentication.getWithBasicAuthentication(reportURL, tenant.getTenantUser(), tenant.getTenantUserPassword());
		Reader reader1 = new StringReader(output);
		Document doc;
		try 
		{
			dBuilder = dbFactory.newDocumentBuilder();
			doc = dBuilder.parse(new InputSource(reader1));
			doc.getDocumentElement().normalize();
			String expression = EMPLOYEE_APPLICANT_MAPPING_RESPONSE_EXPRESSION;
			NodeList nodeList = (NodeList) xPath.compile(expression).evaluate(doc, XPathConstants.NODESET);
			for (int i = 0; i < nodeList.getLength(); i++) 
			{
				try 
				{
					jArr = parseNodesForWorkOther(nodeList);
				} 
				catch (DOMException e)
				{
					e.printStackTrace();
				}
			}			
		} 
		catch (SAXException e) 
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (XPathExpressionException e) 
		{
			e.printStackTrace();
		} 
		catch (ParserConfigurationException e) 
		{
			e.printStackTrace();
		}
		return jArr;
	}
	
	private JSONArray createWorkerStateWithholdingData(String reportURL) throws JSONException {

		JSONArray jArr = new JSONArray();
		DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilder dBuilder;
		XPath xPath = XPathFactory.newInstance().newXPath();
		HttpBasicAuthentication httpBasicAuthentication = new HttpBasicAuthentication();
		String output = httpBasicAuthentication.getWithBasicAuthentication(reportURL, tenant.getTenantUser(), tenant.getTenantUserPassword());
		Reader reader1 = new StringReader(output);
		Document doc;
		try 
		{
			dBuilder = dbFactory.newDocumentBuilder();
			doc = dBuilder.parse(new InputSource(reader1));
			doc.getDocumentElement().normalize();
			String expression = EMPLOYEE_APPLICANT_MAPPING_RESPONSE_EXPRESSION;
			NodeList nodeList = (NodeList) xPath.compile(expression).evaluate(doc, XPathConstants.NODESET);
			for (int i = 0; i < nodeList.getLength(); i++) 
			{
				try 
				{
					jArr = parseNodesForWorkerStateWithholding(nodeList);
				} 
				catch (DOMException e)
				{
					e.printStackTrace();
				}
			}			
		} 
		catch (SAXException e) 
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (XPathExpressionException e) 
		{
			e.printStackTrace();
		} 
		catch (ParserConfigurationException e) 
		{
			e.printStackTrace();
		}
		return jArr;
	}
	
	private JSONArray createHomeCityData(String reportURL) throws JSONException {

		JSONArray jArr = new JSONArray();
		DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilder dBuilder;
		XPath xPath = XPathFactory.newInstance().newXPath();
		HttpBasicAuthentication httpBasicAuthentication = new HttpBasicAuthentication();
		String output = httpBasicAuthentication.getWithBasicAuthentication(reportURL, tenant.getTenantUser(), tenant.getTenantUserPassword());
		Reader reader1 = new StringReader(output);
		Document doc;
		try 
		{
			dBuilder = dbFactory.newDocumentBuilder();
			doc = dBuilder.parse(new InputSource(reader1));
			doc.getDocumentElement().normalize();
			String expression = EMPLOYEE_APPLICANT_MAPPING_RESPONSE_EXPRESSION;
			NodeList nodeList = (NodeList) xPath.compile(expression).evaluate(doc, XPathConstants.NODESET);
			for (int i = 0; i < nodeList.getLength(); i++) 
			{
				try 
				{
					jArr = parseNodesForHomeCity(nodeList);
				} 
				catch (DOMException e)
				{
					e.printStackTrace();
				}
			}			
		} 
		catch (SAXException e) 
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (XPathExpressionException e) 
		{
			e.printStackTrace();
		} 
		catch (ParserConfigurationException e) 
		{
			e.printStackTrace();
		}
		return jArr;
	}
	
	private JSONArray createWorkCityData(String reportURL) throws JSONException {

		JSONArray jArr = new JSONArray();
		DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilder dBuilder;
		XPath xPath = XPathFactory.newInstance().newXPath();
		HttpBasicAuthentication httpBasicAuthentication = new HttpBasicAuthentication();
		String output = httpBasicAuthentication.getWithBasicAuthentication(reportURL, tenant.getTenantUser(), tenant.getTenantUserPassword());
		Reader reader1 = new StringReader(output);
		Document doc;
		try 
		{
			dBuilder = dbFactory.newDocumentBuilder();
			doc = dBuilder.parse(new InputSource(reader1));
			doc.getDocumentElement().normalize();
			String expression = EMPLOYEE_APPLICANT_MAPPING_RESPONSE_EXPRESSION;
			NodeList nodeList = (NodeList) xPath.compile(expression).evaluate(doc, XPathConstants.NODESET);
			for (int i = 0; i < nodeList.getLength(); i++) 
			{
				try 
				{
					jArr = parseNodesForWorkCity(nodeList);
				} 
				catch (DOMException e)
				{
					e.printStackTrace();
				}
			}			
		} 
		catch (SAXException e) 
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (XPathExpressionException e) 
		{
			e.printStackTrace();
		} 
		catch (ParserConfigurationException e) 
		{
			e.printStackTrace();
		}
		return jArr;
	}
	
	private JSONArray createWorkerHistoryData(String reportURL) throws JSONException {

		JSONArray jArr = new JSONArray();
		DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilder dBuilder;
		XPath xPath = XPathFactory.newInstance().newXPath();
		HttpBasicAuthentication httpBasicAuthentication = new HttpBasicAuthentication();
		String output = httpBasicAuthentication.getWithBasicAuthentication(reportURL, tenant.getTenantUser(), tenant.getTenantUserPassword());
		Reader reader1 = new StringReader(output);
		Document doc;
		try 
		{
			dBuilder = dbFactory.newDocumentBuilder();
			doc = dBuilder.parse(new InputSource(reader1));
			doc.getDocumentElement().normalize();
			String expression = EMPLOYEE_APPLICANT_MAPPING_RESPONSE_EXPRESSION;
			NodeList nodeList = (NodeList) xPath.compile(expression).evaluate(doc, XPathConstants.NODESET);
			for (int i = 0; i < nodeList.getLength(); i++) 
			{
				try 
				{
					jArr = parseNodesForWorkerHistory(nodeList);
				} 
				catch (DOMException e)
				{
					e.printStackTrace();
				}
			}			
		} 
		catch (SAXException e) 
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (XPathExpressionException e) 
		{
			e.printStackTrace();
		} 
		catch (ParserConfigurationException e) 
		{
			e.printStackTrace();
		}
		return jArr;
	}
	
	private JSONArray parseNodesForW2CPrinting(NodeList nodeList) throws DOMException, JSONException {
		
		JSONArray details = new JSONArray();
		for (int i = 0; i < nodeList.getLength(); i++) 
		{
		    Node nNode = nodeList.item(i);
		    if (nNode.getNodeName().equals("wd:Report_Data")) 
		    {
				if (nNode.getNodeType() == Node.ELEMENT_NODE) 
				{
					Element eElement = (Element) nNode;
					if (eElement.hasChildNodes()) 
					{
						NodeList childNodes = eElement.getChildNodes();
						for (int j = 0; j < childNodes.getLength(); j++) 
						{
							Node aChildNode = childNodes.item(j);
							JSONObject obj = new JSONObject();
							if (aChildNode.getNodeName().equals("wd:Report_Entry")) 
							{
								Element eElementEntry = (Element) aChildNode;
								if (eElement.hasChildNodes()) 
								{
									NodeList childNodesEntry = eElementEntry.getChildNodes();
									for (int k = 0; k < childNodesEntry.getLength(); k++) 
									{										
										Node aChildNodeEntry = childNodesEntry.item(k);
										if(aChildNodeEntry.getNodeName().equals("wd:Company_-_ID"))
										{											
											obj.put("company", aChildNodeEntry.getTextContent());										
										}
										else if(aChildNodeEntry.getNodeName().equals("wd:Employee_W-2_Print_Indicator"))
										{											
											obj.put("receiveCopy", aChildNodeEntry.getTextContent());											
										}										
									}
								}
							}
							details.put(obj);
						}
					}
				}
		    }
		}
		return details;
	}
	
	private JSONArray parseNodesForHomeCity(NodeList nodeList) throws DOMException, JSONException {
		
		JSONArray details = new JSONArray();
		for (int i = 0; i < nodeList.getLength(); i++) 
		{
		    Node nNode = nodeList.item(i);
		    if (nNode.getNodeName().equals("wd:Report_Data")) 
		    {
				if (nNode.getNodeType() == Node.ELEMENT_NODE) 
				{
					Element eElement = (Element) nNode;
					if (eElement.hasChildNodes()) 
					{
						NodeList childNodes = eElement.getChildNodes();
						for (int j = 0; j < childNodes.getLength(); j++) 
						{
							Node aChildNode = childNodes.item(j);
							JSONObject obj = new JSONObject();
							if (aChildNode.getNodeName().equals("wd:Report_Entry")) 
							{
								Element eElementEntry = (Element) aChildNode;
								if (eElement.hasChildNodes()) 
								{
									NodeList childNodesEntry = eElementEntry.getChildNodes();
									for (int k = 0; k < childNodesEntry.getLength(); k++) 
									{										
										Node aChildNodeEntry = childNodesEntry.item(k);
										if(aChildNodeEntry.getNodeName().equals("wd:Company_-_ID"))
										{											
											obj.put("company", aChildNodeEntry.getTextContent());										
										}
										else if(aChildNodeEntry.getNodeName().equals("wd:Local_City_Withholding__Resident__-_Effective_As_Of_Date"))
										{											
											obj.put("effectiveAsOf", aChildNodeEntry.getTextContent());											
										}
										else if(aChildNodeEntry.getNodeName().equals("wd:Local_City_Withholding__Resident__-_City_Tax_Code"))
										{											
											obj.put("legacyCode", aChildNodeEntry.getTextContent());											
										}
										else if(aChildNodeEntry.getNodeName().equals("wd:Local_City_Withholding__Resident__-_Exempt_Indicator"))
										{											
											obj.put("exemptIndicator", aChildNodeEntry.getTextContent());											
										}
										else if(aChildNodeEntry.getNodeName().equals("wd:All_Local_City_Withholding__Resident__group"))
										{
											Element eElemEntry = (Element) aChildNodeEntry;
											if (eElementEntry.hasChildNodes()) 
											{												
												NodeList childNodesEnt = eElemEntry.getChildNodes();
												for (int l = 0; l < childNodesEnt.getLength(); l++) 
												{													
													Node nChildNodeEntry = childNodesEnt.item(l);
													if(nChildNodeEntry.getNodeName().equals("wd:Number_of_Allowances"))
													{
														obj.put("noOfAllowance", nChildNodeEntry.getTextContent());	
													}
													else if(nChildNodeEntry.getNodeName().equals("wd:Additional_Amount"))
													{
														obj.put("addlAmount", nChildNodeEntry.getTextContent());
													}
													else if(nChildNodeEntry.getNodeName().equals("wd:Inactive"))
													{
														obj.put("inactive", nChildNodeEntry.getTextContent());		
													}	
												}
											}
										}
									}
								}
							}
							details.put(obj);
						}
					}
				}
		    }
		}
		return details;
	}
	
    private JSONArray parseNodesForWorkCity(NodeList nodeList) throws DOMException, JSONException {
		
		JSONArray details = new JSONArray();
		for (int i = 0; i < nodeList.getLength(); i++) 
		{
		    Node nNode = nodeList.item(i);
		    if (nNode.getNodeName().equals("wd:Report_Data")) 
		    {
				if (nNode.getNodeType() == Node.ELEMENT_NODE) 
				{
					Element eElement = (Element) nNode;
					if (eElement.hasChildNodes()) 
					{
						NodeList childNodes = eElement.getChildNodes();
						for (int j = 0; j < childNodes.getLength(); j++) 
						{
							Node aChildNode = childNodes.item(j);
							JSONObject obj = new JSONObject();
							if (aChildNode.getNodeName().equals("wd:Report_Entry")) 
							{
								Element eElementEntry = (Element) aChildNode;
								if (eElement.hasChildNodes()) 
								{
									NodeList childNodesEntry = eElementEntry.getChildNodes();
									for (int k = 0; k < childNodesEntry.getLength(); k++) 
									{										
										Node aChildNodeEntry = childNodesEntry.item(k);
										if(aChildNodeEntry.getNodeName().equals("wd:Company_-_ID"))
										{											
											obj.put("company", aChildNodeEntry.getTextContent());										
										}
										else if(aChildNodeEntry.getNodeName().equals("wd:Local_City_Withholding__Work__-_Effective_As_Of_Date"))
										{											
											obj.put("effectiveAsOf", aChildNodeEntry.getTextContent());											
										}
										else if(aChildNodeEntry.getNodeName().equals("wd:Local_City_Withholding__Work__-_City_Tax_Code"))//wd:Local_City_Withholding__Work__-_City_PSD_Code
										{											
											obj.put("legacyCode", aChildNodeEntry.getTextContent());											
										}
										else if(aChildNodeEntry.getNodeName().equals("wd:Local_City_Withholding__Work__-_Exempt_Indicator"))
										{											
											obj.put("exemptIndicator", aChildNodeEntry.getTextContent());											
										}
										else if(aChildNodeEntry.getNodeName().equals("wd:Local_City_Withholding__Work__-_Withholding_Percent"))
										{											
											obj.put("constantPercent", aChildNodeEntry.getTextContent());											
										}
										else if(aChildNodeEntry.getNodeName().equals("wd:All_Local_City_Withholding__Work__group"))
										{
											Element eElemEntry = (Element) aChildNodeEntry;
											if (eElementEntry.hasChildNodes()) 
											{												
												NodeList childNodesEnt = eElemEntry.getChildNodes();
												for (int l = 0; l < childNodesEnt.getLength(); l++) 
												{													
													Node nChildNodeEntry = childNodesEnt.item(l);
													if(nChildNodeEntry.getNodeName().equals("wd:Number_of_Allowances"))
													{
														obj.put("noOfAllowance", nChildNodeEntry.getTextContent());	
													}
													else if(nChildNodeEntry.getNodeName().equals("wd:Additional_Amount"))
													{
														obj.put("addlAmount", nChildNodeEntry.getTextContent());
													}	
												}
											}
										}
									}
								}
							}
							details.put(obj);
						}
					}
				}
		    }
		}
		return details;
	}
	
	private JSONArray parseNodesForHomeCountry(NodeList nodeList) throws DOMException, JSONException {
		
		JSONArray details = new JSONArray();
		for (int i = 0; i < nodeList.getLength(); i++) 
		{
		    Node nNode = nodeList.item(i);
		    if (nNode.getNodeName().equals("wd:Report_Data")) 
		    {
				if (nNode.getNodeType() == Node.ELEMENT_NODE) 
				{
					Element eElement = (Element) nNode;
					if (eElement.hasChildNodes()) 
					{
						NodeList childNodes = eElement.getChildNodes();
						for (int j = 0; j < childNodes.getLength(); j++) 
						{
							Node aChildNode = childNodes.item(j);
							JSONObject obj = new JSONObject();
							if (aChildNode.getNodeName().equals("wd:Report_Entry")) 
							{
								Element eElementEntry = (Element) aChildNode;
								if (eElement.hasChildNodes()) 
								{
									NodeList childNodesEntry = eElementEntry.getChildNodes();
									for (int k = 0; k < childNodesEntry.getLength(); k++) 
									{										
										Node aChildNodeEntry = childNodesEntry.item(k);
										if(aChildNodeEntry.getNodeName().equals("wd:Company_-_ID"))
										{											
											obj.put("company", aChildNodeEntry.getTextContent());										
										}
										else if(aChildNodeEntry.getNodeName().equals("wd:Local_County_Withholding__Resident__-_Effective_As_Of_Date"))
										{											
											obj.put("effectiveAsOf", aChildNodeEntry.getTextContent());											
										}
										else if(aChildNodeEntry.getNodeName().equals("wd:Local_County_Withholding__Resident__-_County_Tax_Code"))
										{											
											obj.put("legacyCode", aChildNodeEntry.getTextContent());											
										}
										else if(aChildNodeEntry.getNodeName().equals("wd:Local_County_Withholding__Resident__-_Additional_Amount"))
										{											
											obj.put("addlAmount", aChildNodeEntry.getTextContent());											
										}
										else if(aChildNodeEntry.getNodeName().equals("wd:All_Local_County_Withholding__Resident__group"))
										{
											Element eElemEntry = (Element) aChildNodeEntry;
											if (eElementEntry.hasChildNodes()) 
											{												
												NodeList childNodesEnt = eElemEntry.getChildNodes();
												for (int l = 0; l < childNodesEnt.getLength(); l++) 
												{													
													Node nChildNodeEntry = childNodesEnt.item(l);
													if(nChildNodeEntry.getNodeName().equals("wd:Inactive"))
													{
														obj.put("inactive", nChildNodeEntry.getTextContent());		
													}	
												}
											}
										}
									}
								}
							}
							details.put(obj);
						}
					}
				}
		    }
		}
		return details;
	}
	
	private JSONArray parseNodesForHomeSD(NodeList nodeList) throws DOMException, JSONException {
		
		JSONArray details = new JSONArray();
		for (int i = 0; i < nodeList.getLength(); i++) 
		{
		    Node nNode = nodeList.item(i);
		    if (nNode.getNodeName().equals("wd:Report_Data")) 
		    {
				if (nNode.getNodeType() == Node.ELEMENT_NODE) 
				{
					Element eElement = (Element) nNode;
					if (eElement.hasChildNodes()) 
					{
						NodeList childNodes = eElement.getChildNodes();
						for (int j = 0; j < childNodes.getLength(); j++) 
						{
							Node aChildNode = childNodes.item(j);
							JSONObject obj = new JSONObject();
							if (aChildNode.getNodeName().equals("wd:Report_Entry")) 
							{
								Element eElementEntry = (Element) aChildNode;
								if (eElement.hasChildNodes()) 
								{
									NodeList childNodesEntry = eElementEntry.getChildNodes();
									for (int k = 0; k < childNodesEntry.getLength(); k++) 
									{										
										Node aChildNodeEntry = childNodesEntry.item(k);
										if(aChildNodeEntry.getNodeName().equals("wd:Company_-_ID"))
										{											
											obj.put("company", aChildNodeEntry.getTextContent());										
										}
										else if(aChildNodeEntry.getNodeName().equals("wd:Local_School_District_Withholding__Resident__-_Effective_As_Of_Date"))
										{											
											obj.put("effectiveAsOf", aChildNodeEntry.getTextContent());											
										}
										else if(aChildNodeEntry.getNodeName().equals("wd:Local_School_District_Withholding__Resident__-_School_District_Tax_Code"))
										{											
											obj.put("legacyCode", aChildNodeEntry.getTextContent());											
										}
										else if(aChildNodeEntry.getNodeName().equals("wd:Local_School_District_Withholding__Resident__-_Exempt_Indicator"))
										{											
											obj.put("exemptIndicator", aChildNodeEntry.getTextContent());											
										}									
									}
								}
							}
							details.put(obj);
						}
					}
				}
		    }
		}
		return details;
	}
	
	private JSONArray parseNodesForWorkCountry(NodeList nodeList) throws DOMException, JSONException {
		
		JSONArray details = new JSONArray();
		for (int i = 0; i < nodeList.getLength(); i++) 
		{
		    Node nNode = nodeList.item(i);
		    if (nNode.getNodeName().equals("wd:Report_Data")) 
		    {
				if (nNode.getNodeType() == Node.ELEMENT_NODE) 
				{
					Element eElement = (Element) nNode;
					if (eElement.hasChildNodes()) 
					{
						NodeList childNodes = eElement.getChildNodes();
						for (int j = 0; j < childNodes.getLength(); j++) 
						{
							Node aChildNode = childNodes.item(j);
							JSONObject obj = new JSONObject();
							if (aChildNode.getNodeName().equals("wd:Report_Entry")) 
							{
								Element eElementEntry = (Element) aChildNode;
								if (eElement.hasChildNodes()) 
								{
									NodeList childNodesEntry = eElementEntry.getChildNodes();
									for (int k = 0; k < childNodesEntry.getLength(); k++) 
									{										
										Node aChildNodeEntry = childNodesEntry.item(k);
										if(aChildNodeEntry.getNodeName().equals("wd:Company_-_ID"))
										{											
											obj.put("company", aChildNodeEntry.getTextContent());										
										}
										else if(aChildNodeEntry.getNodeName().equals("wd:Local_County_Withholding__Work__-_Effective_As_Of_Date"))
										{											
											obj.put("effectiveAsOf", aChildNodeEntry.getTextContent());											
										}
										else if(aChildNodeEntry.getNodeName().equals("wd:Local_County_Withholding__Work__-_County_Tax_Code"))
										{											
											obj.put("legacyCode", aChildNodeEntry.getTextContent());											
										}
										else if(aChildNodeEntry.getNodeName().equals("wd:Local_County_Withholding__Work__-_Additional_Amount"))
										{											
											obj.put("addlAmount", aChildNodeEntry.getTextContent());											
										}
										else if(aChildNodeEntry.getNodeName().equals("wd:All_Local_County_Withholding__Work__group"))
										{
											Element eElemEntry = (Element) aChildNodeEntry;
											if (eElementEntry.hasChildNodes()) 
											{												
												NodeList childNodesEnt = eElemEntry.getChildNodes();
												for (int l = 0; l < childNodesEnt.getLength(); l++) 
												{													
													Node nChildNodeEntry = childNodesEnt.item(l);
													if(nChildNodeEntry.getNodeName().equals("wd:Inactive"))
													{
														obj.put("inactive", nChildNodeEntry.getTextContent());		
													}	
												}
											}
										}
									}
								}
							}
							details.put(obj);
						}
					}
				}
		    }
		}
		return details;
	}
	
	private JSONArray parseNodesForWorkOther(NodeList nodeList) throws DOMException, JSONException {
		
		String workTaxNameArr = "";
		JSONArray details = new JSONArray();
		for (int i = 0; i < nodeList.getLength(); i++) 
		{
		    Node nNode = nodeList.item(i);
		    if (nNode.getNodeName().equals("wd:Report_Data")) 
		    {
				if (nNode.getNodeType() == Node.ELEMENT_NODE) 
				{
					Element eElement = (Element) nNode;
					if (eElement.hasChildNodes()) 
					{
						NodeList childNodes = eElement.getChildNodes();
						for (int j = 0; j < childNodes.getLength(); j++) 
						{
							Node aChildNode = childNodes.item(j);
							JSONObject obj = new JSONObject();
							if (aChildNode.getNodeName().equals("wd:Report_Entry")) 
							{
								Element eElementEntry = (Element) aChildNode;
								if (eElement.hasChildNodes()) 
								{
									NodeList childNodesEntry = eElementEntry.getChildNodes();
									for (int k = 0; k < childNodesEntry.getLength(); k++) 
									{										
										Node aChildNodeEntry = childNodesEntry.item(k);
										if(aChildNodeEntry.getNodeName().equals("wd:Company_-_ID"))
										{											
											obj.put("company", aChildNodeEntry.getTextContent());										
										}
										else if(aChildNodeEntry.getNodeName().equals("wd:State_Withholding_Other_Tax_Election_group"))
										{
											Element eElemEntry = (Element) aChildNodeEntry;
											if (eElementEntry.hasChildNodes()) 
											{												
												NodeList childNodesEnt = eElemEntry.getChildNodes();
												for (int l = 0; l < childNodesEnt.getLength(); l++) 
												{													
													Node nChildNodeEntry = childNodesEnt.item(l);
													if(nChildNodeEntry.getNodeName().equals("wd:Inactive"))
													{
														obj.put("inactive", nChildNodeEntry.getTextContent());		
													}
													else if(nChildNodeEntry.getNodeName().equals("wd:PAYUS_CF_Lookup_Payroll_Authority_Tax_Code"))
													{
														if(workTaxNameArr.equals(""))
														{
															workTaxNameArr = nChildNodeEntry.getTextContent();
														}
														else
														{
															 if(!nChildNodeEntry.getTextContent().equals(""))
															 {
																 workTaxNameArr = workTaxNameArr + "~" + nChildNodeEntry.getTextContent();
															 }
														}																
													}
												}
											}
										}
									}
								}
							}
							obj.put("workTaxName", workTaxNameArr);
							details.put(obj);
						}
					}
				}
		    }
		}
		return details;
	}
	
	private JSONArray parseNodesForWorkerHistory(NodeList nodeList) throws DOMException, JSONException {
		
		JSONArray details = new JSONArray();
		for (int i = 0; i < nodeList.getLength(); i++) 
		{
		    Node nNode = nodeList.item(i);
		    if (nNode.getNodeName().equals("wd:Report_Data")) 
		    {
				if (nNode.getNodeType() == Node.ELEMENT_NODE) 
				{
					Element eElement = (Element) nNode;
					if (eElement.hasChildNodes()) 
					{
						NodeList childNodes = eElement.getChildNodes();
						for (int j = 0; j < childNodes.getLength(); j++) 
						{
							Node aChildNode = childNodes.item(j);
							JSONObject obj = new JSONObject();
							if (aChildNode.getNodeName().equals("wd:Report_Entry")) 
							{
								Element eElementEntry = (Element) aChildNode;
								if (eElement.hasChildNodes()) 
								{
									NodeList childNodesEntry = eElementEntry.getChildNodes();
									for (int k = 0; k < childNodesEntry.getLength(); k++) 
									{										
										Node aChildNodeEntry = childNodesEntry.item(k);
										if(aChildNodeEntry.getNodeName().equals("wd:Company_ID"))
										{											
											obj.put("company", aChildNodeEntry.getTextContent());										
										}
										else if(aChildNodeEntry.getNodeName().equals("wd:Payroll_Result_Line_group"))
										{
											Element eElemEntry = (Element) aChildNodeEntry;
											if (eElementEntry.hasChildNodes()) 
											{												
												NodeList childNodesEnt = eElemEntry.getChildNodes();
												for (int l = 0; l < childNodesEnt.getLength(); l++) 
												{													
													Node nChildNodeEntry = childNodesEnt.item(l);
													if(nChildNodeEntry.getNodeName().equals("wd:Amount"))
													{
														obj.put("amount", nChildNodeEntry.getTextContent());		
													}
													else if(nChildNodeEntry.getNodeName().equals("wd:Taxable_Wages"))
													{
														obj.put("taxableWages", nChildNodeEntry.getTextContent());		
													}
													else if(nChildNodeEntry.getNodeName().equals("wd:Subject_Wages"))
													{
														obj.put("subjectWages", nChildNodeEntry.getTextContent());		
													}
												}
											}
										}
									}
								}
							}
							details.put(obj);
						}
					}
				}
		    }
		}
		return details;
	}
	
	private JSONArray parseNodesForWorkerStateWithholding(NodeList nodeList) throws DOMException, JSONException {
		
		JSONArray details = new JSONArray();
		for (int i = 0; i < nodeList.getLength(); i++) 
		{
		    Node nNode = nodeList.item(i);
		    if (nNode.getNodeName().equals("wd:Report_Data")) 
		    {
				if (nNode.getNodeType() == Node.ELEMENT_NODE) 
				{
					Element eElement = (Element) nNode;
					if (eElement.hasChildNodes()) 
					{
						NodeList childNodes = eElement.getChildNodes();
						for (int j = 0; j < childNodes.getLength(); j++) 
						{
							Node aChildNode = childNodes.item(j);
							JSONObject obj = new JSONObject();
							if (aChildNode.getNodeName().equals("wd:Report_Entry")) 
							{
								Element eElementEntry = (Element) aChildNode;
								if (eElement.hasChildNodes()) 
								{
									NodeList childNodesEntry = eElementEntry.getChildNodes();
									for (int k = 0; k < childNodesEntry.getLength(); k++) 
									{										
										Node aChildNodeEntry = childNodesEntry.item(k);
										if(aChildNodeEntry.getNodeName().equals("wd:Company_-_ID"))
										{											
											obj.put("company", aChildNodeEntry.getTextContent());										
										}
										else if(aChildNodeEntry.getNodeName().equals("wd:State_Withholding__Work__-_Effective_As_Of_Date"))
										{											
											obj.put("effectiveAsOf", aChildNodeEntry.getTextContent());											
										}
										else if(aChildNodeEntry.getNodeName().equals("wd:State_Withholding__Work__-_State"))
										{											
											obj.put("payrollTaxCode", aChildNodeEntry.getTextContent());											
										}
										else if(aChildNodeEntry.getNodeName().equals("wd:State_Withholding__Work__-_Marital_Status"))
										{											
											obj.put("payrollMaritalStatusId", aChildNodeEntry.getTextContent());											
										}
										else if(aChildNodeEntry.getNodeName().equals("wd:State_Withholding__Work__-___of_Allowances"))
										{											
											obj.put("noOfAllowance", aChildNodeEntry.getTextContent());											
										}
										else if(aChildNodeEntry.getNodeName().equals("wd:State_Withholding__Work__-_Additional_Amount"))
										{											
											obj.put("addlamount", aChildNodeEntry.getTextContent());											
										}
										else if(aChildNodeEntry.getNodeName().equals("wd:State_Withholding__Work__-___of_Dependents"))
										{											
											obj.put("dependentAllowance", aChildNodeEntry.getTextContent());											
										}
										else if(aChildNodeEntry.getNodeName().equals("wd:Louisiana_State_Withholding_-_Increase_or_Decrease_Withholding_Amount"))
										{											
											obj.put("increaseDecreaseAmt", aChildNodeEntry.getTextContent());											
										}
										else if(aChildNodeEntry.getNodeName().equals("wd:Allocation_Percent_Arizona"))
										{											
											obj.put("constantPercentArizona", aChildNodeEntry.getTextContent());											
										}
										else if(aChildNodeEntry.getNodeName().equals("wd:State_Withholding__Work__-_Rate_Table"))
										{
											String rateVal = aChildNodeEntry.getAttributes().getNamedItem("wd:Descriptor").toString();
											String rateNJeVal = rateVal.replaceAll("\"", "");
											int pos = rateNJeVal.trim().indexOf("=") + 1;
											String actualRateNJVal = rateNJeVal.substring(pos, rateNJeVal.length());
											obj.put("rateTableNJ", actualRateNJVal);	
										}
									}
								}
							}
							details.put(obj);
						}
					}
				}
		    }
		}
		return details;
	}
	
	private JSONArray createCSVFromWDAddPaymentElectionOption(Tenant tenant, InputStream is, SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd,
			String loadCycle, String ruleName, String client) {

		 targetContent = null;
		 headingFromWD = "";
		 String checkFile = "";
		
		 String employeeId = "";
		 String WID = "";
		 String defaultCurrency = "";
		 String defaultCurrencyArr = "";
		 String paymentCurrency = "";
		 String paymentCurrencyArr = "";
		 String paymentCountry = "";
		 String paymentCountryArr = "";
		 String payType = "";
		 String payTypeArr = "";
		 String paymentType = "";
		 String paymentTypeArr = "";
		 
		 Map<String,String> widMap = null;

		 String finalStr = "";
		 String headerStr = "";
		 String reportURL = "";
		 
		 try 
		 {			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_PAYMENT_ELECTION_OPTION_REQUEST_FILE = requestfile.getAbsolutePath();
				 
				 if(errorList.isEmpty())
				 {
					 for(int i = 0; i<columnList.size();i++)
					 {
						 checkFile = addWorkerIdListToFindError(GET_PAYMENT_ELECTION_OPTION_REQUEST_FILE, columnList.get(i), ruleName, "Employee_ID");
						 is = new FileInputStream(checkFile);
					     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     SOAPPart soapPart = soapMessage.getSOAPPart();
					     SOAPEnvelope envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
							  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
					     ByteArrayOutputStream out = new ByteArrayOutputStream();
					     soapMessage.writeTo(out);
					     String strMsgChk = new String(out.toByteArray());	
					     
					     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
					     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
						 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
						 out = new ByteArrayOutputStream();
						 soapResponse.writeTo(out);
						 strMsgChk = new String(out.toByteArray(), "utf-8");
						 if(strMsgChk.contains("faultstring"))
						 {
							 errorList.add(columnList.get(i)) ;
						 }
						 else
						 {
							 ReportElement rptElement = XmlParserManager.parseXml(strMsgChk);				 
							 ReportElement pageResults = rptElement.getChild("env:Body")
										.getChild("wd:Get_Workers_Response")
										.getChild("wd:Response_Results");
							 
							 String result = pageResults.getChild("wd:Total_Results").getValue().trim();
							 if(result.equalsIgnoreCase("0"))
							 {
								 errorList.add(columnList.get(i));
							 }
							 else
							 {
								 ReportElement responseData = rptElement.getChild("env:Body")
											.getChild("wd:Get_Workers_Response")
											.getChild("wd:Response_Data");
								 
								 List<ReportElement> workerData = responseData.getChildren("wd:Worker");
									
								 for(ReportElement reportElement : workerData)
								 {
									 ReportElement element1 = reportElement.getChild("wd:Worker_Data");
						        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
						        		System.out.println("employeeId--"+ employeeId);
						        		
						        		ReportElement widRef = reportElement.getChild("wd:Worker_Reference");
										 if(widRef != null)
										 {
											 List<ReportElement> idList = widRef.getChildren("wd:ID");
											 for(ReportElement idElement:idList)
											 {
												 widMap = idElement.getAllAttributes();
												 if(widMap.get("wd:type").equals("WID"))
												 {
													 WID = idElement.getValue().trim();
												 }
											 }
										 }
										 else
										 {
											 WID = "";
										 }
		
										reportURL = "https://" + tenant.getTenantUrl() + "customreport2/" + tenant.getTenantName() + "/ISU_Verify_Payroll/" + "Payment_Election_Option?&Employee!WID=" + WID;
																				 
										JSONArray jArr = createPaymentElectionOptionData(reportURL);
										if(jArr != null && jArr.length() >0)
										{
											defaultCurrencyArr = "";
											paymentCurrencyArr = "";
											payTypeArr = "";
											paymentTypeArr = "";
											for(int ii = 0; ii<jArr.length(); ii++) 
									        {
												JSONObject objects = jArr.getJSONObject(ii);
												defaultCurrency = objects.isNull("defaultCurrency")?"":objects.getString("defaultCurrency");
												if(defaultCurrencyArr.equals(""))
												{
													defaultCurrencyArr = defaultCurrency;
												}
												else
												{
													if(!defaultCurrency.isEmpty())
													{
														defaultCurrencyArr = defaultCurrencyArr + "~" + defaultCurrency;
													}
												}
												paymentCurrency = objects.isNull("paymentCurrency")?"":objects.getString("paymentCurrency");
												if(paymentCurrencyArr.equals(""))
												{
													paymentCurrencyArr = paymentCurrency;
												}
												else
												{
													paymentCurrencyArr = paymentCurrencyArr + "~" + paymentCurrency;
												}
												paymentCountry = objects.isNull("paymentCountry")?"":objects.getString("paymentCountry");
												if(paymentCountryArr.equals(""))
												{
													paymentCountryArr = paymentCountry;
												}
												else
												{
													paymentCountryArr = paymentCountryArr + "~" + paymentCountry;
												}
												payType = objects.isNull("payType")?"":objects.getString("payType");
												if(payTypeArr.equals(""))
												{
													payTypeArr = payType;
												}
												else
												{
													payTypeArr = payTypeArr + "~" + payType;
												}
												paymentType = objects.isNull("paymentType")?"":objects.getString("paymentType");
												if(paymentTypeArr.equals(""))
												{
													paymentTypeArr = paymentType;
												}
												else
												{
													paymentTypeArr = paymentTypeArr + "~" + paymentType;
												}
									        }
										}
										else
										{
											defaultCurrencyArr = "";
											paymentCurrencyArr = "";
											payTypeArr = "";
											paymentTypeArr = "";
											paymentCountryArr = "";
										}
				 
										headingFromWD = "Employee_ID,Default_Currency,Payment_Currency,Pay_Type,Payment_Type,Payment_Country";
										headerStr = employeeId + "," + defaultCurrencyArr + "," + paymentCurrencyArr + "," + payTypeArr + "," + paymentTypeArr + "," + paymentCountryArr; 				 		  
										 
										 if(finalStr.equals(""))
										 {
											 finalStr = headingFromWD + "\n" + headerStr;
										 }
										 else
										 {
											 finalStr = finalStr + "\n" + headerStr;
										 }
								 }
							 }
						 }
					 }
					 columnList.removeAll(errorList);
					 wdCount = columnList.size();
				 }		 					 
				 System.out.println(finalStr);
				 targetContent = finalStr.toString().getBytes();					 					 
				 headingWd = selectColumnMapping(loadCycle, ruleName, "Employee_ID");					 
				 complete = true;
			}			 			 
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}

		return headingWd;
	}
	
	private JSONArray createPaymentElectionOptionData(String reportURL) throws JSONException {
		
		JSONArray jArr = new JSONArray();
		DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilder dBuilder;
		XPath xPath = XPathFactory.newInstance().newXPath();
		HttpBasicAuthentication httpBasicAuthentication = new HttpBasicAuthentication();
		String output = httpBasicAuthentication.getWithBasicAuthentication(reportURL, tenant.getTenantUser(), tenant.getTenantUserPassword());
		Reader reader1 = new StringReader(output);
		Document doc;
		try 
		{
			dBuilder = dbFactory.newDocumentBuilder();
			doc = dBuilder.parse(new InputSource(reader1));
			doc.getDocumentElement().normalize();
			String expression = EMPLOYEE_APPLICANT_MAPPING_RESPONSE_EXPRESSION;
			NodeList nodeList = (NodeList) xPath.compile(expression).evaluate(doc, XPathConstants.NODESET);
			for (int i = 0; i < nodeList.getLength(); i++) 
			{
				try 
				{
					jArr = parseNodesForPaymentElectionOption(nodeList);
				} 
				catch (DOMException e)
				{
					e.printStackTrace();
				}
			}			
		} 
		catch (SAXException e) 
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (XPathExpressionException e) 
		{
			e.printStackTrace();
		} 
		catch (ParserConfigurationException e) 
		{
			e.printStackTrace();
		}
		return jArr;
	}
	
	private JSONArray parseNodesForPaymentElectionOption(NodeList nodeList) throws JSONException {

		JSONArray details = new JSONArray();
		for (int i = 0; i < nodeList.getLength(); i++) 
		{
		    Node nNode = nodeList.item(i);
		    if (nNode.getNodeName().equals("wd:Report_Data")) 
		    {
				if (nNode.getNodeType() == Node.ELEMENT_NODE) 
				{
					Element eElement = (Element) nNode;
					if (eElement.hasChildNodes()) 
					{
						NodeList childNodes = eElement.getChildNodes();
						for (int j = 0; j < childNodes.getLength(); j++) 
						{
							Node aChildNode = childNodes.item(j);
							if (aChildNode.getNodeName().equals("wd:Report_Entry")) 
							{
								Element eElementEntry = (Element) aChildNode;
								if (eElement.hasChildNodes()) 
								{
									NodeList childNodesEntry = eElementEntry.getChildNodes();
									for (int k = 0; k < childNodesEntry.getLength(); k++) 
									{										
										Node aChildNodeEntry = childNodesEntry.item(k);
										JSONObject obj = new JSONObject();
										if(aChildNodeEntry.getNodeName().equals("wd:Payment_Election_Option_group"))
										{
											Element eElemEntry = (Element) aChildNodeEntry;
											if (eElementEntry.hasChildNodes()) 
											{												
												NodeList childNodesEnt = eElemEntry.getChildNodes();
												for (int l = 0; l < childNodesEnt.getLength(); l++) 
												{													
													Node nChildNodeEntry = childNodesEnt.item(l);
													if(nChildNodeEntry.getNodeName().equals("wd:Default_Currency"))
													{
														String defCurrVal = nChildNodeEntry.getAttributes().getNamedItem("wd:Descriptor").toString();
														String defCurrencyVal = defCurrVal.replaceAll("\"", "");
														int pos = defCurrencyVal.trim().indexOf("=") + 1;
														String actualDefCurrencyVal = defCurrencyVal.substring(pos, defCurrencyVal.length());
														obj.put("defaultCurrency", actualDefCurrencyVal);	
													}													
												}
											}
										}
										else if(aChildNodeEntry.getNodeName().equals("wd:Payment_Election_Option_Lines_group"))
										{
											Element eElemEntry = (Element) aChildNodeEntry;
											if (eElementEntry.hasChildNodes()) 
											{												
												NodeList childNodesEnt = eElemEntry.getChildNodes();
												for (int l = 0; l < childNodesEnt.getLength(); l++) 
												{													
													Node nChildNodeEntry = childNodesEnt.item(l);
													if(nChildNodeEntry.getNodeName().equals("wd:Currency"))
													{
														String payCurrVal = nChildNodeEntry.getAttributes().getNamedItem("wd:Descriptor").toString();
														String payCurrencyVal = payCurrVal.replaceAll("\"", "");
														int pos = payCurrencyVal.trim().indexOf("=") + 1;
														String actualPayCurrencyVal = payCurrencyVal.substring(pos, payCurrencyVal.length());
														obj.put("paymentCurrency", actualPayCurrencyVal);	
													}
													else if(nChildNodeEntry.getNodeName().equals("wd:Country"))
													{
														String payCounVal = nChildNodeEntry.getAttributes().getNamedItem("wd:Descriptor").toString();
														String payCountryVal = payCounVal.replaceAll("\"", "");
														int pos = payCountryVal.trim().indexOf("=") + 1;
														String actualPayCountryVal = payCountryVal.substring(pos, payCountryVal.length());
														obj.put("paymentCountry", actualPayCountryVal);	
													}
													else if(nChildNodeEntry.getNodeName().equals("wd:Pay_Type"))
													{
														String payTypVal = nChildNodeEntry.getAttributes().getNamedItem("wd:Descriptor").toString();
														String payTypeVal = payTypVal.replaceAll("\"", "");
														int pos = payTypeVal.trim().indexOf("=") + 1;
														String actualPayTypeVal = payTypeVal.substring(pos, payTypeVal.length());
														obj.put("payType", actualPayTypeVal);	
													}
													else if(nChildNodeEntry.getNodeName().equals("wd:Payment_Type"))
													{
														String paymentTypVal = nChildNodeEntry.getAttributes().getNamedItem("wd:Descriptor").toString();
														String paymentTypeVal = paymentTypVal.replaceAll("\"", "");
														int pos = paymentTypeVal.trim().indexOf("=") + 1;
														String actualPaymentTypeVal = paymentTypeVal.substring(pos, paymentTypeVal.length());
														obj.put("paymentType", actualPaymentTypeVal);	
													}	
												}
											}
										}
										details.put(obj);
									}
								}
							}
						}
					}
				}
		    }
		}
		return details;
	}
	
	private JSONArray createCSVFromWDAddPaymentElecttion(Tenant tenant, InputStream is, SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd,
			String loadCycle, String ruleName, String client) {

		 targetContent = null;
		 headingFromWD = "";
		 String checkFile = "";
		
		 String employeeId = "";
		 String WID = "";
		 String bankAccountNickname = "";
		 String accountName = "";
		 String bankName = "";
		 String bankId = "";
		 String branchId = "";
		 String bankAccountNumnber = "";
		 String IBAN = "";
		 String distribution = "";
		 String bankAccountType = "";
		 String bankAccountTypeCode = "";
		 String bankPaymentType = "";
		 String bankCountry = "";
		 String bankCurrency = "";
		 String bankAccountNicknameArr = "";
		 String accountNameArr = "";
		 String bankNameArr = "";
		 String bankIdArr = "";
		 String branchIdArr = "";
		 String bankAccountNumnberArr = "";
		 String IBANArr = "";
		 String distributionArr = "";
		 String bankAccountTypeArr = "";
		 String bankAccountTypeCodeArr = "";
		 String bankPaymentTypeArr = "";
		 String bankCountryArr = "";
		 String bankCurrencyArr = "";
		 
		 Map<String,String> widMap = null;

		 String finalStr = "";
		 String headerStr = "";
		 String reportURL = "";
		 
		 try 
		 {			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_PAYMENT_ELECTION_REQUEST_FILE = requestfile.getAbsolutePath();
				 
				 if(errorList.isEmpty())
				 {
					 for(int i = 0; i<columnList.size();i++)
					 {
						 checkFile = addWorkerIdListToFindError(GET_PAYMENT_ELECTION_REQUEST_FILE, columnList.get(i), ruleName, "Employee_ID");
						 is = new FileInputStream(checkFile);
					     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     SOAPPart soapPart = soapMessage.getSOAPPart();
					     SOAPEnvelope envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
							  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
					     ByteArrayOutputStream out = new ByteArrayOutputStream();
					     soapMessage.writeTo(out);
					     String strMsgChk = new String(out.toByteArray());	
					     
					     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
					     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
						 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
						 out = new ByteArrayOutputStream();
						 soapResponse.writeTo(out);
						 strMsgChk = new String(out.toByteArray(), "utf-8");
						 if(strMsgChk.contains("faultstring"))
						 {
							 errorList.add(columnList.get(i)) ;
						 }
						 else
						 {
							 ReportElement rptElement = XmlParserManager.parseXml(strMsgChk);				 
							 ReportElement pageResults = rptElement.getChild("env:Body")
										.getChild("wd:Get_Workers_Response")
										.getChild("wd:Response_Results");
							 
							 String result = pageResults.getChild("wd:Total_Results").getValue().trim();
							 if(result.equalsIgnoreCase("0"))
							 {
								 errorList.add(columnList.get(i));
							 }
							 else
							 {
								 ReportElement responseData = rptElement.getChild("env:Body")
											.getChild("wd:Get_Workers_Response")
											.getChild("wd:Response_Data");
								 
								 List<ReportElement> workerData = responseData.getChildren("wd:Worker");
									
								 for(ReportElement reportElement : workerData)
								 {
									 ReportElement element1 = reportElement.getChild("wd:Worker_Data");
						        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
						        		System.out.println("employeeId--"+ employeeId);
						        		
						        		ReportElement widRef = reportElement.getChild("wd:Worker_Reference");
										 if(widRef != null)
										 {
											 List<ReportElement> idList = widRef.getChildren("wd:ID");
											 for(ReportElement idElement:idList)
											 {
												 widMap = idElement.getAllAttributes();
												 if(widMap.get("wd:type").equals("WID"))
												 {
													 WID = idElement.getValue().trim();
												 }
											 }
										 }
										 else
										 {
											 WID = "";
										 }
										
										 reportURL = "https://" + tenant.getTenantUrl() + "customreport2/" + tenant.getTenantName() + "/ISU_Verify_Payroll/" + "Payment_Elections_Enrollment?Employee!WID=" + WID;
										 
										    JSONArray jArr = createPaymentElectionEnrollmentData(reportURL);
											if(jArr != null && jArr.length() >1)
											{
												 bankAccountNicknameArr = "";
												 accountNameArr = "";
												 bankNameArr = "";
												 bankIdArr = "";
												 branchIdArr = "";
												 bankAccountNumnberArr = "";
												 IBANArr = "";
												 distributionArr = "";
												 bankAccountTypeArr = "";
												 bankAccountTypeCodeArr = "";
												 bankPaymentTypeArr = "";
												 bankCountryArr = "";
												 bankCurrencyArr = "";
												for(int a = 0; a<jArr.length(); a++) 
										        {
													JSONObject objects = jArr.getJSONObject(a);
													bankAccountNickname = objects.isNull("accountNickname")?"":objects.getString("accountNickname");
													if(bankAccountNicknameArr.equals(""))
													{
														bankAccountNicknameArr = bankAccountNickname;
													}
													else
													{
														if(!bankAccountNickname.isEmpty())
														{
															bankAccountNicknameArr = bankAccountNicknameArr + "~" + bankAccountNickname;
														}
													}
													accountName = objects.isNull("accountName")?"":objects.getString("accountName");
													if(accountName.contains(","))
													{
														accountName = accountName.replaceAll(",", "|");
													}
													if(accountNameArr.equals(""))
													{
														accountNameArr = accountName;
													}
													else
													{
														if(!accountName.isEmpty())
														{
															accountNameArr = accountNameArr + "~" + accountName;
														}
													}
													bankName = objects.isNull("bankName")?"":objects.getString("bankName");
													if(bankName.contains(","))
													{
														bankName = bankName.replaceAll(",", "|");
													}
													if(bankNameArr.equals(""))
													{
														bankNameArr = bankName;
													}
													else
													{
														if(!bankName.isEmpty())
														{
															bankNameArr = bankNameArr + "~" + bankName;
														}
													}
													bankId = objects.isNull("bankId")?"":objects.getString("bankId");
													if(bankIdArr.equals(""))
													{
														bankIdArr = bankId;
													}
													else
													{
														if(!bankId.isEmpty())
														{
															bankIdArr = bankIdArr + "~" + bankId;
														}
													}
													branchId = objects.isNull("branchId")?"":objects.getString("branchId");
													if(branchIdArr.equals(""))
													{
														branchIdArr = branchId;
													}
													else
													{
														if(!branchId.isEmpty())
														{
															branchIdArr = branchIdArr + "~" + branchId;
														}
													}
													bankAccountNumnber = objects.isNull("accountNumber")?"":objects.getString("accountNumber");
													if(bankAccountNumnberArr.equals(""))
													{
														bankAccountNumnberArr = bankAccountNumnber;
													}
													else
													{
														if(!bankAccountNumnber.isEmpty())
														{
															bankAccountNumnberArr = bankAccountNumnberArr + "~" + bankAccountNumnber;
														}
													}
													IBAN = objects.isNull("IBAN")?"":objects.getString("IBAN");
													if(IBANArr.equals(""))
													{
														IBANArr = IBAN;
													}
													else
													{
														if(!IBAN.isEmpty())
														{
															IBANArr = IBANArr + "~" + IBAN;
														}
													}
													distribution = objects.isNull("distribution")?"":objects.getString("distribution");
													if(distributionArr.equals(""))
													{
														distributionArr = distribution;
													}
													else
													{
														if(!distribution.equals(""))
														{
															distributionArr = distributionArr + "~" + distribution;
														}
													}
													bankAccountType = objects.isNull("accountType")?"":objects.getString("accountType");
													if(bankAccountTypeArr.equals(""))
													{
														bankAccountTypeArr = bankAccountType;
													}
													else
													{
														if(!bankAccountType.isEmpty())
														{
															bankAccountTypeArr = bankAccountTypeArr + "~" + bankAccountType;
														}
													}
													bankAccountTypeCode = objects.isNull("accountTypeCode")?"":objects.getString("accountTypeCode");
													if(bankAccountTypeCodeArr.equals(""))
													{
														bankAccountTypeCodeArr = bankAccountTypeCode;
													}
													else
													{
														if(!bankAccountTypeCode.isEmpty())
														{
															bankAccountTypeCodeArr = bankAccountTypeCodeArr + "~" + bankAccountTypeCode;
														}
													}
													bankPaymentType = objects.isNull("paymentType")?"":objects.getString("paymentType");
													if(bankPaymentTypeArr.equals(""))
													{
														bankPaymentTypeArr = bankPaymentType;
													}
													else
													{
														if(!bankPaymentType.isEmpty())
														{
															bankPaymentTypeArr = bankPaymentTypeArr + "~" + bankPaymentType;
														}
													}
													bankCountry = objects.isNull("country")?"":objects.getString("country");
													if(bankCountryArr.equals(""))
													{
														bankCountryArr = bankCountry;
													}
													else
													{
														if(!bankCountry.isEmpty())
														{
															bankCountryArr = bankCountryArr + "~" + bankCountry;
														}
													}
													bankCurrency = objects.isNull("currency")?"":objects.getString("currency");
													if(bankCurrencyArr.equals(""))
													{
														bankCurrencyArr = bankCurrency;
													}
													else
													{
														if(!bankCurrency.isEmpty())
														{
															bankCurrencyArr = bankCurrencyArr + "~" + bankCurrency;
														}
													}
										        }
											}
											else
											{
												 errorList.add(columnList.get(i));
												 bankAccountNicknameArr = "";
												 accountNameArr = "";
												 bankNameArr = "";
												 bankIdArr = "";
												 branchIdArr = "";
												 bankAccountNumnberArr = "";
												 IBANArr = "";
												 distributionArr = "";
												 bankAccountTypeArr = "";
												 bankAccountTypeCodeArr = "";
												 bankPaymentTypeArr = "";
												 bankCountryArr = "";
												 bankCurrencyArr = "";
											} 
											 								 								 
										 headingFromWD = "Employee_ID,Bank_ID,Bank_Name,Bank_Account_Nickname,Account_Name,Bank_Account_Number,Bank_Account_Type,Payment_Type,Bank_Country,"
										 		+ "Bank_Currency,IBAN,Distribution,Branch_ID,Account_Type_Code";
										 
										 headerStr = employeeId + "," +  bankIdArr + "," + bankNameArr + "," + bankAccountNicknameArr + "," + accountNameArr + "," + bankAccountNumnberArr
										                + "," + bankAccountTypeArr + "," + bankPaymentTypeArr + "," + bankCountryArr + "," + bankCurrencyArr + "," + IBANArr 
										                + "," + distributionArr + "," + branchIdArr + "," + bankAccountTypeCodeArr;							 		  
										 
										 if(finalStr.equals(""))
										 {
											 finalStr = headingFromWD + "\n" + headerStr;
										 }
										 else
										 {
											 finalStr = finalStr + "\n" + headerStr;
										 }
								 }
							 }
						 }
					 }
					 columnList.removeAll(errorList);
					 wdCount = columnList.size();
				 }		 					 
				 System.out.println(finalStr);
				 targetContent = finalStr.toString().getBytes();					 					 
				 headingWd = selectColumnMapping(loadCycle, ruleName, "Employee_ID");					 
				 complete = true;
			}			 			 
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}

		return headingWd;
	}
	
	private JSONArray createPaymentElectionEnrollmentData(String reportURL) throws JSONException {

		JSONArray jArr = new JSONArray();
		DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilder dBuilder;
		XPath xPath = XPathFactory.newInstance().newXPath();
		HttpBasicAuthentication httpBasicAuthentication = new HttpBasicAuthentication();
		String output = httpBasicAuthentication.getWithBasicAuthentication(reportURL, tenant.getTenantUser(), tenant.getTenantUserPassword());
		Reader reader1 = new StringReader(output);
		Document doc;
		try 
		{
			dBuilder = dbFactory.newDocumentBuilder();
			doc = dBuilder.parse(new InputSource(reader1));
			doc.getDocumentElement().normalize();
			String expression = EMPLOYEE_APPLICANT_MAPPING_RESPONSE_EXPRESSION;
			NodeList nodeList = (NodeList) xPath.compile(expression).evaluate(doc, XPathConstants.NODESET);
			for (int i = 0; i < nodeList.getLength(); i++) 
			{
				try 
				{
					jArr = parseNodesForPaymentElectionEnrollment(nodeList);
				} 
				catch (DOMException e)
				{
					e.printStackTrace();
				}
			}			
		} 
		catch (SAXException e) 
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (XPathExpressionException e) 
		{
			e.printStackTrace();
		} 
		catch (ParserConfigurationException e) 
		{
			e.printStackTrace();
		}
		return jArr;
	}
	
	private JSONArray parseNodesForPaymentElectionEnrollment(NodeList nodeList) throws DOMException, JSONException {

		JSONArray details = new JSONArray();
		for (int i = 0; i < nodeList.getLength(); i++) 
		{
		    Node nNode = nodeList.item(i);
		    if (nNode.getNodeName().equals("wd:Report_Data")) 
		    {
				if (nNode.getNodeType() == Node.ELEMENT_NODE) 
				{
					Element eElement = (Element) nNode;
					if (eElement.hasChildNodes()) 
					{
						NodeList childNodes = eElement.getChildNodes();
						for (int j = 0; j < childNodes.getLength(); j++) 
						{
							Node aChildNode = childNodes.item(j);
							if (aChildNode.getNodeName().equals("wd:Report_Entry")) 
							{
								Element eElementEntry = (Element) aChildNode;
								if (eElement.hasChildNodes()) 
								{
									NodeList childNodesEntry = eElementEntry.getChildNodes();
									for (int k = 0; k < childNodesEntry.getLength(); k++) 
									{										
										Node aChildNodeEntry = childNodesEntry.item(k);
										JSONObject obj = new JSONObject();
										if(aChildNodeEntry.getNodeName().equals("wd:Payment_Elections_Current_group"))
										{
											Element eElemEntry = (Element) aChildNodeEntry;
											if (eElementEntry.hasChildNodes()) 
											{												
												NodeList childNodesEnt = eElemEntry.getChildNodes();
												for (int l = 0; l < childNodesEnt.getLength(); l++) 
												{													
													Node nChildNodeEntry = childNodesEnt.item(l);
													if(nChildNodeEntry.getNodeName().equals("wd:Account_Nickname"))
													{											
														obj.put("accountNickname", nChildNodeEntry.getTextContent());											
													}
													else if(nChildNodeEntry.getNodeName().equals("wd:Account_Name"))
													{											
														obj.put("accountName", nChildNodeEntry.getTextContent());											
													}
													else if(nChildNodeEntry.getNodeName().equals("wd:Bank_Name"))
													{
														obj.put("bankName", nChildNodeEntry.getTextContent());	
													}
													else if(nChildNodeEntry.getNodeName().equals("wd:Bank_ID"))
													{
														obj.put("bankId", nChildNodeEntry.getTextContent());	
													}
													else if(nChildNodeEntry.getNodeName().equals("wd:Branch_ID"))
													{
														obj.put("branchId", nChildNodeEntry.getTextContent());	
													}
													else if(nChildNodeEntry.getNodeName().equals("wd:Account_Number"))
													{
														obj.put("accountNumber", nChildNodeEntry.getTextContent());	
													}
													else if(nChildNodeEntry.getNodeName().equals("wd:IBAN"))
													{
														obj.put("IBAN", nChildNodeEntry.getTextContent());	
													}
													else if(nChildNodeEntry.getNodeName().equals("wd:Distribution"))
													{
														obj.put("distribution", nChildNodeEntry.getTextContent());													
													}
													else if(nChildNodeEntry.getNodeName().equals("wd:Account_Type_Code"))
													{
														obj.put("accountTypeCode", nChildNodeEntry.getTextContent());													
													}
													else if(nChildNodeEntry.getNodeName().equals("wd:Account_Type"))
													{
														String actTypVal = nChildNodeEntry.getAttributes().getNamedItem("wd:Descriptor").toString();
														String accountTypeVal = actTypVal.replaceAll("\"", "");
														int pos = accountTypeVal.trim().indexOf("=") + 1;
														String actualAccountTypeVal = accountTypeVal.substring(pos, accountTypeVal.length());
														obj.put("accountType", actualAccountTypeVal);	
													}
													else if(nChildNodeEntry.getNodeName().equals("wd:Payment_Type"))
													{
														String payTypVal = nChildNodeEntry.getAttributes().getNamedItem("wd:Descriptor").toString();
														String paymentTypeVal = payTypVal.replaceAll("\"", "");
														int pos = paymentTypeVal.trim().indexOf("=") + 1;
														String actualPaymentTypeVal = paymentTypeVal.substring(pos, paymentTypeVal.length());
														obj.put("paymentType", actualPaymentTypeVal);	
													}
													else if(nChildNodeEntry.getNodeName().equals("wd:Country"))
													{
														String cntryVal = nChildNodeEntry.getAttributes().getNamedItem("wd:Descriptor").toString();
														String countryVal = cntryVal.replaceAll("\"", "");
														int pos = countryVal.trim().indexOf("=") + 1;
														String actualCountryVal = countryVal.substring(pos, countryVal.length());
														obj.put("country", actualCountryVal);	
													}
													else if(nChildNodeEntry.getNodeName().equals("wd:Currency"))
													{
														String currVal = nChildNodeEntry.getAttributes().getNamedItem("wd:Descriptor").toString();
														String currencyVal = currVal.replaceAll("\"", "");
														int pos = currencyVal.trim().indexOf("=") + 1;
														String actualCurrencyVal = currencyVal.substring(pos, currencyVal.length());
														obj.put("currency", actualCurrencyVal);	
													}
												}
											}
										}
										details.put(obj);
									}
								}
							}
						}
					}
				}
		    }
		}
		return details;
	}
	
	private JSONArray createCSVFromWDAddCalculatedPlan(Tenant tenant, InputStream is, SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd,
			String loadCycle, String ruleName, String client) {

		 targetContent = null;
		 headingFromWD = "";
		 String checkFile = "";
		
		 String employeeId = "";
		 String WID = "";
		 String calculatedPlanName = "";
		 String currency = "";
		 String frequency = "";
		 String amount = "";
		 String calculatedPlanNameArr = "";
		 String currencyArr = "";
		 String frequencyArr = "";
		 String amountArr = "";

		 String finalStr = "";
		 String headerStr = "";					 
		 String reportURL = "";
		 
		 Map<String,String> widMap = null;
		 
		 try 
		 {			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_CALCULATED_SALARY_REQUEST_FILE = requestfile.getAbsolutePath();
				 
				 if(errorList.isEmpty())
				 {
					 for(int i = 0; i<columnList.size();i++)
					 {
						 checkFile = addWorkerIdListToFindError(GET_CALCULATED_SALARY_REQUEST_FILE, columnList.get(i), ruleName, "Employee_ID");
						 is = new FileInputStream(checkFile);
					     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     SOAPPart soapPart = soapMessage.getSOAPPart();
					     SOAPEnvelope envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
							  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
					     ByteArrayOutputStream out = new ByteArrayOutputStream();
					     soapMessage.writeTo(out);
					     String strMsgChk = new String(out.toByteArray());	
					     
					     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
					     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
						 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
						 out = new ByteArrayOutputStream();
						 soapResponse.writeTo(out);
						 strMsgChk = new String(out.toByteArray(), "utf-8");
						 if(strMsgChk.contains("faultstring"))
						 {
							 errorList.add(columnList.get(i)) ;
						 }
						 else
						 {
							 ReportElement rptElement = XmlParserManager.parseXml(strMsgChk);				 
							 ReportElement pageResults = rptElement.getChild("env:Body")
										.getChild("wd:Get_Workers_Response")
										.getChild("wd:Response_Results");
							 
							 String result = pageResults.getChild("wd:Total_Results").getValue().trim();
							 if(result.equalsIgnoreCase("0"))
							 {
								 errorList.add(columnList.get(i));
							 }
							 else
							 {
								 ReportElement responseData = rptElement.getChild("env:Body")
											.getChild("wd:Get_Workers_Response")
											.getChild("wd:Response_Data");
								 
								 List<ReportElement> workerData = responseData.getChildren("wd:Worker");
									
								 for(ReportElement reportElement : workerData)
								 {
									 ReportElement element1 = reportElement.getChild("wd:Worker_Data");
						        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
						        		System.out.println("employeeId--"+ employeeId);
						        		
						        		ReportElement widRef = reportElement.getChild("wd:Worker_Reference");
										 if(widRef != null)
										 {
											 List<ReportElement> idList = widRef.getChildren("wd:ID");
											 for(ReportElement idElement:idList)
											 {
												 widMap = idElement.getAllAttributes();
												 if(widMap.get("wd:type").equals("WID"))
												 {
													 WID = idElement.getValue().trim();
												 }
											 }
										 }
										 else
										 {
											 WID = "";
										 }
																				
										 reportURL = "https://" + tenant.getTenantUrl() + "customreport2/" + tenant.getTenantName() + "/ISU_Verify_Payroll/" + "Calculated_Salary?Employee!WID=" + WID;										 
									     JSONArray jArr = createCalculatedSalaryData(reportURL);
									     if(jArr != null && jArr.length() >0)
										 {
									    	 calculatedPlanNameArr = "";
											 currencyArr = "";
											 frequencyArr = "";
											 amountArr = "";
									    	 for(int ii = 0; ii<jArr.length(); ii++) 
										     {
												JSONObject objects = jArr.getJSONObject(ii);
												calculatedPlanName = objects.isNull("calculatedPlanName")?"":objects.getString("calculatedPlanName");
												if(calculatedPlanName.contains(","))
												{
													calculatedPlanName = calculatedPlanName.replaceAll(",", "|");
												}
												if(calculatedPlanNameArr.equals(""))
												{
													calculatedPlanNameArr = calculatedPlanName;
												}
												else
												{
													if(!calculatedPlanName.isEmpty())
													{
														calculatedPlanNameArr = calculatedPlanNameArr + "~" + calculatedPlanName;
													}
												}
												currency = objects.isNull("currency")?"":objects.getString("currency");
												if(currencyArr.equals(""))
												{
													currencyArr = currency;
												}
												else
												{
													if(!currency.isEmpty())
													{
														currencyArr = currencyArr + "~" + currency;
													}
												}
												frequency = objects.isNull("frequency")?"":objects.getString("frequency");
												if(frequencyArr.equals(""))
												{
													frequencyArr = frequency;
												}
												else
												{
													if(!frequency.isEmpty())
													{
														frequencyArr = frequencyArr + "~" + frequency;
													}
												}
												amount = objects.isNull("amount")?"":objects.getString("amount");
												if(amountArr.equals(""))
												{
													amountArr = amount;
												}
												else
												{
													if(!amount.isEmpty())
													{
														amountArr = amountArr + "~" + amount;
													}
												}
										     }
										 }
									     else
									     {
									    	 calculatedPlanNameArr = "";
											 currencyArr = "";
											 frequencyArr = "";
											 amountArr = "";
									     }
										 headingFromWD = "Employee_ID,Calculated_Plan_Name,Amount,Currency,Frequency";
										 
										 headerStr = employeeId + "," + calculatedPlanNameArr + "," + amountArr + "," + currencyArr + "," + frequencyArr;
										    					 		  
										 
										 if(finalStr.equals(""))
										 {
											 finalStr = headingFromWD + "\n" + headerStr;
										 }
										 else
										 {
											 finalStr = finalStr + "\n" + headerStr;
										 }
								 }
							 }
						 }
					 }
					 columnList.removeAll(errorList);
					 wdCount = columnList.size();
				 }		 					 
				 System.out.println(finalStr);
				 targetContent = finalStr.toString().getBytes();					 					 
				 headingWd = selectColumnMapping(loadCycle, ruleName, "Employee_ID");					 
				 complete = true;
			}			 			 
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}

		return headingWd;
	}
	
	private JSONArray createCalculatedSalaryData(String reportURL) throws JSONException {

		JSONArray jArr = new JSONArray();
		DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilder dBuilder;
		XPath xPath = XPathFactory.newInstance().newXPath();
		HttpBasicAuthentication httpBasicAuthentication = new HttpBasicAuthentication();
		String output = httpBasicAuthentication.getWithBasicAuthentication(reportURL, tenant.getTenantUser(), tenant.getTenantUserPassword());
		Reader reader1 = new StringReader(output);
		Document doc;
		try 
		{
			dBuilder = dbFactory.newDocumentBuilder();
			doc = dBuilder.parse(new InputSource(reader1));
			doc.getDocumentElement().normalize();
			String expression = EMPLOYEE_APPLICANT_MAPPING_RESPONSE_EXPRESSION;
			NodeList nodeList = (NodeList) xPath.compile(expression).evaluate(doc, XPathConstants.NODESET);
			for (int i = 0; i < nodeList.getLength(); i++) 
			{
				try 
				{
					jArr = parseNodesForCalculatedSalary(nodeList);
				} 
				catch (DOMException e)
				{
					e.printStackTrace();
				}
			}			
		} 
		catch (SAXException e) 
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (XPathExpressionException e) 
		{
			e.printStackTrace();
		} 
		catch (ParserConfigurationException e) 
		{
			e.printStackTrace();
		}
		return jArr;
	}
	
	private JSONArray parseNodesForCalculatedSalary(NodeList nodeList) throws DOMException, JSONException {

		JSONArray details = new JSONArray();
		for (int i = 0; i < nodeList.getLength(); i++) 
		{
		    Node nNode = nodeList.item(i);
		    if (nNode.getNodeName().equals("wd:Report_Data")) 
		    {
				if (nNode.getNodeType() == Node.ELEMENT_NODE) 
				{
					Element eElement = (Element) nNode;
					if (eElement.hasChildNodes()) 
					{
						NodeList childNodes = eElement.getChildNodes();
						for (int j = 0; j < childNodes.getLength(); j++) 
						{
							Node aChildNode = childNodes.item(j);
							if (aChildNode.getNodeName().equals("wd:Report_Entry")) 
							{
								Element eElementEntry = (Element) aChildNode;
								if (eElement.hasChildNodes()) 
								{
									NodeList childNodesEntry = eElementEntry.getChildNodes();
									for (int k = 0; k < childNodesEntry.getLength(); k++) 
									{										
										Node aChildNodeEntry = childNodesEntry.item(k);
										JSONObject obj = new JSONObject();
										if(aChildNodeEntry.getNodeName().equals("wd:Calculated_Plans_-_Plan_Details_group"))
										{
											Element eElemEntry = (Element) aChildNodeEntry;
											if (eElementEntry.hasChildNodes()) 
											{												
												NodeList childNodesEnt = eElemEntry.getChildNodes();
												for (int l = 0; l < childNodesEnt.getLength(); l++) 
												{													
													Node nChildNodeEntry = childNodesEnt.item(l);
													if(nChildNodeEntry.getNodeName().equals("wd:Reference_ID"))
													{
														obj.put("calculatedPlanName", nChildNodeEntry.getTextContent());		
													}													
												}
											}
										}
										else if(aChildNodeEntry.getNodeName().equals("wd:Calculated_Plan_Assignments_group"))
										{
											Element eElemEntry = (Element) aChildNodeEntry;
											if (eElementEntry.hasChildNodes()) 
											{												
												NodeList childNodesEnt = eElemEntry.getChildNodes();
												for (int l = 0; l < childNodesEnt.getLength(); l++) 
												{													
													Node nChildNodeEntry = childNodesEnt.item(l);
													if(nChildNodeEntry.getNodeName().equals("wd:Currency"))
													{
														String calCurrVal = nChildNodeEntry.getAttributes().getNamedItem("wd:Descriptor").toString();
														String calCurrencyVal = calCurrVal.replaceAll("\"", "");
														int pos = calCurrencyVal.trim().indexOf("=") + 1;
														String actualCalCurrencyVal = calCurrencyVal.substring(pos, calCurrencyVal.length());
														obj.put("currency", actualCalCurrencyVal);	
													}
													else if(nChildNodeEntry.getNodeName().equals("wd:Frequency"))
													{
														String calFreqVal = nChildNodeEntry.getAttributes().getNamedItem("wd:Descriptor").toString();
														String calFrequenVal = calFreqVal.replaceAll("\"", "");
														int pos = calFrequenVal.trim().indexOf("=") + 1;
														String actualCalFrequency = calFrequenVal.substring(pos, calFrequenVal.length());
														obj.put("frequency", actualCalFrequency);	
													}
													else if(nChildNodeEntry.getNodeName().equals("wd:Amount"))
													{
														obj.put("amount", nChildNodeEntry.getTextContent());		
													}	
												}
											}
										}
										details.put(obj);
									}
								}
							}
						}
					}
				}
		    }
		}
		return details;
	}

	
	private JSONArray createCSVFromWDAddStockPlan(Tenant tenant, InputStream is, SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd,
			String loadCycle, String ruleName, String client) {

		 targetContent = null;
		 headingFromWD = "";
		 String checkFile = "";
		
		 String employeeId = "";
		 String stockPlanName = "";
		 String indivisualTargetShare = "";
		 String indivisualTargetAmount = "";
		 String indivisualTargetPercent = "";
		 String currency = "";
		 String stockPlanNameArr = "";
		 String indivisualTargetShareArr = "";
		 String indivisualTargetAmountArr = "";
		 String indivisualTargetPercentArr = "";
		 String currencyArr = "";
		 
		 Map<String,String> stockPlanMap = null;
		 Map<String,String> stockCurrencyMap = null;

		 String finalStr = "";
		 String headerStr = "";
		 try 
		 {			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_STOCK_REQUEST_FILE = requestfile.getAbsolutePath();
				 
				 if(errorList.isEmpty())
				 {
					 for(int i = 0; i<columnList.size();i++)
					 {
						 checkFile = addWorkerIdListToFindError(GET_STOCK_REQUEST_FILE, columnList.get(i), ruleName, "Employee_ID");
						 is = new FileInputStream(checkFile);
					     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     SOAPPart soapPart = soapMessage.getSOAPPart();
					     SOAPEnvelope envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
							  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
					     ByteArrayOutputStream out = new ByteArrayOutputStream();
					     soapMessage.writeTo(out);
					     String strMsgChk = new String(out.toByteArray());	
					     
					     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
					     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
						 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
						 out = new ByteArrayOutputStream();
						 soapResponse.writeTo(out);
						 strMsgChk = new String(out.toByteArray(), "utf-8");
						 if(strMsgChk.contains("faultstring"))
						 {
							 errorList.add(columnList.get(i));
						 }
						 else
						 {
							 ReportElement rptElement = XmlParserManager.parseXml(strMsgChk);				 
							 ReportElement pageResults = rptElement.getChild("env:Body")
										.getChild("wd:Get_Workers_Response")
										.getChild("wd:Response_Results");
							 
							 String result = pageResults.getChild("wd:Total_Results").getValue().trim();
							 if(result.equalsIgnoreCase("0"))
							 {
								 errorList.add(columnList.get(i));
							 }
							 else
							 {
								 ReportElement responseData = rptElement.getChild("env:Body")
											.getChild("wd:Get_Workers_Response")
											.getChild("wd:Response_Data");
								 
								 List<ReportElement> applicantData = responseData.getChildren("wd:Worker");
									
								 for(ReportElement reportElement : applicantData)
								 {
									 ReportElement element1 = reportElement.getChild("wd:Worker_Data");
						        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
						        		System.out.println("employeeId--"+ employeeId);										 										
										
						        		ReportElement compensationData = reportElement.getChild("wd:Worker_Data")
									 			.getChild("wd:Compensation_Data");
									 
										 if(compensationData != null)
										 {	
											 List<ReportElement> stockPlanList = compensationData.getChildren("wd:Stock_Plan_Data");
											 if(stockPlanList != null && stockPlanList.size() >0)
											 {
												 stockPlanNameArr = "";
												 indivisualTargetShareArr = "";
												 indivisualTargetAmountArr = "";
												 indivisualTargetPercentArr = "";
												 currencyArr = "";
												 
												 for(ReportElement stockPlanElement: stockPlanList)
												 {
													 ReportElement stockPlanRef = stockPlanElement.getChild("wd:Compensation_Plan_Reference");
													 if(stockPlanRef != null)
													 {
														 List<ReportElement> stockData = stockPlanRef.getChildren("wd:ID");					 
														 for(ReportElement stockElement:stockData)
														 {
															 stockPlanMap = stockElement.getAllAttributes();
															 if(stockPlanMap.get("wd:type").equals("Compensation_Plan_ID"))
															 {
																 stockPlanName= stockElement.getValue().trim();	
																 if(stockPlanName.contains(","))
																 {
																	 stockPlanName = stockPlanName.replaceAll(",", "|");
																 }
																 if(stockPlanNameArr.equals(""))
																 {
																	 stockPlanNameArr = stockPlanName;
																 }
																 else
																 {
																	 if(!stockPlanName.isEmpty())
																	 {
																		 stockPlanNameArr = stockPlanNameArr + "~" + stockPlanName;
																	 }
																 }	
															 }
														 }
													 }
													 
													 indivisualTargetShare = stockPlanElement.getChild("wd:Individual_Target_Shares") != null?stockPlanElement.getChild("wd:Individual_Target_Shares").getValue().trim():"";
													 if(indivisualTargetShareArr.equals(""))
													 {
														 indivisualTargetShareArr = indivisualTargetShare;
													 }
													 else
													 {
														 if(!indivisualTargetShare.isEmpty())
														 {
															 indivisualTargetShareArr = indivisualTargetShareArr + "~" + indivisualTargetShare;
														 }
													 }
													 
													 indivisualTargetAmount = stockPlanElement.getChild("wd:Individual_Target_Amount") != null?stockPlanElement.getChild("wd:Individual_Target_Amount").getValue().trim():"";
													 if(indivisualTargetAmountArr.equals(""))
													 {
														 indivisualTargetAmountArr = indivisualTargetAmount;
													 }
													 else
													 {
														 if(!indivisualTargetAmount.isEmpty())
														 {
															 indivisualTargetAmountArr = indivisualTargetAmountArr + "~" + indivisualTargetAmount;
														 }
													 }
													 
													 indivisualTargetPercent = stockPlanElement.getChild("wd:Individual_Target_Percent") != null?stockPlanElement.getChild("wd:Individual_Target_Percent").getValue().trim():"";
													 if(indivisualTargetPercentArr.equals(""))
													 {
														 indivisualTargetPercentArr = indivisualTargetPercent;
													 }
													 else
													 {
														 if(!indivisualTargetPercent.isEmpty())
														 {
															 indivisualTargetPercentArr = indivisualTargetPercentArr + "~" + indivisualTargetPercent;
														 }
													 }
													 
													 ReportElement currRef = stockPlanElement.getChild("wd:Currency_Reference");
													 if(currRef != null)
													 {
														 List<ReportElement> stockCurrencyData = currRef.getChildren("wd:ID");					 
														 for(ReportElement stockCurrencyElement:stockCurrencyData)
														 {
															 stockCurrencyMap = stockCurrencyElement.getAllAttributes();
															 if(stockCurrencyMap.get("wd:type").equals("Currency_ID"))
															 {
																 currency = stockCurrencyElement.getValue().trim();
																 if(currencyArr.equals(""))
																 {
																	 currencyArr = currency;
																 }
																 else
																 {
																	 if(!currency.isEmpty())
																	 {
																		 currencyArr = currencyArr + "~" + currency;
																	 }
																 }
															 }
														 }
													 }								 													 													 												 
												 }
											 }
											 else
											 {
												 errorList.add(columnList.get(i));
												 stockPlanNameArr = "";
												 indivisualTargetShareArr = "";
												 indivisualTargetAmountArr = "";
												 indivisualTargetPercentArr = "";
												 currencyArr = "";
											 }
										 }
										 else
										 {
											 errorList.add(columnList.get(i));
											 stockPlanNameArr = "";
											 indivisualTargetShareArr = "";
											 indivisualTargetAmountArr = "";
											 indivisualTargetPercentArr = "";
											 currencyArr = "";
										 }
											 								 								 
										 headingFromWD = "Employee_ID,Stock_Plan_Name,Individual_Target_Share,Individual_Target_Amount,Individual_Target_Percent,Currency";
										 
										 headerStr = employeeId + "," + stockPlanNameArr + "," + indivisualTargetShareArr + "," + indivisualTargetAmountArr + "," + indivisualTargetPercentArr + "," + currencyArr;
										 
										 if(finalStr.equals(""))
										 {
											 finalStr = headingFromWD + "\n" + headerStr;
										 }
										 else
										 {
											 finalStr = finalStr + "\n" + headerStr;
										 } 
								 }
							 }
						 }
					 }
					 columnList.removeAll(errorList);
					 wdCount = columnList.size();
				 }		 					 
				 System.out.println(finalStr);
				 targetContent = finalStr.toString().getBytes();					 					 
				 headingWd = selectColumnMapping(loadCycle, ruleName, "Employee_ID");					 
				 complete = true;
			}			 			 
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}

		return headingWd;
	}
	
	private JSONArray createCSVFromWDAddMeritPlan(Tenant tenant, InputStream is, SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd,
			String loadCycle, String ruleName, String client) {

		 targetContent = null;
		 headingFromWD = "";
		 String checkFile = "";
		
		 String employeeId = "";
		 String meritPlanName = "";
		 String indivisualTargetAmount = "";
		 String indivisualTargetPercent = "";
		 String guaranteedMinimum = "";
		 String meritPlanNameArr = "";
		 String indivisualTargetAmountArr = "";
		 String indivisualTargetPercentArr = "";
		 String guaranteedMinimumArr = "";
		 
		 Map<String,String> meritPlanMap = null;

		 String finalStr = "";
		 String headerStr = "";
		 try 
		 {			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_MERIT_REQUEST_FILE = requestfile.getAbsolutePath();
				 
				 if(errorList.isEmpty())
				 {
					 for(int i = 0; i<columnList.size();i++)
					 {
						 checkFile = addWorkerIdListToFindError(GET_MERIT_REQUEST_FILE, columnList.get(i), ruleName, "Employee_ID");
						 is = new FileInputStream(checkFile);
					     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     SOAPPart soapPart = soapMessage.getSOAPPart();
					     SOAPEnvelope envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
							  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
					     ByteArrayOutputStream out = new ByteArrayOutputStream();
					     soapMessage.writeTo(out);
					     String strMsgChk = new String(out.toByteArray());	
					     
					     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
					     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
						 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
						 out = new ByteArrayOutputStream();
						 soapResponse.writeTo(out);
						 strMsgChk = new String(out.toByteArray(), "utf-8");
						 if(strMsgChk.contains("faultstring"))
						 {
							 errorList.add(columnList.get(i));
						 }
						 else
						 {
							 ReportElement rptElement = XmlParserManager.parseXml(strMsgChk);				 
							 ReportElement pageResults = rptElement.getChild("env:Body")
										.getChild("wd:Get_Workers_Response")
										.getChild("wd:Response_Results");
							 
							 String result = pageResults.getChild("wd:Total_Results").getValue().trim();
							 if(result.equalsIgnoreCase("0"))
							 {
								 errorList.add(columnList.get(i));
							 }
							 else
							 {
								 ReportElement responseData = rptElement.getChild("env:Body")
											.getChild("wd:Get_Workers_Response")
											.getChild("wd:Response_Data");
								 
								 List<ReportElement> applicantData = responseData.getChildren("wd:Worker");
									
								 for(ReportElement reportElement : applicantData)
								 {
									 ReportElement element1 = reportElement.getChild("wd:Worker_Data");
						        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
						        		System.out.println("employeeId--"+ employeeId);										 										
										
						        		ReportElement compensationData = reportElement.getChild("wd:Worker_Data")
									 			.getChild("wd:Compensation_Data");
									 
										 if(compensationData != null)
										 {	
											 List<ReportElement> meritPlanList = compensationData.getChildren("wd:Merit_Plan_Data");
											 if(meritPlanList != null && meritPlanList.size() >0)
											 {
												 meritPlanNameArr = "";
												 indivisualTargetAmountArr = "";
												 indivisualTargetPercentArr = "";
												 guaranteedMinimumArr = "";
												 
												 for(ReportElement meritPlanElement: meritPlanList)
												 {
													 ReportElement merPlanRef = meritPlanElement.getChild("wd:Compensation_Plan_Reference");
													 if(merPlanRef != null)
													 {
														 List<ReportElement> meritData = merPlanRef.getChildren("wd:ID");					 
														 for(ReportElement meritElement:meritData)
														 {
															 meritPlanMap = meritElement.getAllAttributes();
															 if(meritPlanMap.get("wd:type").equals("Compensation_Plan_ID"))
															 {
																 meritPlanName= meritElement.getValue().trim();	
																 if(meritPlanName.contains(","))
																 {
																	 meritPlanName = meritPlanName.replaceAll(",", "|");
																 }
																 if(meritPlanNameArr.equals(""))
																 {
																	 meritPlanNameArr = meritPlanName;
																 }
																 else
																 {
																	 if(!meritPlanName.isEmpty())
																	 {
																		 meritPlanNameArr = meritPlanNameArr + "~" + meritPlanName;
																	 }
																 }	
															 }
														 }
													 }
													 
													 indivisualTargetAmount = meritPlanElement.getChild("wd:Individual_Target_Amount") != null?meritPlanElement.getChild("wd:Individual_Target_Amount").getValue().trim():"";
													 if(indivisualTargetAmountArr.equals(""))
													 {
														 indivisualTargetAmountArr = indivisualTargetAmount;
													 }
													 else
													 {
														 if(!indivisualTargetAmount.isEmpty())
														 {
															 indivisualTargetAmountArr = indivisualTargetAmountArr + "~" + indivisualTargetAmount;
														 }
													 }
													 
													 indivisualTargetPercent = meritPlanElement.getChild("wd:Individual_Target_Percent") != null?meritPlanElement.getChild("wd:Individual_Target_Percent").getValue().trim():"";
													 if(indivisualTargetPercentArr.equals(""))
													 {
														 indivisualTargetPercentArr = indivisualTargetPercent;
													 }
													 else
													 {
														 if(!indivisualTargetPercent.isEmpty())
														 {
															 indivisualTargetPercentArr = indivisualTargetPercentArr + "~" + indivisualTargetPercent;
														 }
													 }
													 
													 guaranteedMinimum = meritPlanElement.getChild("wd:Guaranteed_Minimum") != null?meritPlanElement.getChild("wd:Guaranteed_Minimum").getValue().trim():"";
													 if(guaranteedMinimum.equals("1"))
													 {
														 guaranteedMinimum = "TRUE";
													 }
													 else
													 {
														 guaranteedMinimum = "FALSE";
													 }
													 if(guaranteedMinimumArr.equals(""))
													 {
														 guaranteedMinimumArr = guaranteedMinimum;
													 }
													 else
													 {
														 if(!guaranteedMinimum.isEmpty())
														 {
															 guaranteedMinimumArr = guaranteedMinimumArr + "~" + guaranteedMinimum;
														 }
													 }													 													 													 												 
												 }
											 }
											 else
											 {
												 errorList.add(columnList.get(i));
												 meritPlanNameArr = "";
												 indivisualTargetAmountArr = "";
												 indivisualTargetPercentArr = "";
												 guaranteedMinimumArr = "";
											 }
										 }
										 else
										 {
											 errorList.add(columnList.get(i));
											 meritPlanNameArr = "";
											 indivisualTargetAmountArr = "";
											 indivisualTargetPercentArr = "";
											 guaranteedMinimumArr = "";
										 }
											 								 								 
										 headingFromWD = "Employee_ID,Merit_Plan_Name,Individual_Target_Amount,Individual_Target_Percent,Guranteed_Minimum";
										 
										 headerStr = employeeId + "," + meritPlanNameArr + "," + indivisualTargetAmountArr + "," + indivisualTargetPercentArr + "," + guaranteedMinimumArr;
										 
										 if(finalStr.equals(""))
										 {
											 finalStr = headingFromWD + "\n" + headerStr;
										 }
										 else
										 {
											 finalStr = finalStr + "\n" + headerStr;
										 } 
								 }
							 }
						 }
					 }
					 columnList.removeAll(errorList);
					 wdCount = columnList.size();
				 }		 					 
				 System.out.println(finalStr);
				 targetContent = finalStr.toString().getBytes();					 					 
				 headingWd = selectColumnMapping(loadCycle, ruleName, "Employee_ID");					 
				 complete = true;
			}			 			 
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}

		return headingWd;
	}
	
	private JSONArray createCSVFromWDAddBonusPlan(Tenant tenant, InputStream is, SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd,
			String loadCycle, String ruleName, String client) {

		 targetContent = null;
		 headingFromWD = "";
		 String checkFile = "";
		
		 String employeeId = "";
		 String bonusPlanName = "";
		 String bonusElementName = "";
		 String bonusAmount = "";
		 String bonusDefaultAmount ="";
		 String bonusPercentage = "";
		 String bonusDefaultPercentage = "";
		 String bonusGuaranteedMinimum = "";
		 String bonusCurrencyCode = "";
		 String bonusFrequencyName = "";
		 String bonusPercentageAssigned = "";
		 String bonusPlanNameArr = "";
		 String bonusElementNameArr = "";
		 String bonusAmountArr = "";
		 String bonusDefaultAmountArr = "";
		 String bonusPercentageArr = "";
		 String bonusDefaultPercentageArr = "";
		 String bonusGuaranteedMinimumArr = "";
		 String bonusCurrencyCodeArr = "";
		 String bonusFrequencyNameArr = "";
		 String bonusPercentageAssignedArr = "";
		 
		 Map<String,String> bonusPlanMap = null;
		 Map<String,String> bonusElementMap = null;
		 Map<String,String> bonusCurrencyMap = null;
		 Map<String,String> bonusFrequencyMap = null;

		 String finalStr = "";
		 String headerStr = "";
		 try 
		 {			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_BONUS_REQUEST_FILE = requestfile.getAbsolutePath();
				 
				 if(errorList.isEmpty())
				 {
					 for(int i = 0; i<columnList.size();i++)
					 {
						 checkFile = addWorkerIdListToFindError(GET_BONUS_REQUEST_FILE, columnList.get(i), ruleName, "Employee_ID");
						 is = new FileInputStream(checkFile);
					     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     SOAPPart soapPart = soapMessage.getSOAPPart();
					     SOAPEnvelope envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
							  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
					     ByteArrayOutputStream out = new ByteArrayOutputStream();
					     soapMessage.writeTo(out);
					     String strMsgChk = new String(out.toByteArray());	
					     
					     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
					     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
						 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
						 out = new ByteArrayOutputStream();
						 soapResponse.writeTo(out);
						 strMsgChk = new String(out.toByteArray(), "utf-8");
						 if(strMsgChk.contains("faultstring"))
						 {
							 errorList.add(columnList.get(i));
						 }
						 else
						 {
							 ReportElement rptElement = XmlParserManager.parseXml(strMsgChk);				 
							 ReportElement pageResults = rptElement.getChild("env:Body")
										.getChild("wd:Get_Workers_Response")
										.getChild("wd:Response_Results");
							 
							 String result = pageResults.getChild("wd:Total_Results").getValue().trim();
							 if(result.equalsIgnoreCase("0"))
							 {
								 errorList.add(columnList.get(i));
							 }
							 else
							 {
								 ReportElement responseData = rptElement.getChild("env:Body")
											.getChild("wd:Get_Workers_Response")
											.getChild("wd:Response_Data");
								 
								 List<ReportElement> applicantData = responseData.getChildren("wd:Worker");
									
								 for(ReportElement reportElement : applicantData)
								 {
									 ReportElement element1 = reportElement.getChild("wd:Worker_Data");
						        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
						        		System.out.println("employeeId--"+ employeeId);										 										
										
						        		ReportElement compensationData = reportElement.getChild("wd:Worker_Data")
									 			.getChild("wd:Compensation_Data");
									 
										 if(compensationData != null)
										 {	
											 List<ReportElement> bonusPlanList = compensationData.getChildren("wd:Bonus_Plan_Data");
											 if(bonusPlanList != null && bonusPlanList.size() >0)
											 {
												 bonusPlanNameArr = "";
												 bonusElementNameArr = "";
												 bonusDefaultAmountArr = "";
												 bonusAmountArr = "";
												 bonusDefaultPercentageArr = "";
												 bonusPercentageArr = "";
												 bonusGuaranteedMinimumArr = "";
												 bonusCurrencyCodeArr = "";
												 bonusFrequencyNameArr = "";
												 bonusPercentageAssignedArr = "";
												 
												 for(ReportElement bonusPlanElement: bonusPlanList)
												 {
													 ReportElement bonusCompPlanRef = bonusPlanElement.getChild("wd:Compensation_Plan_Reference");
													 if(bonusCompPlanRef != null)
													 {
														 List<ReportElement> bonusData = bonusCompPlanRef.getChildren("wd:ID");					 
														 for(ReportElement bonusElement:bonusData)
														 {
															 bonusPlanMap = bonusElement.getAllAttributes();
															 if(bonusPlanMap.get("wd:type").equals("Compensation_Plan_ID"))
															 {
																 bonusPlanName= bonusElement.getValue().trim();	
																 if(bonusPlanName.contains(","))
																 {
																	 bonusPlanName = bonusPlanName.replaceAll(",", "|");
																 }
																 if(bonusPlanNameArr.equals(""))
																 {
																	 bonusPlanNameArr = bonusPlanName;
																 }
																 else
																 {
																	 if(!bonusPlanName.isEmpty())
																	 {
																		 bonusPlanNameArr = bonusPlanNameArr + "~" + bonusPlanName;
																	 }
																 }	
															 }
														 }
													 }													 								 
													 
													 ReportElement bonusCompElementRef = bonusPlanElement.getChild("wd:Compensation_Element_Reference");
													 if(bonusCompElementRef != null)
													 {
														 List<ReportElement> bonusElementData = bonusCompElementRef.getChildren("wd:ID");					 
														 for(ReportElement bonusElement:bonusElementData)
														 {
															 bonusElementMap = bonusElement.getAllAttributes();
															 if(bonusElementMap.get("wd:type").equals("Compensation_Element_ID"))
															 {
																 bonusElementName= bonusElement.getValue().trim();
																 if(bonusElementName.contains(","))
																 {
																	 bonusElementName = bonusElementName.replaceAll(",", "|");
																 }
																 if(bonusElementNameArr.equals(""))
																 {
																	 bonusElementNameArr = bonusElementName;
																 }
																 else
																 {
																	 if(!bonusElementName.isEmpty())
																	 {
																		 bonusElementNameArr = bonusElementNameArr + "~" + bonusElementName;
																	 }
																 }
															 }
														 }
													 }													 

													 bonusAmount = bonusPlanElement.getChild("wd:Individual_Target_Amount") != null?bonusPlanElement.getChild("wd:Individual_Target_Amount").getValue().trim():"";
													 if(bonusAmountArr.equals(""))
													 {
														 bonusAmountArr = bonusAmount;
													 }
													 else
													 {
														 if(!bonusAmount.isEmpty())
														 {
															 bonusAmountArr = bonusAmountArr + "~" + bonusAmount;
														 }
													 }
													 bonusDefaultAmount = bonusPlanElement.getChild("wd:Default_Target_Amount") != null?bonusPlanElement.getChild("wd:Default_Target_Amount").getValue().trim():"";
													 if(bonusDefaultAmountArr.equals(""))
													 {
														 bonusDefaultAmountArr = bonusDefaultAmount;
													 }
													 else
													 {
														 if(!bonusDefaultAmount.isEmpty())
														 {
															 bonusDefaultAmountArr = bonusDefaultAmountArr + "~" + bonusDefaultAmount;
														 }
													 }
													 bonusPercentage = bonusPlanElement.getChild("wd:Individual_Target_Percent") != null?bonusPlanElement.getChild("wd:Individual_Target_Percent").getValue().trim():"";
													 if(bonusPercentageArr.equals(""))
													 {
														 bonusPercentageArr = bonusPercentage;
													 }
													 else
													 {
														 bonusPercentageArr = bonusPercentageArr + "~" + bonusPercentage;
													 }
													 bonusDefaultPercentage = bonusPlanElement.getChild("wd:Default_Target_Percent") != null?bonusPlanElement.getChild("wd:Default_Target_Percent").getValue().trim():"";
													 if(bonusDefaultPercentageArr.equals(""))
													 {
														 bonusDefaultPercentageArr = bonusDefaultPercentage;
													 }
													 else
													 {
														 bonusDefaultPercentageArr = bonusDefaultPercentageArr + "~" + bonusDefaultPercentage;
													 }
													 bonusGuaranteedMinimum = bonusPlanElement.getChild("wd:Guaranteed_Minimum") != null?bonusPlanElement.getChild("wd:Guaranteed_Minimum").getValue().trim():"";
													 if(bonusGuaranteedMinimum.equals("1"))
													 {
														 bonusGuaranteedMinimum = "true";
													 }
													 else
													 {
														 bonusGuaranteedMinimum = "false";
													 }
													 if(bonusGuaranteedMinimumArr.equals(""))
													 {
														 bonusGuaranteedMinimumArr = bonusGuaranteedMinimum;
													 }
													 else
													 {
														 bonusGuaranteedMinimumArr = bonusGuaranteedMinimumArr + "~" + bonusGuaranteedMinimum;
													 }
													 bonusPercentageAssigned = bonusPlanElement.getChild("wd:Percent_Assigned") != null?bonusPlanElement.getChild("wd:Percent_Assigned").getValue().trim():"";
													 if(bonusPercentageAssignedArr.equals(""))
													 {
														 bonusPercentageAssignedArr = bonusPercentageAssigned;
													 }
													 else
													 {
														 bonusPercentageAssignedArr = bonusPercentageAssignedArr + "~" + bonusPercentageAssigned;
													 }
													 ReportElement bonusCurrRef = bonusPlanElement.getChild("wd:Currency_Reference");
													 if(bonusCurrRef != null)
													 {
														 List<ReportElement> bonusCurrencyData = bonusCurrRef.getChildren("wd:ID");					 
														 for(ReportElement bonusCurrencyElement:bonusCurrencyData)
														 {
															 bonusCurrencyMap = bonusCurrencyElement.getAllAttributes();
															 if(bonusCurrencyMap.get("wd:type").equals("Currency_ID"))
															 {
																 bonusCurrencyCode = bonusCurrencyElement.getValue().trim();
																 if(bonusCurrencyCodeArr.equals(""))
																 {
																	 bonusCurrencyCodeArr = bonusCurrencyCode;
																 }
																 else
																 {
																	 if(!bonusCurrencyCode.isEmpty())
																	 {
																		 bonusCurrencyCodeArr = bonusCurrencyCodeArr + "~" + bonusCurrencyCode;
																	 }
																 }
															 }
														 }
													 }													 													 
													 
													 ReportElement bonusFreqRef = bonusPlanElement.getChild("wd:Frequency_Reference");
													 if(bonusFreqRef != null)
													 {
														 List<ReportElement> bonusFrequencyData = bonusFreqRef.getChildren("wd:ID");					 
														 for(ReportElement bonusFrequencyElement:bonusFrequencyData)
														 {
															 bonusFrequencyMap = bonusFrequencyElement.getAllAttributes();
															 if(bonusFrequencyMap.get("wd:type").equals("Frequency_ID"))
															 {
																 bonusFrequencyName = bonusFrequencyElement.getValue().trim();
																 if(bonusFrequencyNameArr.equals(""))
																 {
																	 bonusFrequencyNameArr = bonusFrequencyName;
																 }
																 else
																 {
																	 if(!bonusFrequencyName.isEmpty())
																	 {
																		 bonusFrequencyNameArr = bonusFrequencyNameArr + "~" + bonusFrequencyName;
																	 }
																 }	
															 }
														 }
													 }													 													 												 
												 }
											 }
											 else
											 {
												 errorList.add(columnList.get(i));
												 bonusPlanNameArr = "";
												 bonusElementNameArr = "";
												 bonusAmountArr = "";
												 bonusDefaultAmountArr = "";
												 bonusPercentageArr = "";
												 bonusDefaultPercentageArr = "";
												 bonusGuaranteedMinimumArr = "";
												 bonusCurrencyCodeArr = "";
												 bonusFrequencyNameArr = "";
												 bonusPercentageAssignedArr = "";
											 }
										 }
										 else
										 {
											 errorList.add(columnList.get(i));
											 bonusPlanNameArr = "";
											 bonusElementNameArr = "";
											 bonusAmountArr = "";
											 bonusDefaultAmountArr = "";
											 bonusPercentageArr = "";
											 bonusDefaultPercentageArr = "";
											 bonusGuaranteedMinimumArr = "";
											 bonusCurrencyCodeArr = "";
											 bonusFrequencyNameArr = "";
											 bonusPercentageAssignedArr = ""; 
										 }
											 								 								 
										 headingFromWD = "Employee_ID,Bonus_Plan_Name,Bonus_Element_Name,Default_Amount,Amount,Default_Percentage,Percentage,Guaranteed_Minimum,Currency,Frequency,"
										 		+ "Percentage_Assigned";
										 
										 headerStr = employeeId + "," + bonusPlanNameArr + "," + bonusElementNameArr + "," + bonusDefaultAmountArr + "," + bonusAmountArr + "," + bonusDefaultPercentageArr
												 + "," + bonusPercentageArr + "," + bonusGuaranteedMinimumArr + "," + bonusCurrencyCodeArr + "," + bonusFrequencyNameArr + "," + bonusPercentageAssignedArr;
										 
										 if(finalStr.equals(""))
										 {
											 finalStr = headingFromWD + "\n" + headerStr;
										 }
										 else
										 {
											 finalStr = finalStr + "\n" + headerStr;
										 } 
								 }
							 }
						 }
					 }
					 columnList.removeAll(errorList);
					 wdCount = columnList.size();
				 }		 					 
				 System.out.println(finalStr);
				 targetContent = finalStr.toString().getBytes();					 					 
				 headingWd = selectColumnMapping(loadCycle, ruleName, "Employee_ID");					 
				 complete = true;
			}			 			 
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}

		return headingWd;
	}
	
	private JSONArray createCSVFromWDAddHourlyPlan(Tenant tenant, InputStream is, SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd,
			String loadCycle, String ruleName, String client) {
		
		 targetContent = null;
		 headingFromWD = "";
		 String checkFile = "";
		
		 String employeeId = "";
		 String compReasonName = "";
		 String compPackageName = "";
		 String compGradeName = "";
		 String compProfileName = "";
		 String compStepName = "";
		 String salaryPlanName = "";
		 String salaryElementName = "";
		 String salaryElementAmount = "";
		 String salaryCurrency = "";
		 String salaryFrequency = "";
		 String hourlyPlanName = "";
		 String hourlyElementName = "";
		 String hourlyElementAmount = "";
		 String hourlyCurrency = "";
		 String hourlyFrequency = "";
		 
		 Map<String,String> reasonMap = null;
		 Map<String,String> packageMap = null;
		 Map<String,String> gradeMap = null;
		 Map<String,String> profileMap = null;
		 Map<String,String> stepMap = null;
		 Map<String,String> salHourMap = null;
		 Map<String,String> salHourElementMap = null;
		 Map<String,String> salHourCurrencyMap = null;
		 Map<String,String> salHourFrequencyMap = null;
		 
		 boolean isHourly = false;

		 String finalStr = "";
		 String headerStr = "";
		 try 
		 {			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_HOURLY_REQUEST_FILE = requestfile.getAbsolutePath();
				 
				 if(errorList.isEmpty())
				 {
					 for(int i = 0; i<columnList.size();i++)
					 {
						 checkFile = addWorkerIdListToFindError(GET_HOURLY_REQUEST_FILE, columnList.get(i), ruleName, "Employee_ID");
						 is = new FileInputStream(checkFile);
					     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     SOAPPart soapPart = soapMessage.getSOAPPart();
					     SOAPEnvelope envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
							  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
					     ByteArrayOutputStream out = new ByteArrayOutputStream();
					     soapMessage.writeTo(out);
					     String strMsgChk = new String(out.toByteArray());	
					     
					     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
					     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
						 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
						 out = new ByteArrayOutputStream();
						 soapResponse.writeTo(out);
						 strMsgChk = new String(out.toByteArray(), "utf-8");
						 if(strMsgChk.contains("faultstring"))
						 {
							 errorList.add(columnList.get(i));
						 }
						 else
						 {
							 ReportElement rptElement = XmlParserManager.parseXml(strMsgChk);				 
							 ReportElement pageResults = rptElement.getChild("env:Body")
										.getChild("wd:Get_Workers_Response")
										.getChild("wd:Response_Results");
							 
							 String result = pageResults.getChild("wd:Total_Results").getValue().trim();
							 if(result.equalsIgnoreCase("0"))
							 {
								 errorList.add(columnList.get(i));
							 }
							 else
							 {
								 ReportElement responseData = rptElement.getChild("env:Body")
											.getChild("wd:Get_Workers_Response")
											.getChild("wd:Response_Data");
								 
								 List<ReportElement> applicantData = responseData.getChildren("wd:Worker");
									
								 for(ReportElement reportElement : applicantData)
								 {
									 ReportElement element1 = reportElement.getChild("wd:Worker_Data");
					        		 employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
					        		 System.out.println("employeeId--"+ employeeId);	
						        	 ReportElement compensationData = reportElement.getChild("wd:Worker_Data")
									 			.getChild("wd:Compensation_Data");
									 
									 if(compensationData != null)
									 {	
										 ReportElement reasonRef = compensationData.getChild("wd:Reason_Reference");
										 if(reasonRef != null)
										 {
											 List<ReportElement> reasonData = reasonRef.getChildren("wd:ID");					 
											 for(ReportElement reasonElement:reasonData)
											 {
												 reasonMap = reasonElement.getAllAttributes();
												 if(reasonMap.get("wd:type").equals("Event_Classification_Subcategory_ID"))
												 {
													 compReasonName = reasonElement.getValue().trim();
												 }
											 }
										 }
										 else
										 {
											 compReasonName = "";
										 }
										 
										 ReportElement compensationGuidelineData = compensationData.getChild("wd:Compensation_Guidelines_Data");
										 if(compensationGuidelineData != null)
										 {
											 ReportElement compPackageRef = compensationGuidelineData.getChild("wd:Compensation_Package_Reference");
											 if(compPackageRef != null)
											 {
												 List<ReportElement> packageData = compPackageRef.getChildren("wd:ID");					 
												 for(ReportElement packageElement:packageData)
												 {
													 packageMap = packageElement.getAllAttributes();
													 if(packageMap.get("wd:type").equals("Compensation_Package_ID"))
													 {
														 compPackageName = packageElement.getValue().trim();
													 }
												 }
											 }
											 else
											 {
												 compPackageName = "";
											 }
											 
											 ReportElement compGradeRef = compensationGuidelineData.getChild("wd:Compensation_Grade_Reference");
											 if(compGradeRef != null)
											 {
												 List<ReportElement> gradeData = compGradeRef.getChildren("wd:ID");					 
												 for(ReportElement gradeElement:gradeData)
												 {
													 gradeMap = gradeElement.getAllAttributes();
													 if(gradeMap.get("wd:type").equals("Compensation_Grade_ID"))
													 {
														 compGradeName = gradeElement.getValue().trim();
													 }
												 }
											 }
											 else
											 {
												 compGradeName = "";
											 }
											 
											 ReportElement compGradeProfileRef = compensationGuidelineData.getChild("wd:Compensation_Grade_Profile_Reference");
											 if(compGradeProfileRef != null)
											 {
												 List<ReportElement> profileData = compGradeProfileRef.getChildren("wd:ID");					 
												 for(ReportElement profileElement:profileData)
												 {
													 profileMap = profileElement.getAllAttributes();
													 if(profileMap.get("wd:type").equals("Compensation_Grade_Profile_ID"))
													 {
														 compProfileName = profileElement.getValue().trim();
														 if(compProfileName.contains(","))
														 {
															 compProfileName = compProfileName.replaceAll(",", "|");
														 }
													 }
												 }
											 }
											 else
											 {
												 compProfileName = "";
											 }
											 
											 ReportElement compStepRef = compensationGuidelineData.getChild("wd:Compensation_Step_Reference");
											 if(compStepRef != null)
											 {
												 List<ReportElement> stepData = compStepRef.getChildren("wd:ID");					 
												 for(ReportElement stepElement:stepData)
												 {
													 stepMap = stepElement.getAllAttributes();
													 if(stepMap.get("wd:type").equals("Compensation_Step_ID"))
													 {
														 compStepName = stepElement.getValue().trim();
													 }
												 }
											 }
											 else
											 {
												 compStepName = "";
											 }
										 }
										 else
										 {
											 compPackageName = "";
											 compGradeName = "";
											 compProfileName = "";
											 compStepName = "";
										 }
										 
										 ReportElement salaryOrHourlyPlanData = compensationData.getChild("wd:Salary_and_Hourly_Data");
										 if(salaryOrHourlyPlanData != null)
										 {
											 ReportElement salHourPlanRef = salaryOrHourlyPlanData.getChild("wd:Compensation_Plan_Reference");
											 if(salHourPlanRef != null)
											 {
												 List<ReportElement> salHourData = salHourPlanRef.getChildren("wd:ID");					 
												 for(ReportElement salHourElement:salHourData)
												 {
													 salHourMap = salHourElement.getAllAttributes();
													 if(salHourMap.get("wd:type").equals("Compensation_Plan_ID"))
													 {
														 isHourly = getSalaryOrHourly(salHourElement.getValue().trim());											 
														 if(isHourly)
														 {
															 hourlyPlanName = salHourElement.getValue().trim();
															 salaryPlanName = "";
														 }
														 else
														 {
															 salaryPlanName = salHourElement.getValue().trim();
															 hourlyPlanName = "";
														 }
													 }
												 }
											 }
											 else
											 {
												 hourlyPlanName = "";
												 salaryPlanName = "";
											 }
											 
											 ReportElement salHourCompElementRef = salaryOrHourlyPlanData.getChild("wd:Compensation_Element_Reference");
											 if(salHourCompElementRef != null)
											 {
												 List<ReportElement> salHourElementData = salHourCompElementRef.getChildren("wd:ID");					 
												 for(ReportElement salHourElementElement:salHourElementData)
												 {
													 salHourElementMap = salHourElementElement.getAllAttributes();
													 if(salHourElementMap.get("wd:type").equals("Compensation_Element_ID"))
													 {
														 if(isHourly)
														 {
															 hourlyElementName = salHourElementElement.getValue().trim();
															 if(hourlyElementName.contains(","))
															 {
																 hourlyElementName = hourlyElementName.replaceAll(",", "|");
															 }
															 salaryElementName = "";
														 }
														 else
														 {
															 salaryElementName = salHourElementElement.getValue().trim();
															 if(salaryElementName.contains(","))
															 {
																 salaryElementName = salaryElementName.replaceAll(",", "|");
															 }
															 hourlyElementName = "";
														 }
													 }
												 }
											 }
											 else
											 {
												 hourlyElementName = "";
												 salaryElementName = "";
											 }
											 
											 if(isHourly)
											 {
												 hourlyElementAmount = salaryOrHourlyPlanData.getChild("wd:Amount") != null?salaryOrHourlyPlanData.getChild("wd:Amount").getValue().trim():"";	
												 salaryElementAmount = "";
											 }
											 else
											 {
												 salaryElementAmount = salaryOrHourlyPlanData.getChild("wd:Amount") != null?salaryOrHourlyPlanData.getChild("wd:Amount").getValue().trim():"";
												 hourlyElementAmount = "";
											 }
											 
											 ReportElement salHourCountryRef = salaryOrHourlyPlanData.getChild("wd:Currency_Reference");
											 if(salHourCountryRef != null)
											 {
												 List<ReportElement> salHourCurrencyData = salHourCountryRef.getChildren("wd:ID");					 
												 for(ReportElement salHourCurrencyElement:salHourCurrencyData)
												 {
													 salHourCurrencyMap = salHourCurrencyElement.getAllAttributes();
													 if(salHourCurrencyMap.get("wd:type").equals("Currency_ID"))
													 {
														 if(isHourly)
														 {
															 hourlyCurrency = salHourCurrencyElement.getValue().trim();
															 salaryCurrency = "";
														 }
														 else
														 {
															 salaryCurrency = salHourCurrencyElement.getValue().trim();
															 hourlyCurrency = "";
														 }
													 }
												 }
											 }
											 else
											 {
												 hourlyCurrency = "";
												 salaryCurrency = "";
											 }
											 
											 ReportElement salHourFrequencyRef = salaryOrHourlyPlanData.getChild("wd:Frequency_Reference");
											 if(salHourFrequencyRef != null)
											 {
												 List<ReportElement> salHourFrequencyData = salHourFrequencyRef.getChildren("wd:ID");					 
												 for(ReportElement salHourFrequencyElement:salHourFrequencyData)
												 {
													 salHourFrequencyMap = salHourFrequencyElement.getAllAttributes();
													 if(salHourFrequencyMap.get("wd:type").equals("Frequency_ID"))
													 {
														 if(isHourly)
														 {
															 hourlyFrequency = salHourFrequencyElement.getValue().trim();
															 salaryFrequency = "";
														 }
														 else
														 {
															 salaryFrequency = salHourFrequencyElement.getValue().trim();
															 hourlyFrequency = "";
														 }
													 }
												 }
											 }
											 else
											 {
												 hourlyFrequency = "";
												 salaryFrequency = "";
											 }
										 }
										 else
										 {
											 hourlyPlanName = "";
											 salaryPlanName = "";
											 hourlyElementName = "";
											 salaryElementName = "";
											 salaryElementAmount = "";
											 hourlyElementAmount = "";
											 hourlyCurrency = "";
											 salaryCurrency = "";
											 hourlyFrequency = "";
											 salaryFrequency = "";
										 }							 
										 
									 }
									 
									 headingFromWD = "Employee_ID,Compensation_Reason,Compensation_Package_Name,Compensation_Grade_Name,Compensation_Profile_Name,Compensation_Step_Name,Salary_Plan_Name,"
											 + "Salary_Element_Name,Salary_Amount,Salary_Currency,Salary_Frequency,Hourly_Plan_Name,Hourly_Element_Name,Hourly_Amount,Hourly_Currency,Hourly_Frequency";
										 
									 headerStr = employeeId + "," + compReasonName + "," + compPackageName + "," + compGradeName + "," + compProfileName + "," + compStepName + "," + salaryPlanName + "," + salaryElementName 
											 + "," + salaryElementAmount + "," + salaryCurrency + "," + salaryFrequency + "," + hourlyPlanName + "," + hourlyElementName + "," + hourlyElementAmount 
											 + "," + hourlyCurrency + "," + hourlyFrequency;
									 
									 if(finalStr.equals(""))
									 {
										 finalStr = headingFromWD + "\n" + headerStr;
									 }
									 else
									 {
										 finalStr = finalStr + "\n" + headerStr;
									 }					 
								 }
							 }
						 }
					 }
					 columnList.removeAll(errorList);
					 wdCount = columnList.size();
				 }		 					 
				 System.out.println(finalStr);
				 targetContent = finalStr.toString().getBytes();					 					 
				 headingWd = selectColumnMapping(loadCycle, ruleName, "Employee_ID");					 
				 complete = true;
			}			 			 
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}

		return headingWd;
	}
	
	private JSONArray createCSVFromWDAddAllowancePlan(Tenant tenant, InputStream is, SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd,
			String loadCycle, String ruleName, String client) {

		 targetContent = null;
		 headingFromWD = "";
		 String checkFile = "";
		
		 String employeeId = "";
		 String allowancePlanName = "";
		 String allowanceElementName = "";
		 String allowanceAmount = "";
		 String allowancePercentage = "";
		 String allowanceCurrency = "";
		 String allowanceFrequency = "";
		 String allowancePlanNameArr = "";
		 String allowanceElementNameArr = "";
		 String allowanceAmountArr = "";
		 String allowancePercentageArr = "";
		 String allowanceCurrencyArr = "";
		 String allowanceFrequencyArr = "";
		 String unitAllowancePlanName = "";
		 String unitAllowanceElementName = "";
		 String unitAllowanceUnitOfMeasureName = "";
		 String unitAllowancePerUnitAmount = "";
		 String unitAllowanceCurrency = "";
		 String unitAllowanceNoOfUnits = "";
		 String unitAllowanceFrequency = "";
		 
		 Map<String,String> allowancePlanMap = null;
		 Map<String,String> allowanceElementMap = null;
		 Map<String,String> allowanceCurrencyMap = null;
		 Map<String,String> allowanceFrequencyMap = null;
		 Map<String,String> unitAllowanceMap = null;
		 Map<String,String> unitAllowanceElementMap = null;
		 Map<String,String> unitAllowanceMeasureMap = null;
		 Map<String,String> unitAllowanceCurrencyMap = null;
		 Map<String,String> unitAllowanceFrequencyMap = null;

		 String finalStr = "";
		 String headerStr = "";
		 try 
		 {			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_ALLOWANCE_REQUEST_FILE = requestfile.getAbsolutePath();
				 
				 if(errorList.isEmpty())
				 {
					 for(int i = 0; i<columnList.size();i++)
					 {
						 checkFile = addWorkerIdListToFindError(GET_ALLOWANCE_REQUEST_FILE, columnList.get(i), ruleName, "Employee_ID");
						 is = new FileInputStream(checkFile);
					     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     SOAPPart soapPart = soapMessage.getSOAPPart();
					     SOAPEnvelope envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
							  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
					     ByteArrayOutputStream out = new ByteArrayOutputStream();
					     soapMessage.writeTo(out);
					     String strMsgChk = new String(out.toByteArray());	
					     
					     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
					     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
						 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
						 out = new ByteArrayOutputStream();
						 soapResponse.writeTo(out);
						 strMsgChk = new String(out.toByteArray(), "utf-8");
						 if(strMsgChk.contains("faultstring"))
						 {
							 errorList.add(columnList.get(i));
						 }
						 else
						 {
							 ReportElement rptElement = XmlParserManager.parseXml(strMsgChk);				 
							 ReportElement pageResults = rptElement.getChild("env:Body")
										.getChild("wd:Get_Workers_Response")
										.getChild("wd:Response_Results");
							 
							 String result = pageResults.getChild("wd:Total_Results").getValue().trim();
							 if(result.equalsIgnoreCase("0"))
							 {
								 errorList.add(columnList.get(i));
							 }
							 else
							 {
								 ReportElement responseData = rptElement.getChild("env:Body")
											.getChild("wd:Get_Workers_Response")
											.getChild("wd:Response_Data");
								 
								 List<ReportElement> applicantData = responseData.getChildren("wd:Worker");
									
								 for(ReportElement reportElement : applicantData)
								 {
									 ReportElement element1 = reportElement.getChild("wd:Worker_Data");
						        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
						        		System.out.println("employeeId--"+ employeeId);										 										
										
						        		ReportElement compensationData = reportElement.getChild("wd:Worker_Data")
									 			.getChild("wd:Compensation_Data");
									 
										 if(compensationData != null)
										 {	
											 List<ReportElement> allowancePlanList = compensationData.getChildren("wd:Allowance_Plan_Data");
											 if(allowancePlanList != null && allowancePlanList.size() >0)
											 {
												 allowancePlanNameArr = "";
												 allowanceElementNameArr = "";
												 allowanceAmountArr = "";
												 allowancePercentageArr = "";
												 allowanceCurrencyArr = "";
												 allowanceFrequencyArr = "";
												 
												 for(ReportElement allowancePlanElement: allowancePlanList)
												 {
													 ReportElement allowancePlanRef = allowancePlanElement.getChild("wd:Compensation_Plan_Reference");
													 if(allowancePlanRef != null)
													 {
														 List<ReportElement> allowanceData = allowancePlanRef.getChildren("wd:ID");					 
														 for(ReportElement allowanceElement:allowanceData)
														 {
															 allowancePlanMap = allowanceElement.getAllAttributes();
															 if(allowancePlanMap.get("wd:type").equals("Compensation_Plan_ID"))
															 {
																 allowancePlanName= allowanceElement.getValue().trim();
																 if(allowancePlanName.contains(","))
																 {
																	 allowancePlanName = allowancePlanName.replaceAll(",", "|");
																 }
																 if(allowancePlanNameArr.equals(""))
																 {
																	 allowancePlanNameArr = allowancePlanName;
																 }
																 else
																 {
																	 if(!allowancePlanName.isEmpty())
																	 {
																		 allowancePlanNameArr = allowancePlanNameArr + "~" + allowancePlanName;
																	 }
																 }
															 }
														 }
													 }													 
													 
													 ReportElement allowanceCompElementRef = allowancePlanElement.getChild("wd:Compensation_Element_Reference");
													 if(allowanceCompElementRef != null)
													 {
														 List<ReportElement> allowanceElementData = allowanceCompElementRef.getChildren("wd:ID");					 
														 for(ReportElement allowanceElement:allowanceElementData)
														 {
															 allowanceElementMap = allowanceElement.getAllAttributes();
															 if(allowanceElementMap.get("wd:type").equals("Compensation_Element_ID"))
															 {
																 allowanceElementName= allowanceElement.getValue().trim();
																 if(allowanceElementName.contains(","))
																 {
																	 allowanceElementName = allowanceElementName.replaceAll(",", "|");
																 }
																 if(allowanceElementNameArr.equals(""))
																 {
																	 allowanceElementNameArr = allowanceElementName;
																 }
																 else
																 {
																	 if(!allowanceElementName.isEmpty())
																	 {
																		 allowanceElementNameArr = allowanceElementNameArr + "~" + allowanceElementName;
																	 }
																 }
															 }
														 }
													 }													 
													 
													 allowanceAmount = allowancePlanElement.getChild("wd:Amount") != null?allowancePlanElement.getChild("wd:Amount").getValue().trim():"";
													 if(allowanceAmountArr.equals(""))
													 {
														 allowanceAmountArr = allowanceAmount;
													 }
													 else
													 {
														 if(!allowanceAmount.isEmpty())
														 {
															 allowanceAmountArr = allowanceAmountArr + "~" + allowanceAmount;
														 }
													 }
													 allowancePercentage = allowancePlanElement.getChild("wd:Percent") != null?allowancePlanElement.getChild("wd:Percent").getValue().trim():"";
													 if(allowancePercentageArr.equals(""))
													 {
														 allowancePercentageArr = allowancePercentage;
													 }
													 else
													 {
														 if(!allowancePercentage.isEmpty())
														 {
															 allowancePercentageArr = allowancePercentageArr + "~" + allowancePercentage;
														 }
													 }
													 
													 ReportElement allowanceCurrRef = allowancePlanElement.getChild("wd:Currency_Reference");
													 if(allowanceCurrRef != null)
													 {
														 List<ReportElement> allowanceCurrencyData = allowanceCurrRef.getChildren("wd:ID");					 
														 for(ReportElement allowanceCurrencyElement:allowanceCurrencyData)
														 {
															 allowanceCurrencyMap = allowanceCurrencyElement.getAllAttributes();
															 if(allowanceCurrencyMap.get("wd:type").equals("Currency_ID"))
															 {
																 allowanceCurrency = allowanceCurrencyElement.getValue().trim();
																 if(allowanceCurrencyArr.equals(""))
																 {
																	 allowanceCurrencyArr = allowanceCurrency;
																 }
																 else
																 {
																	 if(!allowanceCurrency.isEmpty())
																	 {
																		 allowanceCurrencyArr = allowanceCurrencyArr + "~" + allowanceCurrency;
																	 }
																 }
															 }
														 }
													 }												 
													 
													 ReportElement allowanceFreqRef = allowancePlanElement.getChild("wd:Frequency_Reference");
													 if(allowanceFreqRef != null)
													 {
														 List<ReportElement> allowanceFrequencyData = allowanceFreqRef.getChildren("wd:ID");					 
														 for(ReportElement allowanceFrequencyElement:allowanceFrequencyData)
														 {
															 allowanceFrequencyMap = allowanceFrequencyElement.getAllAttributes();
															 if(allowanceFrequencyMap.get("wd:type").equals("Frequency_ID"))
															 {
																 allowanceFrequency = allowanceFrequencyElement.getValue().trim();
																 if(allowanceFrequencyArr.equals(""))
																 {
																	 allowanceFrequencyArr = allowanceFrequency;
																 }
																 else
																 {
																	 if(!allowanceFrequency.isEmpty())
																	 {
																		 allowanceFrequencyArr = allowanceFrequencyArr + "~" + allowanceFrequency;
																	 }
																 }
															 }
														 }
													 }													 													 													 
												 }
											 }
											 else
											 {
												 //errorList.add(columnList.get(i));
												 allowancePlanNameArr = "";
												 allowanceElementNameArr = "";
												 allowanceAmountArr = "";
												 allowancePercentageArr = "";
												 allowanceCurrencyArr = "";
												 allowanceFrequencyArr = "";											 
											 }
											 
											 List<ReportElement> unitAllowancePlanList = compensationData.getChildren("wd:Unit_Allowance_Plan_Data");
											 if(unitAllowancePlanList != null && unitAllowancePlanList.size()>0)
											 {								 
												 for(ReportElement unitAllowancePlanElement: unitAllowancePlanList)
												 {
													 ReportElement unitAllowancePlanRef = unitAllowancePlanElement.getChild("wd:Compensation_Plan_Reference");
													 if(unitAllowancePlanRef != null)
													 {
														 List<ReportElement> unitAllowPlanData = unitAllowancePlanRef.getChildren("wd:ID");					 
														 for(ReportElement unitAllowPlanElement:unitAllowPlanData)
														 {
															 unitAllowanceMap = unitAllowPlanElement.getAllAttributes();
															 if(unitAllowanceMap.get("wd:type").equals("Compensation_Plan_ID"))
															 {
																 unitAllowancePlanName= unitAllowPlanElement.getValue().trim();											
															 }
														 }
													 }
													 else
													 {
														 unitAllowancePlanName = "";
													 }
													 
													 ReportElement unitAllowanceElementRef = unitAllowancePlanElement.getChild("wd:Compensation_Element_Reference");
													 if(unitAllowanceElementRef != null)
													 {
														 List<ReportElement> unitAllowanceElementData = unitAllowanceElementRef.getChildren("wd:ID");					 
														 for(ReportElement unitAllowanceElementElement:unitAllowanceElementData)
														 {
															 unitAllowanceElementMap = unitAllowanceElementElement.getAllAttributes();
															 if(unitAllowanceElementMap.get("wd:type").equals("Compensation_Element_ID"))
															 {
																 unitAllowanceElementName= unitAllowanceElementElement.getValue().trim();
																 if(unitAllowanceElementName.contains(","))
																 {
																	 unitAllowanceElementName = unitAllowanceElementName.replaceAll(",", "|");
																 }
															 }
														 }
													 }
													 else
													 {
														 unitAllowanceElementName = "";
													 }
													 
													 ReportElement unitAllowanceUnitRef = unitAllowancePlanElement.getChild("wd:Unit_Reference");
													 if(unitAllowanceUnitRef != null)
													 {
														 List<ReportElement> unitMeasureElementData = unitAllowanceUnitRef.getChildren("wd:ID");					 
														 for(ReportElement unitSalaryMeasureElement:unitMeasureElementData)
														 {
															 unitAllowanceMeasureMap = unitSalaryMeasureElement.getAllAttributes();
															 if(unitAllowanceMeasureMap.get("wd:type").equals("UN_CEFACT_Common_Code_ID"))
															 {
																 unitAllowanceUnitOfMeasureName = unitSalaryMeasureElement.getValue().trim();
															 }
														 }
													 }
													 else
													 {
														 unitAllowanceUnitOfMeasureName = "";
													 }
													 
													 unitAllowanceNoOfUnits = unitAllowancePlanElement.getChild("wd:Number_of_Units") != null?unitAllowancePlanElement.getChild("wd:Number_of_Units").getValue().trim():"";
													 unitAllowancePerUnitAmount = unitAllowancePlanElement.getChild("wd:Per_Unit_Amount") != null?unitAllowancePlanElement.getChild("wd:Per_Unit_Amount").getValue().trim():"";
													 
													 ReportElement unitAllowanceCurrRef = unitAllowancePlanElement.getChild("wd:Currency_Reference");
													 if(unitAllowanceCurrRef != null)
													 {
														 List<ReportElement> unitCurrencyElementData = unitAllowanceCurrRef.getChildren("wd:ID");					 
														 for(ReportElement unitCurrencyElement:unitCurrencyElementData)
														 {
															 unitAllowanceCurrencyMap = unitCurrencyElement.getAllAttributes();
															 if(unitAllowanceCurrencyMap.get("wd:type").equals("Currency_ID"))
															 {
																 unitAllowanceCurrency = unitCurrencyElement.getValue().trim();
															 }
														 }
													 }
													 else
													 {
														 unitAllowanceCurrency = "";
													 }
													 
													 ReportElement unitAllowanceFreqRef = unitAllowancePlanElement.getChild("wd:Frequency_Reference");
													 if(unitAllowanceFreqRef != null)
													 {
														 List<ReportElement> unitFrequencyElementData = unitAllowanceFreqRef.getChildren("wd:ID");					 
														 for(ReportElement unitFrequencyElement:unitFrequencyElementData)
														 {
															 unitAllowanceFrequencyMap = unitFrequencyElement.getAllAttributes();
															 if(unitAllowanceFrequencyMap.get("wd:type").equals("Frequency_ID"))
															 {
																 unitAllowanceFrequency = unitFrequencyElement.getValue().trim();
															 }
														 }
													 }
													 else
													 {
														 unitAllowanceFrequency = "";
													 }
													 
												 }
											 }
											 else
											 {
												 unitAllowancePlanName = "";
												 unitAllowanceElementName = "";
												 unitAllowanceUnitOfMeasureName = "";
												 unitAllowancePerUnitAmount = "";
												 unitAllowanceCurrency = "";
												 unitAllowanceNoOfUnits = "";
												 unitAllowanceFrequency = "";												 
											 }
										 }
										 else
										 {
											 errorList.add(columnList.get(i));
											 allowancePlanNameArr = "";
											 allowanceElementNameArr = "";
											 allowanceAmountArr = "";
											 allowancePercentageArr = "";
											 allowanceCurrencyArr = "";
											 allowanceFrequencyArr = ""; 
										 }
											 								 								 
										 headingFromWD = "Employee_ID,Allowance_Plan_Name,Allowance_Element_Name,Amount,Percentage,Currency,Frequency,Unit_Allowance_Plan_Name,Unit_Allowance_Element_Name,"
										 				+ "Unit_Of_Measure,Per_Unit_Amount,Unit_Allowance_Currency,No_Of_Unit,Unit_Allowance_Frequency";
										 
										 headerStr = employeeId + "," + allowancePlanNameArr + "," + allowanceElementNameArr + "," + allowanceAmountArr + "," + allowancePercentageArr 
												 + "," + allowanceCurrencyArr + "," + allowanceFrequencyArr + "," + unitAllowancePlanName + "," + unitAllowanceElementName + "," + 
												 unitAllowanceUnitOfMeasureName + "," + unitAllowancePerUnitAmount + "," + unitAllowanceCurrency + "," + unitAllowanceNoOfUnits
												 + "," + unitAllowanceFrequency;
										 
										 if(finalStr.equals(""))
										 {
											 finalStr = headingFromWD + "\n" + headerStr;
										 }
										 else
										 {
											 finalStr = finalStr + "\n" + headerStr;
										 } 
								 }
							 }
						 }
					 }
					 columnList.removeAll(errorList);
					 wdCount = columnList.size();
				 }		 					 
				 System.out.println(finalStr);
				 targetContent = finalStr.toString().getBytes();					 					 
				 headingWd = selectColumnMapping(loadCycle, ruleName, "Employee_ID");					 
				 complete = true;
			}			 			 
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}

		return headingWd;
	}
	
	private JSONArray createCSVFromWDAddPeriodPlan(Tenant tenant, InputStream is, SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd,
			String loadCycle, String ruleName, String client) {

		 targetContent = null;
		 headingFromWD = "";
		 String checkFile = "";
		
		 String employeeId = "";
		 String periodSalaryPlanName = "";
		 String periodSalaryElementName = "";
		 String compensationPeriod = "";
		 String compensationPeriodMultiplier = "";
		 String periodSalaryCurrency = "";
		 String periodSalaryFrequency = "";
		 
		 Map<String,String> periodSalaryPlanMap = null;
		 Map<String,String> periodSalaryElementMap = null;
		 Map<String,String> compensationPeriodMap = null;
		 Map<String,String> periodSalaryCurrencyMap = null;
		 Map<String,String> periodSalaryFrequencyMap = null;

		 String finalStr = "";
		 String headerStr = "";
		 try 
		 {			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_PERIOD_SALARY_REQUEST_FILE = requestfile.getAbsolutePath();
				 
				 if(errorList.isEmpty())
				 {
					 for(int i = 0; i<columnList.size();i++)
					 {
						 checkFile = addWorkerIdListToFindError(GET_PERIOD_SALARY_REQUEST_FILE, columnList.get(i), ruleName, "Employee_ID");
						 is = new FileInputStream(checkFile);
					     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     SOAPPart soapPart = soapMessage.getSOAPPart();
					     SOAPEnvelope envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
							  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
					     ByteArrayOutputStream out = new ByteArrayOutputStream();
					     soapMessage.writeTo(out);
					     String strMsgChk = new String(out.toByteArray());	
					     
					     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
					     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
						 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
						 out = new ByteArrayOutputStream();
						 soapResponse.writeTo(out);
						 strMsgChk = new String(out.toByteArray(), "utf-8");
						 if(strMsgChk.contains("faultstring"))
						 {
							 errorList.add(columnList.get(i));
						 }
						 else
						 {
							 ReportElement rptElement = XmlParserManager.parseXml(strMsgChk);				 
							 ReportElement pageResults = rptElement.getChild("env:Body")
										.getChild("wd:Get_Workers_Response")
										.getChild("wd:Response_Results");
							 
							 String result = pageResults.getChild("wd:Total_Results").getValue().trim();
							 if(result.equalsIgnoreCase("0"))
							 {
								 errorList.add(columnList.get(i));
							 }
							 else
							 {
								 ReportElement responseData = rptElement.getChild("env:Body")
											.getChild("wd:Get_Workers_Response")
											.getChild("wd:Response_Data");
								 
								 List<ReportElement> applicantData = responseData.getChildren("wd:Worker");
									
								 for(ReportElement reportElement : applicantData)
								 {
									 ReportElement element1 = reportElement.getChild("wd:Worker_Data");
						        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
						        		System.out.println("employeeId--"+ employeeId);										 										
										
						        		ReportElement compensationData = reportElement.getChild("wd:Worker_Data")
									 			.getChild("wd:Compensation_Data");
									 
										 if(compensationData != null)
										 {	
											 List<ReportElement> periodSalaryPlanList = compensationData.getChildren("wd:Period_Salary_Plan_Data");
											 if(periodSalaryPlanList != null && periodSalaryPlanList.size() >0)
											 {
												 periodSalaryPlanName = "";
												 periodSalaryElementName = "";
												 compensationPeriod = "";
												 compensationPeriodMultiplier = "";
												 periodSalaryCurrency = "";
												 periodSalaryFrequency = "";
												 for(ReportElement periodSalaryPlanElement: periodSalaryPlanList)
												 {
													 ReportElement periodSalaryPlanRef = periodSalaryPlanElement.getChild("wd:Compensation_Plan_Reference");
													 if(periodSalaryPlanRef != null)
													 {
														 List<ReportElement> periodSalaryPlanData = periodSalaryPlanRef.getChildren("wd:ID");					 
														 for(ReportElement periodSalPlanElement:periodSalaryPlanData)
														 {
															 periodSalaryPlanMap = periodSalPlanElement.getAllAttributes();
															 if(periodSalaryPlanMap.get("wd:type").equals("Compensation_Plan_ID"))
															 {
																 periodSalaryPlanName= periodSalPlanElement.getValue().trim();											
															 }
														 }
													 }
													 else
													 {
														 periodSalaryPlanName = "";
													 }
													 
													 ReportElement periodSalaryElementRef = periodSalaryPlanElement.getChild("wd:Compensation_Element_Reference");
													 if(periodSalaryElementRef != null)
													 {
														 List<ReportElement> periodSalaryElementData = periodSalaryElementRef.getChildren("wd:ID");					 
														 for(ReportElement periodSalaryElement:periodSalaryElementData)
														 {
															 periodSalaryElementMap = periodSalaryElement.getAllAttributes();
															 if(periodSalaryElementMap.get("wd:type").equals("Compensation_Element_ID"))
															 {
																 periodSalaryElementName= periodSalaryElement.getValue().trim();
																 if(periodSalaryElementName.contains(","))
																 {
																	 periodSalaryElementName = periodSalaryElementName.replaceAll(",", "|");
																 }
															 }
														 }
													 }
													 else
													 {
														 periodSalaryElementName = "";
													 }
													 
													 ReportElement compPeriodRefRef = periodSalaryPlanElement.getChild("wd:Compensation_Period_Reference");
													 if(compPeriodRefRef != null)
													 {
														 List<ReportElement> compPeriodElementData = compPeriodRefRef.getChildren("wd:ID");					 
														 for(ReportElement compPeriodElement:compPeriodElementData)
														 {
															 compensationPeriodMap = compPeriodElement.getAllAttributes();
															 if(compensationPeriodMap.get("wd:type").equals("Compensation_Period_ID"))
															 {
																 compensationPeriod = compPeriodElement.getValue().trim();
															 }
														 }
													 }
													 else
													 {
														 compensationPeriod = "";
													 }
													 
													 compensationPeriodMultiplier = periodSalaryPlanElement.getChild("wd:Compensation_Period_Multiplier") != null?periodSalaryPlanElement.getChild("wd:Compensation_Period_Multiplier").getValue().trim():"";
													 
													 ReportElement periodSalaryCurrRef = periodSalaryPlanElement.getChild("wd:Currency_Reference");
													 if(periodSalaryCurrRef != null)
													 {
														 List<ReportElement> periodSalaryCurrData = periodSalaryCurrRef.getChildren("wd:ID");					 
														 for(ReportElement periodSalaryCurrencyElement:periodSalaryCurrData)
														 {
															 periodSalaryCurrencyMap = periodSalaryCurrencyElement.getAllAttributes();
															 if(periodSalaryCurrencyMap.get("wd:type").equals("Currency_ID"))
															 {
																 periodSalaryCurrency = periodSalaryCurrencyElement.getValue().trim();
															 }
														 }
													 }
													 else
													 {
														 periodSalaryCurrency = "";
													 }
													 
													 ReportElement periodSalaryFreqRef = periodSalaryPlanElement.getChild("wd:Frequency_Reference");
													 if(periodSalaryFreqRef != null)
													 {
														 List<ReportElement> periodSalaryFrequencyData = periodSalaryFreqRef.getChildren("wd:ID");					 
														 for(ReportElement periodSalaryFrequencyElement:periodSalaryFrequencyData)
														 {
															 periodSalaryFrequencyMap = periodSalaryFrequencyElement.getAllAttributes();
															 if(periodSalaryFrequencyMap.get("wd:type").equals("Frequency_ID"))
															 {
																 periodSalaryFrequency = periodSalaryFrequencyElement.getValue().trim();
															 }
														 }
													 }
													 else
													 {
														 periodSalaryFrequency = "";
													 }									 													 
												 }
											 }
											 else
											 {
												 periodSalaryPlanName = "";
												 periodSalaryElementName = "";
												 compensationPeriod = "";
												 compensationPeriodMultiplier = "";
												 periodSalaryCurrency = "";
												 periodSalaryFrequency = "";
											 }											 
										 }
										 else
										 {
											 errorList.add(columnList.get(i));
											 periodSalaryPlanName = "";
											 periodSalaryElementName = "";
											 compensationPeriod = "";
											 compensationPeriodMultiplier = "";
											 periodSalaryCurrency = "";
											 periodSalaryFrequency = ""; 
										 }
											 								 								 
										 headingFromWD = "Employee_ID,Period_Salary_Plan_Name,Period_Salary_Element_Name,Compensation_Period,Compensation_Period_Multiplier,Currency,Frequency";
										 
										 headerStr = employeeId + "," + periodSalaryPlanName + "," + periodSalaryElementName + "," + compensationPeriod + "," + compensationPeriodMultiplier 
												 + "," + periodSalaryCurrency + "," + periodSalaryFrequency;
										 
										 if(finalStr.equals(""))
										 {
											 finalStr = headingFromWD + "\n" + headerStr;
										 }
										 else
										 {
											 finalStr = finalStr + "\n" + headerStr;
										 } 
								 }
							 }
						 }
					 }
					 columnList.removeAll(errorList);
					 wdCount = columnList.size();
				 }		 					 
				 System.out.println(finalStr);
				 targetContent = finalStr.toString().getBytes();					 					 
				 headingWd = selectColumnMapping(loadCycle, ruleName, "Employee_ID");					 
				 complete = true;
			}			 			 
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}

		return headingWd;
	}
	
	private JSONArray createCSVFromWDAddSalaryPlan(Tenant tenant, InputStream is, SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd,
			String loadCycle, String ruleName, String client) {
		
		targetContent = null;
		headingFromWD = "";
		try 
		{
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_SALARY_REQUEST_FILE = requestfile.getAbsolutePath();				
				 String outputfile = addHireIdList(GET_SALARY_REQUEST_FILE, columnList, ruleName, startIndex, columnList.size(), "Employee_ID");

				 is = new FileInputStream(outputfile);
			     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
			     SOAPPart soapPart = soapMessage.getSOAPPart();
			     SOAPEnvelope envelope = soapPart.getEnvelope();
				 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
				 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
				 {
					  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
					  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
				 }
				 soapMessage.saveChanges();
			     ByteArrayOutputStream out = new ByteArrayOutputStream();
			     soapMessage.writeTo(out);
			     String strMsg = new String(out.toByteArray());	
			     
			     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
			     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
				 soapConnection = soapConnectionFactory.createConnection();
				 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
				 out = new ByteArrayOutputStream();
				 soapResponse.writeTo(out);
				 strMsg = new String(out.toByteArray(), "utf-8");			 
				 
				 //if(faultStr == null)
				 {
					 ReportElement soapResp = XmlParserManager.parseXml(strMsg);				 
					 ReportElement pageData = soapResp.getChild("env:Body")
								.getChild("wd:Get_Workers_Response")
								.getChild("wd:Response_Results");
					 
					 String totalNoOfPages = pageData.getChild("wd:Total_Pages").getValue().trim();
					 String totalResults = pageData.getChild("wd:Total_Results").getValue().trim();
					 int totalResult = Integer.parseInt(totalResults);
					 System.out.println("totalNoOfPages-"+totalNoOfPages);
					 System.out.println("totalResult-"+totalResult);
					 wdCount = totalResult;
					 
					 String finalStr = "";
					 String headerStr = "";
					 String employeeId = "";
					 String compReasonName = "";
					 String compPackageName = "";
					 String compGradeName = "";
					 String compProfileName = "";
					 String compStepName = "";
					 String salaryPlanName = "";
					 String salaryElementName = "";
					 String salaryElementAmount = "";
					 String salaryCurrency = "";
					 String salaryFrequency = "";
					 String hourlyPlanName = "";
					 String hourlyElementName = "";
					 String hourlyElementAmount = "";
					 String hourlyCurrency = "";
					 String hourlyFrequency = "";
					 
					 Map<String,String> reasonMap = null;
					 Map<String,String> packageMap = null;
					 Map<String,String> gradeMap = null;
					 Map<String,String> profileMap = null;
					 Map<String,String> stepMap = null;
					 Map<String,String> salHourMap = null;
					 Map<String,String> salHourElementMap = null;
					 Map<String,String> salHourCurrencyMap = null;
					 Map<String,String> salHourFrequencyMap = null;
					 
					 boolean isHourly = false;
					 
					 for (int j = 1; j <= Integer.parseInt(totalNoOfPages); j++) 
					 {					 
						 if(j == 1)
						 {
							startIndex = 0;
							if(999 > totalResult)
							{
								endIndex = totalResult;
							}
							else
							{
								endIndex = j*999;
							}
						 }
						 else
						 {
							startIndex = endIndex;
							if(j*999 > totalResult)
							{
								endIndex = totalResult;
							}
							else
							{
								endIndex = (j*999);
							}
						 }
						 outputfile = addHireIdList(GET_SALARY_REQUEST_FILE, columnList, ruleName, startIndex, endIndex, "Employee_ID");
						 is = new FileInputStream(outputfile);
					     soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     soapPart = soapMessage.getSOAPPart();
					     envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
								envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
								createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
				         out = new ByteArrayOutputStream();
				         soapMessage.writeTo(out);
				         strMsg = new String(out.toByteArray());
				        
				         soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
				         soapResponse = soapConnection.call(soapMessage, sourceUrl);
				         out = new ByteArrayOutputStream();
				         soapResponse.writeTo(out);
				         strMsg = new String(out.toByteArray(), "utf-8");
				        
				         soapResp = XmlParserManager.parseXml(strMsg);
					 
						 ReportElement responseData = soapResp.getChild("env:Body")
									.getChild("wd:Get_Workers_Response")
									.getChild("wd:Response_Data");
						 
						 List<ReportElement> workerData = responseData.getChildren("wd:Worker");
							
						 for(ReportElement reportElement : workerData)
						 {
							 ReportElement element1 = reportElement.getChild("wd:Worker_Data");
				        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
				        		System.out.println("employeeId--"+ employeeId);	
				        	 ReportElement compensationData = reportElement.getChild("wd:Worker_Data")
							 			.getChild("wd:Compensation_Data");
							 
							 if(compensationData != null)
							 {	
								 ReportElement reasonRef = compensationData.getChild("wd:Reason_Reference");
								 if(reasonRef != null)
								 {
									 List<ReportElement> reasonData = reasonRef.getChildren("wd:ID");					 
									 for(ReportElement reasonElement:reasonData)
									 {
										 reasonMap = reasonElement.getAllAttributes();
										 if(reasonMap.get("wd:type").equals("Event_Classification_Subcategory_ID"))
										 {
											 compReasonName = reasonElement.getValue().trim();
										 }
									 }
								 }
								 else
								 {
									 compReasonName = "";
								 }
								 
								 ReportElement compensationGuidelineData = compensationData.getChild("wd:Compensation_Guidelines_Data");
								 if(compensationGuidelineData != null)
								 {
									 ReportElement compPackageRef = compensationGuidelineData.getChild("wd:Compensation_Package_Reference");
									 if(compPackageRef != null)
									 {
										 List<ReportElement> packageData = compPackageRef.getChildren("wd:ID");					 
										 for(ReportElement packageElement:packageData)
										 {
											 packageMap = packageElement.getAllAttributes();
											 if(packageMap.get("wd:type").equals("Compensation_Package_ID"))
											 {
												 compPackageName = packageElement.getValue().trim();
											 }
										 }
									 }
									 else
									 {
										 compPackageName = "";
									 }
									 
									 ReportElement compGradeRef = compensationGuidelineData.getChild("wd:Compensation_Grade_Reference");
									 if(compGradeRef != null)
									 {
										 List<ReportElement> gradeData = compGradeRef.getChildren("wd:ID");					 
										 for(ReportElement gradeElement:gradeData)
										 {
											 gradeMap = gradeElement.getAllAttributes();
											 if(gradeMap.get("wd:type").equals("Compensation_Grade_ID"))
											 {
												 compGradeName = gradeElement.getValue().trim();
											 }
										 }
									 }
									 else
									 {
										 compGradeName = "";
									 }
									 
									 ReportElement compGradeProfileRef = compensationGuidelineData.getChild("wd:Compensation_Grade_Profile_Reference");
									 if(compGradeProfileRef != null)
									 {
										 List<ReportElement> profileData = compGradeProfileRef.getChildren("wd:ID");					 
										 for(ReportElement profileElement:profileData)
										 {
											 profileMap = profileElement.getAllAttributes();
											 if(profileMap.get("wd:type").equals("Compensation_Grade_Profile_ID"))
											 {
												 compProfileName = profileElement.getValue().trim();
												 if(compProfileName.contains(","))
												 {
													 compProfileName = compProfileName.replaceAll(",", "|");
												 }
											 }
										 }
									 }
									 else
									 {
										 compProfileName = "";
									 }
									 
									 ReportElement compStepRef = compensationGuidelineData.getChild("wd:Compensation_Step_Reference");
									 if(compStepRef != null)
									 {
										 List<ReportElement> stepData = compStepRef.getChildren("wd:ID");					 
										 for(ReportElement stepElement:stepData)
										 {
											 stepMap = stepElement.getAllAttributes();
											 if(stepMap.get("wd:type").equals("Compensation_Step_ID"))
											 {
												 compStepName = stepElement.getValue().trim();
											 }
										 }
									 }
									 else
									 {
										 compStepName = "";
									 }
								 }
								 else
								 {
									 compPackageName = "";
									 compGradeName = "";
									 compProfileName = "";
									 compStepName = "";
								 }
								 
								 ReportElement salaryOrHourlyPlanData = compensationData.getChild("wd:Salary_and_Hourly_Data");
								 if(salaryOrHourlyPlanData != null)
								 {
									 ReportElement salHourPlanRef = salaryOrHourlyPlanData.getChild("wd:Compensation_Plan_Reference");
									 if(salHourPlanRef != null)
									 {
										 List<ReportElement> salHourData = salHourPlanRef.getChildren("wd:ID");					 
										 for(ReportElement salHourElement:salHourData)
										 {
											 salHourMap = salHourElement.getAllAttributes();
											 if(salHourMap.get("wd:type").equals("Compensation_Plan_ID"))
											 {
												 isHourly = getSalaryOrHourly(salHourElement.getValue().trim());											 
												 if(isHourly)
												 {
													 hourlyPlanName = salHourElement.getValue().trim();
													 salaryPlanName = "";
												 }
												 else
												 {
													 salaryPlanName = salHourElement.getValue().trim();
													 hourlyPlanName = "";
												 }
											 }
										 }
									 }
									 else
									 {
										 hourlyPlanName = "";
										 salaryPlanName = "";
									 }
									 
									 ReportElement salHourCompElementRef = salaryOrHourlyPlanData.getChild("wd:Compensation_Element_Reference");
									 if(salHourCompElementRef != null)
									 {
										 List<ReportElement> salHourElementData = salHourCompElementRef.getChildren("wd:ID");					 
										 for(ReportElement salHourElementElement:salHourElementData)
										 {
											 salHourElementMap = salHourElementElement.getAllAttributes();
											 if(salHourElementMap.get("wd:type").equals("Compensation_Element_ID"))
											 {
												 if(isHourly)
												 {
													 hourlyElementName = salHourElementElement.getValue().trim();
													 if(hourlyElementName.contains(","))
													 {
														 hourlyElementName = hourlyElementName.replaceAll(",", "|");
													 }
													 salaryElementName = "";
												 }
												 else
												 {
													 salaryElementName = salHourElementElement.getValue().trim();
													 if(salaryElementName.contains(","))
													 {
														 salaryElementName = salaryElementName.replaceAll(",", "|");
													 }
													 hourlyElementName = "";
												 }
											 }
										 }
									 }
									 else
									 {
										 hourlyElementName = "";
										 salaryElementName = "";
									 }
									 
									 if(isHourly)
									 {
										 hourlyElementAmount = salaryOrHourlyPlanData.getChild("wd:Amount") != null?salaryOrHourlyPlanData.getChild("wd:Amount").getValue().trim():"";	
										 salaryElementAmount = "";
									 }
									 else
									 {
										 salaryElementAmount = salaryOrHourlyPlanData.getChild("wd:Amount") != null?salaryOrHourlyPlanData.getChild("wd:Amount").getValue().trim():"";
										 hourlyElementAmount = "";
									 }
									 
									 ReportElement salHourCountryRef = salaryOrHourlyPlanData.getChild("wd:Currency_Reference");
									 if(salHourCountryRef != null)
									 {
										 List<ReportElement> salHourCurrencyData = salHourCountryRef.getChildren("wd:ID");					 
										 for(ReportElement salHourCurrencyElement:salHourCurrencyData)
										 {
											 salHourCurrencyMap = salHourCurrencyElement.getAllAttributes();
											 if(salHourCurrencyMap.get("wd:type").equals("Currency_ID"))
											 {
												 if(isHourly)
												 {
													 hourlyCurrency = salHourCurrencyElement.getValue().trim();
													 salaryCurrency = "";
												 }
												 else
												 {
													 salaryCurrency = salHourCurrencyElement.getValue().trim();
													 hourlyCurrency = "";
												 }
											 }
										 }
									 }
									 else
									 {
										 hourlyCurrency = "";
										 salaryCurrency = "";
									 }
									 
									 ReportElement salHourFrequencyRef = salaryOrHourlyPlanData.getChild("wd:Frequency_Reference");
									 if(salHourFrequencyRef != null)
									 {
										 List<ReportElement> salHourFrequencyData = salHourFrequencyRef.getChildren("wd:ID");					 
										 for(ReportElement salHourFrequencyElement:salHourFrequencyData)
										 {
											 salHourFrequencyMap = salHourFrequencyElement.getAllAttributes();
											 if(salHourFrequencyMap.get("wd:type").equals("Frequency_ID"))
											 {
												 if(isHourly)
												 {
													 hourlyFrequency = salHourFrequencyElement.getValue().trim();
													 salaryFrequency = "";
												 }
												 else
												 {
													 salaryFrequency = salHourFrequencyElement.getValue().trim();
													 hourlyFrequency = "";
												 }
											 }
										 }
									 }
									 else
									 {
										 hourlyFrequency = "";
										 salaryFrequency = "";
									 }
								 }
								 else
								 {
									 hourlyPlanName = "";
									 salaryPlanName = "";
									 hourlyElementName = "";
									 salaryElementName = "";
									 salaryElementAmount = "";
									 hourlyElementAmount = "";
									 hourlyCurrency = "";
									 salaryCurrency = "";
									 hourlyFrequency = "";
									 salaryFrequency = "";
								 }							 
								 
							 }
							 
							 headingFromWD = "Employee_ID,Compensation_Reason,Compensation_Package_Name,Compensation_Grade_Name,Compensation_Profile_Name,Compensation_Step_Name,Salary_Plan_Name,"
									 + "Salary_Element_Name,Salary_Amount,Salary_Currency,Salary_Frequency,Hourly_Plan_Name,Hourly_Element_Name,Hourly_Amount,Hourly_Currency,Hourly_Frequency";
								 
							 headerStr = employeeId + "," + compReasonName + "," + compPackageName + "," + compGradeName + "," + compProfileName + "," + compStepName + "," + salaryPlanName + "," + salaryElementName 
									 + "," + salaryElementAmount + "," + salaryCurrency + "," + salaryFrequency + "," + hourlyPlanName + "," + hourlyElementName + "," + hourlyElementAmount 
									 + "," + hourlyCurrency + "," + hourlyFrequency;
							 
							 if(finalStr.equals(""))
							 {
								 finalStr = headingFromWD + "\n" + headerStr;
							 }
							 else
							 {
								 finalStr = finalStr + "\n" + headerStr;
							 }					 
						 }
					 }
					 
					 System.out.println(finalStr);
					 targetContent = finalStr.toString().getBytes();
					 
					 headingWd = selectColumnMapping(loadCycle, ruleName, "Employee_ID");
					 
					 complete = true;
				 }
			 }
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		return headingWd;
	}
	
	private JSONArray createCSVFromWDAddAssignPayGroup(Tenant tenant, InputStream is, SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd,
			String loadCycle, String ruleName, String client) {

		 targetContent = null;
		 headingFromWD = "";
		 String checkFile = "";
		
		 String employeeId = "";
		 //String effectiveDate = "";
		 String payGroupId = "";
		 String payGroupIdArr = "";
		 String payGroupType = "";
		 String positionId = "";
		 String positionIdArr = "";
		 
		 Map<String,String> payGroupMap = null;
		 Map<String,String> positionMap = null;

		 String finalStr = "";
		 String headerStr = "";
		 try 
		 {			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_PAY_GROUP_FILE = requestfile.getAbsolutePath();
				 
				 if(errorList.isEmpty())
				 {
					 for(int i = 0; i<columnList.size();i++)
					 {
						 checkFile = addWorkerIdListToFindError(GET_PAY_GROUP_FILE, columnList.get(i), ruleName, "Employee_ID");
						 is = new FileInputStream(checkFile);
					     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     SOAPPart soapPart = soapMessage.getSOAPPart();
					     SOAPEnvelope envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
							  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
					     ByteArrayOutputStream out = new ByteArrayOutputStream();
					     soapMessage.writeTo(out);
					     String strMsgChk = new String(out.toByteArray());	
					     
					     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
					     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
						 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
						 out = new ByteArrayOutputStream();
						 soapResponse.writeTo(out);
						 strMsgChk = new String(out.toByteArray(), "utf-8");
						 if(strMsgChk.contains("faultstring"))
						 {
							 errorList.add(columnList.get(i));
						 }
						 else
						 {
							 ReportElement rptElement = XmlParserManager.parseXml(strMsgChk);				 
							 ReportElement pageResults = rptElement.getChild("env:Body")
										.getChild("wd:Get_Workers_Response")
										.getChild("wd:Response_Results");
							 
							 String result = pageResults.getChild("wd:Total_Results").getValue().trim();
							 if(result.equalsIgnoreCase("0"))
							 {
								 errorList.add(columnList.get(i));
							 }
							 else
							 {
								 ReportElement responseData = rptElement.getChild("env:Body")
											.getChild("wd:Get_Workers_Response")
											.getChild("wd:Response_Data");
								 
								 List<ReportElement> applicantData = responseData.getChildren("wd:Worker");
									
								 for(ReportElement reportElement : applicantData)
								 {
									 ReportElement element1 = reportElement.getChild("wd:Worker_Data");
						        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
						        		System.out.println("employeeId--"+ employeeId);										 										
										
						        		List<ReportElement> workerJobList = reportElement.getChild("wd:Worker_Data")
					 							.getChild("wd:Employment_Data")
					 							.getChildren("wd:Worker_Job_Data");
						        		
										 if(workerJobList != null && workerJobList.size() > 0)
										 {
											 payGroupIdArr = "";
											 positionIdArr = "";
											 
											 for(ReportElement workerJobData : workerJobList)
											 {
												 ReportElement positionData = workerJobData.getChild("wd:Position_Data");
												 if(positionData != null)
												 {
													 ReportElement positionRef = positionData.getChild("wd:Position_Reference");
													 if(positionRef != null)
													 {
														 List<ReportElement> posData = positionRef.getChildren("wd:ID");								 
														 for(ReportElement positionElement:posData)
														 {
															 positionMap = positionElement.getAllAttributes();
															 if(positionMap.get("wd:type").equals("Position_ID"))
															 {
																 positionId = positionElement.getValue().trim();
																 if(positionIdArr.equals(""))
																 {
																	 positionIdArr = positionId;
																 }
																 else
																 {
																	 positionIdArr = positionIdArr + "~" + positionId;
																 }
															 }
														 }
													 }
													 else
													 {
														 positionIdArr = "";
													 }
												 }
												 else
												 {
													 positionIdArr = "";
												 }
												 
												 List<ReportElement> positionOrgList = workerJobData.getChild("wd:Position_Organizations_Data")
														 			.getChildren("wd:Position_Organization_Data");
													
												 for(ReportElement positionOrgElement : positionOrgList)
												 {
													 ReportElement organizationData = positionOrgElement.getChild("wd:Organization_Data");
													 if(organizationData != null)
													 {
														 ReportElement orgTypeRef = organizationData.getChild("wd:Organization_Type_Reference");
														 if(orgTypeRef != null)
														 {
															 List<ReportElement> orgTypeData = orgTypeRef.getChildren("wd:ID");								 
															 for(ReportElement orgTypeElement:orgTypeData)
															 {
																 payGroupMap = orgTypeElement.getAllAttributes();
																 if(payGroupMap.get("wd:type").equals("Organization_Type_ID"))
																 {
																	 payGroupType = orgTypeElement.getValue().trim();
																	 if(payGroupType.equalsIgnoreCase("PAY_GROUP"))
																	 {
																		 payGroupId = organizationData.getChild("wd:Organization_Reference_ID") != null?organizationData.getChild("wd:Organization_Reference_ID").getValue().trim():"";
																		 if(payGroupId.contains(","))
																		 {
																			 payGroupId = payGroupId.replaceAll(",", "|");
																		 }
																		 if(payGroupIdArr.equals(""))
																		 {
																			 payGroupIdArr = payGroupId;
																		 }
																		 else
																		 {
																			 payGroupIdArr = payGroupIdArr + "~" + payGroupId;
																		 }
																	 }
																 }
															 }
														 }
														 else
														 {
															 payGroupIdArr = "";
														 }
													 }
												 }
											 }
										 }
											 								 								 
										 headingFromWD = "Employee_ID,Position_ID,Organization_Reference_ID";
										 
										 headerStr = employeeId + "," + positionIdArr + "," + payGroupIdArr;//
										 
										 if(finalStr.equals(""))
										 {
											 finalStr = headingFromWD + "\n" + headerStr;
										 }
										 else
										 {
											 finalStr = finalStr + "\n" + headerStr;
										 } 
								 }
							 }
						 }
					 }
					 columnList.removeAll(errorList);
					 wdCount = columnList.size();
				 }		 					 
				 System.out.println(finalStr);
				 targetContent = finalStr.toString().getBytes();					 					 
				 headingWd = selectColumnMapping(loadCycle, ruleName, "Employee_ID");					 
				 complete = true;
			}			 			 
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}

		return headingWd;
	}
	
	private boolean getSalaryOrHourly(String salHourValue) {
		
		boolean isHourly = false;
		if(salHourValue.contains("_"))
		{
			String [] salHourArr = salHourValue.split("_");
			if(Arrays.asList(salHourArr).contains("Hourly"))
			{
				isHourly = true;
			}
		}
		else
		{
			if(salHourValue.contains("Hourly"))
			{
				isHourly = true;
			}
		}
		return isHourly;
	}
	
	private JSONArray createCSVFromWDPayrollPayeeWork(Tenant tenant, InputStream is, SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd,
			String loadCycle, String ruleName, String client) {

		 targetContent = null;
		 headingFromWD = "";
		 String checkFile = "";
		 String payrollPayeeOngoingJurisdictionID = "";
		 String effectiveDate = "";
		 String inactive = "";
		 String employeeID = "";
		 String company = "";
		 String payrollPayeeOngoingJurisdictionSplitsID = "";
		 String payrollPayeeOngoingJurisdictionSplitsIDArr = "";
		 String taxCode = "";
		 String taxCodeArr = "";
		 String allocationPercent = "";
		 String allocationPercentArr = "";
		 
		 Map<String,String> taxCodeMap = null;
		 Map<String,String> workerMap = null;
		 Map<String,String> companyMap = null;

		 String finalStr = "";
		 String headerStr = "";
		 try 
		 {			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_PAYROLL_PAYEE_WORK_REQUEST_FILE = requestfile.getAbsolutePath();
				 
				 if(errorList.isEmpty())
				 {
					 for(int i = 0; i<columnList.size();i++)
					 {
						 checkFile = addPayrollPayeeWorkToFindError(GET_PAYROLL_PAYEE_WORK_REQUEST_FILE, columnList.get(i), ruleName, "Payroll_Payee_Tax_Data_ID");
						 is = new FileInputStream(checkFile);
					     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     SOAPPart soapPart = soapMessage.getSOAPPart();
					     SOAPEnvelope envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
							  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
					     ByteArrayOutputStream out = new ByteArrayOutputStream();
					     soapMessage.writeTo(out);
					     String strMsgChk = new String(out.toByteArray());	
					     
					     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Payroll";
					     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
						 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
						 out = new ByteArrayOutputStream();
						 soapResponse.writeTo(out);
						 strMsgChk = new String(out.toByteArray(), "utf-8");
						 if(strMsgChk.contains("faultstring"))
						 {
							 errorList.add(columnList.get(i));
						 }
						 else
						 {
							 ReportElement rptElement = XmlParserManager.parseXml(strMsgChk);				 
							 ReportElement pageResults = rptElement.getChild("env:Body")
										.getChild("wd:Get_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_Response")
										.getChild("wd:Response_Results");
							 
							 String result = pageResults.getChild("wd:Total_Results").getValue().trim();
							 if(result.equalsIgnoreCase("0"))
							 {
								 errorList.add(columnList.get(i));
							 }
							 else
							 {
								 ReportElement responseData = rptElement.getChild("env:Body")
											.getChild("wd:Get_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_Response")
											.getChild("wd:Response_Data");
								 
								 List<ReportElement> payrollData = responseData.getChildren("wd:Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election");
									
								 for(ReportElement reportElement : payrollData)
								 {
									 ReportElement jurisdictionData = reportElement.getChild("wd:Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_Data");
									 
									 if(jurisdictionData != null)
									 {
										 payrollPayeeOngoingJurisdictionID = jurisdictionData.getChild("wd:Payroll_Payee_Ongoing_Jurisdiction_ID") != null?jurisdictionData.getChild("wd:Payroll_Payee_Ongoing_Jurisdiction_ID").getValue().trim():"";
										 effectiveDate = jurisdictionData.getChild("wd:Effective_Date") != null?jurisdictionData.getChild("wd:Effective_Date").getValue().trim():"";
										 if(!effectiveDate.isEmpty())
										 {
											 effectiveDate = effectiveDate.substring(0, 10);
										 }
										 inactive = jurisdictionData.getChild("wd:Inactive") != null?jurisdictionData.getChild("wd:Inactive").getValue().trim():"";
										 if(inactive.equalsIgnoreCase("0"))
										 {
											 inactive = "N"; 
										 }
										 else
										 {
											 inactive = "Y";
										 }
										 
										 ReportElement workerRef = jurisdictionData.getChild("wd:Worker_for_Tax_Election_Reference");
										 if(workerRef != null)
										 {
											 List<ReportElement> workerData = workerRef.getChildren("wd:ID");								 
											 for(ReportElement workerElement:workerData)
											 {
												 workerMap = workerElement.getAllAttributes();
												 if(workerMap.get("wd:type").equals("Employee_ID"))
												 {
													 employeeID = workerElement.getValue().trim();
													 System.out.println("employeeID -- "+employeeID);
												 }
											 }
										 }
										 
										 ReportElement companyRef = jurisdictionData.getChild("wd:Company_for_Tax_Election_Reference");
										 if(companyRef != null)
										 {
											 List<ReportElement> companyData = companyRef.getChildren("wd:ID");								 
											 for(ReportElement companyElement:companyData)
											 {
												 companyMap = companyElement.getAllAttributes();
												 if(companyMap.get("wd:type").equals("Company_Reference_ID"))
												 {
													 company = companyElement.getValue().trim();													 
												 }
											 }
										 }
										 else
										 {
											 company = "";
										 }
										 
										 List<ReportElement> jurisdictionSplitDataList = jurisdictionData.getChildren("wd:Payroll_Payee_Ongoing_Jurisdiction_Split");
										 if(jurisdictionSplitDataList != null && jurisdictionSplitDataList.size() >0)
										 {
											 payrollPayeeOngoingJurisdictionSplitsIDArr = "";
											 taxCodeArr = "";
											 allocationPercentArr = "";
											 
											 for(ReportElement jurisdictionSplitData : jurisdictionSplitDataList)
											 {
												 payrollPayeeOngoingJurisdictionSplitsID = jurisdictionSplitData.getChild("wd:Payroll_Payee_Ongoing_Jurisdiction_Splits_ID") != null?jurisdictionSplitData.getChild("wd:Payroll_Payee_Ongoing_Jurisdiction_Splits_ID").getValue().trim():"";
												 if(payrollPayeeOngoingJurisdictionSplitsIDArr.equals(""))
												 {
													 payrollPayeeOngoingJurisdictionSplitsIDArr = payrollPayeeOngoingJurisdictionSplitsID;
												 }
												 else
												 {
													 payrollPayeeOngoingJurisdictionSplitsIDArr = payrollPayeeOngoingJurisdictionSplitsIDArr + "~" + payrollPayeeOngoingJurisdictionSplitsID;
												 }
												 
												 ReportElement stateRef = jurisdictionSplitData.getChild("wd:State_Reference");
												 if(stateRef != null)
												 {
													 List<ReportElement> taxCodeData = stateRef.getChildren("wd:ID");								 
													 for(ReportElement taxCodeElement:taxCodeData)
													 {
														 taxCodeMap = taxCodeElement.getAllAttributes();
														 if(taxCodeMap.get("wd:type").equals("Payroll_State_Authority_Tax_Code"))
														 {
															 taxCode = taxCodeElement.getValue().trim();
															 //taxCode = getTacCodeFromStr(taxCode);
															 if(taxCodeArr.equals(""))
															 {
																 taxCodeArr = taxCode;
															 }
															 else
															 {
																 taxCodeArr = taxCodeArr + "~" + taxCode;
															 }
														 }
													 }
												 }
												 else
												 {
													 taxCodeArr = "";
												 }
												 
												 allocationPercent = jurisdictionSplitData.getChild("wd:Allocation_Percent") != null?jurisdictionSplitData.getChild("wd:Allocation_Percent").getValue().trim():"";
												 if(allocationPercentArr.equals(""))
												 {
													 allocationPercentArr = allocationPercent;
												 }
												 else
												 {
													 allocationPercentArr = allocationPercentArr + "~" + allocationPercent;
												 }
											 }
										 }
										 
									 }
									 else
									 {
										 payrollPayeeOngoingJurisdictionID = "";
										 effectiveDate = "";
										 inactive = "";
										 employeeID = "";
										 company = "";
										 payrollPayeeOngoingJurisdictionSplitsIDArr = "";
										 taxCodeArr = "";
										 allocationPercentArr = "";
									 }
											 								 								 
									 headingFromWD = "Payroll_Payee_Ongoing_Jurisdiction_ID,Employee_ID,Company,Effective_Date,Inactive,Payroll_Payee_Ongoing_Jurisdiction_Splits_ID,Tax_Code,Allocation_Percent";
									 
									 headerStr = payrollPayeeOngoingJurisdictionID + "," + employeeID + "," + company + "," + effectiveDate + "," + inactive + "," + payrollPayeeOngoingJurisdictionSplitsIDArr + "," + taxCodeArr + "," + allocationPercentArr;
									 
									 if(finalStr.equals(""))
									 {
										 finalStr = headingFromWD + "\n" + headerStr;
									 }
									 else
									 {
										 finalStr = finalStr + "\n" + headerStr;
									 } 
								 }
							 }
						 }
					 }
					 columnList.removeAll(errorList);
					 wdCount = columnList.size();
				 }		 					 
				 System.out.println(finalStr);
				 targetContent = finalStr.toString().getBytes();					 					 
				 headingWd = selectColumnMapping(loadCycle, ruleName, "Payroll_Payee_Ongoing_Jurisdiction_ID");					 
				 complete = true;
			}			 			 
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}

		return headingWd;
	}
	
	private JSONArray createCSVFromWDPayrollHistoryPayment(Tenant tenant, InputStream is, SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd,
			String loadCycle, String ruleName, String client) {

		 targetContent = null;
		 headingFromWD = "";
		 String checkFile = "";
		
		 String employeeId = "";
		 String WID = "";
		 String company = "";
		 String amount = "";
		 String taxableWages = "";
		 String subjectWages = "";
		 String companyArr = "";
		 String amountArr = "";
		 String taxableWagesArr = "";
		 String subjectWagesArr = "";
		 
		 Map<String,String> widMap = null;

		 String finalStr = "";
		 String headerStr = "";
		 String reportURL = "";
		 
		 try 
		 {			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_PAYROLL_HISTORY_PAYMENT_REQUEST_FILE = requestfile.getAbsolutePath();
				 
				 if(errorList.isEmpty())
				 {
					 for(int i = 0; i<columnList.size();i++)
					 {
						 checkFile = addWorkerIdListToFindError(GET_PAYROLL_HISTORY_PAYMENT_REQUEST_FILE, columnList.get(i), ruleName, "Employee_ID");
						 is = new FileInputStream(checkFile);
					     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     SOAPPart soapPart = soapMessage.getSOAPPart();
					     SOAPEnvelope envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
							  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
					     ByteArrayOutputStream out = new ByteArrayOutputStream();
					     soapMessage.writeTo(out);
					     String strMsgChk = new String(out.toByteArray());	
					     
					     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
					     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
						 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
						 out = new ByteArrayOutputStream();
						 soapResponse.writeTo(out);
						 strMsgChk = new String(out.toByteArray(), "utf-8");
						 if(strMsgChk.contains("faultstring"))
						 {
							 errorList.add(columnList.get(i)) ;
						 }
						 else
						 {
							 ReportElement rptElement = XmlParserManager.parseXml(strMsgChk);				 
							 ReportElement pageResults = rptElement.getChild("env:Body")
										.getChild("wd:Get_Workers_Response")
										.getChild("wd:Response_Results");
							 
							 String result = pageResults.getChild("wd:Total_Results").getValue().trim();
							 if(result.equalsIgnoreCase("0"))
							 {
								 errorList.add(columnList.get(i));
							 }
							 else
							 {
								 ReportElement responseData = rptElement.getChild("env:Body")
											.getChild("wd:Get_Workers_Response")
											.getChild("wd:Response_Data");
								 
								 List<ReportElement> workerData = responseData.getChildren("wd:Worker");
									
								 for(ReportElement reportElement : workerData)
								 {
									 ReportElement element1 = reportElement.getChild("wd:Worker_Data");
						        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
						        		System.out.println("employeeId--"+ employeeId);
						        		
						        		ReportElement widRef = reportElement.getChild("wd:Worker_Reference");
										 if(widRef != null)
										 {
											 List<ReportElement> idList = widRef.getChildren("wd:ID");
											 for(ReportElement idElement:idList)
											 {
												 widMap = idElement.getAllAttributes();
												 if(widMap.get("wd:type").equals("WID"))
												 {
													 WID = idElement.getValue().trim();
												 }
											 }
										 }
										 else
										 {
											 WID = "";
										 }
										
										 reportURL = "https://" + tenant.getTenantUrl() + "customreport2/" + tenant.getTenantName() + "/ISU_Verify_Payroll/" + "IBM_PAY_Validate_Payroll_History?Include_Subordinate_Organizations=0&Periods!WID=d2a9282b61ee0100dd1afd01d0850001!d2a9282b61ee0100dd1aadcac6740001&Pay_Run_Groups_and_or_Pay_Group_Details!WID=61f7ea2a3f620100e00bca48dd170000!61f7ea2a3f620100e0326556e2480000&Worker!WID=" + WID;
										 
										    JSONArray jArr = createWorkerHistoryData(reportURL);
										    if(jArr != null && jArr.length() >0)
											{ 
										    	 companyArr = "";
												 amountArr = "";
												 taxableWagesArr = "";
												 subjectWagesArr = "";
												 for(int ii = 0; ii<jArr.length(); ii++) 
											     {
													JSONObject objects = jArr.getJSONObject(ii);
													company = objects.isNull("company")?"":objects.getString("company");
													if(companyArr.equals(""))
													{
														companyArr = company;
													}
													else
													{
														if(!company.isEmpty())
														{
															companyArr = companyArr + "~" + company;
														}
													}
													amount = objects.isNull("amount")?"":objects.getString("amount");
													if(amountArr.equals(""))
													{
														amountArr = amount;
													}
													else
													{
														if(!amount.isEmpty())
														{
															amountArr = amountArr + "~" + amount;
														}
													}
													taxableWages = objects.isNull("taxableWages")?"":objects.getString("taxableWages");
													if(taxableWagesArr.equals(""))
													{
														taxableWagesArr = taxableWages;
													}
													else
													{
														if(!taxableWages.isEmpty())
														{
															taxableWagesArr = taxableWagesArr + "~" + taxableWages;
														}
													}
													subjectWages = objects.isNull("subjectWages")?"":objects.getString("subjectWages");
													if(subjectWagesArr.equals(""))
													{
														subjectWagesArr = subjectWages;
													}
													else
													{
														if(!subjectWages.isEmpty())
														{
															subjectWagesArr = subjectWagesArr + "~" + subjectWages;
														}
													}
											     }
											 }
											 else
											 {
												 companyArr = "";
												 amountArr = "";
												 taxableWagesArr = "";
												 subjectWagesArr = "";
												 errorList.add(columnList.get(i));
											 }				
											 								 								 
										 headingFromWD = "Employee_ID,Company,Amount,Taxable_Wages,Subject_Wages";
								        	headerStr = employeeId + "," + companyArr + "," + amountArr + "," + taxableWagesArr + "," + subjectWagesArr;						 		  
										 
										 if(finalStr.equals(""))
										 {
											 finalStr = headingFromWD + "\n" + headerStr;
										 }
										 else
										 {
											 finalStr = finalStr + "\n" + headerStr;
										 }
								 }
							 }
						 }
					 }
					 columnList.removeAll(errorList);
					 wdCount = columnList.size();
				 }		 					 
				 System.out.println(finalStr);
				 targetContent = finalStr.toString().getBytes();					 					 
				 headingWd = selectColumnMapping(loadCycle, ruleName, "Employee_ID");					 
				 complete = true;
			}			 			 
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}

		return headingWd;
	}
	
	private JSONArray createCSVFromWDPayrollPayeeFICA(Tenant tenant, InputStream is, SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd,
			String loadCycle, String ruleName, String client) {

		 targetContent = null;
		 headingFromWD = "";
		 String checkFile = "";
		 String employeeID = "";
		 String effectiveAsOff = "";
		 //String effectiveAsOffArr = "";
		 String exemptMedicare = "";
		 String exemptMedicareArr = "";
		 String medicareReasonID = "";
		 String medicareReasonIDArr = "";
		 String exemptOASDI = "";
		 String exemptOASDIArr = "";
		 String OASDIReasonID = "";
		 String OASDIReasonIDArr = "";
		 
		 Map<String,String> medicareReasonMap = null;
		 Map<String,String> OASDIReasonMap = null;

		 String finalStr = "";
		 String headerStr = "";
		 try 
		 {			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_PAYROLL_PAYEE_FICA_REQUEST_FILE = requestfile.getAbsolutePath();
				 
				 if(errorList.isEmpty())
				 {
					 for(int i = 0; i<columnList.size();i++)
					 {
						 checkFile = addPayrollPayeeFICAToFindError(GET_PAYROLL_PAYEE_FICA_REQUEST_FILE, columnList.get(i), ruleName, "Employee_ID");
						 is = new FileInputStream(checkFile);
					     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     SOAPPart soapPart = soapMessage.getSOAPPart();
					     SOAPEnvelope envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
							  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
					     ByteArrayOutputStream out = new ByteArrayOutputStream();
					     soapMessage.writeTo(out);
					     String strMsgChk = new String(out.toByteArray());	
					     
					     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Payroll";
					     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
						 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
						 out = new ByteArrayOutputStream();
						 soapResponse.writeTo(out);
						 strMsgChk = new String(out.toByteArray(), "utf-8");
						 if(strMsgChk.contains("faultstring"))
						 {
							 errorList.add(columnList.get(i));
						 }
						 else
						 {
							 ReportElement rptElement = XmlParserManager.parseXml(strMsgChk);				 
							 ReportElement pageResults = rptElement.getChild("env:Body")
										.getChild("wd:Get_Payroll_Payee_FICAs_Response")
										.getChild("wd:Response_Results");
							 
							 String result = pageResults.getChild("wd:Total_Results").getValue().trim();
							 if(result.equalsIgnoreCase("0"))
							 {
								 errorList.add(columnList.get(i));
							 }
							 else
							 {
								 ReportElement responseData = rptElement.getChild("env:Body")
											.getChild("wd:Get_Payroll_Payee_FICAs_Response")
											.getChild("wd:Response_Data");
								 
								 List<ReportElement> payrollData = responseData.getChildren("wd:Payroll_Payee_FICA");
								 
								 exemptMedicareArr = "";
								 medicareReasonIDArr = "";
								 exemptOASDIArr = "";
								 OASDIReasonIDArr = "";
								 
								 for(ReportElement reportElement : payrollData)
								 {									 																  
									 ReportElement ficaData = reportElement.getChild("wd:Payroll_Payee_FICA_Data");
									 
									 if(ficaData != null)
									 {
										 employeeID = columnList.get(i);
										 
										 effectiveAsOff = ficaData.getChild("wd:Effective_As_Of") != null?ficaData.getChild("wd:Effective_As_Of").getValue().trim():"";
										 if(!effectiveAsOff.isEmpty())
										 {
											 effectiveAsOff = effectiveAsOff.substring(0, 10);
										 }
										 /*if(effectiveAsOffArr.equals(""))
										 {
											 effectiveAsOffArr = effectiveAsOff;
										 }
										 else
										 {
											 effectiveAsOffArr = effectiveAsOffArr + "~" + effectiveAsOff;
										 }*/
										 
										 ReportElement medicareData = ficaData.getChild("wd:Medicare_Exempt_Data");
										 if(medicareData != null)
										 {
											 exemptMedicare = medicareData.getChild("wd:Exempt_from_Medicare") != null?medicareData.getChild("wd:Exempt_from_Medicare").getValue().trim():"";
											 if(exemptMedicare.equalsIgnoreCase("1"))
											 {
												 exemptMedicare = "Y";
											 }
											 else
											 {
												 exemptMedicare = "N";
											 }
											 if(exemptMedicareArr.equals(""))
											 {
												 exemptMedicareArr = exemptMedicare;
											 }
											 else
											 {
												 exemptMedicareArr = exemptMedicareArr + "~" + exemptMedicare;
											 }
											 
											 ReportElement medicareReasonRef = medicareData.getChild("wd:Medicare_Reason_for_Exemption_Reference");
											 if(medicareReasonRef != null)
											 {
												 List<ReportElement> medicareReasonData = medicareReasonRef.getChildren("wd:ID");								 
												 for(ReportElement medicareReasonElement:medicareReasonData)
												 {
													 medicareReasonMap = medicareReasonElement.getAllAttributes();
													 if(medicareReasonMap.get("wd:type").equals("Exempt_Reason_ID"))
													 {
														 medicareReasonID = medicareReasonElement.getValue().trim();
														 if(medicareReasonIDArr.equals(""))
														 {
															 medicareReasonIDArr = medicareReasonID;
														 }
														 else
														 {
															 medicareReasonIDArr = medicareReasonIDArr + "~" + medicareReasonID;
														 }
													 }
												 }
											 }
										 }
										 /*else
										 {
											 exemptMedicareArr = "";
											 medicareReasonIDArr = "";
										 }*/
										 
										 ReportElement oasdiData = ficaData.getChild("wd:OASDI_Exempt_Data");
										 if(oasdiData != null)
										 {
											 exemptOASDI = oasdiData.getChild("wd:Exempt_from_OASDI") != null?oasdiData.getChild("wd:Exempt_from_OASDI").getValue().trim():"";
											 if(exemptOASDI.equalsIgnoreCase("1"))
											 {
												 exemptOASDI = "Y";
											 }
											 else
											 {
												 exemptOASDI = "N";
											 }
											 if(exemptOASDIArr.equals(""))
											 {
												 exemptOASDIArr = exemptOASDI;
											 }
											 else
											 {
												 exemptOASDIArr = exemptOASDIArr + "~" + exemptOASDI;
											 }
											 
											 ReportElement oasdiReasonRef = oasdiData.getChild("wd:OASDI_Reason_for_Exemption_Reference");
											 if(oasdiReasonRef != null)
											 {
												 List<ReportElement> oasdiReasonData = oasdiReasonRef.getChildren("wd:ID");								 
												 for(ReportElement oasdiReasonElement:oasdiReasonData)
												 {
													 OASDIReasonMap = oasdiReasonElement.getAllAttributes();
													 if(OASDIReasonMap.get("wd:type").equals("Exempt_Reason_ID"))
													 {
														 OASDIReasonID = oasdiReasonElement.getValue().trim();
														 if(OASDIReasonIDArr.equals(""))
														 {
															 OASDIReasonIDArr = OASDIReasonID;
														 }
														 else
														 {
															 OASDIReasonIDArr = OASDIReasonIDArr + "~" + OASDIReasonID;
														 }
													 }
												 }
											 }
										 }
										 /*else
										 {
											 exemptOASDIArr = "";
											 OASDIReasonIDArr = "";
										 }*/
									 }
									 else
									 {
										 effectiveAsOff = "";
										 exemptMedicareArr = "";
										 medicareReasonIDArr = "";
										 exemptOASDIArr = "";
										 OASDIReasonIDArr = "";
									 }
								 }
								 headingFromWD = "Employee_ID,Effective_As_Of,Exempt_From_Medicare,Medicare_Reason,Exempt_From_OASDI,OASDI_Reason";
								 
								 headerStr = employeeID + "," + effectiveAsOff + "," + exemptMedicareArr + "," + medicareReasonIDArr + "," + exemptOASDIArr + "," + OASDIReasonIDArr;
								 
								 if(finalStr.equals(""))
								 {
									 finalStr = headingFromWD + "\n" + headerStr;
								 }
								 else
								 {
									 finalStr = finalStr + "\n" + headerStr;
								 } 
							 }
						 }
					 }
					 columnList.removeAll(errorList);
					 wdCount = columnList.size();
				 }		 					 
				 System.out.println(finalStr);
				 targetContent = finalStr.toString().getBytes();					 					 
				 headingWd = selectColumnMapping(loadCycle, ruleName, "Employee_ID");					 
				 complete = true;
			}			 			 
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}

		return headingWd;
	}
	
	private JSONArray createCSVFromWDPaycheckDelivery(Tenant tenant, InputStream is, SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd,
			String loadCycle, String ruleName, String client) {

		 targetContent = null;
		 headingFromWD = "";
		 String checkFile = "";
		 String paycheckDeliveryID = "";
		 String employeeID = "";
		 String dateLastUpdated = "";
		 String paycheckDeliveryMethodID = "";
		 String payslipPrintingChoiceID = "";
		 String companyID = "";
		 
		 Map<String,String> workerMap = null;
		 Map<String,String> paycheckDeliveryMap = null;
		 Map<String,String> printingMap = null;
		 Map<String,String> companyMap = null;

		 String finalStr = "";
		 String headerStr = "";
		 try 
		 {			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_PAYROLL_PAYCHECK_DELIVERY_REQUEST_FILE = requestfile.getAbsolutePath();
				 
				 if(errorList.isEmpty())
				 {
					 for(int i = 0; i<columnList.size();i++)
					 {
						 checkFile = addPaycheckDeliveryToFindError(GET_PAYROLL_PAYCHECK_DELIVERY_REQUEST_FILE, columnList.get(i), ruleName, "Paycheck_Delivery_ID");
						 is = new FileInputStream(checkFile);
					     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     SOAPPart soapPart = soapMessage.getSOAPPart();
					     SOAPEnvelope envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
							  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
					     ByteArrayOutputStream out = new ByteArrayOutputStream();
					     soapMessage.writeTo(out);
					     String strMsgChk = new String(out.toByteArray());	
					     
					     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Payroll";
					     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
						 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
						 out = new ByteArrayOutputStream();
						 soapResponse.writeTo(out);
						 strMsgChk = new String(out.toByteArray(), "utf-8");
						 if(strMsgChk.contains("faultstring"))
						 {
							 errorList.add(columnList.get(i));
						 }
						 else
						 {
							 ReportElement rptElement = XmlParserManager.parseXml(strMsgChk);				 
							 ReportElement pageResults = rptElement.getChild("env:Body")
										.getChild("wd:Get_Paycheck_Deliveries_Response")
										.getChild("wd:Response_Results");
							 
							 String result = pageResults.getChild("wd:Total_Results").getValue().trim();
							 if(result.equalsIgnoreCase("0"))
							 {
								 errorList.add(columnList.get(i));
							 }
							 else
							 {
								 ReportElement responseData = rptElement.getChild("env:Body")
											.getChild("wd:Get_Paycheck_Deliveries_Response")
											.getChild("wd:Response_Data");
								 
								 List<ReportElement> payrollData = responseData.getChildren("wd:Paycheck_Delivery");
									
								 for(ReportElement reportElement : payrollData)
								 {
									 ReportElement paycheckData = reportElement.getChild("wd:Paycheck_Delivery_Data");
									 
									 if(paycheckData != null)
									 {
										 paycheckDeliveryID = paycheckData.getChild("wd:Paycheck_Delivery_ID") != null?paycheckData.getChild("wd:Paycheck_Delivery_ID").getValue().trim():"";
										 
										 ReportElement workerRef = paycheckData.getChild("wd:Worker_Reference");
										 if(workerRef != null)
										 {
											 List<ReportElement> workerData = workerRef.getChildren("wd:ID");								 
											 for(ReportElement workerElement:workerData)
											 {
												 workerMap = workerElement.getAllAttributes();
												 if(workerMap.get("wd:type").equals("Employee_ID"))
												 {
													 employeeID = workerElement.getValue().trim();
													 System.out.println("employeeID - "+employeeID);
												 }
											 }
										 }
										 
										 dateLastUpdated = paycheckData.getChild("wd:Date_Last_Updated") != null?paycheckData.getChild("wd:Date_Last_Updated").getValue().trim():"";
										 if(!dateLastUpdated.isEmpty())
										 {
											 dateLastUpdated = dateLastUpdated.substring(0, 10);
										 }
										 
										 ReportElement deliveryMethodRef = paycheckData.getChild("wd:Paycheck_Delivery_Method_Reference");
										 if(deliveryMethodRef != null)
										 {
											 List<ReportElement> deliveryMethodData = deliveryMethodRef.getChildren("wd:ID");								 
											 for(ReportElement deliveryMethodElement:deliveryMethodData)
											 {
												 paycheckDeliveryMap = deliveryMethodElement.getAllAttributes();
												 if(paycheckDeliveryMap.get("wd:type").equals("Paycheck_Delivery_Method_ID"))
												 {
													 paycheckDeliveryMethodID = deliveryMethodElement.getValue().trim();
												 }
											 }
										 }
										 else
										 {
											 paycheckDeliveryMethodID = "";
										 }
										 
										 ReportElement printingRef = paycheckData.getChild("wd:Payslip_Printing_Override_Reference");
										 if(printingRef != null)
										 {
											 List<ReportElement> printingData = printingRef.getChildren("wd:ID");								 
											 for(ReportElement printingElement:printingData)
											 {
												 printingMap = printingElement.getAllAttributes();
												 if(printingMap.get("wd:type").equals("Payslip_Printing_Choice_ID"))
												 {
													 payslipPrintingChoiceID = printingElement.getValue().trim();
												 }
											 }
										 }
										 else
										 {
											 payslipPrintingChoiceID = "";
										 }
										 
										 ReportElement companyRef = paycheckData.getChild("wd:Company_Reference");
										 if(companyRef != null)
										 {
											 List<ReportElement> companyData = companyRef.getChildren("wd:ID");								 
											 for(ReportElement companyElement:companyData)
											 {
												 companyMap = companyElement.getAllAttributes();
												 if(companyMap.get("wd:type").equals("Company_Reference_ID"))
												 {
													 companyID = companyElement.getValue().trim();
												 }
											 }
										 }
										 else
										 {
											 companyID = "";
										 }
									 }
									 else
									 {
										 paycheckDeliveryID = "";
										 employeeID = "";
										 dateLastUpdated = "";
										 paycheckDeliveryMethodID = "";
										 payslipPrintingChoiceID = "";
										 companyID = "";
									 }
											 								 								 
									 headingFromWD = "Paycheck_Delivery_ID,Employee_ID,Date_Last_Updated,Paycheck_Delivery_Method,Payslip_Printing_Override,Company";
									 
									 headerStr = paycheckDeliveryID + "," + employeeID + "," + dateLastUpdated + "," + paycheckDeliveryMethodID + "," + payslipPrintingChoiceID + "," + companyID;
									 
									 if(finalStr.equals(""))
									 {
										 finalStr = headingFromWD + "\n" + headerStr;
									 }
									 else
									 {
										 finalStr = finalStr + "\n" + headerStr;
									 } 
								 }
							 }
						 }
					 }
					 columnList.removeAll(errorList);
					 wdCount = columnList.size();
				 }		 					 
				 System.out.println(finalStr);
				 targetContent = finalStr.toString().getBytes();					 					 
				 headingWd = selectColumnMapping(loadCycle, ruleName, "Paycheck_Delivery_ID");					 
				 complete = true;
			}			 			 
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}

		return headingWd;
	}
	
	private JSONArray createCSVFromWDSubmitPayrollInput(Tenant tenant, InputStream is, SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd,
			String loadCycle, String ruleName, String client) {
		
		 targetContent = null;
		 headingFromWD = "";
		 String checkFile = "";
		 String employeeID = "";
		 String company = "";
		 String ongoingInput = "";
		 String startDate = "";
		 String endDate = "";
		 String amount = "";
		 String percent = "";
		 String adjustment = "";
		 String hours = "";
		 String companyArr = "";
		 String ongoingInputArr = "";
		 String startDateArr = "";
		 String endDateArr = "";
		 String amountArr = "";
		 String percentArr = "";
		 String adjustmentArr = "";
		 String hoursArr = "";
		 
		 Map<String,String> companyMap = null;

		 String finalStr = "";
		 String headerStr = "";
		 try 
		 {			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_PAYROLL_INPUT_REQUEST_FILE = requestfile.getAbsolutePath();
				 
				 if(errorList.isEmpty())
				 {
					 for(int i = 0; i<columnList.size();i++)
					 {
						 checkFile = addSubmitPayrollInputToFindError(GET_PAYROLL_INPUT_REQUEST_FILE, columnList.get(i), ruleName, "Employee_ID");
						 is = new FileInputStream(checkFile);
					     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     SOAPPart soapPart = soapMessage.getSOAPPart();
					     SOAPEnvelope envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
							  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
					     ByteArrayOutputStream out = new ByteArrayOutputStream();
					     soapMessage.writeTo(out);
					     String strMsgChk = new String(out.toByteArray());	
					     
					     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Payroll";
					     //String sourceUrl = "https://wd5-impl-services1.workday.com/ccx/service/Payroll";
					     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
						 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
						 out = new ByteArrayOutputStream();
						 soapResponse.writeTo(out);
						 strMsgChk = new String(out.toByteArray(), "utf-8");
						 if(strMsgChk.contains("faultstring"))
						 {
							 errorList.add(columnList.get(i));
						 }
						 else
						 {
							 ReportElement rptElement = XmlParserManager.parseXml(strMsgChk);				 
							 ReportElement pageResults = rptElement.getChild("env:Body")
										.getChild("wd:Get_Submit_Payroll_Inputs_Response")
										.getChild("wd:Response_Results");
							 
							 String result = pageResults.getChild("wd:Total_Results").getValue().trim();
							 if(result.equalsIgnoreCase("0"))
							 {
								 errorList.add(columnList.get(i));
							 }
							 else
							 {
								 ReportElement responseData = rptElement.getChild("env:Body")
											.getChild("wd:Get_Submit_Payroll_Inputs_Response")
											.getChild("wd:Response_Data");
								 
								 List<ReportElement> payrollDataList = responseData.getChildren("wd:Payroll_Input");
								 if(payrollDataList != null && payrollDataList.size() > 0)
								 {
									 ongoingInputArr = "";
									 companyArr = "";
									 startDateArr = "";
									 endDateArr = "";
									 amountArr = "";
									 percentArr = "";
									 adjustmentArr = "";
									 hoursArr = "";
									 
									 for(ReportElement reportElement : payrollDataList)
									 {
										 ReportElement payrollInputData = reportElement.getChild("wd:Payroll_Input_Data");
										 
										 if(payrollInputData != null)
										 {
											 employeeID = columnList.get(i);
											 System.out.println("employeeID -- "+employeeID);
											 
											 ReportElement companyRef = payrollInputData.getChild("wd:Company_Reference");
											 if(companyRef != null)
											 {
												 List<ReportElement> companyData = companyRef.getChildren("wd:ID");								 
												 for(ReportElement companyElement:companyData)
												 {
													 companyMap = companyElement.getAllAttributes();
													 if(companyMap.get("wd:type").equals("Company_Reference_ID"))
													 {
														 company = companyElement.getValue().trim();
														 if(companyArr.equals(""))
														 {
															 companyArr = company;
														 }
														 else
														 {
															 companyArr = companyArr + "~" + company;
														 }
													 }
												 }
											 }
											 
											 ongoingInput = payrollInputData.getChild("wd:Ongoing_Input") != null?payrollInputData.getChild("wd:Ongoing_Input").getValue().trim():"";
											 if(ongoingInput.equalsIgnoreCase("0"))
											 {
												 ongoingInput = "N" ;
											 }
											 else
											 {
												 ongoingInput = "Y" ;
											 }
											 if(ongoingInputArr.equals(""))
											 {
												 ongoingInputArr = ongoingInput;
											 }
											 else
											 {
												 ongoingInputArr = ongoingInputArr + "~" + ongoingInput;
											 }
											 
											 startDate = payrollInputData.getChild("wd:Start_Date") != null?payrollInputData.getChild("wd:Start_Date").getValue().trim():"";
											 if(!startDate.isEmpty())
											 {
												 startDate = startDate.substring(0, 10);
											 }
											 if(startDateArr.equals(""))
											 {
												 startDateArr = startDate;
											 }
											 else
											 {
												 if(!startDate.isEmpty())
												 {
													 startDateArr = startDateArr + "~" + startDate;
												 }
											 }
											 
											 endDate = payrollInputData.getChild("wd:End_Date") != null?payrollInputData.getChild("wd:End_Date").getValue().trim():"";
											 if(!endDate.isEmpty())
											 {
												 endDate = endDate.substring(0, 10);
											 }
											 if(endDateArr.equals(""))
											 {
												 endDateArr = endDate;
											 }
											 else
											 {
												 if(!endDate.isEmpty())
												 {
													 endDateArr = endDateArr + "~" + endDate;
												 }
											 }
											 
											 amount = payrollInputData.getChild("wd:Amount") != null?payrollInputData.getChild("wd:Amount").getValue().trim():"";
											 if(amountArr.equals(""))
											 {
												 amountArr = amount;
											 }
											 else
											 {
												 if(!amount.isEmpty())
												 {
													 amountArr = amountArr + "~" + amount;
												 }
											 }
											 
											 percent = payrollInputData.getChild("wd:Rate") != null?payrollInputData.getChild("wd:Rate").getValue().trim():"";
											 if(percentArr.equals(""))
											 {
												 percentArr = percent;
											 }
											 else
											 {
												 if(!percent.isEmpty())
												 {
													 percentArr = percentArr + "~" + percent;
												 }
											 }											 
											 
											 adjustment = payrollInputData.getChild("wd:Adjustment") != null?payrollInputData.getChild("wd:Adjustment").getValue().trim():"";
											 if(adjustment.equalsIgnoreCase("0"))
											 {
												 adjustment = "N" ;
											 }
											 else
											 {
												 adjustment = "Y" ;
											 }
											 if(adjustmentArr.equals(""))
											 {
												 adjustmentArr = adjustment;
											 }
											 else
											 {
												 adjustmentArr = adjustmentArr + "~" + adjustment;
											 }
											 
											 hours = payrollInputData.getChild("wd:Hours") != null?payrollInputData.getChild("wd:Hours").getValue().trim():"";
											 if(hoursArr.equals(""))
											 {
												 hoursArr = hours;
											 }
											 else
											 {
												 hoursArr = hoursArr + "~" + hours;
											 }
										 }
												 								 								 
											
									 }
									 headingFromWD = "Employee_ID,Company,Ongoing_Input,Start_Date,End_Date,Amount,Percent,Adjustment,Hours";
									 
									 headerStr = employeeID + "," + companyArr + "," + ongoingInputArr + "," + startDateArr + "," + endDateArr + "," + amountArr + "," + percentArr + "," + adjustmentArr + "," + hoursArr;
									 
									 if(finalStr.equals(""))
									 {
										 finalStr = headingFromWD + "\n" + headerStr;
									 }
									 else
									 {
										 finalStr = finalStr + "\n" + headerStr;
									 }
								 }
							 }
						 }
					 }
					 columnList.removeAll(errorList);
					 wdCount = columnList.size();
				 }		 					 
				 System.out.println(finalStr);
				 targetContent = finalStr.toString().getBytes();					 					 
				 headingWd = selectColumnMapping(loadCycle, ruleName, "Employee_ID");					 
				 complete = true;
			}			 			 
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}

		return headingWd;

	}
	
	private JSONArray createCSVFromWDPayrollDeductionRecipient(Tenant tenant, InputStream is, SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd,
			String loadCycle, String ruleName, String client) {

		 targetContent = null;
		 headingFromWD = "";
		 String checkFile = "";
		 String deductionRecipientID = "";
		 String deductionRecipientName = "";
		 String paymentType = "";
		 String addrLine_1 = "";
		 String addrLine_2 = "";
		 String addrLine_3 = "";
		 String country = "";
		 String municipality = "";
		 String countryRegion = "";
		 String postalCode = "";
		 String bankCountry = "";
		 String bankAccountType = "";
		 String bankName = "";
		 String routingTransmitNo = "";
		 String bankAccountNumber = "";
		 
		 Map<String,String> paymentMap = null;
		 Map<String,String> countryMap = null;
		 Map<String,String> addrLineMap = null;
		 Map<String,String> regionMap = null;
		 Map<String,String> bankCountryMap = null;
		 Map<String,String> accountTypeMap = null;

		 String finalStr = "";
		 String headerStr = "";
		 try 
		 {			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_PAYROLL_DEDUCTION_RECIPIENT_REQUEST_FILE = requestfile.getAbsolutePath();
				 
				 if(errorList.isEmpty())
				 {
					 for(int i = 0; i<columnList.size();i++)
					 {
						 checkFile = addPayrollDeductionToFindError(GET_PAYROLL_DEDUCTION_RECIPIENT_REQUEST_FILE, columnList.get(i), ruleName, "Deduction_Recipient_ID");
						 is = new FileInputStream(checkFile);
					     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     SOAPPart soapPart = soapMessage.getSOAPPart();
					     SOAPEnvelope envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
							  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
					     ByteArrayOutputStream out = new ByteArrayOutputStream();
					     soapMessage.writeTo(out);
					     String strMsgChk = new String(out.toByteArray());	
					     
					     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Payroll";
					     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
						 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
						 out = new ByteArrayOutputStream();
						 soapResponse.writeTo(out);
						 strMsgChk = new String(out.toByteArray(), "utf-8");
						 if(strMsgChk.contains("faultstring"))
						 {
							 errorList.add(columnList.get(i));
						 }
						 else
						 {
							 ReportElement rptElement = XmlParserManager.parseXml(strMsgChk);				 
							 ReportElement pageResults = rptElement.getChild("env:Body")
										.getChild("wd:Get_Payroll_Deduction_Recipients_Response")
										.getChild("wd:Response_Results");
							 
							 String result = pageResults.getChild("wd:Total_Results").getValue().trim();
							 if(result.equalsIgnoreCase("0"))
							 {
								 errorList.add(columnList.get(i));
							 }
							 else
							 {
								 ReportElement responseData = rptElement.getChild("env:Body")
											.getChild("wd:Get_Payroll_Deduction_Recipients_Response")
											.getChild("wd:Response_Data");
								 
								 List<ReportElement> payrollData = responseData.getChildren("wd:Payroll_Deduction_Recipient");
									
								 for(ReportElement reportElement : payrollData)
								 {
									 ReportElement payrollDeductionData = reportElement.getChild("wd:Payroll_Deduction_Recipient_Data");
									 
									 if(payrollDeductionData != null)
									 {										 
										 deductionRecipientID = payrollDeductionData.getChild("wd:Payroll_Deduction_Recipient_ID") != null?payrollDeductionData.getChild("wd:Payroll_Deduction_Recipient_ID").getValue().trim():"";
										 System.out.println("deductionRecipientID - "+deductionRecipientID);
										 deductionRecipientName = payrollDeductionData.getChild("wd:Payroll_Deduction_Recipient_Name") != null?payrollDeductionData.getChild("wd:Payroll_Deduction_Recipient_Name").getValue().trim():"";
										 if(deductionRecipientName.contains(","))
										 {
											 deductionRecipientName = deductionRecipientName.replaceAll(",", "|");
										 }
										 
										 ReportElement paymentRef = payrollDeductionData.getChild("wd:Payment_Type_Reference");
										 if(paymentRef != null)
										 {
											 List<ReportElement> paymentData = paymentRef.getChildren("wd:ID");								 
											 for(ReportElement paymentElement:paymentData)
											 {
												 paymentMap = paymentElement.getAllAttributes();
												 if(paymentMap.get("wd:type").equals("Payment_Type_ID"))
												 {
													 paymentType = paymentElement.getValue().trim();
												 }
											 }
										 }
										 else
										 {
											 paymentType = "";
										 }
										 
										 ReportElement contactData = payrollDeductionData.getChild("wd:Business_Entity_Data")
										 			.getChild("wd:Contact_Data");
										 			
										 if(contactData != null)
										 {
											 ReportElement addressData = contactData.getChild("wd:Address_Data");
											 if(addressData != null)
											 {
												 ReportElement countryRef = addressData.getChild("wd:Country_Reference");
												 if(countryRef != null)
												 {
													 List<ReportElement> countryData = countryRef.getChildren("wd:ID");								 
													 for(ReportElement countryElement:countryData)
													 {
														 countryMap = countryElement.getAllAttributes();
														 if(countryMap.get("wd:type").equals("ISO_3166-1_Alpha-3_Code"))
														 {
															 country = countryElement.getValue().trim();
														 }
													 }
												 }
												 else
												 {
													 country = "";
												 }
												 
												 List<ReportElement> addrLineData = addressData.getChildren("wd:Address_Line_Data");
												 if(addrLineData != null)
												 {
													 addrLine_1 = "";
													 addrLine_2 = "";
													 addrLine_3 = "";
													 for(ReportElement addrLineElement:addrLineData)
													 {
														 addrLineMap = addrLineElement.getAllAttributes();
														 if(addrLineMap.get("wd:Type").equals("ADDRESS_LINE_1"))
														 {
															addrLine_1 =  addrLineElement.getValue().trim();
															if(addrLine_1.contains(","))
															{
																addrLine_1 = addrLine_1.replaceAll(",", "|");
															}
														 }
														 if(addrLineMap.get("wd:Type").equals("ADDRESS_LINE_2"))
														 {
															addrLine_2 =  addrLineElement.getValue().trim();
															if(addrLine_2.contains(","))
															{
																addrLine_2 = addrLine_2.replaceAll(",", "|");
															}
														 }
														 if(addrLineMap.get("wd:Type").equals("ADDRESS_LINE_3"))
														 {
															addrLine_3 =  addrLineElement.getValue().trim();
															if(addrLine_3.contains(","))
															{
																addrLine_3 = addrLine_3.replaceAll(",", "|");
															}	
														 }
													 }
												 }
												 
												 municipality = addressData.getChild("wd:Municipality") != null?addressData.getChild("wd:Municipality").getValue().trim():"";
												 if(municipality.contains(","))
												 {
													 municipality = municipality.replaceAll(",", "|");
												 }
												 
												 ReportElement regionRef = addressData.getChild("wd:Country_Region_Reference");
												 if(regionRef != null)
												 {
													 List<ReportElement> regionData = regionRef.getChildren("wd:ID");								 
													 for(ReportElement regionElement:regionData)
													 {
														 regionMap = regionElement.getAllAttributes();
														 if(regionMap.get("wd:type").equals("Country_Region_ID"))
														 {
															 countryRegion = regionElement.getValue().trim();
														 }
													 }
												 }
												 else
												 {
													 countryRegion = "";
												 }
												 
												 postalCode = addressData.getChild("wd:Postal_Code") != null?addressData.getChild("wd:Postal_Code").getValue().trim():"";
											 }
										 }
										 else
										 {
											 country = "";
											 addrLine_1 = "";
											 addrLine_2 = "";
											 addrLine_3 = "";
											 municipality = "";
											 countryRegion = "";
											 postalCode = ""; 
										 }
										 
										 ReportElement accountData = payrollDeductionData.getChild("wd:Settlement_Account_Data");
										 if(accountData != null)
										 {
											 ReportElement countryBankRef = accountData.getChild("wd:Country_Reference");
											 if(countryBankRef != null)
											 {
												 List<ReportElement> countryBankData = countryBankRef.getChildren("wd:ID");								 
												 for(ReportElement countryBankElement:countryBankData)
												 {
													 bankCountryMap = countryBankElement.getAllAttributes();
													 if(bankCountryMap.get("wd:type").equals("ISO_3166-1_Alpha-3_Code"))
													 {
														 bankCountry = countryBankElement.getValue().trim();
													 }
												 }
											 }
											 else
											 {
												 bankCountry = "";
											 }
											 
											 ReportElement accountTypeRef = accountData.getChild("wd:Bank_Account_Type_Reference");
											 if(accountTypeRef != null)
											 {
												 List<ReportElement> accountTypekData = accountTypeRef.getChildren("wd:ID");								 
												 for(ReportElement accountTypeElement:accountTypekData)
												 {
													 accountTypeMap = accountTypeElement.getAllAttributes();
													 if(accountTypeMap.get("wd:type").equals("Bank_Account_Type_Code"))
													 {
														 bankAccountType = accountTypeElement.getValue().trim();
													 }
												 }
											 }
											 else
											 {
												 bankAccountType = "";
											 }
											 
											 bankName = accountData.getChild("wd:Bank_Name") != null?accountData.getChild("wd:Bank_Name").getValue().trim():"";
											 if(bankName.contains(","))
											 {
												 bankName = bankName.replaceAll(",", "|");
											 }
											 routingTransmitNo = accountData.getChild("wd:Routing_Transit_Number") != null?accountData.getChild("wd:Routing_Transit_Number").getValue().trim():"";
											 bankAccountNumber = accountData.getChild("wd:Bank_Account_Number") != null?accountData.getChild("wd:Bank_Account_Number").getValue().trim():"";
										 }
										 else
										 {
											 bankCountry = "";
											 bankAccountType = "";
											 bankName = "";
											 routingTransmitNo = "";
											 bankAccountNumber = "";
										 }
									 }
									 else
									 {
										 deductionRecipientID = "";
										 deductionRecipientName = "";
										 paymentType = "";
										 country = "";
										 addrLine_1 = "";
										 addrLine_2 = "";
										 addrLine_3 = "";
										 municipality = "";
										 countryRegion = "";
										 postalCode = "";
										 bankCountry = "";
										 bankAccountType = "";
										 bankName = "";
										 routingTransmitNo = "";
										 bankAccountNumber = "";
									 }
											 								 								 
									 headingFromWD = "Deduction_Recipient_ID,Deduction_Recipient_Name,Payment_Type,Country,Address_Line1,Address_Line2,Address_Line3,Municipality,Country_Region,"
									 				+ "Postal_Code,Bank_Country,Bank_Account_Type,Bank_Name,Routing_Transmit_Number,Bank_Account_Number";
									 
									 headerStr = deductionRecipientID + "," + deductionRecipientName + "," + paymentType + "," + country + "," + addrLine_1 + "," + addrLine_2 + "," + addrLine_3
											 	+ "," + municipality + "," + countryRegion + "," + postalCode + "," + bankCountry + "," + bankAccountType + "," + bankName + "," + routingTransmitNo + "," + bankAccountNumber;
									 
									 if(finalStr.equals(""))
									 {
										 finalStr = headingFromWD + "\n" + headerStr;
									 }
									 else
									 {
										 finalStr = finalStr + "\n" + headerStr;
									 } 
								 }
							 }
						 }
					 }
					 columnList.removeAll(errorList);
					 wdCount = columnList.size();
				 }		 					 
				 System.out.println(finalStr);
				 targetContent = finalStr.toString().getBytes();					 					 
				 headingWd = selectColumnMapping(loadCycle, ruleName, "Deduction_Recipient_ID");					 
				 complete = true;
			}			 			 
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}

		return headingWd;
	}
	
	private JSONArray createCSVFromWDPayrollWithholdingOrder(Tenant tenant, InputStream is, SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd,
			String loadCycle, String ruleName, String client) {

		 targetContent = null;
		 headingFromWD = "";
		 String checkFile = "";
		 String employeeID = "";
		 String company = "";
		 String withholdingOrderType = "";
		 String additionalWithholdingNumber = "";
		 String withholdingOrderCase = "";
		 String orderDate = "";
		 String receivedDate = "";
		 String beginDate = "";
		 String endDate = "";
		 String withholdingOrderAmountType = "";
		 String withholdingOrderAmount = "";
		 String withholdingOrderPercent = "";
		 String payPeriodFrequency = "";
		 String totalDebtAmount = "";
		 String monthlyLimit = "";
		 String issueIn = "";
		 String deductionRecipient = "";
		 String orderFromAmount = "";
		 String payPeriodAmtOverride = "";
		 String companyArr = "";
		 String withholdingOrderTypeArr = "";
		 String additionalWithholdingNumberArr = "";
		 String withholdingOrderCaseArr = "";
		 String orderDateArr = "";
		 String receivedDateArr = "";
		 String beginDateArr = "";
		 String endDateArr = "";
		 String withholdingOrderAmountTypeArr = "";
		 String withholdingOrderAmountArr = "";
		 String withholdingOrderPercentArr = "";
		 String payPeriodFrequencyArr = "";
		 String totalDebtAmountArr = "";
		 String monthlyLimitArr = "";
		 String issueInArr = "";
		 String deductionRecipientArr = "";
		 String supportType = "";
		 String arrearsOver12Weeks = "";
		 String orderFromAmountArr = "";
		 String payPeriodAmtOverrideArr = "";
		 String supportTypeArr = "";
		 String arrearsOver12WeeksArr = "";
		 
		 Map<String,String> companyMap = null;
		 Map<String,String> withOrderTypeMap = null;
		 Map<String,String> withOrderCaseMap = null;
		 Map<String,String> withOrderAmountMap = null;
		 Map<String,String> payPeriodFreqMap = null;
		 Map<String,String> issueInMap = null;
		 Map<String,String> deductionRecipientMap = null;
		 Map<String,String> supportTypeMap = null;

		 String finalStr = "";
		 String headerStr = "";
		 try 
		 {			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_PAYROLL_WITHHOLDING_ORDER_REQUEST_FILE = requestfile.getAbsolutePath();
				 
				 if(errorList.isEmpty())
				 {
					 for(int i = 0; i<columnList.size();i++)
					 {
						 checkFile = addPayrollWithholdingOrderToFindError(GET_PAYROLL_WITHHOLDING_ORDER_REQUEST_FILE, columnList.get(i), ruleName, "Employee_ID");
						 is = new FileInputStream(checkFile);
					     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     SOAPPart soapPart = soapMessage.getSOAPPart();
					     SOAPEnvelope envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
							  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
					     ByteArrayOutputStream out = new ByteArrayOutputStream();
					     soapMessage.writeTo(out);
					     String strMsgChk = new String(out.toByteArray());	
					     
					     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Payroll";
					     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
						 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
						 out = new ByteArrayOutputStream();
						 soapResponse.writeTo(out);
						 strMsgChk = new String(out.toByteArray(), "utf-8");
						 if(strMsgChk.contains("faultstring"))
						 {
							 errorList.add(columnList.get(i));
						 }
						 else
						 {
							 ReportElement rptElement = XmlParserManager.parseXml(strMsgChk);				 
							 ReportElement pageResults = rptElement.getChild("env:Body")
										.getChild("wd:Get_Payroll_Involuntary_Withholding_Orders_Response")
										.getChild("wd:Response_Results");
							 
							 String result = pageResults.getChild("wd:Total_Results").getValue().trim();
							 if(result.equalsIgnoreCase("0"))
							 {
								 errorList.add(columnList.get(i));
							 }
							 else
							 {
								 ReportElement responseData = rptElement.getChild("env:Body")
											.getChild("wd:Get_Payroll_Involuntary_Withholding_Orders_Response")
											.getChild("wd:Response_Data");
								 
								 List<ReportElement> payrollDataList = responseData.getChildren("wd:Payroll_Involuntary_Withholding_Order");
								 if(payrollDataList != null && payrollDataList.size() > 0)
								 {
									 companyArr = "";
									 withholdingOrderTypeArr = "";
									 additionalWithholdingNumberArr = "";
									 withholdingOrderCaseArr = "";
									 orderDateArr = "";
									 receivedDateArr = "";
									 beginDateArr = "";
									 endDateArr = "";
									 withholdingOrderAmountTypeArr = "";
									 withholdingOrderAmountArr = "";
									 withholdingOrderPercentArr = "";
									 payPeriodFrequencyArr = "";
									 totalDebtAmountArr = "";
									 monthlyLimitArr = "";
									 issueInArr = "";
									 deductionRecipientArr = "";
									 orderFromAmountArr = "";
									 payPeriodAmtOverrideArr = "";
									 supportTypeArr = "";
									 arrearsOver12WeeksArr = "";
									 
									 for(ReportElement reportElement : payrollDataList)
									 {
										 ReportElement withholdingOrderData = reportElement.getChild("wd:Payroll_Involuntary_Withholding_Order_Data");
										 
										 if(withholdingOrderData != null)
										 {
											 employeeID = columnList.get(i);
											 System.out.println("employeeID -- "+employeeID);
											 
											 ReportElement companyRef = withholdingOrderData.getChild("wd:Company_Reference");
											 if(companyRef != null)
											 {
												 List<ReportElement> companyData = companyRef.getChildren("wd:ID");								 
												 for(ReportElement companyElement:companyData)
												 {
													 companyMap = companyElement.getAllAttributes();
													 if(companyMap.get("wd:type").equals("Company_Reference_ID"))
													 {
														 company = companyElement.getValue().trim();
														 if(companyArr.equals(""))
														 {
															 companyArr = company;
														 }
														 else
														 {
															 if(!company.isEmpty())
															 {
																 companyArr = companyArr + "~" + company;
															 }
														 }
													 }
												 }
											 }
											 else
											 {
												 companyArr = "";
											 }
											 
											 ReportElement withOrderTypeRef = withholdingOrderData.getChild("wd:Withholding_Order_Type_Reference");
											 if(withOrderTypeRef != null)
											 {
												 List<ReportElement> withOrderTypeData = withOrderTypeRef.getChildren("wd:ID");								 
												 for(ReportElement withOrderTypeElement:withOrderTypeData)
												 {
													 withOrderTypeMap = withOrderTypeElement.getAllAttributes();
													 if(withOrderTypeMap.get("wd:type").equals("Withholding_Order_Type_Code"))
													 {
														 withholdingOrderType = withOrderTypeElement.getValue().trim();
														 if(withholdingOrderTypeArr.equals(""))
														 {
															 withholdingOrderTypeArr = withholdingOrderType;
														 }
														 else
														 {
															 if(!withholdingOrderType.isEmpty())
															 {
																 withholdingOrderTypeArr = withholdingOrderTypeArr + "~" + withholdingOrderType;
															 }
														 }
													 }
												 }
											 }
											 else
											 {
												 withholdingOrderTypeArr = "";
											 }
											 
											 additionalWithholdingNumber = withholdingOrderData.getChild("wd:Withholding_Order_Additional_Order_Number") != null?withholdingOrderData.getChild("wd:Withholding_Order_Additional_Order_Number").getValue().trim():"";
											 if(additionalWithholdingNumberArr.equals(""))
											 {
												 additionalWithholdingNumberArr = additionalWithholdingNumber;
											 }
											 else
											 {
												 if(!additionalWithholdingNumber.isEmpty())
												 {
													 additionalWithholdingNumberArr = additionalWithholdingNumberArr + "~" + additionalWithholdingNumber;
												 }
											 }
											 
											 ReportElement withOrderCaseRef = withholdingOrderData.getChild("wd:Withholding_Order_Case_Reference");
											 if(withOrderCaseRef != null)
											 {
												 List<ReportElement> withOrderCaseData = withOrderCaseRef.getChildren("wd:ID");								 
												 for(ReportElement withOrderCaseElement:withOrderCaseData)
												 {
													 withOrderCaseMap = withOrderCaseElement.getAllAttributes();
													 if(withOrderCaseMap.get("wd:type").equals("Withholding_Order_Case_ID"))
													 {
														 withholdingOrderCase = withOrderCaseElement.getValue().trim();
														 if(withholdingOrderCaseArr.equals(""))
														 {
															 withholdingOrderCaseArr = withholdingOrderCase;
														 }
														 else
														 {
															 if(!withholdingOrderCase.isEmpty())
															 {
																 withholdingOrderCaseArr = withholdingOrderCaseArr + "~" + withholdingOrderCase;
															 }
														 }
													 }
												 }
											 }
											 else
											 {
												 withholdingOrderCaseArr = "";
											 }
											 
											 orderDate = withholdingOrderData.getChild("wd:Order_Date") != null?withholdingOrderData.getChild("wd:Order_Date").getValue().trim():"";
											 if(!orderDate.isEmpty())
											 {
												 orderDate = orderDate.substring(0, 10);
												 if(orderDateArr.equals(""))
												 {
													 orderDateArr = orderDate;
												 }
												 else
												 {
													 if(!orderDate.isEmpty())
													 {
														 orderDateArr = orderDateArr + "~" + orderDate;
													 }
												 }
											 }
											 
											 receivedDate = withholdingOrderData.getChild("wd:Received_Date") != null?withholdingOrderData.getChild("wd:Received_Date").getValue().trim():"";
											 if(!receivedDate.isEmpty())
											 {
												 receivedDate = receivedDate.substring(0, 10);
												 if(receivedDateArr.equals(""))
												 {
													 receivedDateArr = receivedDate;
												 }
												 else
												 {
													 if(!receivedDate.isEmpty())
													 {
														 receivedDateArr = receivedDateArr + "~" + receivedDate;
													 }
												 }
											 }
											 
											 beginDate = withholdingOrderData.getChild("wd:Begin_Date") != null?withholdingOrderData.getChild("wd:Begin_Date").getValue().trim():"";
											 if(!beginDate.isEmpty())
											 {
												 beginDate = beginDate.substring(0, 10);
												 if(beginDateArr.equals(""))
												 {
													 beginDateArr = beginDate;
												 }
												 else
												 {
													 if(!beginDate.isEmpty())
													 {
														 beginDateArr = beginDateArr + "~" + beginDate;
													 }
												 }
											 }
											 
											 endDate = withholdingOrderData.getChild("wd:End_Date") != null?withholdingOrderData.getChild("wd:End_Date").getValue().trim():"";
											 if(!endDate.isEmpty())
											 {
												 endDate = endDate.substring(0, 10);
												 if(endDateArr.equals(""))
												 {
													 endDateArr = endDate;
												 }
												 else
												 {
													 if(!endDate.isEmpty())
													 {
														 endDateArr = endDateArr + "~" + endDate;
													 }
												 }
											 }
											 
											 ReportElement withOrderAmountRef = withholdingOrderData.getChild("wd:Withholding_Order_Amount_Type_Reference");
											 if(withOrderAmountRef != null)
											 {
												 List<ReportElement> withOrderAmountData = withOrderAmountRef.getChildren("wd:ID");								 
												 for(ReportElement withOrderAmountElement:withOrderAmountData)
												 {
													 withOrderAmountMap = withOrderAmountElement.getAllAttributes();
													 if(withOrderAmountMap.get("wd:type").equals("Withholding_Order_Amount_Type_ID"))
													 {
														 withholdingOrderAmountType = withOrderAmountElement.getValue().trim();
														 if(withholdingOrderAmountTypeArr.equals(""))
														 {
															 withholdingOrderAmountTypeArr = withholdingOrderAmountType;
														 }
														 else
														 {
															 if(!withholdingOrderAmountType.isEmpty())
															 {
																 withholdingOrderAmountTypeArr = withholdingOrderAmountTypeArr + "~" + withholdingOrderAmountType;
															 }
														 }
													 }
												 }
											 }
											 else
											 {
												 withholdingOrderAmountTypeArr = "";
											 }
											 
											 withholdingOrderAmount = withholdingOrderData.getChild("wd:Withholding_Order_Amount") != null?withholdingOrderData.getChild("wd:Withholding_Order_Amount").getValue().trim():"";
											 if(withholdingOrderAmountArr.equals(""))
											 {
												 withholdingOrderAmountArr = withholdingOrderAmount;
											 }
											 else
											 {
												 if(!withholdingOrderAmount.isEmpty())
												 {
													 withholdingOrderAmountArr = withholdingOrderAmountArr + "~" + withholdingOrderAmount;
												 }
											 }
											 
											 withholdingOrderPercent = withholdingOrderData.getChild("wd:Withholding_Order_Amount_as_Percent") != null?withholdingOrderData.getChild("wd:Withholding_Order_Amount_as_Percent").getValue().trim():"";
											 if(withholdingOrderPercentArr.equals(""))
											 {
												 withholdingOrderPercentArr = withholdingOrderPercent;
											 }
											 else
											 {
												 if(!withholdingOrderPercent.isEmpty())
												 {
													 withholdingOrderPercentArr = withholdingOrderPercentArr + "~" + withholdingOrderPercent;
												 }
											 }
											 
											 ReportElement payFreqRef = withholdingOrderData.getChild("wd:Pay_Period_Frequency_Reference");
											 if(payFreqRef != null)
											 {
												 List<ReportElement> payFreqData = payFreqRef.getChildren("wd:ID");								 
												 for(ReportElement payFreqElement:payFreqData)
												 {
													 payPeriodFreqMap = payFreqElement.getAllAttributes();
													 if(payPeriodFreqMap.get("wd:type").equals("Frequency_ID"))
													 {
														 payPeriodFrequency = payFreqElement.getValue().trim();
														 if(payPeriodFrequencyArr.equals(""))
														 {
															 payPeriodFrequencyArr = payPeriodFrequency;
														 }
														 else
														 {
															 if(!payPeriodFrequency.isEmpty())
															 {
																 payPeriodFrequencyArr = payPeriodFrequencyArr + "~" + payPeriodFrequency;
															 }
														 }
													 }
												 }
											 }
											 else
											 {
												 payPeriodFrequencyArr = "";
											 }
											 
											 totalDebtAmount = withholdingOrderData.getChild("wd:Total_Debt_Amount") != null?withholdingOrderData.getChild("wd:Total_Debt_Amount").getValue().trim():"";
											 if(totalDebtAmountArr.equals(""))
											 {
												 totalDebtAmountArr = totalDebtAmount;
											 }
											 else
											 {
												 if(!totalDebtAmount.isEmpty())
												 {
													 totalDebtAmountArr = totalDebtAmountArr + "~" + totalDebtAmount;
												 }
											 }
											 
											 monthlyLimit = withholdingOrderData.getChild("wd:Monthly_Limit") != null?withholdingOrderData.getChild("wd:Monthly_Limit").getValue().trim():"";
											 if(monthlyLimitArr.equals(""))
											 {
												 monthlyLimitArr = monthlyLimit;
											 }
											 else
											 {
												 if(!monthlyLimit.isEmpty())
												 {
													 monthlyLimitArr = monthlyLimitArr + "~" + monthlyLimit;
												 }
											 }
											 
											 ReportElement issueInRef = withholdingOrderData.getChild("wd:Issued_in_Reference");
											 if(issueInRef != null)
											 {
												 List<ReportElement> issueInData = issueInRef.getChildren("wd:ID");								 
												 for(ReportElement issueInElement:issueInData)
												 {
													 issueInMap = issueInElement.getAllAttributes();
													 if(issueInMap.get("wd:type").equals("Payroll_State_Authority_Tax_Code"))
													 {
														 issueIn = issueInElement.getValue().trim();
														 if(issueInArr.equals(""))
														 {
															 issueInArr = issueIn;
														 }
														 else
														 {
															 if(!issueIn.isEmpty())
															 {
																 issueInArr = issueInArr + "~" + issueIn;
															 }
														 }
													 }
												 }
											 }
											 else
											 {
												 issueInArr = "";
											 }
											 
											 ReportElement deducReciRef = withholdingOrderData.getChild("wd:Deduction_Recipient_Reference");
											 if(deducReciRef != null)
											 {
												 List<ReportElement> deducReciData = deducReciRef.getChildren("wd:ID");								 
												 for(ReportElement deducReciElement:deducReciData)
												 {
													 deductionRecipientMap = deducReciElement.getAllAttributes();
													 if(deductionRecipientMap.get("wd:type").equals("Deduction_Recipient_ID"))
													 {
														 deductionRecipient = deducReciElement.getValue().trim();
														 if(deductionRecipientArr.equals(""))
														 {
															 deductionRecipientArr = deductionRecipient;
														 }
														 else
														 {
															 if(!deductionRecipient.isEmpty())
															 {
																 deductionRecipientArr = deductionRecipientArr + "~" + deductionRecipient;
															 }
														 }
													 }
												 }
											 }
											 else
											 {
												 deductionRecipientArr = "";
											 }
											 
											 ReportElement supportData = withholdingOrderData.getChild("wd:Support_Order_Data");										 			
											 if(supportData != null)
											 {
												 List<ReportElement> supportDetailDataList = supportData.getChildren("wd:Support_Order_Details_Reference");
												 if(supportDetailDataList != null && supportDetailDataList.size() >0)
												 {													 
													 for(ReportElement supportDetailData : supportDetailDataList)
													 {
														 orderFromAmount = supportDetailData.getChild("wd:Order_Form_Amount") != null?supportDetailData.getChild("wd:Order_Form_Amount").getValue().trim():"";
														 if(orderFromAmountArr.equals(""))
														 {
															 orderFromAmountArr = orderFromAmount;
														 }
														 else
														 {
															 if(!orderFromAmount.isEmpty())
															 {
																 orderFromAmountArr = orderFromAmountArr + "~" + orderFromAmount;
															 }
														 }
														 payPeriodAmtOverride = supportDetailData.getChild("wd:Pay_Period_Amount_Override") != null?supportDetailData.getChild("wd:Pay_Period_Amount_Override").getValue().trim():"";
														 if(payPeriodAmtOverrideArr.equals(""))
														 {
															 payPeriodAmtOverrideArr = payPeriodAmtOverride;
														 }
														 else
														 {
															 if(!payPeriodAmtOverride.isEmpty())
															 {
																 payPeriodAmtOverrideArr = payPeriodAmtOverrideArr + "~" + payPeriodAmtOverride;
															 }
														 }
														 
														 ReportElement supportTypeRef = supportDetailData.getChild("wd:Support_Type_Reference");
														 if(supportTypeRef != null)
														 {
															 List<ReportElement> supportTypeData = supportTypeRef.getChildren("wd:ID");								 
															 for(ReportElement supportTypeElement:supportTypeData)
															 {
																 supportTypeMap = supportTypeElement.getAllAttributes();
																 if(supportTypeMap.get("wd:type").equals("Support_Type"))
																 {
																	 supportType = supportTypeElement.getValue().trim();
																	 if(supportTypeArr.equals(""))
																	 {
																		 supportTypeArr = supportType;
																	 }
																	 else
																	 {
																		 if(!supportType.isEmpty())
																		 {
																			 supportTypeArr = supportTypeArr + "~" + supportType;
																		 }
																	 }
																 }
															 }
														 }
														 else
														 {
															 supportTypeArr = "";
														 }
														 
														 arrearsOver12Weeks = supportDetailData.getChild("wd:Arrears_Over_12_Weeks") != null?supportDetailData.getChild("wd:Arrears_Over_12_Weeks").getValue().trim():"";
														 if(arrearsOver12WeeksArr.equals(""))
														 {
															 arrearsOver12WeeksArr = arrearsOver12Weeks;
														 }
														 else
														 {
															 arrearsOver12WeeksArr = arrearsOver12WeeksArr + "~" + arrearsOver12Weeks;
														 }
													 }
												 }											 
											 }
											 /*else
											 {
												 orderFromAmountArr = "";
												 payPeriodAmtOverrideArr = "";
												 supportTypeArr = "";
												 arrearsOver12WeeksArr = "";
											 }*/
										 }
										 /*else
										 {
											 company = "";
											 withholdingOrderType = "";
											 additionalWithholdingNumber = "";
											 withholdingOrderCase = "";
											 orderDate = "";
											 receivedDate = "";
											 beginDate = "";
											 endDate = "";
											 withholdingOrderAmountType = "";
											 withholdingOrderAmount = "";
											 withholdingOrderPercent = "";
											 payPeriodFrequency = "";
											 totalDebtAmount = "";
											 monthlyLimit = "";
											 issueIn = "";
											 deductionRecipient = ""; 
										 }	*/								  
									 }
									 
									 headingFromWD = "Employee_ID,Company,Withholding_Order_Type,Additional_Withholding_Number,Withholding_Order_Case,Order_Date,Received_Date,Begin_Date,End_Date,Withholding_Order_Amount_Type,"
									 		+ "Withholding_Order_Amount,Withholding_Order_Percent,Pay_Period_Frequency,Total_Debt_Amount,Monthly_Limit,Issue_In,Deduction_Recipient,Order_From_Amount,"
									 		+ "Pay_Period_Amount_Override,Support_Type,Arrears_Over_12Weeks";
									 
									 headerStr = employeeID + "," + companyArr + "," + withholdingOrderTypeArr + "," + additionalWithholdingNumberArr + "," +  withholdingOrderCaseArr + "," + orderDateArr + "," + receivedDateArr + "," + beginDateArr + "," + endDateArr
											 + "," + withholdingOrderAmountTypeArr + "," + withholdingOrderAmountArr + "," + withholdingOrderPercentArr + "," + payPeriodFrequencyArr + "," + totalDebtAmountArr + "," + monthlyLimitArr
											 + "," + issueInArr + "," + deductionRecipientArr + "," + orderFromAmountArr + "," + payPeriodAmtOverrideArr + "," + supportTypeArr + "," + arrearsOver12WeeksArr;
									 
									 if(finalStr.equals(""))
									 {
										 finalStr = headingFromWD + "\n" + headerStr;
									 }
									 else
									 {
										 finalStr = finalStr + "\n" + headerStr;
									 } 									 
								 }
							 }
						 }
					 }
					 columnList.removeAll(errorList);
					 wdCount = columnList.size();
				 }		 					 
				 System.out.println(finalStr);
				 targetContent = finalStr.toString().getBytes();					 					 
				 headingWd = selectColumnMapping(loadCycle, ruleName, "Employee_ID");					 
				 complete = true;
			}			 			 
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}

		return headingWd;
	}
	
	private JSONArray createCSVFromWDW4WithholdingPublic(Tenant tenant, InputStream is, SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd,
			String loadCycle, String ruleName, String client) {

		 targetContent = null;
		 headingFromWD = "";
		 String checkFile = "";
		 String employeeId = "";
		 String company = "";
		 String effectiveAsOf = "";
		 String payrollMaritalStatus = "";
		 String noOfAllowance = "";
		 String totDependenttAmt = "";
		 String otherIncome = "";
		 String deductions = "";
		 String multipleJobSpouseWork = "";
		 String additionalAmount = "";
		 String exempt = "";
		 String nonResidentAlien = "";
		 String exemptFromNRA = "";
		 String lockInLetter = "";
		 String noWageNoTax = "";
		 String companyArr = "";
		 String effectiveAsOfArr = "";
		 String payrollMaritalStatusArr = "";
		 String noOfAllowanceArr = "";
		 String totDependenttAmtArr = "";
		 String otherIncomeArr = "";
		 String deductionsArr = "";
		 String multipleJobSpouseWorkArr = "";
		 String additionalAmountArr = "";
		 String exemptArr = "";
		 String nonResidentAlienArr = "";
		 String exemptFromNRAArr = "";
		 String lockInLetterArr = "";
		 String noWageNoTaxArr = "";
		 
		 Map<String,String> workerMap = null;
		 Map<String,String> companyMap = null;
		 Map<String,String> maritalStatusMap = null;
		 

		 String finalStr = "";
		 String headerStr = "";
		 try 
		 {			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_W4_WITHHOLDING_PUBLIC_REQUEST_FILE = requestfile.getAbsolutePath();
				 
				 if(errorList.isEmpty())
				 {
					 for(int i = 0; i<columnList.size();i++)
					 {
						 checkFile = addFederalTaxElectionToFindError(GET_W4_WITHHOLDING_PUBLIC_REQUEST_FILE, columnList.get(i), ruleName, "Employee_ID");
						 is = new FileInputStream(checkFile);
					     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     SOAPPart soapPart = soapMessage.getSOAPPart();
					     SOAPEnvelope envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
							  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
					     ByteArrayOutputStream out = new ByteArrayOutputStream();
					     soapMessage.writeTo(out);
					     String strMsgChk = new String(out.toByteArray());	
					     
					     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Payroll";
					     //String sourceUrl = "https://wd5-impl-services1.workday.com/ccx/service/Payroll";
					     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
						 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
						 out = new ByteArrayOutputStream();
						 soapResponse.writeTo(out);
						 strMsgChk = new String(out.toByteArray(), "utf-8");
						 if(strMsgChk.contains("faultstring"))
						 {
							 errorList.add(columnList.get(i));
						 }
						 else
						 {
							 ReportElement rptElement = XmlParserManager.parseXml(strMsgChk);				 
							 ReportElement pageResults = rptElement.getChild("env:Body")
										.getChild("wd:Get_Payroll_Federal_W-4_Tax_Elections_Response")
										.getChild("wd:Response_Results");
							 
							 String result = pageResults.getChild("wd:Total_Results").getValue().trim();
							 if(result.equalsIgnoreCase("0"))
							 {
								 errorList.add(columnList.get(i));
							 }
							 else
							 {
								 ReportElement responseData = rptElement.getChild("env:Body")
											.getChild("wd:Get_Payroll_Federal_W-4_Tax_Elections_Response")
											.getChild("wd:Response_Data");
								 
								 List<ReportElement> payrollDataList = responseData.getChildren("wd:Payroll_Federal_W-4_Tax_Election");
								 if(payrollDataList != null && payrollDataList.size()>0)
								 {
									 companyArr = "";
									 effectiveAsOfArr = "";
									 payrollMaritalStatusArr = "";
									 noOfAllowanceArr = "";
									 totDependenttAmtArr = "";
									 otherIncomeArr = "";
									 deductionsArr = "";
									 multipleJobSpouseWorkArr = "";
									 additionalAmountArr = "";
									 exemptArr = "";
									 nonResidentAlienArr = "";
									 exemptFromNRAArr = "";
									 lockInLetterArr = "";
									 noWageNoTaxArr = "";
									 for(ReportElement reportElement : payrollDataList)
									 {									 																  
										 ReportElement taxElectionData = reportElement.getChild("wd:Payroll_Federal_W-4_Tax_Election_Data");
										 
										 if(taxElectionData != null)
										 {
											 ReportElement workerRef = taxElectionData.getChild("wd:Worker_Reference");
											 if(workerRef != null)
											 {
												 List<ReportElement> workerData = workerRef.getChildren("wd:ID");								 
												 for(ReportElement workerElement:workerData)
												 {
													 workerMap = workerElement.getAllAttributes();
													 if(workerMap.get("wd:type").equals("Employee_ID"))
													 {
														 employeeId = workerElement.getValue().trim();
														 System.out.println("employeeID -- "+employeeId);
													 }
												 }
											 }
											 
											 ReportElement companyRef = taxElectionData.getChild("wd:Company_Reference");
											 if(companyRef != null)
											 {
												 List<ReportElement> companyData = companyRef.getChildren("wd:ID");								 
												 for(ReportElement companyElement:companyData)
												 {
													 companyMap = companyElement.getAllAttributes();
													 if(companyMap.get("wd:type").equals("Company_Reference_ID"))
													 {
														 company = companyElement.getValue().trim();
														 if(companyArr.equals(""))
														 {
															 companyArr = company;
														 }
														 else
														 {
															 companyArr = companyArr + "~" + company;
														 }
													 }
												 }
											 }
											 else
											 {
												 companyArr = "";
											 }
											 
											 ReportElement maritalRef = taxElectionData.getChild("wd:Marital_Status_Reference");
											 if(maritalRef != null)
											 {
												 List<ReportElement> marialData = maritalRef.getChildren("wd:ID");								 
												 for(ReportElement marialElement:marialData)
												 {
													 maritalStatusMap = marialElement.getAllAttributes();
													 if(maritalStatusMap.get("wd:type").equals("Payroll_Marital_Status_ID"))
													 {
														 payrollMaritalStatus = marialElement.getValue().trim();
														 if(payrollMaritalStatusArr.equals(""))
														 {
															 payrollMaritalStatusArr = payrollMaritalStatus;
														 }
														 else
														 {
															 payrollMaritalStatusArr = payrollMaritalStatusArr + "~" + payrollMaritalStatus;
														 }
													 }
												 }
											 }
											 else
											 {
												 payrollMaritalStatusArr = "";
											 }
											 
											 effectiveAsOf = taxElectionData.getChild("wd:Effective_as_of") != null?taxElectionData.getChild("wd:Effective_as_of").getValue().trim():"";
											 if(!effectiveAsOf.isEmpty())
											 {
												 effectiveAsOf = effectiveAsOf.substring(0, 10);
												 if(effectiveAsOfArr.equals(""))
												 {
													 effectiveAsOfArr = effectiveAsOf;
												 }
												 else
												 {
													 effectiveAsOfArr = effectiveAsOfArr + "~" + effectiveAsOf;
												 }
											 }
											 
											 noOfAllowance = taxElectionData.getChild("wd:Number_of_Allowances") != null?taxElectionData.getChild("wd:Number_of_Allowances").getValue().trim():"";
											 if(noOfAllowanceArr.equals(""))
											 {
												 noOfAllowanceArr = noOfAllowance;
											 }
											 else
											 {
												 noOfAllowanceArr = noOfAllowanceArr + "~" + noOfAllowance;
											 }
											 totDependenttAmt = taxElectionData.getChild("wd:Total_Dependent_Amount") != null?taxElectionData.getChild("wd:Total_Dependent_Amount").getValue().trim():"";
											 if(totDependenttAmtArr.equals(""))
											 {
												 totDependenttAmtArr = totDependenttAmt;
											 }
											 else
											 {
												 totDependenttAmtArr = totDependenttAmtArr + "~" + totDependenttAmt;
											 }
											 otherIncome = taxElectionData.getChild("wd:Other_Income") != null?taxElectionData.getChild("wd:Other_Income").getValue().trim():"";
											 if(otherIncomeArr.equals(""))
											 {
												 otherIncomeArr = otherIncome;
											 }
											 else
											 {
												 otherIncomeArr = otherIncomeArr + "~" + otherIncome;
											 }
											 deductions = taxElectionData.getChild("wd:Deductions") != null?taxElectionData.getChild("wd:Deductions").getValue().trim():"";
											 if(deductionsArr.equals(""))
											 {
												 deductionsArr = deductions;
											 }
											 else
											 {
												 deductionsArr = deductionsArr + "~" + deductions;
											 }
											 multipleJobSpouseWork = taxElectionData.getChild("wd:Multiple_Jobs_or_Spouse_Works") != null?taxElectionData.getChild("wd:Multiple_Jobs_or_Spouse_Works").getValue().trim():"";
											 if(multipleJobSpouseWork.equalsIgnoreCase("0"))
											 {
												 multipleJobSpouseWork = "N"; 
											 }
											 else
											 {
												 multipleJobSpouseWork = "Y"; 
											 }
											 if(multipleJobSpouseWorkArr.equals(""))
											 {
												 multipleJobSpouseWorkArr = multipleJobSpouseWork;
											 }
											 else
											 {
												 multipleJobSpouseWorkArr = multipleJobSpouseWorkArr + "~" + multipleJobSpouseWork;
											 }
											 additionalAmount = taxElectionData.getChild("wd:Additional_Amount") != null?taxElectionData.getChild("wd:Additional_Amount").getValue().trim():"";
											 if(additionalAmountArr.equals(""))
											 {
												 additionalAmountArr = additionalAmount;
											 }
											 else
											 {
												 additionalAmountArr = additionalAmountArr + "~" + additionalAmount;
											 }
											 exempt = taxElectionData.getChild("wd:Exempt") != null?taxElectionData.getChild("wd:Exempt").getValue().trim():"";
											 if(exempt.equalsIgnoreCase("0"))
											 {
												 exempt = "N"; 
											 }
											 else
											 {
												 exempt = "Y"; 
											 }
											 if(exemptArr.equals(""))
											 {
												 exemptArr = exempt;
											 }
											 else
											 {
												 exemptArr = exemptArr + "~" + exempt;
											 }
											 nonResidentAlien = taxElectionData.getChild("wd:Nonresident_Alien") != null?taxElectionData.getChild("wd:Nonresident_Alien").getValue().trim():"";
											 if(nonResidentAlien.equalsIgnoreCase("0"))
											 {
												 nonResidentAlien = "N"; 
											 }
											 else
											 {
												 nonResidentAlien = "Y"; 
											 }
											 if(nonResidentAlienArr.equals(""))
											 {
												 nonResidentAlienArr = nonResidentAlien;
											 }
											 else
											 {
												 nonResidentAlienArr = nonResidentAlienArr + "~" + nonResidentAlien;
											 }
											 exemptFromNRA = taxElectionData.getChild("wd:Exempt_from_NRA_Additional_Amount") != null?taxElectionData.getChild("wd:Exempt_from_NRA_Additional_Amount").getValue().trim():"";
											 if(exemptFromNRA.equalsIgnoreCase("0"))
											 {
												 exemptFromNRA = "N"; 
											 }
											 else
											 {
												 exemptFromNRA = "Y"; 
											 }
											 if(exemptFromNRAArr.equals(""))
											 {
												 exemptFromNRAArr = exemptFromNRA;
											 }
											 else
											 {
												 exemptFromNRAArr = exemptFromNRAArr + "~" + exemptFromNRA;
											 }
											 lockInLetter = taxElectionData.getChild("wd:Lock_In_Letter") != null?taxElectionData.getChild("wd:Lock_In_Letter").getValue().trim():"";
											 if(lockInLetter.equalsIgnoreCase("0"))
											 {
												 lockInLetter = "N"; 
											 }
											 else
											 {
												 lockInLetter = "Y"; 
											 }
											 if(lockInLetterArr.equals(""))
											 {
												 lockInLetterArr = lockInLetter;
											 }
											 else
											 {
												 lockInLetterArr = lockInLetterArr + "~" + lockInLetter;
											 }
											 noWageNoTax = taxElectionData.getChild("wd:No_Wage_No_Tax") != null?taxElectionData.getChild("wd:No_Wage_No_Tax").getValue().trim():"";
											 if(noWageNoTax.equalsIgnoreCase("0"))
											 {
												 noWageNoTax = "N"; 
											 }
											 else
											 {
												 noWageNoTax = "Y"; 
											 }
											 if(noWageNoTaxArr.equals(""))
											 {
												 noWageNoTaxArr = noWageNoTax;
											 }
											 else
											 {
												 noWageNoTaxArr = noWageNoTaxArr + "~" + noWageNoTax;
											 }
										 }
										 else
										 {
											 companyArr = "";
											 effectiveAsOfArr = "";
											 payrollMaritalStatusArr = "";
											 noOfAllowanceArr = "";
											 totDependenttAmtArr = "";
											 otherIncomeArr = "";
											 deductionsArr = "";
											 multipleJobSpouseWorkArr = "";
											 additionalAmountArr = "";
											 exemptArr = "";
											 nonResidentAlienArr = "";
											 exemptFromNRAArr = "";
											 lockInLetterArr = "";
											 noWageNoTaxArr = "";
											 errorList.add(columnList.get(i));
										 }									 
									 }
								 }
								 else
								 {
									 companyArr = "";
									 effectiveAsOfArr = "";
									 payrollMaritalStatusArr = "";
									 noOfAllowanceArr = "";
									 totDependenttAmtArr = "";
									 otherIncomeArr = "";
									 deductionsArr = "";
									 multipleJobSpouseWorkArr = "";
									 additionalAmountArr = "";
									 exemptArr = "";
									 nonResidentAlienArr = "";
									 exemptFromNRAArr = "";
									 lockInLetterArr = "";
									 noWageNoTaxArr = "";
									 errorList.add(columnList.get(i)); 
								 }
								 headingFromWD = "Employee_ID,Company,Effective_As_Of,Payroll_Marital_Status,No_Of_Allowance,Total_Dependent_Amount,Other_Income,Deductions,Multiple_Job_Spouse_Work,"
							 		       + "Additional_Amount,Exempt,Non_Resident_Alien,Exempt_From_NRA,Lock_In_Letter,No_Wage_No_Tax";
							 
								 headerStr = employeeId + "," + companyArr + "," + effectiveAsOfArr + "," + payrollMaritalStatusArr + "," + noOfAllowanceArr + "," + totDependenttAmtArr + "," + otherIncomeArr
										 + "," + deductionsArr + "," + multipleJobSpouseWorkArr + "," + additionalAmountArr + "," + exemptArr + "," + nonResidentAlienArr + "," + exemptFromNRAArr + "," + lockInLetterArr + "," + noWageNoTaxArr;
								 
								 if(finalStr.equals(""))
								 {
									 finalStr = headingFromWD + "\n" + headerStr;
								 }
								 else
								 {
									 finalStr = finalStr + "\n" + headerStr;
								 } 
							 }
						 }
					 }
					 columnList.removeAll(errorList);
					 wdCount = columnList.size();
				 }		 					 
				 System.out.println(finalStr);
				 targetContent = finalStr.toString().getBytes();					 					 
				 headingWd = selectColumnMapping(loadCycle, ruleName, "Employee_ID");					 
				 complete = true;
			}			 			 
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}

		return headingWd;
	}
	
	private JSONArray createCSVFromWDHomeSDWithholding(Tenant tenant, InputStream is, SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd,
			String loadCycle, String ruleName, String client) {
		 
		 targetContent = null;
		 headingFromWD = "";
		 String checkFile = "";
		
		 String employeeId = "";
		 String WID = "";
		 String company = "";
		 String effectiveAsOf = "";
		 String legacyCode = "";
		 String exemptIndicator = "";
		 
		 Map<String,String> widMap = null;

		 String finalStr = "";
		 String headerStr = "";
		 String reportURL = "";
		 
		 try 
		 {			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_HOME_SD_REQUEST_FILE = requestfile.getAbsolutePath();
				 
				 if(errorList.isEmpty())
				 {
					 for(int i = 0; i<columnList.size();i++)
					 {
						 checkFile = addWorkerIdListToFindError(GET_HOME_SD_REQUEST_FILE, columnList.get(i), ruleName, "Employee_ID");
						 is = new FileInputStream(checkFile);
					     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     SOAPPart soapPart = soapMessage.getSOAPPart();
					     SOAPEnvelope envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
							  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
					     ByteArrayOutputStream out = new ByteArrayOutputStream();
					     soapMessage.writeTo(out);
					     String strMsgChk = new String(out.toByteArray());	
					     
					     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
					     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
						 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
						 out = new ByteArrayOutputStream();
						 soapResponse.writeTo(out);
						 strMsgChk = new String(out.toByteArray(), "utf-8");
						 if(strMsgChk.contains("faultstring"))
						 {
							 errorList.add(columnList.get(i)) ;
						 }
						 else
						 {
							 ReportElement rptElement = XmlParserManager.parseXml(strMsgChk);				 
							 ReportElement pageResults = rptElement.getChild("env:Body")
										.getChild("wd:Get_Workers_Response")
										.getChild("wd:Response_Results");
							 
							 String result = pageResults.getChild("wd:Total_Results").getValue().trim();
							 if(result.equalsIgnoreCase("0"))
							 {
								 errorList.add(columnList.get(i));
							 }
							 else
							 {
								 ReportElement responseData = rptElement.getChild("env:Body")
											.getChild("wd:Get_Workers_Response")
											.getChild("wd:Response_Data");
								 
								 List<ReportElement> workerData = responseData.getChildren("wd:Worker");
									
								 for(ReportElement reportElement : workerData)
								 {
									 ReportElement element1 = reportElement.getChild("wd:Worker_Data");
						        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
						        		System.out.println("employeeId--"+ employeeId);
						        		
						        		ReportElement widRef = reportElement.getChild("wd:Worker_Reference");
										 if(widRef != null)
										 {
											 List<ReportElement> idList = widRef.getChildren("wd:ID");
											 for(ReportElement idElement:idList)
											 {
												 widMap = idElement.getAllAttributes();
												 if(widMap.get("wd:type").equals("WID"))
												 {
													 WID = idElement.getValue().trim();
												 }
											 }
										 }
										 else
										 {
											 WID = "";
										 }
										
										 //reportURL = "https://" + tenant.getTenantUrl() + "customreport2/" + tenant.getTenantName() + "/ISU_Verify_Payroll/" + "USPAY_VALIDATE_Worker_SD_Withholdings?Employee!WID=" + WID;
										 reportURL = "https://" + "wd5-impl-services1.workday.com/ccx/service/" + "customreport2/" + tenant.getTenantName() + "/ISU_Verify_Payroll/" + "USPAY_VALIDATE_Worker_SD_Withholdings?Employee!WID=" + WID;
										 
										    JSONArray jArr = createHomeSDData(reportURL);
										    if(jArr != null && jArr.length() >0)
											{
												 for(int ii = 0; ii<jArr.length(); ii++) 
											     {
													JSONObject objects = jArr.getJSONObject(ii);
													company = objects.isNull("company")?"":objects.getString("company");
													effectiveAsOf = objects.isNull("effectiveAsOf")?"":objects.getString("effectiveAsOf");
													if(!effectiveAsOf.isEmpty())
													{
														effectiveAsOf = effectiveAsOf.substring(0, 10);
													}
													legacyCode = objects.isNull("legacyCode")?"":objects.getString("legacyCode");
													exemptIndicator = objects.isNull("exemptIndicator")?"":objects.getString("exemptIndicator");
													if(exemptIndicator.equalsIgnoreCase("0") || exemptIndicator.equalsIgnoreCase(""))
													{
														exemptIndicator = "N";
													}
													else
													{
														exemptIndicator = "Y";
													}
											     }
											 }
											 else
											 {
												 company = "";
												 effectiveAsOf = "";
												 legacyCode = "";
												 exemptIndicator = "";
												 errorList.add(columnList.get(i));
											 }				
											 								 								 
										 headingFromWD = "Employee_ID,Company,Effective_As_Of,Legacy_Code,Exempt_Indicator";
								        	headerStr = employeeId + "," + company + "," + effectiveAsOf + "," + legacyCode + "," + exemptIndicator;						 		  
										 
										 if(finalStr.equals(""))
										 {
											 finalStr = headingFromWD + "\n" + headerStr;
										 }
										 else
										 {
											 finalStr = finalStr + "\n" + headerStr;
										 }
								 }
							 }
						 }
					 }
					 columnList.removeAll(errorList);
					 wdCount = columnList.size();
				 }		 					 
				 System.out.println(finalStr);
				 targetContent = finalStr.toString().getBytes();					 					 
				 headingWd = selectColumnMapping(loadCycle, ruleName, "Employee_ID");					 
				 complete = true;
			}			 			 
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}

		return headingWd;
	}
	
	private JSONArray createCSVFromWDW2CHomeCountryWithholding(Tenant tenant, InputStream is, SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd,
			String loadCycle, String ruleName, String client) {

		 targetContent = null;
		 headingFromWD = "";
		 String checkFile = "";
		
		 String employeeId = "";
		 String WID = "";
		 String company = "";
		 String effectiveAsOf = "";
		 String legacyCode = "";
		 String addlAmount = "";
		 String inactive = "";
		 
		 Map<String,String> widMap = null;

		 String finalStr = "";
		 String headerStr = "";
		 String reportURL = "";
		 
		 try 
		 {			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_HOME_COUNTRY_REQUEST_FILE = requestfile.getAbsolutePath();
				 
				 if(errorList.isEmpty())
				 {
					 for(int i = 0; i<columnList.size();i++)
					 {
						 checkFile = addWorkerIdListToFindError(GET_HOME_COUNTRY_REQUEST_FILE, columnList.get(i), ruleName, "Employee_ID");
						 is = new FileInputStream(checkFile);
					     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     SOAPPart soapPart = soapMessage.getSOAPPart();
					     SOAPEnvelope envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
							  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
					     ByteArrayOutputStream out = new ByteArrayOutputStream();
					     soapMessage.writeTo(out);
					     String strMsgChk = new String(out.toByteArray());	
					     
					     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
					     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
						 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
						 out = new ByteArrayOutputStream();
						 soapResponse.writeTo(out);
						 strMsgChk = new String(out.toByteArray(), "utf-8");
						 if(strMsgChk.contains("faultstring"))
						 {
							 errorList.add(columnList.get(i)) ;
						 }
						 else
						 {
							 ReportElement rptElement = XmlParserManager.parseXml(strMsgChk);				 
							 ReportElement pageResults = rptElement.getChild("env:Body")
										.getChild("wd:Get_Workers_Response")
										.getChild("wd:Response_Results");
							 
							 String result = pageResults.getChild("wd:Total_Results").getValue().trim();
							 if(result.equalsIgnoreCase("0"))
							 {
								 errorList.add(columnList.get(i));
							 }
							 else
							 {
								 ReportElement responseData = rptElement.getChild("env:Body")
											.getChild("wd:Get_Workers_Response")
											.getChild("wd:Response_Data");
								 
								 List<ReportElement> workerData = responseData.getChildren("wd:Worker");
									
								 for(ReportElement reportElement : workerData)
								 {
									 ReportElement element1 = reportElement.getChild("wd:Worker_Data");
						        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
						        		System.out.println("employeeId--"+ employeeId);
						        		
						        		ReportElement widRef = reportElement.getChild("wd:Worker_Reference");
										 if(widRef != null)
										 {
											 List<ReportElement> idList = widRef.getChildren("wd:ID");
											 for(ReportElement idElement:idList)
											 {
												 widMap = idElement.getAllAttributes();
												 if(widMap.get("wd:type").equals("WID"))
												 {
													 WID = idElement.getValue().trim();
												 }
											 }
										 }
										 else
										 {
											 WID = "";
										 }
										
										 reportURL = "https://" + tenant.getTenantUrl() + "customreport2/" + tenant.getTenantName() + "/ISU_Verify_Payroll/" + "USPAY_VALIDATE_Home_County_Withholdings?Employee!WID=" + WID;
										 
										    JSONArray jArr = createHomeCountryData(reportURL);
										    if(jArr != null && jArr.length() >0)
											{
												 for(int ii = 0; ii<jArr.length(); ii++) 
											     {
													JSONObject objects = jArr.getJSONObject(ii);
													company = objects.isNull("company")?"":objects.getString("company");
													effectiveAsOf = objects.isNull("effectiveAsOf")?"":objects.getString("effectiveAsOf");
													if(!effectiveAsOf.isEmpty())
													{
														effectiveAsOf = effectiveAsOf.substring(0, 10);
													}
													legacyCode = objects.isNull("legacyCode")?"":objects.getString("legacyCode");
													addlAmount = objects.isNull("addlAmount")?"":objects.getString("addlAmount");
													inactive = objects.isNull("inactive")?"":objects.getString("inactive");
													if(inactive.equalsIgnoreCase("0") || inactive.equalsIgnoreCase(""))
													{
														inactive = "";
													}
													else
													{
														inactive = "Yes";
													}
											     }
											 }
											 else
											 {
												 company = "";
												 effectiveAsOf = "";
												 legacyCode = "";
												 addlAmount = "";
												 inactive = "";
												 errorList.add(columnList.get(i));
											 }				
											 								 								 
										 headingFromWD = "Employee_ID,Company,Effective_As_Of,Legacy_Code,Additional_Amount,Inactive";
								        	headerStr = employeeId + "," + company + "," + effectiveAsOf + "," + legacyCode + "," + addlAmount + "," +  inactive;						 		  
										 
										 if(finalStr.equals(""))
										 {
											 finalStr = headingFromWD + "\n" + headerStr;
										 }
										 else
										 {
											 finalStr = finalStr + "\n" + headerStr;
										 }
								 }
							 }
						 }
					 }
					 columnList.removeAll(errorList);
					 wdCount = columnList.size();
				 }		 					 
				 System.out.println(finalStr);
				 targetContent = finalStr.toString().getBytes();					 					 
				 headingWd = selectColumnMapping(loadCycle, ruleName, "Employee_ID");					 
				 complete = true;
			}			 			 
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}

		return headingWd;
	}
	
	private JSONArray createCSVFromWDW2CWorkCountryWithholding(Tenant tenant, InputStream is, SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd,
			String loadCycle, String ruleName, String client) {

		 targetContent = null;
		 headingFromWD = "";
		 String checkFile = "";
		
		 String employeeId = "";
		 String WID = "";
		 String company = "";
		 String effectiveAsOf = "";
		 String legacyCode = "";
		 String addlAmount = "";
		 String inactive = "";
		 
		 Map<String,String> widMap = null;

		 String finalStr = "";
		 String headerStr = "";
		 String reportURL = "";
		 
		 try 
		 {			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_WORK_COUNTRY_REQUEST_FILE = requestfile.getAbsolutePath();
				 
				 if(errorList.isEmpty())
				 {
					 for(int i = 0; i<columnList.size();i++)
					 {
						 checkFile = addWorkerIdListToFindError(GET_WORK_COUNTRY_REQUEST_FILE, columnList.get(i), ruleName, "Employee_ID");
						 is = new FileInputStream(checkFile);
					     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     SOAPPart soapPart = soapMessage.getSOAPPart();
					     SOAPEnvelope envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
							  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
					     ByteArrayOutputStream out = new ByteArrayOutputStream();
					     soapMessage.writeTo(out);
					     String strMsgChk = new String(out.toByteArray());	
					     
					     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
					     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
						 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
						 out = new ByteArrayOutputStream();
						 soapResponse.writeTo(out);
						 strMsgChk = new String(out.toByteArray(), "utf-8");
						 if(strMsgChk.contains("faultstring"))
						 {
							 errorList.add(columnList.get(i)) ;
						 }
						 else
						 {
							 ReportElement rptElement = XmlParserManager.parseXml(strMsgChk);				 
							 ReportElement pageResults = rptElement.getChild("env:Body")
										.getChild("wd:Get_Workers_Response")
										.getChild("wd:Response_Results");
							 
							 String result = pageResults.getChild("wd:Total_Results").getValue().trim();
							 if(result.equalsIgnoreCase("0"))
							 {
								 errorList.add(columnList.get(i));
							 }
							 else
							 {
								 ReportElement responseData = rptElement.getChild("env:Body")
											.getChild("wd:Get_Workers_Response")
											.getChild("wd:Response_Data");
								 
								 List<ReportElement> workerData = responseData.getChildren("wd:Worker");
									
								 for(ReportElement reportElement : workerData)
								 {
									 ReportElement element1 = reportElement.getChild("wd:Worker_Data");
						        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
						        		System.out.println("employeeId--"+ employeeId);
						        		
						        		ReportElement widRef = reportElement.getChild("wd:Worker_Reference");
										 if(widRef != null)
										 {
											 List<ReportElement> idList = widRef.getChildren("wd:ID");
											 for(ReportElement idElement:idList)
											 {
												 widMap = idElement.getAllAttributes();
												 if(widMap.get("wd:type").equals("WID"))
												 {
													 WID = idElement.getValue().trim();
												 }
											 }
										 }
										 else
										 {
											 WID = "";
										 }
										
										 reportURL = "https://" + tenant.getTenantUrl() + "customreport2/" + tenant.getTenantName() + "/ISU_Verify_Payroll/" + "USPAY_VALIDATE_Work_County_Withholdings?Employee!WID=" + WID;
										 
										    JSONArray jArr = createWorkCountryData(reportURL);
										    if(jArr != null && jArr.length() >0)
											{
												 for(int ii = 0; ii<jArr.length(); ii++) 
											     {
													JSONObject objects = jArr.getJSONObject(ii);
													company = objects.isNull("company")?"":objects.getString("company");
													effectiveAsOf = objects.isNull("effectiveAsOf")?"":objects.getString("effectiveAsOf");
													if(!effectiveAsOf.isEmpty())
													{
														effectiveAsOf = effectiveAsOf.substring(0, 10);
													}
													legacyCode = objects.isNull("legacyCode")?"":objects.getString("legacyCode");
													addlAmount = objects.isNull("addlAmount")?"":objects.getString("addlAmount");
													inactive = objects.isNull("inactive")?"":objects.getString("inactive");
													if(inactive.equalsIgnoreCase("0") || inactive.equalsIgnoreCase(""))
													{
														inactive = "";
													}
													else
													{
														inactive = "Yes";
													}
											     }
											 }
											 else
											 {
												 company = "";
												 effectiveAsOf = "";
												 legacyCode = "";
												 addlAmount = "";
												 inactive = "";
												 errorList.add(columnList.get(i));
											 }				
											 								 								 
										 headingFromWD = "Employee_ID,Company,Effective_As_Of,Legacy_Code,Additional_Amount,Inactive";
								        	headerStr = employeeId + "," + company + "," + effectiveAsOf + "," + legacyCode + "," + addlAmount + "," +  inactive;						 		  
										 
										 if(finalStr.equals(""))
										 {
											 finalStr = headingFromWD + "\n" + headerStr;
										 }
										 else
										 {
											 finalStr = finalStr + "\n" + headerStr;
										 }
								 }
							 }
						 }
					 }
					 columnList.removeAll(errorList);
					 wdCount = columnList.size();
				 }		 					 
				 System.out.println(finalStr);
				 targetContent = finalStr.toString().getBytes();					 					 
				 headingWd = selectColumnMapping(loadCycle, ruleName, "Employee_ID");					 
				 complete = true;
			}			 			 
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}

		return headingWd;
	}
	
	private JSONArray createCSVFromWDStateWithholding(Tenant tenant, InputStream is, SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd,
			String loadCycle, String ruleName, String client) {
		
		 targetContent = null;
		 headingFromWD = "";
		 String checkFile = "";
		
		 String employeeId = "";
		 String WID = "";
		 String company = "";
		 String effectiveAsOf = "";
		 String payrollTaxCode = "";
		 String payrollMaritalStatusId = "";
		 //String exemptFromState = "";
		 String noOfAllowance = "";
		 String addlamount = "";
		 String dependentAllowance = "";
		 /*String addlAllowance = "";
		 String marriedFillingJointly = "";
		 String veteranExemption = "";
		 String exemptionDependentComplete = "";
		 String exemptionDependentJointCust = "";
		 String addlPercentPR = "";
		 String entrExemptPR = "";
		 String allowanceOnSplDed = "";*/
		 String rateTableNJ = "";
		 //String exemptForMissi = "";
		 String constantPercentArizona = "";
		 //String headOfHousehold = "";
		 String increaseDecreaseAmt = "";
		 
		 Map<String,String> widMap = null;

		 String finalStr = "";
		 String headerStr = "";
		 String reportURL = "";
		 
		 try 
		 {			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_STATE_REQUEST_FILE = requestfile.getAbsolutePath();
				 
				 if(errorList.isEmpty())
				 {
					 for(int i = 0; i<columnList.size();i++)
					 {
						 checkFile = addWorkerIdListToFindError(GET_STATE_REQUEST_FILE, columnList.get(i), ruleName, "Employee_ID");
						 is = new FileInputStream(checkFile);
					     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     SOAPPart soapPart = soapMessage.getSOAPPart();
					     SOAPEnvelope envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
							  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
					     ByteArrayOutputStream out = new ByteArrayOutputStream();
					     soapMessage.writeTo(out);
					     String strMsgChk = new String(out.toByteArray());	
					     
					     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
					     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
						 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
						 out = new ByteArrayOutputStream();
						 soapResponse.writeTo(out);
						 strMsgChk = new String(out.toByteArray(), "utf-8");
						 if(strMsgChk.contains("faultstring"))
						 {
							 errorList.add(columnList.get(i)) ;
						 }
						 else
						 {
							 ReportElement rptElement = XmlParserManager.parseXml(strMsgChk);				 
							 ReportElement pageResults = rptElement.getChild("env:Body")
										.getChild("wd:Get_Workers_Response")
										.getChild("wd:Response_Results");
							 
							 String result = pageResults.getChild("wd:Total_Results").getValue().trim();
							 if(result.equalsIgnoreCase("0"))
							 {
								 errorList.add(columnList.get(i));
							 }
							 else
							 {
								 ReportElement responseData = rptElement.getChild("env:Body")
											.getChild("wd:Get_Workers_Response")
											.getChild("wd:Response_Data");
								 
								 List<ReportElement> workerData = responseData.getChildren("wd:Worker");
									
								 for(ReportElement reportElement : workerData)
								 {
									 ReportElement element1 = reportElement.getChild("wd:Worker_Data");
						        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
						        		System.out.println("employeeId--"+ employeeId);
						        		
						        		ReportElement widRef = reportElement.getChild("wd:Worker_Reference");
										 if(widRef != null)
										 {
											 List<ReportElement> idList = widRef.getChildren("wd:ID");
											 for(ReportElement idElement:idList)
											 {
												 widMap = idElement.getAllAttributes();
												 if(widMap.get("wd:type").equals("WID"))
												 {
													 WID = idElement.getValue().trim();
												 }
											 }
										 }
										 else
										 {
											 WID = "";
										 }
										
										 reportURL = "https://" + tenant.getTenantUrl() + "customreport2/" + tenant.getTenantName() + "/ISU_Verify_Payroll/" + "USPAY_VALIDATE_Worker_State_Withholdings_-_Copy?Employee!WID=" + WID;
										 
										    JSONArray jArr = createWorkerStateWithholdingData(reportURL);
										    if(jArr != null && jArr.length() >0)
											{
												 for(int ii = 0; ii<jArr.length(); ii++) 
											     {
													JSONObject objects = jArr.getJSONObject(ii);
													company = objects.isNull("company")?"":objects.getString("company");
													effectiveAsOf = objects.isNull("effectiveAsOf")?"":objects.getString("effectiveAsOf");
													if(!effectiveAsOf.isEmpty())
													{
														effectiveAsOf = effectiveAsOf.substring(0, 10);
													}
													payrollTaxCode = objects.isNull("payrollTaxCode")?"":objects.getString("payrollTaxCode");;
													payrollMaritalStatusId = objects.isNull("payrollMaritalStatusId")?"":objects.getString("payrollMaritalStatusId");;
													//exemptFromState = objects.isNull("exemptFromState")?"":objects.getString("exemptFromState");;
													noOfAllowance = objects.isNull("noOfAllowance")?"":objects.getString("noOfAllowance");;
													addlamount = objects.isNull("addlamount")?"":objects.getString("addlamount");;
													dependentAllowance = objects.isNull("dependentAllowance")?"":objects.getString("dependentAllowance");;
													/*addlAllowance = objects.isNull("addlAllowance")?"":objects.getString("addlAllowance");;
													marriedFillingJointly = objects.isNull("marriedFillingJointly")?"":objects.getString("marriedFillingJointly");;
													veteranExemption = objects.isNull("veteranExemption")?"":objects.getString("veteranExemption");;
													exemptionDependentComplete = objects.isNull("exemptionDependentComplete")?"":objects.getString("exemptionDependentComplete");;
													exemptionDependentJointCust = objects.isNull("exemptionDependentJointCust")?"":objects.getString("exemptionDependentJointCust");;
													addlPercentPR = objects.isNull("addlPercentPR")?"":objects.getString("addlPercentPR");;
													entrExemptPR = objects.isNull("entrExemptPR")?"":objects.getString("entrExemptPR");;
													allowanceOnSplDed = objects.isNull("allowanceOnSplDed")?"":objects.getString("allowanceOnSplDed");*/
													rateTableNJ = objects.isNull("rateTableNJ")?"":objects.getString("rateTableNJ");;
													//exemptForMissi = objects.isNull("exemptForMissi")?"":objects.getString("exemptForMissi");;
													constantPercentArizona = objects.isNull("constantPercentArizona")?"":objects.getString("constantPercentArizona");;
													//headOfHousehold = objects.isNull("headOfHousehold")?"":objects.getString("headOfHousehold");;
													increaseDecreaseAmt = objects.isNull("increaseDecreaseAmt")?"":objects.getString("increaseDecreaseAmt");;
											     }
											 }
											 else
											 {
												 effectiveAsOf = "";
												 payrollTaxCode = "";
												 payrollMaritalStatusId = "";
												 //exemptFromState = "";
												 noOfAllowance = "";
												 addlamount = "";
												 dependentAllowance = "";
												 /*addlAllowance = "";
												 marriedFillingJointly = "";
												 veteranExemption = "";
												 exemptionDependentComplete = "";
												 exemptionDependentJointCust = "";
												 addlPercentPR = "";
												 entrExemptPR = "";
												 allowanceOnSplDed = "";*/
												 rateTableNJ = "";
												 //exemptForMissi = "";
												 constantPercentArizona = "";
												 //headOfHousehold = "";
												 increaseDecreaseAmt = "";
												 errorList.add(columnList.get(i));
											 }				
											 								 								 
										 headingFromWD = "Employee_ID,Company,Effective_As_Of,Payroll_State_Tax_Code,Payroll_Marital_Status,No_Of_Allowance,Additional_Amount,"
										 		+ "Dependent_Allowance,New_Jersey_Rate_Table,Constant_Percent_For_Arizona,Increase_Or_Decrease_Amount";
										 
								        	headerStr = employeeId + "," + company + "," + effectiveAsOf + "," + payrollTaxCode + "," +  payrollMaritalStatusId  + "," +
								        			noOfAllowance + "," + addlamount + "," + dependentAllowance + "," + rateTableNJ  + "," + constantPercentArizona + "," + increaseDecreaseAmt;
								        									 		  
										 
										 if(finalStr.equals(""))
										 {
											 finalStr = headingFromWD + "\n" + headerStr;
										 }
										 else
										 {
											 finalStr = finalStr + "\n" + headerStr;
										 }
								 }
							 }
						 }
					 }
					 columnList.removeAll(errorList);
					 wdCount = columnList.size();
				 }		 					 
				 System.out.println(finalStr);
				 targetContent = finalStr.toString().getBytes();					 					 
				 headingWd = selectColumnMapping(loadCycle, ruleName, "Employee_ID");					 
				 complete = true;
			}			 			 
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}

		return headingWd;
	}
	
	private JSONArray createCSVFromWDW2CWorkOtherWithholding(Tenant tenant, InputStream is, SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd,
			String loadCycle, String ruleName, String client) {

		 targetContent = null;
		 headingFromWD = "";
		 String checkFile = "";
		
		 String employeeId = "";
		 String WID = "";
		 String company = "";
		 String workTaxName = "";
		 //String workExemption = "";
		 String inactive = "";
		 
		 Map<String,String> widMap = null;

		 String finalStr = "";
		 String headerStr = "";
		 String reportURL = "";
		 
		 try 
		 {			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_WORK_OTHER_REQUEST_FILE = requestfile.getAbsolutePath();
				 
				 if(errorList.isEmpty())
				 {
					 for(int i = 0; i<columnList.size();i++)
					 {
						 checkFile = addWorkerIdListToFindError(GET_WORK_OTHER_REQUEST_FILE, columnList.get(i), ruleName, "Employee_ID");
						 is = new FileInputStream(checkFile);
					     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     SOAPPart soapPart = soapMessage.getSOAPPart();
					     SOAPEnvelope envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
							  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
					     ByteArrayOutputStream out = new ByteArrayOutputStream();
					     soapMessage.writeTo(out);
					     String strMsgChk = new String(out.toByteArray());	
					     
					     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
					     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
						 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
						 out = new ByteArrayOutputStream();
						 soapResponse.writeTo(out);
						 strMsgChk = new String(out.toByteArray(), "utf-8");
						 if(strMsgChk.contains("faultstring"))
						 {
							 errorList.add(columnList.get(i)) ;
						 }
						 else
						 {
							 ReportElement rptElement = XmlParserManager.parseXml(strMsgChk);				 
							 ReportElement pageResults = rptElement.getChild("env:Body")
										.getChild("wd:Get_Workers_Response")
										.getChild("wd:Response_Results");
							 
							 String result = pageResults.getChild("wd:Total_Results").getValue().trim();
							 if(result.equalsIgnoreCase("0"))
							 {
								 errorList.add(columnList.get(i));
							 }
							 else
							 {
								 ReportElement responseData = rptElement.getChild("env:Body")
											.getChild("wd:Get_Workers_Response")
											.getChild("wd:Response_Data");
								 
								 List<ReportElement> workerData = responseData.getChildren("wd:Worker");
									
								 for(ReportElement reportElement : workerData)
								 {
									 ReportElement element1 = reportElement.getChild("wd:Worker_Data");
						        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
						        		System.out.println("employeeId--"+ employeeId);
						        		
						        		ReportElement widRef = reportElement.getChild("wd:Worker_Reference");
										 if(widRef != null)
										 {
											 List<ReportElement> idList = widRef.getChildren("wd:ID");
											 for(ReportElement idElement:idList)
											 {
												 widMap = idElement.getAllAttributes();
												 if(widMap.get("wd:type").equals("WID"))
												 {
													 WID = idElement.getValue().trim();
												 }
											 }
										 }
										 else
										 {
											 WID = "";
										 }
										
										 reportURL = "https://" + tenant.getTenantUrl() + "customreport2/" + tenant.getTenantName() + "/ISU_Verify_Payroll/" + "USPAY_VALIDATE_Work_Other_Withholdings_Verify?Employee!WID=" + WID;
										 
										    JSONArray jArr = createWorkOtherData(reportURL);
										    if(jArr != null && jArr.length() >0)
											{
												 for(int ii = 0; ii<jArr.length(); ii++) 
											     {
													JSONObject objects = jArr.getJSONObject(ii);
													company = objects.isNull("company")?"":objects.getString("company");
													workTaxName = objects.isNull("workTaxName")?"":objects.getString("workTaxName");
													//workExemption = objects.isNull("workExemption")?"":objects.getString("workExemption");
													inactive = objects.isNull("inactive")?"":objects.getString("inactive");
													if(inactive.equalsIgnoreCase("0") || inactive.equalsIgnoreCase(""))
													{
														inactive = "";
													}
													else
													{
														inactive = "Yes";
													}
											     }
											 }
											 else
											 {
												 company = "";
												 workTaxName = "";
												 //workExemption = "";
												 inactive = "";
												 errorList.add(columnList.get(i));
											 }				
											 								 								 
										 headingFromWD = "Employee_ID,Company,Work_Tax_Name,Inactive";
								        	headerStr = employeeId + "," + company + "," +  workTaxName + "," +  inactive;						 		  
										 
										 if(finalStr.equals(""))
										 {
											 finalStr = headingFromWD + "\n" + headerStr;
										 }
										 else
										 {
											 finalStr = finalStr + "\n" + headerStr;
										 }
								 }
							 }
						 }
					 }
					 columnList.removeAll(errorList);
					 wdCount = columnList.size();
				 }		 					 
				 System.out.println(finalStr);
				 targetContent = finalStr.toString().getBytes();					 					 
				 headingWd = selectColumnMapping(loadCycle, ruleName, "Employee_ID");					 
				 complete = true;
			}			 			 
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}

		return headingWd;
	}
	
	private JSONArray createCSVFromWDW2CWorkCityWithholding(Tenant tenant, InputStream is, SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd,
			String loadCycle, String ruleName, String client) {

		 targetContent = null;
		 headingFromWD = "";
		 String checkFile = "";
		
		 String employeeId = "";
		 String WID = "";
		 String company = "";
		 String effectiveAsOf = "";
		 String legacyCode = "";
		 String noOfAllowance = "";
		 String addlAmount = "";
		 String exemptIndicator = "";
		 String constantPercent = "";
		 //String exemptReason = "";
		 //String inactive = "";
		 
		 Map<String,String> widMap = null;

		 String finalStr = "";
		 String headerStr = "";
		 String reportURL = "";
		 
		 try 
		 {			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_WORK_CITY_REQUEST_FILE = requestfile.getAbsolutePath();
				 
				 if(errorList.isEmpty())
				 {
					 for(int i = 0; i<columnList.size();i++)
					 {
						 checkFile = addWorkerIdListToFindError(GET_WORK_CITY_REQUEST_FILE, columnList.get(i), ruleName, "Employee_ID");
						 is = new FileInputStream(checkFile);
					     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     SOAPPart soapPart = soapMessage.getSOAPPart();
					     SOAPEnvelope envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
							  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
					     ByteArrayOutputStream out = new ByteArrayOutputStream();
					     soapMessage.writeTo(out);
					     String strMsgChk = new String(out.toByteArray());	
					     
					     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
					     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
						 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
						 out = new ByteArrayOutputStream();
						 soapResponse.writeTo(out);
						 strMsgChk = new String(out.toByteArray(), "utf-8");
						 if(strMsgChk.contains("faultstring"))
						 {
							 errorList.add(columnList.get(i)) ;
						 }
						 else
						 {
							 ReportElement rptElement = XmlParserManager.parseXml(strMsgChk);				 
							 ReportElement pageResults = rptElement.getChild("env:Body")
										.getChild("wd:Get_Workers_Response")
										.getChild("wd:Response_Results");
							 
							 String result = pageResults.getChild("wd:Total_Results").getValue().trim();
							 if(result.equalsIgnoreCase("0"))
							 {
								 errorList.add(columnList.get(i));
							 }
							 else
							 {
								 ReportElement responseData = rptElement.getChild("env:Body")
											.getChild("wd:Get_Workers_Response")
											.getChild("wd:Response_Data");
								 
								 List<ReportElement> workerData = responseData.getChildren("wd:Worker");
									
								 for(ReportElement reportElement : workerData)
								 {
									 ReportElement element1 = reportElement.getChild("wd:Worker_Data");
						        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
						        		System.out.println("employeeId--"+ employeeId);
						        		
						        		ReportElement widRef = reportElement.getChild("wd:Worker_Reference");
										 if(widRef != null)
										 {
											 List<ReportElement> idList = widRef.getChildren("wd:ID");
											 for(ReportElement idElement:idList)
											 {
												 widMap = idElement.getAllAttributes();
												 if(widMap.get("wd:type").equals("WID"))
												 {
													 WID = idElement.getValue().trim();
												 }
											 }
										 }
										 else
										 {
											 WID = "";
										 }
										
										 reportURL = "https://" + tenant.getTenantUrl() + "customreport2/" + tenant.getTenantName() + "/ISU_Verify_Payroll/" + "USPAY_VALIDATE_Work_City_Withholdings?Employee!WID=" + WID;
										 //reportURL = "https://" + "wd5-impl-services1.workday.com/ccx/service/" + "customreport2/" + tenant.getTenantName() + "/ISU_Verify_Payroll/" + "USPAY_VALIDATE_Work_City_Withholdings?Employee!WID=" + WID;
										 
										    JSONArray jArr = createWorkCityData(reportURL);
										    if(jArr != null && jArr.length() >0)
											{
												 for(int ii = 0; ii<jArr.length(); ii++) 
											     {
													JSONObject objects = jArr.getJSONObject(ii);
													company = objects.isNull("company")?"":objects.getString("company");
													effectiveAsOf = objects.isNull("effectiveAsOf")?"":objects.getString("effectiveAsOf");
													if(!effectiveAsOf.isEmpty())
													{
														effectiveAsOf = effectiveAsOf.substring(0, 10);
													}
													legacyCode = objects.isNull("legacyCode")?"":objects.getString("legacyCode");
													noOfAllowance = objects.isNull("noOfAllowance")?"":objects.getString("noOfAllowance");
													addlAmount = objects.isNull("addlAmount")?"":objects.getString("addlAmount");
													constantPercent = objects.isNull("constantPercent")?"":objects.getString("constantPercent");
													exemptIndicator = objects.isNull("exemptIndicator")?"":objects.getString("exemptIndicator");
													/*inactive = objects.isNull("inactive")?"":objects.getString("inactive");
													if(inactive.equalsIgnoreCase("0") || inactive.equalsIgnoreCase(""))
													{
														inactive = "";
													}
													else
													{
														inactive = "Yes";
													}*/
											     }
											 }
											 else
											 {
												 company = "";
												 effectiveAsOf = "";
												 legacyCode = "";
												 noOfAllowance = "";
												 addlAmount = "";
												 exemptIndicator = "";
												 constantPercent = "";
												 errorList.add(columnList.get(i));
											 }				
											 								 								 
										 headingFromWD = "Employee_ID,Company,Effective_As_Of,Legacy_Code,No_Of_Allowance,Additional_Amount,Constant_Percent,Exempt_Indicator";
								        	headerStr = employeeId + "," + company + "," + effectiveAsOf + "," + legacyCode + "," + noOfAllowance + "," + addlAmount + "," + constantPercent + "," + exemptIndicator;						 		  
										 
										 if(finalStr.equals(""))
										 {
											 finalStr = headingFromWD + "\n" + headerStr;
										 }
										 else
										 {
											 finalStr = finalStr + "\n" + headerStr;
										 }
								 }
							 }
						 }
					 }
					 columnList.removeAll(errorList);
					 wdCount = columnList.size();
				 }		 					 
				 System.out.println(finalStr);
				 targetContent = finalStr.toString().getBytes();					 					 
				 headingWd = selectColumnMapping(loadCycle, ruleName, "Employee_ID");					 
				 complete = true;
			}			 			 
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}

		return headingWd;
	}
	
	private JSONArray createCSVFromWDW2CHomeCityWithholding(Tenant tenant, InputStream is, SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd,
			String loadCycle, String ruleName, String client) {
		
		 targetContent = null;
		 headingFromWD = "";
		 String checkFile = "";
		
		 String employeeId = "";
		 String WID = "";
		 String company = "";
		 String effectiveAsOf = "";
		 String legacyCode = "";
		 String noOfAllowance = "";
		 String addlAmount = "";
		 String exemptIndicator = "";
		 //String exemptReason = "";
		 String inactive = "";
		 
		 Map<String,String> widMap = null;

		 String finalStr = "";
		 String headerStr = "";
		 String reportURL = "";
		 
		 try 
		 {			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_HOME_CITY_REQUEST_FILE = requestfile.getAbsolutePath();
				 
				 if(errorList.isEmpty())
				 {
					 for(int i = 0; i<columnList.size();i++)
					 {
						 checkFile = addWorkerIdListToFindError(GET_HOME_CITY_REQUEST_FILE, columnList.get(i), ruleName, "Employee_ID");
						 is = new FileInputStream(checkFile);
					     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     SOAPPart soapPart = soapMessage.getSOAPPart();
					     SOAPEnvelope envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
							  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
					     ByteArrayOutputStream out = new ByteArrayOutputStream();
					     soapMessage.writeTo(out);
					     String strMsgChk = new String(out.toByteArray());	
					     
					     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
					     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
						 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
						 out = new ByteArrayOutputStream();
						 soapResponse.writeTo(out);
						 strMsgChk = new String(out.toByteArray(), "utf-8");
						 if(strMsgChk.contains("faultstring"))
						 {
							 errorList.add(columnList.get(i)) ;
						 }
						 else
						 {
							 ReportElement rptElement = XmlParserManager.parseXml(strMsgChk);				 
							 ReportElement pageResults = rptElement.getChild("env:Body")
										.getChild("wd:Get_Workers_Response")
										.getChild("wd:Response_Results");
							 
							 String result = pageResults.getChild("wd:Total_Results").getValue().trim();
							 if(result.equalsIgnoreCase("0"))
							 {
								 errorList.add(columnList.get(i));
							 }
							 else
							 {
								 ReportElement responseData = rptElement.getChild("env:Body")
											.getChild("wd:Get_Workers_Response")
											.getChild("wd:Response_Data");
								 
								 List<ReportElement> workerData = responseData.getChildren("wd:Worker");
									
								 for(ReportElement reportElement : workerData)
								 {
									 ReportElement element1 = reportElement.getChild("wd:Worker_Data");
						        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
						        		System.out.println("employeeId--"+ employeeId);
						        		
						        		ReportElement widRef = reportElement.getChild("wd:Worker_Reference");
										 if(widRef != null)
										 {
											 List<ReportElement> idList = widRef.getChildren("wd:ID");
											 for(ReportElement idElement:idList)
											 {
												 widMap = idElement.getAllAttributes();
												 if(widMap.get("wd:type").equals("WID"))
												 {
													 WID = idElement.getValue().trim();
												 }
											 }
										 }
										 else
										 {
											 WID = "";
										 }
										
										 reportURL = "https://" + tenant.getTenantUrl() + "customreport2/" + tenant.getTenantName() + "/ISU_Verify_Payroll/" + "USPAY_VALIDATE_Home_City_Withholdings?Employee!WID=" + WID;
										 //reportURL = "https://" + "wd5-impl-services1.workday.com/ccx/service/" + "customreport2/" + tenant.getTenantName() + "/ISU_Verify_Payroll/" + "USPAY_VALIDATE_Home_City_Withholdings?Employee!WID=" + WID;
										 
										    JSONArray jArr = createHomeCityData(reportURL);
										    if(jArr != null && jArr.length() >0)
											{
												 for(int ii = 0; ii<jArr.length(); ii++) 
											     {
													JSONObject objects = jArr.getJSONObject(ii);
													company = objects.isNull("company")?"":objects.getString("company");
													effectiveAsOf = objects.isNull("effectiveAsOf")?"":objects.getString("effectiveAsOf");
													if(!effectiveAsOf.isEmpty())
													{
														effectiveAsOf = effectiveAsOf.substring(0, 10);
													}
													legacyCode = objects.isNull("legacyCode")?"":objects.getString("legacyCode");
													noOfAllowance = objects.isNull("noOfAllowance")?"":objects.getString("noOfAllowance");
													addlAmount = objects.isNull("addlAmount")?"":objects.getString("addlAmount");
													exemptIndicator = objects.isNull("exemptIndicator")?"":objects.getString("exemptIndicator");
													inactive = objects.isNull("inactive")?"":objects.getString("inactive");
													if(inactive.equalsIgnoreCase("0") || inactive.equalsIgnoreCase(""))
													{
														inactive = "";
													}
													else
													{
														inactive = "Yes";
													}
											     }
											 }
											 else
											 {
												 company = "";
												 effectiveAsOf = "";
												 legacyCode = "";
												 noOfAllowance = "";
												 addlAmount = "";
												 exemptIndicator = "";
												 inactive = "";
												 errorList.add(columnList.get(i));
											 }				
											 								 								 
										 headingFromWD = "Employee_ID,Company,Effective_As_Of,Legacy_Code,No_Of_Allowance,Additional_Amount,Exempt_Indicator,Inactive";
								        	headerStr = employeeId + "," + company + "," + effectiveAsOf + "," + legacyCode + "," + noOfAllowance + "," + addlAmount + "," + exemptIndicator + "," + inactive;						 		  
										 
										 if(finalStr.equals(""))
										 {
											 finalStr = headingFromWD + "\n" + headerStr;
										 }
										 else
										 {
											 finalStr = finalStr + "\n" + headerStr;
										 }
								 }
							 }
						 }
					 }
					 columnList.removeAll(errorList);
					 wdCount = columnList.size();
				 }		 					 
				 System.out.println(finalStr);
				 targetContent = finalStr.toString().getBytes();					 					 
				 headingWd = selectColumnMapping(loadCycle, ruleName, "Employee_ID");					 
				 complete = true;
			}			 			 
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}

		return headingWd;
	}
	
	private JSONArray createCSVFromWDW2CPrintingElection(Tenant tenant, InputStream is, SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd,
			String loadCycle, String ruleName, String client) {
		
		 targetContent = null;
		 headingFromWD = "";
		 String checkFile = "";
		
		 String employeeId = "";
		 String WID = "";
		 String company = "";
		 String receiveCopy = "";
		 
		 Map<String,String> widMap = null;

		 String finalStr = "";
		 String headerStr = "";
		 String reportURL = "";
		 
		 try 
		 {			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_W2C_PRINTING_REQUEST_FILE = requestfile.getAbsolutePath();
				 
				 if(errorList.isEmpty())
				 {
					 for(int i = 0; i<columnList.size();i++)
					 {
						 checkFile = addWorkerIdListToFindError(GET_W2C_PRINTING_REQUEST_FILE, columnList.get(i), ruleName, "Employee_ID");
						 is = new FileInputStream(checkFile);
					     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     SOAPPart soapPart = soapMessage.getSOAPPart();
					     SOAPEnvelope envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
							  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
					     ByteArrayOutputStream out = new ByteArrayOutputStream();
					     soapMessage.writeTo(out);
					     String strMsgChk = new String(out.toByteArray());	
					     
					     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
					     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
						 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
						 out = new ByteArrayOutputStream();
						 soapResponse.writeTo(out);
						 strMsgChk = new String(out.toByteArray(), "utf-8");
						 if(strMsgChk.contains("faultstring"))
						 {
							 errorList.add(columnList.get(i)) ;
						 }
						 else
						 {
							 ReportElement rptElement = XmlParserManager.parseXml(strMsgChk);				 
							 ReportElement pageResults = rptElement.getChild("env:Body")
										.getChild("wd:Get_Workers_Response")
										.getChild("wd:Response_Results");
							 
							 String result = pageResults.getChild("wd:Total_Results").getValue().trim();
							 if(result.equalsIgnoreCase("0"))
							 {
								 errorList.add(columnList.get(i));
							 }
							 else
							 {
								 ReportElement responseData = rptElement.getChild("env:Body")
											.getChild("wd:Get_Workers_Response")
											.getChild("wd:Response_Data");
								 
								 List<ReportElement> workerData = responseData.getChildren("wd:Worker");
									
								 for(ReportElement reportElement : workerData)
								 {
									 ReportElement element1 = reportElement.getChild("wd:Worker_Data");
						        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
						        		System.out.println("employeeId--"+ employeeId);
						        		
						        		ReportElement widRef = reportElement.getChild("wd:Worker_Reference");
										 if(widRef != null)
										 {
											 List<ReportElement> idList = widRef.getChildren("wd:ID");
											 for(ReportElement idElement:idList)
											 {
												 widMap = idElement.getAllAttributes();
												 if(widMap.get("wd:type").equals("WID"))
												 {
													 WID = idElement.getValue().trim();
												 }
											 }
										 }
										 else
										 {
											 WID = "";
										 }
										
										 //reportURL = "https://" + tenant.getTenantUrl() + "customreport2/" + tenant.getTenantName() + "/ISU_Verify_Payroll/" + "USPAY_VALIDATE_W-2_Printing_Election?Employee!WID=" + WID;
										 reportURL = "https://" + "wd5-impl-services1.workday.com/ccx/service/" + "customreport2/" + tenant.getTenantName() + "/ISU_Verify_Payroll/" + "USPAY_VALIDATE_W-2_Printing_Election?Employee!WID=" + WID;
										 
										    JSONArray jArr = createW2CPrintingData(reportURL);
										    if(jArr != null && jArr.length() >0)
											{
												 for(int ii = 0; ii<jArr.length(); ii++) 
											     {
													JSONObject objects = jArr.getJSONObject(ii);
													company = objects.isNull("company")?"":objects.getString("company");
													receiveCopy = objects.isNull("receiveCopy")?"":objects.getString("receiveCopy");
													if(receiveCopy.equalsIgnoreCase("0"))
													{
														receiveCopy = "No";
													}
													else if(receiveCopy.equalsIgnoreCase("1"))
													{
														receiveCopy = "Yes";
													}
													else
													{
														receiveCopy = "Yes";
													}
											     }
											 }
											 else
											 {
												 company = "";
												 receiveCopy = "";
											 }				
											 								 								 
										 headingFromWD = "Employee_ID,Company,Receive_Only_Electronic_Copies";
								        	headerStr = employeeId + "," + company + "," + receiveCopy;						 		  
										 
										 if(finalStr.equals(""))
										 {
											 finalStr = headingFromWD + "\n" + headerStr;
										 }
										 else
										 {
											 finalStr = finalStr + "\n" + headerStr;
										 }
								 }
							 }
						 }
					 }
					 columnList.removeAll(errorList);
					 wdCount = columnList.size();
				 }		 					 
				 System.out.println(finalStr);
				 targetContent = finalStr.toString().getBytes();					 					 
				 headingWd = selectColumnMapping(loadCycle, ruleName, "Employee_ID");					 
				 complete = true;
			}			 			 
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}

		return headingWd;
		
	}
	
	private JSONArray createCSVFromWDAssignOrganization(Tenant tenant, InputStream is, SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd,
			String loadCycle, String ruleName, String client) {

		targetContent = null;
		headingFromWD = "";
		String checkFile = "";
		
		 String finalStr = "";
		 String headerStr = "";
		 String empId = "";
		 String costCenter = "";
		 String costCenterCode = "";
		 String company = "";
		 String companyName = "";
		 String region = "";
		 String customOrg = "";
		 String customOrgArr = "";

		 
		 Map<String,String> idMap = null;
		 Map<String,String> orgMap = null;
		 
		 try 
		 {
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_ASSIGN_ORG_FILE = requestfile.getAbsolutePath();
				 if(errorList.isEmpty())
				 {
					 for(int i = 0; i<columnList.size();i++)
					 {
						 checkFile = addWorkerIdListToFindError(GET_ASSIGN_ORG_FILE, columnList.get(i), ruleName, "Employee_ID");
						 is = new FileInputStream(checkFile);
					     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     SOAPPart soapPart = soapMessage.getSOAPPart();
					     SOAPEnvelope envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
							  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
					     ByteArrayOutputStream out = new ByteArrayOutputStream();
					     soapMessage.writeTo(out);
					     String strMsgChk = new String(out.toByteArray());	
					     
					     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
					     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
						 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
						 out = new ByteArrayOutputStream();
						 soapResponse.writeTo(out);
						 strMsgChk = new String(out.toByteArray(), "utf-8");
						 if(strMsgChk.contains("faultstring"))
						 {
							 errorList.add(columnList.get(i)) ;
						 }
						 else
						 {
							 ReportElement rptElement = XmlParserManager.parseXml(strMsgChk);				 
							 ReportElement pageResults = rptElement.getChild("env:Body")
										.getChild("wd:Get_Workers_Response")
										.getChild("wd:Response_Results");
							 
							 String result = pageResults.getChild("wd:Total_Results").getValue().trim();
							 if(result.equalsIgnoreCase("0"))
							 {
								 errorList.add(columnList.get(i));
							 }
							 else
							 {
								 ReportElement responseData = rptElement.getChild("env:Body")
											.getChild("wd:Get_Workers_Response")
											.getChild("wd:Response_Data");
								 
								 List<ReportElement> workerData = responseData.getChildren("wd:Worker");
									
								 for(ReportElement reportElement : workerData)
								 {
									 ReportElement element1 = reportElement.getChild("wd:Worker_Reference");
									 if(element1 != null)
									 {
										 List<ReportElement> idData = element1.getChildren("wd:ID");					 
										 for(ReportElement wdElement:idData)
										 {
											 idMap = wdElement.getAllAttributes();
											 if(idMap.get("wd:type").equals("Employee_ID"))
											 {
												 empId = wdElement.getValue().trim();
												 System.out.println("empId--"+empId);
											 }
										 }
									 }
									 
									 ReportElement element12 = reportElement.getChild("wd:Worker_Data")
					 							.getChild("wd:Organization_Data");
									 
									 if(element12 != null)
									 {
										 List<ReportElement> orgData = element12.getChildren("wd:Worker_Organization_Data");
										 if(orgData != null && orgData.size() >0)
										 {
											 customOrgArr = "";
											 costCenterCode =  "";
											 companyName = "";
										     for(ReportElement orgElement:orgData)
											 {
												 ReportElement orgDataElement = orgElement.getChild("wd:Organization_Reference");
												 ReportElement orgNameElement = orgElement.getChild("wd:Organization_Data");
												 List<ReportElement> orgElementData = orgDataElement.getChildren("wd:ID");
												 for(ReportElement orgValElement:orgElementData)
												 {
													 orgMap = orgValElement.getAllAttributes();
													 if(orgMap.get("wd:type").equals("Cost_Center_Reference_ID"))
													 {
														 costCenter = orgValElement.getValue().trim();
														 costCenterCode = orgNameElement.getChild("wd:Organization_Code") != null?orgNameElement.getChild("wd:Organization_Code").getValue().trim():"";											 
													 }
													 else if(orgMap.get("wd:type").equals("Company_Reference_ID"))
													 {
														 company = orgValElement.getValue().trim();	
														 companyName = orgNameElement.getChild("wd:Organization_Name") != null?orgNameElement.getChild("wd:Organization_Name").getValue().trim():"";											 
														 if(companyName.contains(","))
														 {
															 companyName = companyName.replaceAll(",", "|");
														 }
													 }
													 else if(orgMap.get("wd:type").equals("Custom_Organization_Reference_ID"))
													 {
														 customOrg = orgValElement.getValue().trim();
														 if(customOrgArr.equals(""))
														 {
															 customOrgArr = customOrg;
														 }
														 else
														 {
															 customOrgArr = customOrgArr + "~" + customOrg;
														 }
													 }
													 else if(orgMap.get("wd:type").equals("Region_Reference_ID"))
													 {
														 region = orgValElement.getValue().trim();
													 }
												 }
											 }
										 }
										 else
										 {
											 costCenter = "";
											 costCenterCode = "";
											 company = "";
											 companyName = "";
											 region = "";
											 customOrgArr = "";
										 }
									 }
									 else
									 {
										 costCenter = "";
										 costCenterCode = "";
										 company = "";
										 companyName = "";
										 region = "";
										 customOrgArr = "";
									 }
									 
									 headingFromWD = "Employee_ID,Cost_Center_Organization,Cost_Center_Code,Company_Organization,Company_Organization_Name,Region_Organization,Custom_Organization";
										 
									 headerStr = empId + "," + costCenter  + "," + costCenterCode + "," + company  + "," + companyName + "," + region + "," + customOrgArr;
									 
									 if(finalStr.equals(""))
									 {
										 finalStr = headingFromWD + "\n" + headerStr;
									 }
									 else
									 {
										 finalStr = finalStr + "\n" + headerStr;
									 }					 
								 }
							 }
						 }
					 }
					 columnList.removeAll(errorList);
					 wdCount = columnList.size();
				 }		 					 
				 System.out.println(finalStr);
				 targetContent = finalStr.toString().getBytes();					 					 
				 headingWd = selectColumnMapping(loadCycle, ruleName, "Employee_ID");					 
				 complete = true;
			}			 			 
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		return headingWd;
	}
	
	private JSONArray createCSVFromWDCandidates(Tenant tenant, InputStream is, SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd,
			String loadCycle, String ruleName, String client) {

		 targetContent = null;
		 headingFromWD = "";
		 String checkFile = "";
		 
		 String candidateId = "";
		 String jobRequisitionId = "";
		 String stageId = "";
		 String jobRequisitionIdArr = "";
		 String stageIdArr = "";
		 
		 Map<String,String> candidateMap = null;
		 Map<String,String> jobReqMap = null;
		 Map<String,String> stageMap = null;

		 String finalStr = "";
		 String headerStr = "";
		 try 
		 {			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_CANDIDATES_REQUEST_FILE = requestfile.getAbsolutePath();
				 
				 if(errorList.isEmpty())
				 {
					 for(int i = 0; i<columnList.size();i++)
					 {
						 checkFile = addCandidateIdListToFindError(GET_CANDIDATES_REQUEST_FILE, columnList.get(i), ruleName, "Candidate_ID");
						 is = new FileInputStream(checkFile);
					     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     SOAPPart soapPart = soapMessage.getSOAPPart();
					     SOAPEnvelope envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
							  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
					     ByteArrayOutputStream out = new ByteArrayOutputStream();
					     soapMessage.writeTo(out);
					     String strMsgChk = new String(out.toByteArray());	
					     
					     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Recruiting";
					     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
						 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
						 out = new ByteArrayOutputStream();
						 soapResponse.writeTo(out);
						 strMsgChk = new String(out.toByteArray(), "utf-8");
						 if(strMsgChk.contains("faultstring"))
						 {
							 errorList.add(columnList.get(i));
						 }
						 else
						 {
							 ReportElement rptElement = XmlParserManager.parseXml(strMsgChk);				 
							 ReportElement pageResults = rptElement.getChild("env:Body")
										.getChild("wd:Get_Candidates_Response")
										.getChild("wd:Response_Results");
							 
							 String result = pageResults.getChild("wd:Total_Results").getValue().trim();
							 if(result.equalsIgnoreCase("0"))
							 {
								 errorList.add(columnList.get(i));
							 }
							 else
							 {
								 ReportElement responseData = rptElement.getChild("env:Body")
											.getChild("wd:Get_Candidates_Response")
											.getChild("wd:Response_Data");
								 
								 List<ReportElement> candidateList = responseData.getChildren("wd:Candidate");
									
								 for(ReportElement reportElement : candidateList)
								 {
									 ReportElement candidateRef = reportElement.getChild("wd:Candidate_Reference");
									 if(candidateRef != null)
									 {
										 List<ReportElement> candidatesData = candidateRef.getChildren("wd:ID");								 
										 for(ReportElement candidateElement:candidatesData)
										 {
											 candidateMap = candidateElement.getAllAttributes();
											 if(candidateMap.get("wd:type").equals("Candidate_ID"))
											 {
												 candidateId = candidateElement.getValue().trim();
												 System.out.println("candidateId -- "+candidateId);
											 }
										 }
									 }
									 
									 ReportElement candidateData = reportElement.getChild("wd:Candidate_Data");	
									 if(candidateData != null)
									 {
										 List<ReportElement> jobApplicationDataList = candidateData.getChildren("wd:Job_Application_Data");
										 if(jobApplicationDataList != null && jobApplicationDataList.size() > 0)
										 {
											 jobRequisitionIdArr = "";
											 stageIdArr = "";
											 for(ReportElement jobApplicationData : jobApplicationDataList)
											 {
												 ReportElement jobAppliedData = jobApplicationData.getChild("wd:Job_Applied_To_Data");
												 if(jobAppliedData != null)
												 {
													 ReportElement jobReqRef = jobAppliedData.getChild("wd:Job_Requisition_Reference");
													 if(jobReqRef != null)
													 {
														 List<ReportElement> jobReqData = jobReqRef.getChildren("wd:ID");								 
														 for(ReportElement jobReqElement:jobReqData)
														 {
															 jobReqMap = jobReqElement.getAllAttributes();
															 if(jobReqMap.get("wd:type").equals("Job_Requisition_ID"))
															 {
																 jobRequisitionId = jobReqElement.getValue().trim();
																 if(jobRequisitionIdArr.equals(""))
																 {
																	 jobRequisitionIdArr = jobRequisitionId;
																 }
																 else
																 {
																	 jobRequisitionIdArr = jobRequisitionIdArr + "~" + jobRequisitionId;
																 }
															 }
														 }
													 }
													 
													 ReportElement stageRef = jobAppliedData.getChild("wd:Stage_Reference");
													 if(stageRef != null)
													 {
														 List<ReportElement> stageData = stageRef.getChildren("wd:ID");								 
														 for(ReportElement stageElement:stageData)
														 {
															 stageMap = stageElement.getAllAttributes();
															 if(stageMap.get("wd:type").equals("Recruiting_Stage_ID"))
															 {
																 stageId = stageElement.getValue().trim();
																 if(stageIdArr.equals(""))
																 {
																	 stageIdArr = stageId;
																 }
																 else
																 {
																	 stageIdArr = stageIdArr + "~" + stageId;
																 }
															 }
														 }
													 }
												 }
												 else
												 {
													 jobRequisitionIdArr = "";
													 stageIdArr = "";
													 errorList.add(columnList.get(i)); 
												 }
											 }											 
										 }
										 else
										 {
											 jobRequisitionIdArr = "";
											 stageIdArr = "";
											 errorList.add(columnList.get(i));
										 }
									 }
									 else
									 {
										 jobRequisitionIdArr = "";
										 stageIdArr = "";
										 errorList.add(columnList.get(i)); 
									 }
											 								 								 
									 headingFromWD = "Candidate_ID,Job_Requisition_ID,Stage_ID";
									 
									 headerStr = candidateId + "," + jobRequisitionIdArr + "," + stageIdArr ;
									 
									 if(finalStr.equals(""))
									 {
										 finalStr = headingFromWD + "\n" + headerStr;
									 }
									 else
									 {
										 finalStr = finalStr + "\n" + headerStr;
									 } 
								 }
							 }
						 }
					 }
					 columnList.removeAll(errorList);
					 wdCount = columnList.size();
				 }		 					 
				 System.out.println(finalStr);
				 targetContent = finalStr.toString().getBytes();					 					 
				 headingWd = selectColumnMapping(loadCycle, ruleName, "Candidate_ID");					 
				 complete = true;
			}			 			 
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}

		return headingWd;
	}
	
	private JSONArray createCSVFromWDJobRequisition(Tenant tenant, InputStream is, SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd,
			String loadCycle, String ruleName, String client) {

		 targetContent = null;
		 headingFromWD = "";
		 String checkFile = "";
		 
		 String jobRequisitionID = "";
		 String jobPostingTitle = "";
		 String recruitingStartDate = "";
		 String targetHireDate = "";
		 String jobProfile = "";
		 String workerType = "";
		 String employeeType = "";
		 String location = "";
		 String supOrg = "";
		 
		 Map<String,String> jobReqMap = null;
		 Map<String,String> jobProfileMap = null;
		 Map<String,String> workerTypeMap = null;
		 Map<String,String> employeeTypeMap = null;
		 Map<String,String> locationMap = null;
		 Map<String,String> supOrgMap = null;

		 String finalStr = "";
		 String headerStr = "";
		 try 
		 {			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_JOB_REQUISITION_REQUEST_FILE = requestfile.getAbsolutePath();
				 
				 if(errorList.isEmpty())
				 {
					 for(int i = 0; i<columnList.size();i++)
					 {
						 checkFile = addJobRequisitionIdListToFindError(GET_JOB_REQUISITION_REQUEST_FILE, columnList.get(i), ruleName, "Job_Requisition_ID");
						 is = new FileInputStream(checkFile);
					     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     SOAPPart soapPart = soapMessage.getSOAPPart();
					     SOAPEnvelope envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
							  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
					     ByteArrayOutputStream out = new ByteArrayOutputStream();
					     soapMessage.writeTo(out);
					     String strMsgChk = new String(out.toByteArray());	
					     
					     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Recruiting";
					     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
						 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
						 out = new ByteArrayOutputStream();
						 soapResponse.writeTo(out);
						 strMsgChk = new String(out.toByteArray(), "utf-8");
						 if(strMsgChk.contains("faultstring"))
						 {
							 errorList.add(columnList.get(i));
						 }
						 else
						 {
							 ReportElement rptElement = XmlParserManager.parseXml(strMsgChk);				 
							 ReportElement pageResults = rptElement.getChild("env:Body")
										.getChild("wd:Get_Job_Requisitions_Response")
										.getChild("wd:Response_Results");
							 
							 String result = pageResults.getChild("wd:Total_Results").getValue().trim();
							 if(result.equalsIgnoreCase("0"))
							 {
								 errorList.add(columnList.get(i));
							 }
							 else
							 {
								 ReportElement responseData = rptElement.getChild("env:Body")
											.getChild("wd:Get_Job_Requisitions_Response")
											.getChild("wd:Response_Data");
								 
								 List<ReportElement> jobRequisitionData = responseData.getChildren("wd:Job_Requisition");
									
								 for(ReportElement reportElement : jobRequisitionData)
								 {
									 ReportElement jobReqRef = reportElement.getChild("wd:Job_Requisition_Reference");
									 if(jobReqRef != null)
									 {
										 List<ReportElement> jobReqData = jobReqRef.getChildren("wd:ID");								 
										 for(ReportElement jobReqElement:jobReqData)
										 {
											 jobReqMap = jobReqElement.getAllAttributes();
											 if(jobReqMap.get("wd:type").equals("Job_Requisition_ID"))
											 {
												 jobRequisitionID = jobReqElement.getValue().trim();
												 System.out.println("jobRequisitionID -- "+jobRequisitionID);
											 }
										 }
									 }
									 
									 ReportElement jobReqData = reportElement.getChild("wd:Job_Requisition_Data");	
									 if(jobReqData != null)
									 {
										 ReportElement jobReqDetailData = jobReqData.getChild("wd:Job_Requisition_Detail_Data");
										 if(jobReqDetailData != null)
										 {
											 jobPostingTitle = jobReqDetailData.getChild("wd:Job_Posting_Title") != null?jobReqDetailData.getChild("wd:Job_Posting_Title").getValue().trim():"";
											 if(jobPostingTitle.contains(","))
											 {
												 jobPostingTitle =  jobPostingTitle.replace(",", "|");
											 }
										 }
										 
										 ReportElement hiringReqmtData = jobReqData.getChild("wd:Hiring_Requirement_Data");
										 if(hiringReqmtData != null)
										 {
											 recruitingStartDate = hiringReqmtData.getChild("wd:Recruiting_Start_Date") != null?hiringReqmtData.getChild("wd:Recruiting_Start_Date").getValue().trim():"";
											 if(!recruitingStartDate.isEmpty())
											 {
												 recruitingStartDate = recruitingStartDate.substring(0, 10);
											 }
											 targetHireDate = hiringReqmtData.getChild("wd:Target_Hire_Date") != null?hiringReqmtData.getChild("wd:Target_Hire_Date").getValue().trim():"";
											 if(!targetHireDate.isEmpty())
											 {
												 targetHireDate = targetHireDate.substring(0, 10);
											 }
											 
											 ReportElement jobProfileRef = hiringReqmtData.getChild("wd:Job_Profile_Reference");
											 if(jobProfileRef != null)
											 {
												 List<ReportElement> jobProfileData = jobProfileRef.getChildren("wd:ID");								 
												 for(ReportElement jobProfileElement:jobProfileData)
												 {
													 jobProfileMap = jobProfileElement.getAllAttributes();
													 if(jobProfileMap.get("wd:type").equals("Job_Profile_ID"))
													 {
														 jobProfile = jobProfileElement.getValue().trim();
													 }
												 }
											 }
											 else
											 {
												 jobProfile = "";
											 }
											 
											 ReportElement workerTypeRef = hiringReqmtData.getChild("wd:Worker_Type_Reference");
											 if(workerTypeRef != null)
											 {
												 List<ReportElement> workerTypeData = workerTypeRef.getChildren("wd:ID");								 
												 for(ReportElement workerTypeElement:workerTypeData)
												 {
													 workerTypeMap = workerTypeElement.getAllAttributes();
													 if(workerTypeMap.get("wd:type").equals("Worker_Type_ID"))
													 {
														 workerType = workerTypeElement.getValue().trim();
													 }
												 }
											 }
											 else
											 {
												 workerType = "";
											 }
											 
											 ReportElement empTypeRef = hiringReqmtData.getChild("wd:Position_Worker_Type_Reference");
											 if(empTypeRef != null)
											 {
												 List<ReportElement> empTypeData = empTypeRef.getChildren("wd:ID");								 
												 for(ReportElement empTypeElement:empTypeData)
												 {
													 employeeTypeMap = empTypeElement.getAllAttributes();
													 if(employeeTypeMap.get("wd:type").equals("Employee_Type_ID"))
													 {
														 employeeType = empTypeElement.getValue().trim();
													 }
												 }
											 }
											 else
											 {
												 employeeType = "";
											 }
											 
											 ReportElement locationRef = hiringReqmtData.getChild("wd:Primary_Location_Reference");
											 if(locationRef != null)
											 {
												 List<ReportElement> locattionData = locationRef.getChildren("wd:ID");								 
												 for(ReportElement locationElement:locattionData)
												 {
													 locationMap = locationElement.getAllAttributes();
													 if(locationMap.get("wd:type").equals("Location_ID"))
													 {
														 location = locationElement.getValue().trim();
													 }
												 }
											 }
											 else
											 {
												 location = "";
											 }
										 }
										 else
										 {
											 recruitingStartDate = "";
											 targetHireDate = "";
											 jobProfile = "";
											 workerType = "";
											 employeeType = "";
											 location = "";
										 }
										 
										 ReportElement supOrgRef = jobReqData.getChild("wd:Supervisory_Organization_Reference");
										 if(supOrgRef != null)
										 {
											 List<ReportElement> supOrgData = supOrgRef.getChildren("wd:ID");								 
											 for(ReportElement supOrgElement:supOrgData)
											 {
												 supOrgMap = supOrgElement.getAllAttributes();
												 if(supOrgMap.get("wd:type").equals("Organization_Reference_ID"))
												 {
													 supOrg = supOrgElement.getValue().trim();
												 }
											 }
										 }
										 else
										 {
											 supOrg = "";
										 }
									 }
									 else
									 {
										 jobPostingTitle = "";
										 recruitingStartDate = "";
										 targetHireDate = "";
										 jobProfile = "";
										 workerType = "";
										 employeeType = "";
										 location = "";
										 supOrg = "";
									 }
											 								 								 
									 headingFromWD = "Job_Requisition_ID,Supervisory_Organization,Job_Posting_Title,Recruiting_Start_Date,Target_Hire_Date,Job_Profile,Worker_Type,"
											 			+ "Employee_Type,Location";
									 
									 headerStr = jobRequisitionID + "," + supOrg + "," + jobPostingTitle + "," + recruitingStartDate + "," + targetHireDate + "," + jobProfile + "," + workerType
											 		+ "," + employeeType + "," + location;
									 
									 if(finalStr.equals(""))
									 {
										 finalStr = headingFromWD + "\n" + headerStr;
									 }
									 else
									 {
										 finalStr = finalStr + "\n" + headerStr;
									 } 
								 }
							 }
						 }
					 }
					 columnList.removeAll(errorList);
					 wdCount = columnList.size();
				 }		 					 
				 System.out.println(finalStr);
				 targetContent = finalStr.toString().getBytes();					 					 
				 headingWd = selectColumnMapping(loadCycle, ruleName, "Job_Requisition_ID");					 
				 complete = true;
			}			 			 
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}

		return headingWd;
	}
	
	private JSONArray createCSVFromWDEvergreenRequisition(Tenant tenant, InputStream is, SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd,
			String loadCycle, String ruleName, String client) {

		 targetContent = null;
		 headingFromWD = "";
		 String checkFile = "";
		 
		 String jobRequisitionID = "";
		 String jobPostingTitle = "";
		 String recruitingStartDate = "";
		 String targetHireDate = "";
		 String jobProfile = "";
		 String workerType = "";
		 String employeeType = "";
		 String location = "";
		 String supOrg = "";
		 
		 Map<String,String> jobReqMap = null;
		 Map<String,String> jobProfileMap = null;
		 Map<String,String> workerTypeMap = null;
		 Map<String,String> employeeTypeMap = null;
		 Map<String,String> locationMap = null;
		 Map<String,String> supOrgMap = null;

		 String finalStr = "";
		 String headerStr = "";
		 try 
		 {			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_EVERGREEN_REQUISITION_REQUEST_FILE = requestfile.getAbsolutePath();
				 
				 if(errorList.isEmpty())
				 {
					 for(int i = 0; i<columnList.size();i++)
					 {
						 checkFile = addEvergreenRequisitionIdListToFindError(GET_EVERGREEN_REQUISITION_REQUEST_FILE, columnList.get(i), ruleName, "Job_Requisition_ID");
						 is = new FileInputStream(checkFile);
					     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     SOAPPart soapPart = soapMessage.getSOAPPart();
					     SOAPEnvelope envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
							  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
					     ByteArrayOutputStream out = new ByteArrayOutputStream();
					     soapMessage.writeTo(out);
					     String strMsgChk = new String(out.toByteArray());	
					     
					     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Recruiting";
					     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
						 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
						 out = new ByteArrayOutputStream();
						 soapResponse.writeTo(out);
						 strMsgChk = new String(out.toByteArray(), "utf-8");
						 if(strMsgChk.contains("faultstring"))
						 {
							 errorList.add(columnList.get(i));
						 }
						 else
						 {
							 ReportElement rptElement = XmlParserManager.parseXml(strMsgChk);				 
							 ReportElement pageResults = rptElement.getChild("env:Body")
										.getChild("wd:Get_Evergreen_Requisitions_Response")
										.getChild("wd:Response_Results");
							 
							 String result = pageResults.getChild("wd:Total_Results").getValue().trim();
							 if(result.equalsIgnoreCase("0"))
							 {
								 errorList.add(columnList.get(i));
							 }
							 else
							 {
								 ReportElement responseData = rptElement.getChild("env:Body")
											.getChild("wd:Get_Evergreen_Requisitions_Response")
											.getChild("wd:Response_Data");
								 
								 List<ReportElement> evergreenRequisitionData = responseData.getChildren("wd:Evergreen_Job_Requsition");
									
								 for(ReportElement reportElement : evergreenRequisitionData)
								 {
									 																  
									 ReportElement jobReqRef = reportElement.getChild("wd:Evergreen_Job_Requisition_Reference");
									 if(jobReqRef != null)
									 {
										 List<ReportElement> jobReqData = jobReqRef.getChildren("wd:ID");								 
										 for(ReportElement jobReqElement:jobReqData)
										 {
											 jobReqMap = jobReqElement.getAllAttributes();
											 if(jobReqMap.get("wd:type").equals("Job_Requisition_ID"))
											 {
												 jobRequisitionID = jobReqElement.getValue().trim();
												 System.out.println("jobRequisitionID -- "+jobRequisitionID);
											 }
										 }
									 }
									 
									 ReportElement jobReqData = reportElement.getChild("wd:Evergreen_Job_Requisition_Data");	
									 if(jobReqData != null)
									 {
										 ReportElement jobReqDetailData = jobReqData.getChild("wd:Job_Requisition_Detail_Data");
										 if(jobReqDetailData != null)
										 {
											 jobPostingTitle = jobReqDetailData.getChild("wd:Job_Posting_Title") != null?jobReqDetailData.getChild("wd:Job_Posting_Title").getValue().trim():"";
											 if(jobPostingTitle.contains(","))
											 {
												 jobPostingTitle =  jobPostingTitle.replace(",", "|");
											 }
										 }
										 
										 ReportElement hiringReqmtData = jobReqData.getChild("wd:Hiring_Requirement_Data");
										 if(hiringReqmtData != null)
										 {
											 recruitingStartDate = hiringReqmtData.getChild("wd:Recruiting_Start_Date") != null?hiringReqmtData.getChild("wd:Recruiting_Start_Date").getValue().trim():"";
											 if(!recruitingStartDate.isEmpty())
											 {
												 recruitingStartDate = recruitingStartDate.substring(0, 10);
											 }
											 targetHireDate = hiringReqmtData.getChild("wd:Target_Hire_Date") != null?hiringReqmtData.getChild("wd:Target_Hire_Date").getValue().trim():"";
											 if(!targetHireDate.isEmpty())
											 {
												 targetHireDate = targetHireDate.substring(0, 10);
											 }
											 
											 ReportElement jobProfileRef = hiringReqmtData.getChild("wd:Job_Profile_Reference");
											 if(jobProfileRef != null)
											 {
												 List<ReportElement> jobProfileData = jobProfileRef.getChildren("wd:ID");								 
												 for(ReportElement jobProfileElement:jobProfileData)
												 {
													 jobProfileMap = jobProfileElement.getAllAttributes();
													 if(jobProfileMap.get("wd:type").equals("Job_Profile_ID"))
													 {
														 jobProfile = jobProfileElement.getValue().trim();
													 }
												 }
											 }
											 else
											 {
												 jobProfile = "";
											 }
											 
											 ReportElement workerTypeRef = hiringReqmtData.getChild("wd:Worker_Type_Reference");
											 if(workerTypeRef != null)
											 {
												 List<ReportElement> workerTypeData = workerTypeRef.getChildren("wd:ID");								 
												 for(ReportElement workerTypeElement:workerTypeData)
												 {
													 workerTypeMap = workerTypeElement.getAllAttributes();
													 if(workerTypeMap.get("wd:type").equals("Worker_Type_ID"))
													 {
														 workerType = workerTypeElement.getValue().trim();
													 }
												 }
											 }
											 else
											 {
												 workerType = "";
											 }
											 
											 ReportElement empTypeRef = hiringReqmtData.getChild("wd:Position_Worker_Type_Reference");
											 if(empTypeRef != null)
											 {
												 List<ReportElement> empTypeData = empTypeRef.getChildren("wd:ID");								 
												 for(ReportElement empTypeElement:empTypeData)
												 {
													 employeeTypeMap = empTypeElement.getAllAttributes();
													 if(employeeTypeMap.get("wd:type").equals("Employee_Type_ID"))
													 {
														 employeeType = empTypeElement.getValue().trim();
													 }
												 }
											 }
											 else
											 {
												 employeeType = "";
											 }
											 
											 ReportElement locationRef = hiringReqmtData.getChild("wd:Primary_Location_Reference");
											 if(locationRef != null)
											 {
												 List<ReportElement> locattionData = locationRef.getChildren("wd:ID");								 
												 for(ReportElement locationElement:locattionData)
												 {
													 locationMap = locationElement.getAllAttributes();
													 if(locationMap.get("wd:type").equals("Location_ID"))
													 {
														 location = locationElement.getValue().trim();
													 }
												 }
											 }
											 else
											 {
												 location = "";
											 }
										 }
										 else
										 {
											 recruitingStartDate = "";
											 targetHireDate = "";
											 jobProfile = "";
											 workerType = "";
											 employeeType = "";
											 location = "";
										 }
										 
										 ReportElement supOrgRef = jobReqData.getChild("wd:Supervisory_Organization_Reference");
										 if(supOrgRef != null)
										 {
											 List<ReportElement> supOrgData = supOrgRef.getChildren("wd:ID");								 
											 for(ReportElement supOrgElement:supOrgData)
											 {
												 supOrgMap = supOrgElement.getAllAttributes();
												 if(supOrgMap.get("wd:type").equals("Organization_Reference_ID"))
												 {
													 supOrg = supOrgElement.getValue().trim();
												 }
											 }
										 }
										 else
										 {
											 supOrg = "";
										 }
									 }
									 else
									 {
										 jobPostingTitle = "";
										 recruitingStartDate = "";
										 targetHireDate = "";
										 jobProfile = "";
										 workerType = "";
										 employeeType = "";
										 location = "";
										 supOrg = "";
									 }
											 								 								 
									 headingFromWD = "Job_Requisition_ID,Supervisory_Organization,Job_Posting_Title,Recruiting_Start_Date,Target_Hire_Date,Job_Profile,Worker_Type,"
											 			+ "Employee_Type,Location";
									 
									 headerStr = jobRequisitionID + "," + supOrg + "," + jobPostingTitle + "," + recruitingStartDate + "," + targetHireDate + "," + jobProfile + "," + workerType
											 		+ "," + employeeType + "," + location;
									 
									 if(finalStr.equals(""))
									 {
										 finalStr = headingFromWD + "\n" + headerStr;
									 }
									 else
									 {
										 finalStr = finalStr + "\n" + headerStr;
									 } 
								 }
							 }
						 }
					 }
					 columnList.removeAll(errorList);
					 wdCount = columnList.size();
				 }		 					 
				 System.out.println(finalStr);
				 targetContent = finalStr.toString().getBytes();					 					 
				 headingWd = selectColumnMapping(loadCycle, ruleName, "Job_Requisition_ID");					 
				 complete = true;
			}			 			 
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}

		return headingWd;
	}
	
	private JSONArray createCSVFromWDRoleRequisition(Tenant tenant, InputStream is, SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd,
			String loadCycle, String ruleName, String client) {

		 targetContent = null;
		 headingFromWD = "";
		 String checkFile = "";
		 
		 String jobRequisitionID = "";
		 String orgRole = "";
		 String positionID = "";
		 
		 Map<String,String> jobReqMap = null;
		 Map<String,String> orgRoleMap = null;
		 Map<String,String> positionMap = null;

		 String finalStr = "";
		 String headerStr = "";
		 try 
		 {			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_JOB_REQUISITION_ROLE_REQUEST_FILE = requestfile.getAbsolutePath();
				 
				 if(errorList.isEmpty())
				 {
					 for(int i = 0; i<columnList.size();i++)
					 {
						 checkFile = addJobRequisitionIdListToFindError(GET_JOB_REQUISITION_ROLE_REQUEST_FILE, columnList.get(i), ruleName, "Job_Requisition_ID");
						 is = new FileInputStream(checkFile);
					     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     SOAPPart soapPart = soapMessage.getSOAPPart();
					     SOAPEnvelope envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
							  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
					     ByteArrayOutputStream out = new ByteArrayOutputStream();
					     soapMessage.writeTo(out);
					     String strMsgChk = new String(out.toByteArray());	
					     
					     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Recruiting";
					     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
						 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
						 out = new ByteArrayOutputStream();
						 soapResponse.writeTo(out);
						 strMsgChk = new String(out.toByteArray(), "utf-8");
						 if(strMsgChk.contains("faultstring"))
						 {
							 errorList.add(columnList.get(i));
						 }
						 else
						 {
							 ReportElement rptElement = XmlParserManager.parseXml(strMsgChk);				 
							 ReportElement pageResults = rptElement.getChild("env:Body")
										.getChild("wd:Get_Job_Requisitions_Response")
										.getChild("wd:Response_Results");
							 
							 String result = pageResults.getChild("wd:Total_Results").getValue().trim();
							 if(result.equalsIgnoreCase("0"))
							 {
								 errorList.add(columnList.get(i));
							 }
							 else
							 {
								 ReportElement responseData = rptElement.getChild("env:Body")
											.getChild("wd:Get_Job_Requisitions_Response")
											.getChild("wd:Response_Data");
								 
								 List<ReportElement> jobRequisitionData = responseData.getChildren("wd:Job_Requisition");
									
								 for(ReportElement reportElement : jobRequisitionData)
								 {
									 ReportElement jobReqRef = reportElement.getChild("wd:Job_Requisition_Reference");
									 if(jobReqRef != null)
									 {
										 List<ReportElement> jobReqData = jobReqRef.getChildren("wd:ID");								 
										 for(ReportElement jobReqElement:jobReqData)
										 {
											 jobReqMap = jobReqElement.getAllAttributes();
											 if(jobReqMap.get("wd:type").equals("Job_Requisition_ID"))
											 {
												 jobRequisitionID = jobReqElement.getValue().trim();
												 System.out.println("jobRequisitionID -- "+jobRequisitionID);
											 }
										 }
									 }
									 
									 ReportElement jobReqData = reportElement.getChild("wd:Job_Requisition_Data");	
									 if(jobReqData != null)
									 {
										 ReportElement roleAssignmentData = jobReqData.getChild("wd:Role_Assignment_Data");
										 if(roleAssignmentData != null)
										 {	 
											 ReportElement roleRef = roleAssignmentData.getChild("wd:Role_Reference");
											 if(roleRef != null)
											 {
												 List<ReportElement> roleData = roleRef.getChildren("wd:ID");								 
												 for(ReportElement roleElement:roleData)
												 {
													 orgRoleMap = roleElement.getAllAttributes();
													 if(orgRoleMap.get("wd:type").equals("Organization_Role_ID"))
													 {
														 orgRole = roleElement.getValue().trim();
													 }
												 }
											 }
											 else
											 {
												 orgRole = "";
											 }
											 
											 ReportElement positionRef = roleAssignmentData.getChild("wd:Role_Assignee_Reference");
											 if(positionRef != null)
											 {
												 List<ReportElement> positionData = positionRef.getChildren("wd:ID");								 
												 for(ReportElement positionElement:positionData)
												 {
													 positionMap = positionElement.getAllAttributes();
													 if(positionMap.get("wd:type").equals("Position_ID"))
													 {
														 positionID = positionElement.getValue().trim();
													 }
												 }
											 }
											 else
											 {
												 positionID = "";
											 }
										 }
										 else
										 {
											 orgRole = "";
											 positionID = "";
											 errorList.add(columnList.get(i));
										 }
									 }
									 else
									 {
										 orgRole = "";
										 positionID = "";
									 }
											 								 								 
									 headingFromWD = "Job_Requisition_ID,Organization_Role,Position_ID";
									 
									 headerStr = jobRequisitionID + "," + orgRole + "," + positionID;
									 
									 if(finalStr.equals(""))
									 {
										 finalStr = headingFromWD + "\n" + headerStr;
									 }
									 else
									 {
										 finalStr = finalStr + "\n" + headerStr;
									 } 
								 }
							 }
						 }
					 }
					 columnList.removeAll(errorList);
					 wdCount = columnList.size();
				 }		 					 
				 System.out.println(finalStr);
				 targetContent = finalStr.toString().getBytes();					 					 
				 headingWd = selectColumnMapping(loadCycle, ruleName, "Job_Requisition_ID");					 
				 complete = true;
			}			 			 
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}

		return headingWd;
	}
	
	private JSONArray createCSVFromWDBenefitIndividualRates(Tenant tenant, InputStream is, SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd,
			String loadCycle, String ruleName, String client) {
		
		 targetContent = null;
		 headingFromWD = "";
		 String checkFile = "";
		 String employeeID = "";
		 String empPreTax = "";
		 String empPostTax = "";
		 String empTaxable= "";
		 String empPreTaxArr = "";
		 String empPostTaxArr = "";
		 String empTaxableArr = "";

		 String finalStr = "";
		 String headerStr = "";
		 try 
		 {			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_BENEFIT_INDIVIDUAL_RATE_FILE = requestfile.getAbsolutePath();
				 
				 if(errorList.isEmpty())
				 {
					 for(int i = 0; i<columnList.size();i++)
					 {
						 checkFile = addIndividualBenefitToFindError(GET_BENEFIT_INDIVIDUAL_RATE_FILE, columnList.get(i), ruleName, "Employee_ID");
						 is = new FileInputStream(checkFile);
					     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     SOAPPart soapPart = soapMessage.getSOAPPart();
					     SOAPEnvelope envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
							  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
					     ByteArrayOutputStream out = new ByteArrayOutputStream();
					     soapMessage.writeTo(out);
					     String strMsgChk = new String(out.toByteArray());	
					     
					     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Benefits_Administration";
					     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
						 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
						 out = new ByteArrayOutputStream();
						 soapResponse.writeTo(out);
						 strMsgChk = new String(out.toByteArray(), "utf-8");
						 if(strMsgChk.contains("faultstring"))
						 {
							 errorList.add(columnList.get(i));
						 }
						 else
						 {
							 ReportElement rptElement = XmlParserManager.parseXml(strMsgChk);				 
							 ReportElement pageResults = rptElement.getChild("env:Body")
										.getChild("wd:Get_Benefit_Individual_Rates_Response")
										.getChild("wd:Response_Results");
							 
							 String result = pageResults.getChild("wd:Total_Results").getValue().trim();
							 if(result.equalsIgnoreCase("0"))
							 {
								 errorList.add(columnList.get(i));
							 }
							 else
							 {
								 ReportElement responseData = rptElement.getChild("env:Body")
											.getChild("wd:Get_Benefit_Individual_Rates_Response")
											.getChild("wd:Response_Data");
								 
								 List<ReportElement> benefitDataList = responseData.getChildren("wd:Benefit_Individual_Rate");
								 if(benefitDataList != null && benefitDataList.size() > 0)
								 {
									 empPreTaxArr = "";
									 empPostTaxArr = "";
									 empTaxableArr = "";
									 
									 for(ReportElement reportElement : benefitDataList)
									 {
										 ReportElement benefitRateData = reportElement.getChild("wd:Benefit_Individual_Rate_Data");
										 
										 if(benefitRateData != null)
										 {
											 employeeID = columnList.get(i);
											 System.out.println("employeeID -- "+employeeID);
											 											 
											 empPreTax = benefitRateData.getChild("wd:Employee_Cost_PreTax") != null?benefitRateData.getChild("wd:Employee_Cost_PreTax").getValue().trim():"";
											 if(empPreTaxArr.equals(""))
											 {
												 empPreTaxArr = empPreTax;
											 }
											 else
											 {
												 empPreTaxArr = empPreTaxArr + "~" + empPreTax;
											 }
											 
											 empPostTax = benefitRateData.getChild("wd:Employee_PostTax_Amount") != null?benefitRateData.getChild("wd:Employee_PostTax_Amount").getValue().trim():"";
											 if(empPostTaxArr.equals(""))
											 {
												 empPostTaxArr = empPostTax;
											 }
											 else
											 {
												 empPostTaxArr = empPostTaxArr + "~" + empPostTax;
											 }
											 
											 empTaxable = benefitRateData.getChild("wd:Employer_Cost_Taxable") != null?benefitRateData.getChild("wd:Employer_Cost_Taxable").getValue().trim():"";
											 if(empPostTaxArr.equals(""))
											 {
												 empTaxableArr = empTaxable;
											 }
											 else
											 {
												 empTaxableArr = empTaxableArr + "~" + empTaxable;
											 }
											 											 
										 }												 								 								 											
									 }
									 headingFromWD = "Employee_ID,Pre_Tax,Post_Tax,Taxable";
									 
									 headerStr = employeeID + "," + empPreTaxArr + "," + empPostTaxArr + "," + empTaxableArr;
									 
									 if(finalStr.equals(""))
									 {
										 finalStr = headingFromWD + "\n" + headerStr;
									 }
									 else
									 {
										 finalStr = finalStr + "\n" + headerStr;
									 }
								 }
							 }
						 }
					 }
					 columnList.removeAll(errorList);
					 wdCount = columnList.size();
				 }		 					 
				 System.out.println(finalStr);
				 targetContent = finalStr.toString().getBytes();					 					 
				 headingWd = selectColumnMapping(loadCycle, ruleName, "Employee_ID");					 
				 complete = true;
			}			 			 
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}

		return headingWd;

	}
	
	private JSONArray createCSVFromWDChangeBenefitsLifeEvents(Tenant tenant, InputStream is, SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd,
			String loadCycle, String ruleName, String client) {

		targetContent = null;
		String checkFile = null;
		String workerId = "";
		String coverageBeginDate = "";
		String originalCoverageBeginDate = "";
		String deductionBeginDate = "";
		String healthCarePlanName = "";
		String healthCarePlanNameArr = "";
		String dependencyName = "";
		String dependencyNameArr = "";
		String insurancePlanName = "";
		String insurancePlanNameArr = "";
		String retirementPlanName = "";
		String retirementPlanNameArr = "";
		String additionalPlanName = "";
		String additionalPlanNameArr = "";
		String additionalCoveragePlanName = "";
		String additionalCoveragePlanNameArr = "";
		String finalStr = "";
		String headerStr = "";
		
		Map<String,String> workerMap = null;
		Map<String,String> healthCareMap = null;
		Map<String,String> dependencyMap = null;
		Map<String,String> insuranceMap = null;
		Map<String,String> retirementMap = null;
		Map<String,String> additionalMap = null;
		Map<String,String> addncoverageMap = null;
		
		try 
		{
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_CHANGE_BENEFITS_LIFE_EVENT_REQUEST_FILE = requestfile.getAbsolutePath();
				 if(errorList.isEmpty())
				 {
					 for(int i = 0; i<columnList.size();i++)
					 {
						 checkFile = addWorkerIdListToFindError(GET_CHANGE_BENEFITS_LIFE_EVENT_REQUEST_FILE, columnList.get(i), ruleName, "Employee_ID");
						 is = new FileInputStream(checkFile);
					     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     SOAPPart soapPart = soapMessage.getSOAPPart();
					     SOAPEnvelope envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
							  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
					     ByteArrayOutputStream out = new ByteArrayOutputStream();
					     soapMessage.writeTo(out);
					     String strMsgChk = new String(out.toByteArray());	
					     
					     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
					     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
						 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
						 out = new ByteArrayOutputStream();
						 soapResponse.writeTo(out);
						 strMsgChk = new String(out.toByteArray(), "utf-8");
						 if(strMsgChk.contains("faultstring"))
						 {
							 errorList.add(columnList.get(i)) ;
						 }
						 else
						 {
							 ReportElement rptElement = XmlParserManager.parseXml(strMsgChk);				 
							 ReportElement benefitEnrollmentData = rptElement.getChild("env:Body")
										.getChild("wd:Get_Workers_Response")
										.getChild("wd:Response_Data")
										.getChild("wd:Worker")
										.getChild("wd:Worker_Data")
			 							.getChild("wd:Benefit_Enrollment_Data");
							 
							 if(benefitEnrollmentData == null)
							 {
								 errorList.add(columnList.get(i));
							 }
							 else
							 {
								 ReportElement responseData = rptElement.getChild("env:Body")
											.getChild("wd:Get_Workers_Response")
											.getChild("wd:Response_Data");
								 
								 List<ReportElement> workerList = responseData.getChildren("wd:Worker");
								 if(workerList != null && workerList.size()>0)
								 {
										coverageBeginDate = "";
										originalCoverageBeginDate = "";
										deductionBeginDate = "";
										healthCarePlanNameArr = "";
										dependencyNameArr = "";
										insurancePlanNameArr = "";
										retirementPlanNameArr = "";
										additionalPlanNameArr = "";
										additionalCoveragePlanNameArr = "";
										
									 for(ReportElement reportElement : workerList)
									 {
										 ReportElement workerRef = reportElement.getChild("wd:Worker_Reference");
										 if(workerRef != null)
										 {
											 List<ReportElement> idData = workerRef.getChildren("wd:ID");					 
											 for(ReportElement wdElement:idData)
											 {
												 workerMap = wdElement.getAllAttributes();
												 if(workerMap.get("wd:type").equals("Employee_ID"))
												 {
													 workerId = wdElement.getValue().trim();
													 System.out.println("workerId:"+workerId);
												 }
											 }
										 }
										 ReportElement healthCareData = reportElement.getChild("wd:Worker_Data")
						 							.getChild("wd:Benefit_Enrollment_Data")
						 							.getChild("wd:Health_Care_Data");
										 
										 if(healthCareData != null)
										 {
											 List<ReportElement> benefitElectionHealthCareDataList = healthCareData.getChild("wd:Health_Care_Period_Data")
							 							.getChildren("wd:Health_Care_Coverage_Data");
											 
											 for(ReportElement benefitElectionHealthCareDataElement: benefitElectionHealthCareDataList)
											 {
												 ReportElement 	benefitElectionHealthCareData = benefitElectionHealthCareDataElement.getChild("wd:Benefit_Election_Data");
												 if(benefitElectionHealthCareData != null)
												 {
													 coverageBeginDate = benefitElectionHealthCareData.getChild("wd:Coverage_Begin_Date") != null?benefitElectionHealthCareData.getChild("wd:Coverage_Begin_Date").getValue().trim().substring(0, 10):"";
													 originalCoverageBeginDate = benefitElectionHealthCareData.getChild("wd:Original_Coverage_Begin_Date") != null?benefitElectionHealthCareData.getChild("wd:Original_Coverage_Begin_Date").getValue().trim().substring(0, 10):"";
													 deductionBeginDate = benefitElectionHealthCareData.getChild("wd:Deduction_Begin_Date") != null?benefitElectionHealthCareData.getChild("wd:Deduction_Begin_Date").getValue().trim().substring(0, 10):"";
													 
													 ReportElement benefitPlanSummaryData = benefitElectionHealthCareData.getChild("wd:Benefit_Plan_Summary_Data");
													 if(benefitPlanSummaryData != null)
													 {
														 ReportElement healthCareRef = benefitPlanSummaryData.getChild("wd:Benefit_Plan_Reference");
														 if(healthCareRef != null)
														 {
															 List<ReportElement> healthCareSummaryData = healthCareRef.getChildren("wd:ID");					 
															 for(ReportElement healthCareElement:healthCareSummaryData)
															 {
																 healthCareMap = healthCareElement.getAllAttributes();
																 if(healthCareMap.get("wd:type").equals("Health_Care_Coverage_Plan_ID"))
																 {
																	 healthCarePlanName = healthCareElement.getValue().trim();
																	 if(healthCarePlanNameArr.equals(""))
																	 {
																		 healthCarePlanNameArr = healthCarePlanName;
																	 }
																	 else
																	 {
																		 healthCarePlanNameArr = healthCarePlanNameArr + "~" + healthCarePlanName;
																	 }
																 }
															 }
														 }
													 }
												 }
												 
												 List<ReportElement> dependencyList = benefitElectionHealthCareDataElement.getChildren("wd:Dependent_Coverage_Data");
												 if(dependencyList != null && dependencyList.size()>0)
												 {
													 for(ReportElement dependencyElement:dependencyList)
													 {
														 ReportElement dependencyRef = dependencyElement.getChild("wd:Dependent_Reference");
														 if(dependencyRef != null)
														 {
															 List<ReportElement> dependencyData = dependencyRef.getChildren("wd:ID");					 
															 for(ReportElement dependencyCoverageElement:dependencyData)
															 {
																 dependencyMap = dependencyCoverageElement.getAllAttributes();
																 if(dependencyMap.get("wd:type").equals("Dependent_ID"))
																 {
																	 dependencyName = dependencyCoverageElement.getValue().trim();
																	 if(dependencyNameArr.equals(""))
																	 {
																		 dependencyNameArr = dependencyName;
																	 }
																	 else
																	 {
																		 dependencyNameArr = dependencyNameArr + "~" + dependencyName;
																	 }
																 }
															 }
														 }
													 }
												 }
											 }
										 }
										 
										 ReportElement insuranceData = reportElement.getChild("wd:Worker_Data")
						 							.getChild("wd:Benefit_Enrollment_Data")
						 							.getChild("wd:Insurance_Data");
										 
										 if(insuranceData != null)
										 {
											 List<ReportElement> insuranceCoverageList = insuranceData.getChild("wd:Insurance_Period_Data")
							 							.getChildren("wd:Insurance_Coverage_Data");

											 for(ReportElement coverageElement:insuranceCoverageList)
											 {
												 ReportElement benefitElectionInsuranceData = coverageElement.getChild("wd:Benefit_Election_Data");
												 if(benefitElectionInsuranceData != null)
												 {
													 if(coverageBeginDate.isEmpty())
													 {
														 coverageBeginDate = benefitElectionInsuranceData.getChild("wd:Coverage_Begin_Date") != null?benefitElectionInsuranceData.getChild("wd:Coverage_Begin_Date").getValue().trim().substring(0, 10):"";
													 }
													 if(originalCoverageBeginDate.isEmpty())
													 {
														 originalCoverageBeginDate = benefitElectionInsuranceData.getChild("wd:Original_Coverage_Begin_Date") != null?benefitElectionInsuranceData.getChild("wd:Original_Coverage_Begin_Date").getValue().trim().substring(0, 10):"";
													 }
													 if(deductionBeginDate.isEmpty())
													 {
														 deductionBeginDate = benefitElectionInsuranceData.getChild("wd:Deduction_Begin_Date") != null?benefitElectionInsuranceData.getChild("wd:Deduction_Begin_Date").getValue().trim().substring(0, 10):"";
													 }
													 
													 ReportElement insurancePlanSummaryData = benefitElectionInsuranceData.getChild("wd:Benefit_Plan_Summary_Data");
													 if(insurancePlanSummaryData != null)
													 {
														 ReportElement insuranceRef = insurancePlanSummaryData.getChild("wd:Benefit_Plan_Reference");
														 if(insuranceRef != null)
														 {
															 List<ReportElement> insuranceRefData = insuranceRef.getChildren("wd:ID");					 
															 for(ReportElement insuranceElement:insuranceRefData)
															 {
																 insuranceMap = insuranceElement.getAllAttributes();
																 if(insuranceMap.get("wd:type").equals("Insurance_Coverage_Plan_ID"))
																 {
																	 insurancePlanName = insuranceElement.getValue().trim();
																	 if(insurancePlanNameArr.equals(""))
																	 {
																		 insurancePlanNameArr = insurancePlanName;
																	 }
																	 else
																	 {
																		 insurancePlanNameArr = insurancePlanNameArr + "~" + insurancePlanName;
																	 }
																 }
															 }
														 }
													 }
												 }
											 }
										 }
										 
										 ReportElement retireSavingData = reportElement.getChild("wd:Worker_Data")
						 							.getChild("wd:Benefit_Enrollment_Data")
						 							.getChild("wd:Retirement_Savings_Data");
										 
										 if(retireSavingData != null)
										 {
											 List<ReportElement> benefitElectionRetirementDataList = retireSavingData.getChild("wd:Retirement_Savings_Period_Data")
							 							.getChildren("wd:Retirement_Savings_Coverage_Data");
											 
											 for(ReportElement benefitElectionRetirementDataElement:benefitElectionRetirementDataList)
											 {
												 ReportElement 	benefitElectionRetirementData = benefitElectionRetirementDataElement.getChild("wd:Benefit_Election_Data");
												 if(benefitElectionRetirementData != null)
												 {
													 if(coverageBeginDate.isEmpty())
													 {
														 coverageBeginDate = benefitElectionRetirementData.getChild("wd:Coverage_Begin_Date") != null?benefitElectionRetirementData.getChild("wd:Coverage_Begin_Date").getValue().trim().substring(0, 10):"";
													 }
													 if(originalCoverageBeginDate.isEmpty())
													 {
														 originalCoverageBeginDate = benefitElectionRetirementData.getChild("wd:Original_Coverage_Begin_Date") != null?benefitElectionRetirementData.getChild("wd:Original_Coverage_Begin_Date").getValue().trim().substring(0, 10):"";
													 }
													 if(deductionBeginDate.isEmpty())
													 {
														 deductionBeginDate = benefitElectionRetirementData.getChild("wd:Deduction_Begin_Date") != null?benefitElectionRetirementData.getChild("wd:Deduction_Begin_Date").getValue().trim().substring(0, 10):"";
													 }
													 
													 ReportElement retirementPlanSummaryData = benefitElectionRetirementData.getChild("wd:Benefit_Plan_Summary_Data");
													 if(retirementPlanSummaryData != null)
													 {
														 ReportElement retirementRef = retirementPlanSummaryData.getChild("wd:Benefit_Plan_Reference");
														 if(retirementRef != null)
														 {
															 List<ReportElement> retireSummaryData = retirementRef.getChildren("wd:ID");					 
															 for(ReportElement retirementElement:retireSummaryData)
															 {
																 retirementMap = retirementElement.getAllAttributes();
																 if(retirementMap.get("wd:type").equals("Defined_Contribution_Plan_ID"))
																 {
																	 retirementPlanName = retirementElement.getValue().trim();
																	 if(retirementPlanNameArr.equals(""))
																	 {
																		 retirementPlanNameArr = retirementPlanName;
																	 }
																	 else
																	 {
																		 retirementPlanNameArr = retirementPlanNameArr + "~" + retirementPlanName;
																	 }
																 }
															 }
														 }
													 }
												 }
											 }
										 }
										 
										 ReportElement additionalBenefitData = reportElement.getChild("wd:Worker_Data")
						 							.getChild("wd:Benefit_Enrollment_Data")
						 							.getChild("wd:Additional_Benefits_Data");
										 
										 if(additionalBenefitData != null)
										 {
											 List<ReportElement> benefitElectionAdditionalDataList = additionalBenefitData.getChild("wd:Additional_Benefits_Period_Data")
							 							.getChildren("wd:Additional_Benefits_Coverage_Data");
							 							
											 for(ReportElement benefitElectionAdditionalDataElement: benefitElectionAdditionalDataList)
											 {
												 ReportElement coverageTargetRef = benefitElectionAdditionalDataElement.getChild("wd:Additional_Benefits_Coverage_Target_Reference");
												 if(coverageTargetRef != null)
												 {
													 List<ReportElement> coverageTargetData = coverageTargetRef.getChildren("wd:ID");					 
													 for(ReportElement coverageTargetElement:coverageTargetData)
													 {
														 addncoverageMap = coverageTargetElement.getAllAttributes();
														 if(addncoverageMap.get("wd:type").equals("Additional_Benefits_Coverage_Target_ID"))
														 {
															 additionalCoveragePlanName = coverageTargetElement.getValue().trim();
															 if(additionalCoveragePlanNameArr.equals(""))
															 {
																 additionalCoveragePlanNameArr = additionalCoveragePlanName;
															 }
															 else
															 {
																 additionalCoveragePlanNameArr = additionalCoveragePlanNameArr + "~" + additionalCoveragePlanName;
															 }
														 }
													 }
												 }
												 ReportElement benefitElectionAdditionalData = benefitElectionAdditionalDataElement.getChild("wd:Benefit_Election_Data");
												 if(benefitElectionAdditionalDataElement != null)
												 {
													 if(coverageBeginDate.isEmpty())
													 {
														 coverageBeginDate = benefitElectionAdditionalData.getChild("wd:Coverage_Begin_Date") != null?benefitElectionAdditionalData.getChild("wd:Coverage_Begin_Date").getValue().trim().substring(0, 10):"";
													 }
													 if(originalCoverageBeginDate.isEmpty())
													 {
														 originalCoverageBeginDate = benefitElectionAdditionalData.getChild("wd:Original_Coverage_Begin_Date") != null?benefitElectionAdditionalData.getChild("wd:Original_Coverage_Begin_Date").getValue().trim().substring(0, 10):"";
													 }
													 if(deductionBeginDate.isEmpty())
													 {
														 deductionBeginDate = benefitElectionAdditionalData.getChild("wd:Deduction_Begin_Date") != null?benefitElectionAdditionalData.getChild("wd:Deduction_Begin_Date").getValue().trim().substring(0, 10):"";
													 }
													 
													 ReportElement additionalPlanSummaryData = benefitElectionAdditionalData.getChild("wd:Benefit_Plan_Summary_Data");
													 if(additionalPlanSummaryData != null)
													 {
														 ReportElement additionalRef = additionalPlanSummaryData.getChild("wd:Benefit_Plan_Reference");
														 if(additionalRef != null)
														 {
															 List<ReportElement> addnSummaryData = additionalRef.getChildren("wd:ID");					 
															 for(ReportElement additionalElement:addnSummaryData)
															 {
																 additionalMap = additionalElement.getAllAttributes();
																 if(additionalMap.get("wd:type").equals("Additional_Benefits_Plan_ID"))
																 {
																	 additionalPlanName = additionalElement.getValue().trim();
																	 if(additionalPlanNameArr.equals(""))
																	 {
																		 additionalPlanNameArr = additionalPlanName;
																	 }
																	 else
																	 {
																		 additionalPlanNameArr = additionalPlanNameArr + "~" + additionalPlanName;
																	 }
																 }
															 }
														 }
													 }
												 }
											 }
										 }
										 
									 }
									 headingFromWD = "Employee_ID,Coverage_Begin_Date,Original_Coverage_Begin_Date,Deduction_Begin_Date,Health_Care_Plan_Name,Dependency_Name,Insurance_Plan_Name,"
									 		          + "Retirement_Plan_Name,Additional_Benefit_Plan_Name,Additional_Benefit_Coverage_Name";
									 
									 headerStr = workerId + "," + coverageBeginDate + "," + originalCoverageBeginDate + "," + deductionBeginDate + "," + healthCarePlanNameArr + "," + dependencyNameArr
											    + "," + insurancePlanNameArr + "," + retirementPlanNameArr + "," + additionalPlanNameArr + "," + additionalCoveragePlanNameArr;
									 
									 if(finalStr.equals(""))
									 {
										 finalStr = headingFromWD + "\n" + headerStr;
									 }
									 else
									 {
										 finalStr = finalStr + "\n" + headerStr;
									 }
								 }
							 }
						 }
					 }
					 columnList.removeAll(errorList);
					 wdCount = columnList.size();
				 }
				 System.out.println(finalStr);
				 targetContent = finalStr.toString().getBytes();
				 
				 headingWd = selectColumnMapping(loadCycle, ruleName, "Employee_ID");
				 complete = true;
			}
			 
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		return headingWd;
	}
	
	private JSONArray createCSVFromWDCarryoverBalances(Tenant tenant, InputStream is,
			SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd, String loadCycle,
			String ruleName, String client) {

		targetContent = null;
		String checkFile = null;
		String workerId = "";
		String timeOffPlanName = "";
		String overrideBalanceDate = "";
		String overrideBalanceUnits = "";
		String carryoverDate = "";
		String carryoverExpirationDate = "";
		String carryoverOverrideBalanceUnit = "";
		String timeOffPlanNameArr = "";
		String overrideBalanceDateArr = "";
		String overrideBalanceUnitsArr = "";
		String carryoverDateArr = "";
		String carryoverExpirationDateArr = "";
		String carryoverOverrideBalanceUnitArr = "";
		String finalStr = "";
		String headerStr = "";
		
		Map<String,String> workerMap = null;
		try 
		{
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_CARRYOVER_BALANCE_REQUEST_FILE = requestfile.getAbsolutePath();
				 if(errorList.isEmpty())
				 {
					 for(int i = 0; i<columnList.size();i++)
					 {
						 checkFile = addCarryoverBalanceListToFindError(GET_CARRYOVER_BALANCE_REQUEST_FILE, columnList.get(i), ruleName, "Employee_ID");
						 is = new FileInputStream(checkFile);
					     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     SOAPPart soapPart = soapMessage.getSOAPPart();
					     SOAPEnvelope envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
							  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
					     ByteArrayOutputStream out = new ByteArrayOutputStream();
					     soapMessage.writeTo(out);
					     String strMsgChk = new String(out.toByteArray());	
					     
					     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Absence_Management";
					     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
						 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
						 out = new ByteArrayOutputStream();
						 soapResponse.writeTo(out);
						 strMsgChk = new String(out.toByteArray(), "utf-8");
						 if(strMsgChk.contains("faultstring"))
						 {
							 errorList.add(columnList.get(i)) ;
						 }
						 else
						 {
							 ReportElement rptElement = XmlParserManager.parseXml(strMsgChk);				 
							 ReportElement resultsData = rptElement.getChild("env:Body")
										.getChild("wd:Get_Override_Balances_Response")
										.getChild("wd:Response_Results");
							 
							 String result = resultsData.getChild("wd:Total_Results").getValue().trim();
							 if(result.equalsIgnoreCase("0"))
							 {
								 errorList.add(columnList.get(i));
							 }
							 else
							 {
								 ReportElement responseData = rptElement.getChild("env:Body")
											.getChild("wd:Get_Override_Balances_Response")
											.getChild("wd:Response_Data");
								 
								 List<ReportElement> carryoverBalanceList = responseData.getChildren("wd:Override_Balance");
								 if(carryoverBalanceList != null && carryoverBalanceList.size()>0)
								 {
									 timeOffPlanNameArr = "";
									 overrideBalanceDateArr = "";
								     overrideBalanceUnitsArr = "";
								     carryoverDateArr = "";
									 carryoverExpirationDateArr = "";
									 carryoverOverrideBalanceUnitArr = "";
										
									 for(ReportElement reportElement : carryoverBalanceList)
									 {
										 ReportElement overrideBalanceData = reportElement.getChild("wd:Override_Balance_Data");
										 if(overrideBalanceData != null)
										 {
											 ReportElement workerRef = overrideBalanceData.getChild("wd:Worker_Reference");
											 if(workerRef != null)
											 {
												 List<ReportElement> workerData = workerRef.getChildren("wd:ID");								 
												 for(ReportElement workerElement:workerData)
												 {
													 workerMap = workerElement.getAllAttributes();
													 if(workerMap.get("wd:type").equals("Employee_ID"))
													 {
														 workerId = workerElement.getValue().trim();													 
													 }
												 }
											 }
											 ReportElement timeOffPlanRef = overrideBalanceData.getChild("wd:Time_Off_Plan_Reference");
											 if(timeOffPlanRef != null)
											 {													 
												 timeOffPlanName = timeOffPlanRef.getChild("wd:Time_Off_Plan_Name") != null?timeOffPlanRef.getChild("wd:Time_Off_Plan_Name").getValue().trim():"";
												 if(timeOffPlanName.contains(","))
												 {
													 timeOffPlanName = timeOffPlanName.replaceAll(",", "|");
												 }
											 }
											 if(timeOffPlanNameArr.equals(""))
											 {
												 timeOffPlanNameArr = timeOffPlanName;
											 }
											 else
											 {
												 timeOffPlanNameArr = timeOffPlanNameArr + "~" + timeOffPlanName;
											 }
											 overrideBalanceDate = overrideBalanceData.getChild("wd:Override_Balance_Date") != null?overrideBalanceData.getChild("wd:Override_Balance_Date").getValue().trim():"";
											 if(!overrideBalanceDate.isEmpty())
											 {
												 overrideBalanceDate = overrideBalanceDate.substring(0, 10);
												 overrideBalanceDate = convertDate(overrideBalanceDate, "yyyy-MM-dd", "dd-MM-yyyy");
											 }
											 if(overrideBalanceDateArr.equals(""))
											 {
												 overrideBalanceDateArr = overrideBalanceDate;
											 }
											 else
											 {
												 overrideBalanceDateArr = overrideBalanceDateArr + "~" + overrideBalanceDate;
											 }
											 overrideBalanceUnits = overrideBalanceData.getChild("wd:Override_Balance_Units") != null?overrideBalanceData.getChild("wd:Override_Balance_Units").getValue().trim():"";
											 if(overrideBalanceUnitsArr.equals(""))
											 {
												 overrideBalanceUnitsArr = overrideBalanceUnits;
											 }
											 else
											 {
												 overrideBalanceUnitsArr = overrideBalanceUnitsArr + "~" + overrideBalanceUnits;
											 }
											 ReportElement overrideBalanceUnitData = overrideBalanceData.getChild("wd:Override_Balance_Units_Data");
											 if(overrideBalanceUnitData != null)
											 {
												 carryoverDate = overrideBalanceUnitData.getChild("wd:Carryover_Date") != null?overrideBalanceUnitData.getChild("wd:Carryover_Date").getValue().trim():"";
												 if(!carryoverDate.isEmpty())
												 {
													 carryoverDate = carryoverDate.substring(0, 10);
													 carryoverDate = convertDate(carryoverDate, "yyyy-MM-dd", "dd-MM-yyyy");
												 }
												 if(carryoverDateArr.equals(""))
												 {
													 carryoverDateArr = carryoverDate;
												 }
												 else
												 {
													 carryoverDateArr = carryoverDateArr + "~" + carryoverDate;
												 }
												 carryoverExpirationDate = overrideBalanceUnitData.getChild("wd:Carryover_Expiration_Date") != null?overrideBalanceUnitData.getChild("wd:Carryover_Expiration_Date").getValue().trim():"";
												 if(!carryoverExpirationDate.isEmpty())
												 {
													 carryoverExpirationDate = carryoverExpirationDate.substring(0, 10);
													 carryoverExpirationDate = convertDate(carryoverExpirationDate, "yyyy-MM-dd", "dd-MM-yyyy");
												 }
												 if(carryoverExpirationDateArr.equals(""))
												 {
													 carryoverExpirationDateArr = carryoverExpirationDate;
												 }
												 else
												 {
													 carryoverExpirationDateArr = carryoverExpirationDateArr + "~" + carryoverExpirationDate;
												 }
												 carryoverOverrideBalanceUnit = overrideBalanceUnitData.getChild("wd:Carryover_Override_Balance_Units") != null?overrideBalanceUnitData.getChild("wd:Carryover_Override_Balance_Units").getValue().trim():"";
												 if(carryoverOverrideBalanceUnitArr.equals(""))
												 {
													 carryoverOverrideBalanceUnitArr = carryoverOverrideBalanceUnit;
												 }
												 else
												 {
													 carryoverOverrideBalanceUnitArr = carryoverOverrideBalanceUnitArr + "~" + carryoverOverrideBalanceUnit;
												 }
											 }
										 }
									 }
									 headingFromWD = "Employee_ID,Time_Off_Plan_Name,Override_Balance_Date,Override_Balance_Units,Carryover_Date,Carryover_Expiration_Date,Carryover_Override_Balance_Units";
									 
									 headerStr = workerId + "," + timeOffPlanNameArr + "," + overrideBalanceDateArr + "," + overrideBalanceUnitsArr + "," + carryoverDate + "," + carryoverExpirationDate
											 		+ "," + carryoverOverrideBalanceUnitArr;
									 
									 if(finalStr.equals(""))
									 {
										 finalStr = headingFromWD + "\n" + headerStr;
									 }
									 else
									 {
										 finalStr = finalStr + "\n" + headerStr;
									 }
								 }
							 }
						 }
					 }
					 columnList.removeAll(errorList);
					 wdCount = columnList.size();
				 }
				 System.out.println(finalStr);
				 targetContent = finalStr.toString().getBytes();
				 
				 /*File wdCSVfile = File.createTempFile(loadCycle + "_" + ruleName, ".csv");
				 PrintWriter writer = new PrintWriter(wdCSVfile);
				 writer.write(finalStr.toString());
				 writer.flush();
				 writer.close();
				 
				 PostLoad postLoad = postLoadService.getPostLoadByLoadRule(loadCycle, ruleName);
				 postLoad.setWdCSVFileName(loadCycle + "_" + ruleName + ".csv");
				 postLoad.setWdCSVFileContent(Files.readAllBytes(wdCSVfile.toPath()));
				 postLoadService.updatePostLoad(postLoad);*/
				 
				 headingWd = selectColumnMapping(loadCycle, ruleName, "Employee_ID");
				 complete = true;
			}
			 
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		return headingWd;
	}

	private String addCarryoverBalanceListToFindError(String xmlFile, String columnVal, String ruleName, String idVal) {
		
		File updatedRequestfile = null;
		try  
		{  
			File file = new File(xmlFile);     
			FileReader fr = new FileReader(file);   
			BufferedReader br = new BufferedReader(fr);   
			StringBuffer sb = new StringBuffer();     
			String line; 
			boolean executed = true;
			while((line=br.readLine())!=null)  
			{  
				sb.append(line);  
				sb.append("\n");
				if(line.contains("bsvc:Get_Override_Balances_Request") && executed)
				{
					executed = false;
					sb.append(" <bsvc:Request_Criteria>"); 
					sb.append("\n");
						sb.append("  <bsvc:Employee_Reference bsvc:Descriptor=" + "\"" + idVal + "\"" + ">");
						sb.append("\n");
						sb.append("   <bsvc:ID bsvc:type=" + "\"" + idVal + "\"" + ">" + columnVal + "</bsvc:ID>");
						sb.append("\n");
						sb.append("  </bsvc:Employee_Reference>");
						sb.append("\n");					
					sb.append(" </bsvc:Request_Criteria>");
					sb.append("\n");
				}
			}  
			fr.close();
			br.close();
			
			updatedRequestfile = File.createTempFile(ruleName + "_" + columnVal , ".xml");
			PrintWriter writer = new PrintWriter(updatedRequestfile);
		    writer.write(sb.toString());
			writer.flush();
			writer.close();
		}  
		catch(IOException e)  
		{  
			e.printStackTrace();  
		}
		return updatedRequestfile.getAbsolutePath(); 
	}
	
	private JSONArray createCSVFromWDChangeBenefits(Tenant tenant, InputStream is, SOAPConnection soapConnection, int startIndex, int endIndex, JSONArray headingWd,
			String loadCycle, String ruleName, String client) {
		
		targetContent = null;
		String checkFile = null;
		String workerId = "";
		String benefitPlanName = "";
		String benefitPlanNameArr = "";
		String finalStr = "";
		String headerStr = "";
		
		Map<String,String> workerMap = null;
		Map<String,String> healthCareMap = null;
		Map<String,String> insuranceMap = null;
		Map<String,String> retirementMap = null;
		Map<String,String> additionalMap = null;
		
		try 
		{
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 GET_CHANGE_BENEFITS_REQUEST_FILE = requestfile.getAbsolutePath();
				 if(errorList.isEmpty())
				 {
					 for(int i = 0; i<columnList.size();i++)
					 {
						 checkFile = addWorkerIdListToFindError(GET_CHANGE_BENEFITS_REQUEST_FILE, columnList.get(i), ruleName, "Employee_ID");
						 is = new FileInputStream(checkFile);
					     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     SOAPPart soapPart = soapMessage.getSOAPPart();
					     SOAPEnvelope envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
							  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
					     ByteArrayOutputStream out = new ByteArrayOutputStream();
					     soapMessage.writeTo(out);
					     String strMsgChk = new String(out.toByteArray());	
					     
					     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
					     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
						 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
						 out = new ByteArrayOutputStream();
						 soapResponse.writeTo(out);
						 strMsgChk = new String(out.toByteArray(), "utf-8");
						 if(strMsgChk.contains("faultstring"))
						 {
							 errorList.add(columnList.get(i)) ;
						 }
						 else
						 {
							 ReportElement rptElement = XmlParserManager.parseXml(strMsgChk);				 
							 ReportElement benefitEnrollmentData = rptElement.getChild("env:Body")
										.getChild("wd:Get_Workers_Response")
										.getChild("wd:Response_Data")
										.getChild("wd:Worker")
										.getChild("wd:Worker_Data")
			 							.getChild("wd:Benefit_Enrollment_Data");
							 
							 if(benefitEnrollmentData == null)
							 {
								 errorList.add(columnList.get(i));
							 }
							 else
							 {
								 ReportElement responseData = rptElement.getChild("env:Body")
											.getChild("wd:Get_Workers_Response")
											.getChild("wd:Response_Data");
								 
								 List<ReportElement> workerList = responseData.getChildren("wd:Worker");
								 if(workerList != null && workerList.size()>0)
								 {
										benefitPlanNameArr = "";
										
									 for(ReportElement reportElement : workerList)
									 {
										 ReportElement workerRef = reportElement.getChild("wd:Worker_Reference");
										 if(workerRef != null)
										 {
											 List<ReportElement> idData = workerRef.getChildren("wd:ID");					 
											 for(ReportElement wdElement:idData)
											 {
												 workerMap = wdElement.getAllAttributes();
												 if(workerMap.get("wd:type").equals("Employee_ID"))
												 {
													 workerId = wdElement.getValue().trim();
													 System.out.println("workerId:"+workerId);
												 }
											 }
										 }
										 ReportElement healthCareData = reportElement.getChild("wd:Worker_Data")
						 							.getChild("wd:Benefit_Enrollment_Data")
						 							.getChild("wd:Health_Care_Data");
										 
										 if(healthCareData != null)
										 {
											 List<ReportElement> benefitElectionHealthCareDataList = healthCareData.getChild("wd:Health_Care_Period_Data")
							 							.getChildren("wd:Health_Care_Coverage_Data");
											 
											 for(ReportElement benefitElectionHealthCareDataElement: benefitElectionHealthCareDataList)
											 {
												 ReportElement 	benefitElectionHealthCareData = benefitElectionHealthCareDataElement.getChild("wd:Benefit_Election_Data");
												 if(benefitElectionHealthCareData != null)
												 {													 
													 ReportElement benefitPlanSummaryData = benefitElectionHealthCareData.getChild("wd:Benefit_Plan_Summary_Data");
													 if(benefitPlanSummaryData != null)
													 {
														 ReportElement healthCareRef = benefitPlanSummaryData.getChild("wd:Benefit_Plan_Reference");
														 if(healthCareRef != null)
														 {
															 List<ReportElement> healthCareSummaryData = healthCareRef.getChildren("wd:ID");					 
															 for(ReportElement healthCareElement:healthCareSummaryData)
															 {
																 healthCareMap = healthCareElement.getAllAttributes();
																 if(healthCareMap.get("wd:type").equals("Health_Care_Coverage_Plan_ID"))
																 {
																	 benefitPlanName = healthCareElement.getValue().trim();
																	 if(benefitPlanNameArr.equals(""))
																	 {
																		 benefitPlanNameArr = benefitPlanName;
																	 }
																	 else
																	 {
																		 benefitPlanNameArr = benefitPlanNameArr + "~" + benefitPlanName;
																	 }
																 }
															 }
														 }
													 }
												 }
											 }
										 }
										 
										 ReportElement insuranceData = reportElement.getChild("wd:Worker_Data")
						 							.getChild("wd:Benefit_Enrollment_Data")
						 							.getChild("wd:Insurance_Data");
										 
										 if(insuranceData != null)
										 {
											 List<ReportElement> insuranceCoverageList = insuranceData.getChild("wd:Insurance_Period_Data")
							 							.getChildren("wd:Insurance_Coverage_Data");

											 for(ReportElement coverageElement:insuranceCoverageList)
											 {
												 ReportElement benefitElectionInsuranceData = coverageElement.getChild("wd:Benefit_Election_Data");
												 if(benefitElectionInsuranceData != null)
												 {													 
													 ReportElement insurancePlanSummaryData = benefitElectionInsuranceData.getChild("wd:Benefit_Plan_Summary_Data");
													 if(insurancePlanSummaryData != null)
													 {
														 ReportElement insuranceRef = insurancePlanSummaryData.getChild("wd:Benefit_Plan_Reference");
														 if(insuranceRef != null)
														 {
															 List<ReportElement> insuranceRefData = insuranceRef.getChildren("wd:ID");					 
															 for(ReportElement insuranceElement:insuranceRefData)
															 {
																 insuranceMap = insuranceElement.getAllAttributes();
																 if(insuranceMap.get("wd:type").equals("Insurance_Coverage_Plan_ID"))
																 {																	 
																	 benefitPlanName = insuranceElement.getValue().trim();
																	 if(benefitPlanNameArr.equals(""))
																	 {
																		 benefitPlanNameArr = benefitPlanName;
																	 }
																	 else
																	 {
																		 benefitPlanNameArr = benefitPlanNameArr + "~" + benefitPlanName;
																	 }
																 }
															 }
														 }
													 }
												 }
											 }
										 }
										 
										 ReportElement retireSavingData = reportElement.getChild("wd:Worker_Data")
						 							.getChild("wd:Benefit_Enrollment_Data")
						 							.getChild("wd:Retirement_Savings_Data");
										 
										 if(retireSavingData != null)
										 {
											 List<ReportElement> benefitElectionRetirementDataList = retireSavingData.getChild("wd:Retirement_Savings_Period_Data")
							 							.getChildren("wd:Retirement_Savings_Coverage_Data");
											 
											 for(ReportElement benefitElectionRetirementDataElement:benefitElectionRetirementDataList)
											 {
												 ReportElement 	benefitElectionRetirementData = benefitElectionRetirementDataElement.getChild("wd:Benefit_Election_Data");
												 if(benefitElectionRetirementData != null)
												 {													 
													 ReportElement retirementPlanSummaryData = benefitElectionRetirementData.getChild("wd:Benefit_Plan_Summary_Data");
													 if(retirementPlanSummaryData != null)
													 {
														 ReportElement retirementRef = retirementPlanSummaryData.getChild("wd:Benefit_Plan_Reference");
														 if(retirementRef != null)
														 {
															 List<ReportElement> retireSummaryData = retirementRef.getChildren("wd:ID");					 
															 for(ReportElement retirementElement:retireSummaryData)
															 {
																 retirementMap = retirementElement.getAllAttributes();
																 if(retirementMap.get("wd:type").equals("Defined_Contribution_Plan_ID"))
																 {
																	 benefitPlanName = retirementElement.getValue().trim();
																	 if(benefitPlanNameArr.equals(""))
																	 {
																		 benefitPlanNameArr = benefitPlanName;
																	 }
																	 else
																	 {
																		 benefitPlanNameArr = benefitPlanNameArr + "~" + benefitPlanName;
																	 }
																 }
															 }
														 }
													 }
												 }
											 }
										 }
										 
										 ReportElement additionalBenefitData = reportElement.getChild("wd:Worker_Data")
						 							.getChild("wd:Benefit_Enrollment_Data")
						 							.getChild("wd:Additional_Benefits_Data");
										 
										 if(additionalBenefitData != null)
										 {
											 List<ReportElement> benefitElectionAdditionalPeriodDataList = additionalBenefitData.getChildren("wd:Additional_Benefits_Period_Data");
											 for(ReportElement benefitElectionAdditionalDataElement: benefitElectionAdditionalPeriodDataList)
											 {
												 List<ReportElement> benefitElectionAdditionalCoverageDataList = benefitElectionAdditionalDataElement
								 							.getChildren("wd:Additional_Benefits_Coverage_Data");
								 							
												 for(ReportElement benefitElectionAdditionalCoverDataElement: benefitElectionAdditionalCoverageDataList)
												 {
													 ReportElement benefitElectionAdditionalData = benefitElectionAdditionalCoverDataElement.getChild("wd:Benefit_Election_Data");
													 if(benefitElectionAdditionalDataElement != null)
													 {													 
														 ReportElement additionalPlanSummaryData = benefitElectionAdditionalData.getChild("wd:Benefit_Plan_Summary_Data");
														 if(additionalPlanSummaryData != null)
														 {
															 ReportElement additionalRef = additionalPlanSummaryData.getChild("wd:Benefit_Plan_Reference");
															 if(additionalRef != null)
															 {
																 List<ReportElement> addnSummaryData = additionalRef.getChildren("wd:ID");					 
																 for(ReportElement additionalElement:addnSummaryData)
																 {
																	 additionalMap = additionalElement.getAllAttributes();
																	 if(additionalMap.get("wd:type").equals("Additional_Benefits_Plan_ID"))
																	 {
																		 benefitPlanName = additionalElement.getValue().trim();
																		 if(benefitPlanNameArr.equals(""))
																		 {
																			 benefitPlanNameArr = benefitPlanName;
																		 }
																		 else
																		 {
																			 benefitPlanNameArr = benefitPlanNameArr + "~" + benefitPlanName;
																		 }
																	 }
																 }
															 }
														 }
													 }
												 }
											 }
			
										 }
										 
									 }
									 headingFromWD = "Employee_ID,Benefit_Plan_Name";
									 
									 headerStr = workerId + "," + benefitPlanNameArr;
									 
									 if(finalStr.equals(""))
									 {
										 finalStr = headingFromWD + "\n" + headerStr;
									 }
									 else
									 {
										 finalStr = finalStr + "\n" + headerStr;
									 }
								 }
							 }
						 }
					 }
					 columnList.removeAll(errorList);
					 wdCount = columnList.size();
				 }
				 System.out.println(finalStr);
				 targetContent = finalStr.toString().getBytes();
				 
				 headingWd = selectColumnMapping(loadCycle, ruleName, "Employee_ID");
				 complete = true;
			}
			 
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		return headingWd;

	}
	

	private String addCostCenterIdList(String GET_COST_CENTER_REQUEST_FILE, List<String> columnList, String ruleName, int startIndex, int endIndex, String referenceId) {
		
		File updatedRequestfile = null;
		try  
		{  
			File file = new File(GET_COST_CENTER_REQUEST_FILE);     
			FileReader fr = new FileReader(file);   
			BufferedReader br = new BufferedReader(fr);   
			StringBuffer sb = new StringBuffer();     
			String line; 
			boolean executed = true;
			while((line=br.readLine())!=null)  
			{  
				sb.append(line);  
				sb.append("\n");
				if(line.contains("bsvc:Get_Organizations_Request") && executed)
				{
					executed = false;
					sb.append(" <bsvc:Request_References>"); 
					sb.append("\n");
					for(int i = startIndex;i<endIndex;i++)
					{
						sb.append("  <bsvc:Organization_Reference bsvc:Descriptor=" + "\"" + referenceId + "\"" + ">");
						sb.append("\n");
						sb.append("   <bsvc:ID bsvc:type=" + "\"" + referenceId + "\"" + ">" + columnList.get(i) + "</bsvc:ID>");
						sb.append("\n");
						sb.append("  </bsvc:Organization_Reference>");
						sb.append("\n");
					}
					sb.append(" </bsvc:Request_References>");
					sb.append("\n");
				}
			}  
			fr.close();
			br.close();
			
			updatedRequestfile = File.createTempFile(ruleName + "_" + startIndex , ".xml");
			PrintWriter writer = new PrintWriter(updatedRequestfile);
		    writer.write(sb.toString());
			writer.flush();
			writer.close();
		}  
		catch(IOException e)  
		{  
			e.printStackTrace();  
		}
		return updatedRequestfile.getAbsolutePath(); 
	}
	
	private String addPositionIdList(String GET_POSITION_REQUEST_FILE, String columnVal, String ruleName, String idVal) {
		
		File updatedRequestfile = null;
		try  
		{  
			File file = new File(GET_POSITION_REQUEST_FILE);     
			FileReader fr = new FileReader(file);   
			BufferedReader br = new BufferedReader(fr);   
			StringBuffer sb = new StringBuffer();     
			String line; 
			boolean executed = true;
			while((line=br.readLine())!=null)  
			{  
				sb.append(line);  
				sb.append("\n");
				if(line.contains("bsvc:Get_Positions_Request") && executed)
				{
					executed = false;
					sb.append(" <bsvc:Request_References>"); 
					sb.append("\n");
					sb.append("  <bsvc:Positions_Reference bsvc:Descriptor=" + "\"" + idVal + "\"" + ">");
					sb.append("\n");
					sb.append("   <bsvc:ID bsvc:type=" + "\"" + "Position_ID" + "\"" + ">" + columnVal + "</bsvc:ID>");
					sb.append("\n");
					sb.append("  </bsvc:Positions_Reference>");
					sb.append("\n");
					
					sb.append(" </bsvc:Request_References>");
					sb.append("\n");
				}
			}  
			fr.close();
			br.close();	
			
			updatedRequestfile = File.createTempFile(ruleName + "_" + columnVal , ".xml");
			PrintWriter writer = new PrintWriter(updatedRequestfile);
		    writer.write(sb.toString());
			writer.flush();
			writer.close();
		}  
		catch(IOException e)  
		{  
			e.printStackTrace();  
		}
		return updatedRequestfile.getAbsolutePath(); 
	}
	
	private String addIdListToFindError(String GET_APPLICANT_REQUEST_FILE, String columnVal, String ruleName, String idVal) {
		
		File updatedRequestfile = null;
		try  
		{  
			File file = new File(GET_APPLICANT_REQUEST_FILE);     
			FileReader fr = new FileReader(file);   
			BufferedReader br = new BufferedReader(fr);   
			StringBuffer sb = new StringBuffer();     
			String line; 
			boolean executed = true;
			while((line=br.readLine())!=null)  
			{  
				sb.append(line);  
				sb.append("\n");
				if(line.contains("bsvc:Get_Applicants_Request") && executed)
				{
					executed = false;
					sb.append(" <bsvc:Request_References>"); 
					sb.append("\n");
					sb.append("  <bsvc:Applicant_Reference bsvc:Descriptor=" + "\"" + idVal + "\"" + ">");
					sb.append("\n");
					sb.append("   <bsvc:ID bsvc:type=" + "\"" + "Applicant_ID" + "\"" + ">" + columnVal + "</bsvc:ID>");
					sb.append("\n");
					sb.append("  </bsvc:Applicant_Reference>");
					sb.append("\n");
					
					sb.append(" </bsvc:Request_References>");
					sb.append("\n");
				}
			}  
			fr.close();
			br.close();
			
			updatedRequestfile = File.createTempFile(ruleName + "_" + columnVal , ".xml");
			PrintWriter writer = new PrintWriter(updatedRequestfile);
		    writer.write(sb.toString());
			writer.flush();
			writer.close();
		}  
		catch(IOException e)  
		{  
			e.printStackTrace();  
		}
		return updatedRequestfile.getAbsolutePath(); 
	}
	
	private String addPayrollPayeeWorkToFindError(String xmlFile, String columnVal, String ruleName, String idVal) {
		
		File updatedRequestfile = null;
		try  
		{  
			File file = new File(xmlFile);     
			FileReader fr = new FileReader(file);   
			BufferedReader br = new BufferedReader(fr);   
			StringBuffer sb = new StringBuffer();     
			String line;
			boolean executed = true;
			while((line=br.readLine())!=null)  
			{  
				sb.append(line);  
				sb.append("\n");
				if(line.contains("bsvc:Get_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_Request") && executed)
				{
					executed = false;
					sb.append(" <bsvc:Request_References>"); 
					sb.append("\n");
						sb.append("  <bsvc:Payroll_Payee_Ongoing_Jurisdiction_Reference bsvc:Descriptor=" + "\"" + idVal + "\"" + ">");
						sb.append("\n");
						sb.append("   <bsvc:ID bsvc:type=" + "\"" + idVal + "\"" + ">" + columnVal + "</bsvc:ID>");
						sb.append("\n");
						sb.append("  </bsvc:Payroll_Payee_Ongoing_Jurisdiction_Reference>");
						sb.append("\n");
					
					sb.append(" </bsvc:Request_References>");
					sb.append("\n");
				}
			}
			fr.close();
			br.close();	
			
			updatedRequestfile = File.createTempFile(ruleName + "_" + columnVal , ".xml");
			PrintWriter writer = new PrintWriter(updatedRequestfile);
		    writer.write(sb.toString());
			writer.flush();
			writer.close();
		}  
		catch(IOException e)  
		{  
			e.printStackTrace();  
		}
		return updatedRequestfile.getAbsolutePath(); 
	}
	
	private String addPaycheckDeliveryToFindError(String xmlFile, String columnVal, String ruleName, String idVal) {
		
		File updatedRequestfile = null;
		try  
		{  
			File file = new File(xmlFile);     
			FileReader fr = new FileReader(file);   
			BufferedReader br = new BufferedReader(fr);   
			StringBuffer sb = new StringBuffer();     
			String line;
			boolean executed = true;
			while((line=br.readLine())!=null)  
			{  
				sb.append(line);  
				sb.append("\n");
				if(line.contains("bsvc:Get_Paycheck_Deliveries_Request") && executed)
				{
					executed = false;
					sb.append(" <bsvc:Request_References>"); 
					sb.append("\n");
						sb.append("  <bsvc:Paycheck_Delivery_Reference bsvc:Descriptor=" + "\"" + idVal + "\"" + ">");
						sb.append("\n");
						sb.append("   <bsvc:ID bsvc:type=" + "\"" + idVal + "\"" + ">" + columnVal + "</bsvc:ID>");
						sb.append("\n");
						sb.append("  </bsvc:Paycheck_Delivery_Reference>");
						sb.append("\n");
					
					sb.append(" </bsvc:Request_References>");
					sb.append("\n");
				}
			}
			fr.close();
			br.close();	
			
			updatedRequestfile = File.createTempFile(ruleName + "_" + columnVal , ".xml");
			PrintWriter writer = new PrintWriter(updatedRequestfile);
		    writer.write(sb.toString());
			writer.flush();
			writer.close();
		}  
		catch(IOException e)  
		{  
			e.printStackTrace();  
		}
		return updatedRequestfile.getAbsolutePath(); 
	}
	
	private String addPayrollDeductionToFindError(String xmlFile, String columnVal, String ruleName, String idVal) {
		
		File updatedRequestfile = null;
		try  
		{  
			File file = new File(xmlFile);     
			FileReader fr = new FileReader(file);   
			BufferedReader br = new BufferedReader(fr);   
			StringBuffer sb = new StringBuffer();     
			String line;
			boolean executed = true;
			while((line=br.readLine())!=null)  
			{  
				sb.append(line);  
				sb.append("\n");
				if(line.contains("bsvc:Get_Payroll_Deduction_Recipients_Request") && executed)
				{
					executed = false;
					sb.append(" <bsvc:Request_References>"); 
					sb.append("\n");
						sb.append("  <bsvc:Payroll_Deduction_Recipient_Reference bsvc:Descriptor=" + "\"" + idVal + "\"" + ">");
						sb.append("\n");
						sb.append("   <bsvc:ID bsvc:type=" + "\"" + idVal + "\"" + ">" + columnVal + "</bsvc:ID>");
						sb.append("\n");
						sb.append("  </bsvc:Payroll_Deduction_Recipient_Reference>");
						sb.append("\n");
					
					sb.append(" </bsvc:Request_References>");
					sb.append("\n");
				}
			}
			fr.close();
			br.close();	
			
			updatedRequestfile = File.createTempFile(ruleName + "_" + columnVal , ".xml");
			PrintWriter writer = new PrintWriter(updatedRequestfile);
		    writer.write(sb.toString());
			writer.flush();
			writer.close();
		}  
		catch(IOException e)  
		{  
			e.printStackTrace();  
		}
		return updatedRequestfile.getAbsolutePath(); 
	}
	
	private String addPayrollPayeeFICAToFindError(String xmlFile, String columnVal, String ruleName, String idVal) {
		
		File updatedRequestfile = null;
		try  
		{  
			File file = new File(xmlFile);     
			FileReader fr = new FileReader(file);   
			BufferedReader br = new BufferedReader(fr);   
			StringBuffer sb = new StringBuffer();     
			String line;
			boolean executed = true;
			while((line=br.readLine())!=null)  
			{  
				sb.append(line);  
				sb.append("\n");
				if(line.contains("bsvc:Get_Payroll_Payee_FICAs_Request") && executed)
				{
					executed = false;
					sb.append(" <bsvc:Request_Criteria>"); 
					sb.append("\n");
						sb.append("  <bsvc:Worker_Reference bsvc:Descriptor=" + "\"" + idVal + "\"" + ">");
						sb.append("\n");
						sb.append("   <bsvc:ID bsvc:type=" + "\"" + idVal + "\"" + ">" + columnVal + "</bsvc:ID>");
						sb.append("\n");
						sb.append("  </bsvc:Worker_Reference>");
						sb.append("\n");
					
					sb.append(" </bsvc:Request_Criteria>");
					sb.append("\n");
				}
			}
			fr.close();
			br.close();	
			
			updatedRequestfile = File.createTempFile(ruleName + "_" + columnVal , ".xml");
			PrintWriter writer = new PrintWriter(updatedRequestfile);
		    writer.write(sb.toString());
			writer.flush();
			writer.close();
		}  
		catch(IOException e)  
		{  
			e.printStackTrace();  
		}
		return updatedRequestfile.getAbsolutePath(); 
	}
	
	private String addPayrollWithholdingOrderToFindError(String xmlFile, String columnVal, String ruleName, String idVal) {
		
		File updatedRequestfile = null;
		try  
		{  
			File file = new File(xmlFile);     
			FileReader fr = new FileReader(file);   
			BufferedReader br = new BufferedReader(fr);   
			StringBuffer sb = new StringBuffer();     
			String line;
			boolean executed = true;
			while((line=br.readLine())!=null)  
			{  
				sb.append(line);  
				sb.append("\n");
				if(line.contains("bsvc:Get_Payroll_Involuntary_Withholding_Orders_Request") && executed)
				{
					executed = false;
					sb.append(" <bsvc:Request_Criteria>"); 
					sb.append("\n");
						sb.append("  <bsvc:Worker_Reference bsvc:Descriptor=" + "\"" + idVal + "\"" + ">");
						sb.append("\n");
						sb.append("   <bsvc:ID bsvc:type=" + "\"" + idVal + "\"" + ">" + columnVal + "</bsvc:ID>");
						sb.append("\n");
						sb.append("  </bsvc:Worker_Reference>");
						sb.append("\n");
					
					sb.append(" </bsvc:Request_Criteria>");
					sb.append("\n");
				}
			}
			fr.close();
			br.close();	
			
			updatedRequestfile = File.createTempFile(ruleName + "_" + columnVal , ".xml");
			PrintWriter writer = new PrintWriter(updatedRequestfile);
		    writer.write(sb.toString());
			writer.flush();
			writer.close();
		}  
		catch(IOException e)  
		{  
			e.printStackTrace();  
		}
		return updatedRequestfile.getAbsolutePath(); 
	}
	
	private String addFederalTaxElectionToFindError(String xmlFile, String columnVal, String ruleName, String idVal) {
		
		File updatedRequestfile = null;
		try  
		{  
			File file = new File(xmlFile);     
			FileReader fr = new FileReader(file);   
			BufferedReader br = new BufferedReader(fr);   
			StringBuffer sb = new StringBuffer();     
			String line;
			boolean executed = true;
			while((line=br.readLine())!=null)  
			{  
				sb.append(line);  
				sb.append("\n");
				if(line.contains("bsvc:Get_Payroll_Federal_W-4_Tax_Elections_Request") && executed)
				{
					executed = false;
					sb.append(" <bsvc:Request_Criteria>"); 
					sb.append("\n");
						sb.append("  <bsvc:Worker_Reference bsvc:Descriptor=" + "\"" + idVal + "\"" + ">");
						sb.append("\n");
						sb.append("   <bsvc:ID bsvc:type=" + "\"" + idVal + "\"" + ">" + columnVal + "</bsvc:ID>");
						sb.append("\n");
						sb.append("  </bsvc:Worker_Reference>");
						sb.append("\n");
					
					sb.append(" </bsvc:Request_Criteria>");
					sb.append("\n");
				}
			}
			fr.close();
			br.close();	
			
			updatedRequestfile = File.createTempFile(ruleName + "_" + columnVal , ".xml");
			PrintWriter writer = new PrintWriter(updatedRequestfile);
		    writer.write(sb.toString());
			writer.flush();
			writer.close();
		}  
		catch(IOException e)  
		{  
			e.printStackTrace();  
		}
		return updatedRequestfile.getAbsolutePath(); 
	}
	
	private String addSubmitPayrollInputToFindError(String xmlFile, String columnVal, String ruleName, String idVal) {
		
		File updatedRequestfile = null;
		try  
		{  
			File file = new File(xmlFile);     
			FileReader fr = new FileReader(file);   
			BufferedReader br = new BufferedReader(fr);   
			StringBuffer sb = new StringBuffer();     
			String line;
			boolean executed = true;
			while((line=br.readLine())!=null)  
			{  
				sb.append(line);  
				sb.append("\n");
				if(line.contains("bsvc:Get_Submit_Payroll_Inputs_Request") && executed)
				{
					executed = false;
					sb.append(" <bsvc:Request_Criteria>"); 
					sb.append("\n");
						sb.append("  <bsvc:Worker_Reference bsvc:Descriptor=" + "\"" + idVal + "\"" + ">");
						sb.append("\n");
						sb.append("   <bsvc:ID bsvc:type=" + "\"" + idVal + "\"" + ">" + columnVal + "</bsvc:ID>");
						sb.append("\n");
						sb.append("  </bsvc:Worker_Reference>");
						sb.append("\n");
					
					sb.append(" </bsvc:Request_Criteria>");
					sb.append("\n");
				}
			}
			fr.close();
			br.close();	
			
			updatedRequestfile = File.createTempFile(ruleName + "_" + columnVal , ".xml");
			PrintWriter writer = new PrintWriter(updatedRequestfile);
		    writer.write(sb.toString());
			writer.flush();
			writer.close();
		}  
		catch(IOException e)  
		{  
			e.printStackTrace();  
		}
		return updatedRequestfile.getAbsolutePath(); 
	}
	
	private String addIndividualBenefitToFindError(String xmlFile, String columnVal, String ruleName, String idVal) {
		
		File updatedRequestfile = null;
		try  
		{  
			File file = new File(xmlFile);     
			FileReader fr = new FileReader(file);   
			BufferedReader br = new BufferedReader(fr);   
			StringBuffer sb = new StringBuffer();     
			String line;
			boolean executed = true;
			while((line=br.readLine())!=null)  
			{  
				sb.append(line);  
				sb.append("\n");
				if(line.contains("bsvc:Get_Benefit_Individual_Rates_Request") && executed)
				{
					executed = false;
					sb.append(" <bsvc:Request_Criteria>"); 
					sb.append("\n");
						sb.append("  <bsvc:Worker_Reference bsvc:Descriptor=" + "\"" + idVal + "\"" + ">");
						sb.append("\n");
						sb.append("   <bsvc:ID bsvc:type=" + "\"" + idVal + "\"" + ">" + columnVal + "</bsvc:ID>");
						sb.append("\n");
						sb.append("  </bsvc:Worker_Reference>");
						sb.append("\n");
					
					sb.append(" </bsvc:Request_Criteria>");
					sb.append("\n");
				}
			}
			fr.close();
			br.close();	
			
			updatedRequestfile = File.createTempFile(ruleName + "_" + columnVal , ".xml");
			PrintWriter writer = new PrintWriter(updatedRequestfile);
		    writer.write(sb.toString());
			writer.flush();
			writer.close();
		}  
		catch(IOException e)  
		{  
			e.printStackTrace();  
		}
		return updatedRequestfile.getAbsolutePath(); 
	}
	
	private String addWorkerIdListToFindError(String xmlFile, String columnVal, String ruleName, String idVal) {
		
		File updatedRequestfile = null;
		try  
		{  
			File file = new File(xmlFile);     
			FileReader fr = new FileReader(file);   
			BufferedReader br = new BufferedReader(fr);   
			StringBuffer sb = new StringBuffer();     
			String line;
			boolean executed = true;
			while((line=br.readLine())!=null)  
			{  
				sb.append(line);  
				sb.append("\n");
				if(line.contains("bsvc:Get_Workers_Request") && executed)
				{
					executed = false;
					sb.append(" <bsvc:Request_References>"); 
					sb.append("\n");
						sb.append("  <bsvc:Worker_Reference bsvc:Descriptor=" + "\"" + idVal + "\"" + ">");
						sb.append("\n");
						sb.append("   <bsvc:ID bsvc:type=" + "\"" + idVal + "\"" + ">" + columnVal + "</bsvc:ID>");
						sb.append("\n");
						sb.append("  </bsvc:Worker_Reference>");
						sb.append("\n");
					
					sb.append(" </bsvc:Request_References>");
					sb.append("\n");
				}
			}
			fr.close();
			br.close();	
			
			updatedRequestfile = File.createTempFile(ruleName + "_" + columnVal , ".xml");
			PrintWriter writer = new PrintWriter(updatedRequestfile);
		    writer.write(sb.toString());
			writer.flush();
			writer.close();
		}  
		catch(IOException e)  
		{  
			e.printStackTrace();  
		}
		return updatedRequestfile.getAbsolutePath(); 
	}
	
	private String addJobHistoryIdListToFindError(String xmlFile, String columnVal, String ruleName, String idVal) {
		
		File updatedRequestfile = null;
		try  
		{  
			File file = new File(xmlFile);     
			FileReader fr = new FileReader(file);   
			BufferedReader br = new BufferedReader(fr);   
			StringBuffer sb = new StringBuffer();     
			String line;
			boolean executed = true;
			while((line=br.readLine())!=null)  
			{  
				sb.append(line);  
				sb.append("\n");
				if(line.contains("bsvc:Get_Previous_System_Job_History_Request") && executed)
				{
					executed = false;
					sb.append(" <bsvc:Request_References>"); 
					sb.append("\n");
						sb.append("  <bsvc:Worker_Reference bsvc:Descriptor=" + "\"" + idVal + "\"" + ">");
						sb.append("\n");
						sb.append("   <bsvc:ID bsvc:type=" + "\"" + idVal + "\"" + ">" + columnVal + "</bsvc:ID>");
						sb.append("\n");
						sb.append("  </bsvc:Worker_Reference>");
						sb.append("\n");
					
					sb.append(" </bsvc:Request_References>");
					sb.append("\n");
				}
			}
			fr.close();
			br.close();	
			
			updatedRequestfile = File.createTempFile(ruleName + "_" + columnVal , ".xml");
			PrintWriter writer = new PrintWriter(updatedRequestfile);
		    writer.write(sb.toString());
			writer.flush();
			writer.close();
		}  
		catch(IOException e)  
		{  
			e.printStackTrace();  
		}
		return updatedRequestfile.getAbsolutePath(); 
	}
	
	private String addCandidateIdListToFindError(String xmlFile, String columnVal, String ruleName, String idVal) {
		
		File updatedRequestfile = null;
		try  
		{  
			File file = new File(xmlFile);     
			FileReader fr = new FileReader(file);   
			BufferedReader br = new BufferedReader(fr);   
			StringBuffer sb = new StringBuffer();     
			String line;
			boolean executed = true;
			while((line=br.readLine())!=null)  
			{  
				sb.append(line);  
				sb.append("\n");
				if(line.contains("bsvc:Get_Candidates_Request") && executed)
				{
					executed = false;
					sb.append(" <bsvc:Request_References>"); 
					sb.append("\n");
						sb.append("  <bsvc:Candidate_Reference bsvc:Descriptor=" + "\"" + idVal + "\"" + ">");
						sb.append("\n");
						sb.append("   <bsvc:ID bsvc:type=" + "\"" + idVal + "\"" + ">" + columnVal + "</bsvc:ID>");
						sb.append("\n");
						sb.append("  </bsvc:Candidate_Reference>");
						sb.append("\n");
					
					sb.append(" </bsvc:Request_References>");
					sb.append("\n");
				}
			}
			fr.close();
			br.close();	
			
			updatedRequestfile = File.createTempFile(ruleName + "_" + columnVal , ".xml");
			PrintWriter writer = new PrintWriter(updatedRequestfile);
		    writer.write(sb.toString());
			writer.flush();
			writer.close();
		}  
		catch(IOException e)  
		{  
			e.printStackTrace();  
		}
		return updatedRequestfile.getAbsolutePath(); 
	}
	
	private String addJobRequisitionIdListToFindError(String xmlFile, String columnVal, String ruleName, String idVal) {
		
		File updatedRequestfile = null;
		try  
		{  
			File file = new File(xmlFile);     
			FileReader fr = new FileReader(file);   
			BufferedReader br = new BufferedReader(fr);   
			StringBuffer sb = new StringBuffer();     
			String line;
			boolean executed = true;
			while((line=br.readLine())!=null)  
			{  
				sb.append(line);  
				sb.append("\n");
				if(line.contains("bsvc:Get_Job_Requisitions_Request") && executed)
				{
					executed = false;
					sb.append(" <bsvc:Request_References>"); 
					sb.append("\n");
						sb.append("  <bsvc:Job_Requisition_Reference bsvc:Descriptor=" + "\"" + idVal + "\"" + ">");
						sb.append("\n");
						sb.append("   <bsvc:ID bsvc:type=" + "\"" + idVal + "\"" + ">" + columnVal + "</bsvc:ID>");
						sb.append("\n");
						sb.append("  </bsvc:Job_Requisition_Reference>");
						sb.append("\n");
					
					sb.append(" </bsvc:Request_References>");
					sb.append("\n");
				}
			}
			fr.close();
			br.close();	
			
			updatedRequestfile = File.createTempFile(ruleName + "_" + columnVal , ".xml");
			PrintWriter writer = new PrintWriter(updatedRequestfile);
		    writer.write(sb.toString());
			writer.flush();
			writer.close();
		}  
		catch(IOException e)  
		{  
			e.printStackTrace();  
		}
		return updatedRequestfile.getAbsolutePath(); 
	}
	
	private String addEvergreenRequisitionIdListToFindError(String xmlFile, String columnVal, String ruleName, String idVal) {
		
		File updatedRequestfile = null;
		try  
		{  
			File file = new File(xmlFile);     
			FileReader fr = new FileReader(file);   
			BufferedReader br = new BufferedReader(fr);   
			StringBuffer sb = new StringBuffer();     
			String line;
			boolean executed = true;
			while((line=br.readLine())!=null)  
			{  
				sb.append(line);  
				sb.append("\n");
				if(line.contains("bsvc:Get_Evergreen_Requisitions_Request") && executed)
				{
					executed = false;
					sb.append(" <bsvc:Request_References>"); 
					sb.append("\n");
						sb.append("  <bsvc:Evergreen_Job_Requisition_Reference bsvc:Descriptor=" + "\"" + idVal + "\"" + ">");
						sb.append("\n");
						sb.append("   <bsvc:ID bsvc:type=" + "\"" + idVal + "\"" + ">" + columnVal + "</bsvc:ID>");
						sb.append("\n");
						sb.append("  </bsvc:Evergreen_Job_Requisition_Reference>");
						sb.append("\n");
					
					sb.append(" </bsvc:Request_References>");
					sb.append("\n");
				}
			}
			fr.close();
			br.close();	
			
			updatedRequestfile = File.createTempFile(ruleName + "_" + columnVal , ".xml");
			PrintWriter writer = new PrintWriter(updatedRequestfile);
		    writer.write(sb.toString());
			writer.flush();
			writer.close();
		}  
		catch(IOException e)  
		{  
			e.printStackTrace();  
		}
		return updatedRequestfile.getAbsolutePath(); 
	}
	
	private String addWorkerIdListToFindErrorFromCompHistory(String xmlFile, String columnVal, String ruleName, String idVal) {
		
		File updatedRequestfile = null;
		try  
		{  
			File file = new File(xmlFile);     
			FileReader fr = new FileReader(file);   
			BufferedReader br = new BufferedReader(fr);   
			StringBuffer sb = new StringBuffer();     
			String line;
			boolean executed = true;
			while((line=br.readLine())!=null)  
			{  
				sb.append(line);  
				sb.append("\n");
				if(line.contains("bsvc:Get_Previous_System_Compensation_History_Request") && executed)
				{
					executed = false;
					sb.append(" <bsvc:Request_References>"); 
					sb.append("\n");
						sb.append("  <bsvc:Worker_Reference bsvc:Descriptor=" + "\"" + idVal + "\"" + ">");
						sb.append("\n");
						sb.append("   <bsvc:ID bsvc:type=" + "\"" + idVal + "\"" + ">" + columnVal + "</bsvc:ID>");
						sb.append("\n");
						sb.append("  </bsvc:Worker_Reference>");
						sb.append("\n");
					
					sb.append(" </bsvc:Request_References>");
					sb.append("\n");
				}
			}
			fr.close();
			br.close();	
			
			updatedRequestfile = File.createTempFile(ruleName + "_" + columnVal , ".xml");
			PrintWriter writer = new PrintWriter(updatedRequestfile);
		    writer.write(sb.toString());
			writer.flush();
			writer.close();
		}  
		catch(IOException e)  
		{  
			e.printStackTrace();  
		}
		return updatedRequestfile.getAbsolutePath(); 
	}
	
	private String addWorkerIdListToFindErrorFromSystemUser(String xmlFile, String columnVal, String ruleName, String idVal) {
		
		File updatedRequestfile = null;
		try  
		{  
			File file = new File(xmlFile);     
			FileReader fr = new FileReader(file);   
			BufferedReader br = new BufferedReader(fr);   
			StringBuffer sb = new StringBuffer();     
			String line;
			boolean executed = true;
			while((line=br.readLine())!=null)  
			{  
				sb.append(line);  
				sb.append("\n");
				if(line.contains("bsvc:Get_Workday_Account_Request") && executed)
				{
					executed = false;
					sb.append(" <bsvc:Request_References>"); 
					sb.append("\n");
						sb.append("  <bsvc:Workday_Account_Reference bsvc:Descriptor=" + "\"" + idVal + "\"" + ">");
						sb.append("\n");
						sb.append("   <bsvc:ID bsvc:type=" + "\"" + idVal + "\"" + ">" + columnVal + "</bsvc:ID>");
						sb.append("\n");
						sb.append("  </bsvc:Workday_Account_Reference>");
						sb.append("\n");
					
					sb.append(" </bsvc:Request_References>");
					sb.append("\n");
				}
			}
			fr.close();
			br.close();	
			
			updatedRequestfile = File.createTempFile(ruleName + "_" + columnVal , ".xml");
			PrintWriter writer = new PrintWriter(updatedRequestfile);
		    writer.write(sb.toString());
			writer.flush();
			writer.close();
		}  
		catch(IOException e)  
		{  
			e.printStackTrace();  
		}
		return updatedRequestfile.getAbsolutePath(); 
	}
	
	private String addWorkerIdListToFindErrorFromJobFamily(String xmlFile, String columnVal, String ruleName, String idVal) {
		
		File updatedRequestfile = null;
		try  
		{  
			File file = new File(xmlFile);     
			FileReader fr = new FileReader(file);   
			BufferedReader br = new BufferedReader(fr);   
			StringBuffer sb = new StringBuffer();     
			String line;
			boolean executed = true;
			while((line=br.readLine())!=null)  
			{  
				sb.append(line);  
				sb.append("\n");
				if(line.contains("bsvc:Get_Job_Families_Request") && executed)
				{
					executed = false;
					sb.append(" <bsvc:Request_References>"); 
					sb.append("\n");
						sb.append("  <bsvc:Job_Family_Reference bsvc:Descriptor=" + "\"" + idVal + "\"" + ">");
						sb.append("\n");
						sb.append("   <bsvc:ID bsvc:type=" + "\"" + idVal + "\"" + ">" + columnVal + "</bsvc:ID>");
						sb.append("\n");
						sb.append("  </bsvc:Job_Family_Reference>");
						sb.append("\n");
					
					sb.append(" </bsvc:Request_References>");
					sb.append("\n");
				}
			}
			fr.close();
			br.close();	
			
			updatedRequestfile = File.createTempFile(ruleName + "_" + columnVal , ".xml");
			PrintWriter writer = new PrintWriter(updatedRequestfile);
		    writer.write(sb.toString());
			writer.flush();
			writer.close();
		}  
		catch(IOException e)  
		{  
			e.printStackTrace();  
		}
		return updatedRequestfile.getAbsolutePath(); 
	}
	
	private String addWorkerIdListToFindErrorFromJobFamilyGroup(String xmlFile, String columnVal, String ruleName, String idVal) {
		
		File updatedRequestfile = null;
		try  
		{  
			File file = new File(xmlFile);     
			FileReader fr = new FileReader(file);   
			BufferedReader br = new BufferedReader(fr);   
			StringBuffer sb = new StringBuffer();     
			String line;
			boolean executed = true;
			while((line=br.readLine())!=null)  
			{  
				sb.append(line);  
				sb.append("\n");
				if(line.contains("bsvc:Get_Job_Family_Groups_Request") && executed)
				{
					executed = false;
					sb.append(" <bsvc:Request_References>"); 
					sb.append("\n");
						sb.append("  <bsvc:Job_Family_Group_Reference bsvc:Descriptor=" + "\"" + idVal + "\"" + ">");
						sb.append("\n");
						sb.append("   <bsvc:ID bsvc:type=" + "\"" + idVal + "\"" + ">" + columnVal + "</bsvc:ID>");
						sb.append("\n");
						sb.append("  </bsvc:Job_Family_Group_Reference>");
						sb.append("\n");
					
					sb.append(" </bsvc:Request_References>");
					sb.append("\n");
				}
			}
			fr.close();
			br.close();	
			
			updatedRequestfile = File.createTempFile(ruleName + "_" + columnVal , ".xml");
			PrintWriter writer = new PrintWriter(updatedRequestfile);
		    writer.write(sb.toString());
			writer.flush();
			writer.close();
		}  
		catch(IOException e)  
		{  
			e.printStackTrace();  
		}
		return updatedRequestfile.getAbsolutePath(); 
	}
	
	private String addWorkerIdListToFindErrorFromJobProfile(String xmlFile, String columnVal, String ruleName, String idVal) {
		
		File updatedRequestfile = null;
		try  
		{  
			File file = new File(xmlFile);     
			FileReader fr = new FileReader(file);   
			BufferedReader br = new BufferedReader(fr);   
			StringBuffer sb = new StringBuffer();     
			String line;
			boolean executed = true;
			while((line=br.readLine())!=null)  
			{  
				sb.append(line);  
				sb.append("\n");
				if(line.contains("bsvc:Get_Job_Profiles_Request") && executed)
				{
					executed = false;
					sb.append(" <bsvc:Request_References>"); 
					sb.append("\n");
						sb.append("  <bsvc:Job_Profile_Reference bsvc:Descriptor=" + "\"" + idVal + "\"" + ">");
						sb.append("\n");
						sb.append("   <bsvc:ID bsvc:type=" + "\"" + idVal + "\"" + ">" + columnVal + "</bsvc:ID>");
						sb.append("\n");
						sb.append("  </bsvc:Job_Profile_Reference>");
						sb.append("\n");
					
					sb.append(" </bsvc:Request_References>");
					sb.append("\n");
				}
			}
			fr.close();
			br.close();	
			
			updatedRequestfile = File.createTempFile(ruleName + "_" + columnVal , ".xml");
			PrintWriter writer = new PrintWriter(updatedRequestfile);
		    writer.write(sb.toString());
			writer.flush();
			writer.close();
		}  
		catch(IOException e)  
		{  
			e.printStackTrace();  
		}
		return updatedRequestfile.getAbsolutePath(); 
	}
	
	private String addHireIdList(String GET_HIRE_REQUEST_FILE, List<String> columnList, String ruleName, int startIndex, int endIndex, String id) {
		
		File updatedRequestfile = null;
		try  
		{  
			File file = new File(GET_HIRE_REQUEST_FILE);     
			FileReader fr = new FileReader(file);   
			BufferedReader br = new BufferedReader(fr);   
			StringBuffer sb = new StringBuffer();     
			String line;
			boolean executed = true;
			while((line=br.readLine())!=null)  
			{  
				sb.append(line);  
				sb.append("\n");
				if(line.contains("bsvc:Get_Workers_Request") && executed)
				{
					executed = false;
					sb.append(" <bsvc:Request_References>"); 
					sb.append("\n");
					for(int i = startIndex;i<endIndex;i++)
					{
						sb.append("  <bsvc:Worker_Reference bsvc:Descriptor=" + "\"" + id + "\"" + ">");
						sb.append("\n");
						sb.append("   <bsvc:ID bsvc:type=" + "\"" + id + "\"" + ">" + columnList.get(i) + "</bsvc:ID>");
						sb.append("\n");
						sb.append("  </bsvc:Worker_Reference>");
						sb.append("\n");
					}
					sb.append(" </bsvc:Request_References>");
					sb.append("\n");
				}
			}  
			fr.close();
			br.close();	
			
			updatedRequestfile = File.createTempFile(ruleName + "_" + startIndex , ".xml");
			PrintWriter writer = new PrintWriter(updatedRequestfile);
		    writer.write(sb.toString());
			writer.flush();
			writer.close();
		}  
		catch(IOException e)  
		{  
			e.printStackTrace();  
		}
		return updatedRequestfile.getAbsolutePath(); 
	}
	
	private String addLocationIdList(String xmlFile, List<String> columnList, String ruleName, int startIndex, int endIndex, String referenceId) {
		
		File updatedRequestfile = null;
		try  
		{  
			File file = new File(xmlFile);     
			FileReader fr = new FileReader(file);   
			BufferedReader br = new BufferedReader(fr);   
			StringBuffer sb = new StringBuffer();     
			String line; 
			boolean executed = true;
			while((line=br.readLine())!=null)  
			{  
				sb.append(line);  
				sb.append("\n");
				if(line.contains("bsvc:Get_Locations_Request") && executed)
				{
					executed = false;
					sb.append(" <bsvc:Request_References>"); 
					sb.append("\n");
					for(int i = startIndex;i<endIndex;i++)
					{
						sb.append("  <bsvc:Location_Reference bsvc:Descriptor=" + "\"" + referenceId + "\"" + ">");
						sb.append("\n");
						sb.append("   <bsvc:ID bsvc:type=" + "\"" + referenceId + "\"" + ">" + columnList.get(i) + "</bsvc:ID>");
						sb.append("\n");
						sb.append("  </bsvc:Location_Reference>");
						sb.append("\n");
					}
					sb.append(" </bsvc:Request_References>");
					sb.append("\n");
				}
			}  
			fr.close();
			br.close();
			
			updatedRequestfile = File.createTempFile(ruleName + "_" + startIndex , ".xml");
			PrintWriter writer = new PrintWriter(updatedRequestfile);
		    writer.write(sb.toString());
			writer.flush();
			writer.close();
		}  
		catch(IOException e)  
		{  
			e.printStackTrace();  
		}
		return updatedRequestfile.getAbsolutePath(); 
	}
	
	public JSONArray selectColumnMapping(String loadCycle, String ruleName, String identifier) {
		
		JSONArray headingSource = new JSONArray();
		JSONArray headingWd = new JSONArray();
		String heading = "";
		
		try 
		{
			String[] headingFromWdArr = headingFromWD.split(",");
			for(int i = 0;i<headingFromWdArr.length; i++)
			{
				JSONObject objWd = new JSONObject();
				objWd.put("headingWD", headingFromWdArr[i]);
				headingWd.put(objWd);
			}
			
			String[] headingFromSourceArr = headingFromSource.split(",");
			for(int j = 0;j<headingFromSourceArr.length; j++)
			{
				JSONObject objSrc = new JSONObject();
				heading = findHeadingName(headingFromSourceArr[j], headingWd);
				if(heading.equalsIgnoreCase(identifier))
				{
					objSrc.put("isChecked", true);
				}
				else
				{
					objSrc.put("isChecked", false);
				}
				objSrc.put("headingSource", headingFromSourceArr[j]);
				objSrc.put("headingAllWD", headingWd);
				objSrc.put("heading", heading);
				objSrc.put("isSelect", false);
				headingSource.put(objSrc);
			}
		} 
		catch (JSONException e)
		{
			e.printStackTrace();
		}
		return headingSource;
	}

	private String findHeadingName(String sourceHeader, JSONArray headingWd) {

		String headingWD = "";
		String headingWDWOU = "";
		String retStr = "";
		for (int i = 0; i < headingWd.length(); i++) 
		{            
			try 
			{
				headingWD = headingWd.getJSONObject(i).getString("headingWD");
				headingWDWOU = headingWD.replaceAll("_", " ");
				if(headingWDWOU.equalsIgnoreCase(sourceHeader.replaceAll("_", " ")))
				{
					retStr = headingWD;
					break;
				}
			} 
			catch (JSONException e) 
			{
				e.printStackTrace();
			}
	        //System.out.println(headingWD);
	    }
		return retStr;
	}
	
	private void createSOAPHeader(SOAPHeader soapHeader, String sourceTenantName, String sourceTenantUser, String sourceTenantPwd) throws SOAPException {
		
		QName security = soapHeader.createQName("Security", HEADER_SECURITY_NS_PREFIX);
		SOAPHeaderElement headerElement = soapHeader.addHeaderElement(security);
		SOAPElement usernameToken = headerElement.addChildElement("UsernameToken", HEADER_SECURITY_NS_PREFIX);
		SOAPElement username = usernameToken.addChildElement("Username",HEADER_SECURITY_NS_PREFIX);
		username.addTextNode(sourceTenantUser + "@"	+ sourceTenantName);
		SOAPElement password = usernameToken.addChildElement("Password",HEADER_SECURITY_NS_PREFIX);
		password.addTextNode(sourceTenantPwd);
		password.addAttribute(new QName("Type"), PASSWORD_TYPE_ATTR_VALUE);
	}
	
	private String convertExcelToCSV(Sheet sheet, String fileName) {
		
		StringBuilder data = new StringBuilder();
        String[] nextRecord = null;
		String cellValue = "";
		String csvValue = "";
        try 
        {
    		File sourceCsvFile = File.createTempFile(fileName.substring(0, fileName.indexOf(".")), ".csv");
    		int maxNumOfCells = sheet.getRow(1).getLastCellNum();//change made=0
            Iterator<Row> rowIterator = sheet.iterator();
            while (rowIterator.hasNext()) 
            {
            	Row row = rowIterator.next();
            	if(row.getRowNum() >=10)//change made
            	{
	                for( int cellCounter = 1 ; cellCounter < maxNumOfCells; cellCounter ++)//change made=0
	                {
	                	Cell cell = null;
	                    if( row.getCell(cellCounter) == null)
	                    {
	                    	data.append(",");
	                    } 
	                    else 
	                    {
	                        cell = row.getCell(cellCounter);
	                        if(cell.getCellType().toString().equals("STRING"))
	                        {
	                        	if(cell.getStringCellValue().contains(","))
	                        	{
	                        		data.append(cell.getStringCellValue().replace(",", "|"));
	                        	}
	                        	else
	                        	{
	                        		data.append(cell.getStringCellValue());
	                        	}
	                        }
	                        else if(cell.getCellType().toString().equals("NUMERIC"))
	                        {
	                        	if(String.valueOf(cell.getNumericCellValue()).contains("E"))
	                        	{
	                        		Object obj = cell.getNumericCellValue();
		                        	data.append(new BigDecimal(obj.toString()).toPlainString());
	                        	}
	                        	else if(String.valueOf(cell.getNumericCellValue()).endsWith(".0") && !String.valueOf(cell.getNumericCellValue()).contains("E"))
	                        	{
	                        		data.append(String.valueOf(cell.getNumericCellValue()).substring(0, String.valueOf(cell.getNumericCellValue()).indexOf(".")));
	                        	}
	                        	else
	                        	{
	                        		data.append(String.valueOf(cell.getNumericCellValue()));
	                        	}
	                        }
	                        else if(cell.getCellType().toString().equals("BOOLEAN"))
	                        {
	                        	data.append(cell.getBooleanCellValue());
	                        }
	                        data.append(",");
	                    }                    
	                }
	                data.append('\n');
            	}
            }

            Files.write(Paths.get(sourceCsvFile.getAbsolutePath()), data.toString().getBytes("UTF-8"));
            
			FileReader filereader = new FileReader(sourceCsvFile.getAbsolutePath());
			CSVReader csvReader = new CSVReader(filereader); 
            while ((nextRecord = csvReader.readNext()) != null) 
            {
            	cellValue = "";
                for (String cell : nextRecord) 
                {
                	if(cellValue.equals(""))
                	{
                		cellValue = cell;
                	}
                	else
                	{
                		cellValue = cellValue + "," + cell;
                	}	                	 
                }	                
            	if(csvValue.equals(""))
            	{
            		csvValue = cellValue;           		
            	}
            	else
            	{
            		csvValue = csvValue + "\n" + cellValue; 
            	}
            }
            csvReader.close();
        } 
        catch (FileNotFoundException e) 
        {
            e.printStackTrace();	
        } 
        catch (IOException e) 
        {
            e.printStackTrace();
        }
		return csvValue;
		
	}
	
	@RequestMapping(value = "/performComparisonGF/{primaryKey}/{colValues}/{loadCycle}/{ruleName}/{rowValues}", 
	        method = RequestMethod.GET, headers = "Accept=application/json")
	public void performComparisonGF(@PathVariable("primaryKey") String primaryKey,  @PathVariable("colValues") String colValues, @PathVariable("loadCycle") String loadCycle,  
			@PathVariable("ruleName") String ruleName, @PathVariable("rowValues") String rowValues, HttpServletResponse response, HttpSession httpSession) {
		
		System.out.println("primaryKey-"+primaryKey);
		System.out.println("colValues-"+colValues);
		System.out.println("rowValues-"+rowValues);
		
		sourceXMLContent = null;
		targetXMLContent = null;
		
		Page page = pageService.getPage(Long.parseLong(loadCycle));
		loadCycle = page.getPageName();
		
		Long userId = (Long) httpSession.getAttribute(SESSION_USER_ID);
		User user = userService.getUser(userId);
		
		executeMappingHeader(rowValues, loadCycle, ruleName, user.getClient());
		
		String commonCol = primaryKey;

		byte[] wdXMLFileContent = targetXMLContent;
		byte[] srcXMLFileContent = sourceXMLContent;
		
		File wdXMLfile = null;
		File srcXMLfile = null;
		try 
		{
			wdXMLfile = File.createTempFile(ruleName + "_Target", ".xml");
			FileUtils.writeByteArrayToFile(wdXMLfile, wdXMLFileContent);
			
			srcXMLfile = File.createTempFile(ruleName + "_Source", ".xml");
			FileUtils.writeByteArrayToFile(srcXMLfile, srcXMLFileContent);
		} 
		catch (IOException e1) 
		{
			e1.printStackTrace();
		}
		
		String xmlFile1 = wdXMLfile.getAbsolutePath();
		String xmlFile2 = srcXMLfile.getAbsolutePath();
		
		MultiValuedMap<String, List<String>> firstXML = null;
		MultiValuedMap<String, List<String>> secondXML = null;
		try 
		{
			if(commonCol.contains(":"))
			{
				//firstXML = extractXMLFileMultipleRow(xmlFile1, commonCol);			
				//secondXML = extractXMLFileMultipleRow(xmlFile2, commonCol);
			}
			else
			{
				firstXML =  extractXMLFile(xmlFile1, commonCol);			
				secondXML = extractXMLFile(xmlFile2, commonCol);
			}
			String [] fields = colValues.split(",");
			compareXML(firstXML, secondXML, fields, response, commonCol, ruleName, rowValues, "File");
		} 
		catch (FileNotFoundException e) 
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (XMLStreamException e) 
		{
			e.printStackTrace();
		}
	}
	
	private void compareXML(MultiValuedMap<String, List<String>> firstXML, MultiValuedMap<String, List<String>> secondXML, String[] fields, HttpServletResponse response, String commonCol, 
			String ruleName, String rowValues, String type) throws IOException {
	
		sbFinal = new StringBuffer();
		StringBuffer sbTemp = new StringBuffer();
		//boolean matchFound = false;
		ArrayList<String> valList1 = null;
		ArrayList<String> valList2 = null;
		
		Iterator<String> it = firstXML.keySet().iterator();
		while (it.hasNext()) 
	    {
			//matchFound = false;
			String id = (String)it.next();
			//if(id.equals("A01274"))
			if(secondXML.get(id) != null)
	        {
				Collection<List<String>> colList1 =  firstXML.get(id);
				if(colList1.size() == 1)
				{
					Iterator<List<String>> col1 = colList1.iterator();
					while(col1.hasNext()) 
					{
						valList1 = (ArrayList<String>)col1.next();
					}
		        	Collection<List<String>> colList2 =  secondXML.get(id);
		        	if(colList2 != null && colList2.size() > 0)
		        	{
			        	Iterator<List<String>> col2 = colList2.iterator();
						while(col2.hasNext()) 
						{
							valList2 = (ArrayList<String>)col2.next();
						}
		        	}
		        	else
		        	{
		        		valList2 = null;
		        	}
		        	compareXMLDifference(id, valList1, valList2, fields, response, commonCol, type, ruleName); 
				}
				else if(colList1.size() >1)
				{
					Iterator<List<String>> col1 = colList1.iterator();
					while(col1.hasNext()) 
					{
						valList1 = (ArrayList<String>)col1.next();
						Collection<List<String>> colList2 =  secondXML.get(id);
			        	Iterator<List<String>> col2 = colList2.iterator();
						while(col2.hasNext()) 
						{
							sbTemp = new StringBuffer();
							valList2 = (ArrayList<String>)col2.next();
							String fieldVal = compareXMLDifferenceMultipleRow(id, valList1, valList2, fields, response, commonCol, type, ruleName);
				        	if(!fieldVal.equals(""))
				        	{
				        		//matchFound = true;
				        		//break;
				        		sbTemp.append(fieldVal);
				        		sbTemp.append("\n");
				        	}				        	
						}
						/*if(matchFound)
						{
							//sbTemp = new StringBuffer();
							break;
						}*/
						if(ruleName.equalsIgnoreCase("Benefit Individual Rates") || ruleName.equalsIgnoreCase("Change Benefits") || ruleName.equalsIgnoreCase("Submit Payroll Input"))//
						{
							break;
						}
					}
					//if(!matchFound)
					{
						sbFinal.append(sbTemp);
					}
				}				
	        }
	    }
	
		System.out.println(sbFinal.toString());		
		createComparisonMatrix(commonCol, ruleName, response, rowValues);
	}
	
	private void createComparisonMatrix(String commonCol, String ruleName, HttpServletResponse response, String rowValues) throws IOException {
		
		String primaryKey = "";
		String oldKey = "";
		String fieldName = "";
		String sourceVal = "";
		String wdVal = "";
		String headerName = "";
		String secondaryName = "";
		Row row = null;
		Row rowWD = null;
		String[] headingArr = rowValues.split(",");
		Map<String, Integer> columnMap = new HashMap<>();
		
		Workbook workbook = new XSSFWorkbook(); 
        Sheet sheet = workbook.createSheet(ruleName);
        File file = File.createTempFile(ruleName, ".xlsx");
        
        if(sbFinal.toString().length() > 0)
		{
        	mismatchCount = getMismatchCount(sbFinal.toString());
	        Font headerFont = workbook.createFont();
			headerFont.setBold(true);
			
	        CellStyle headerStyle = workbook.createCellStyle();
	        headerStyle.setAlignment(HorizontalAlignment.CENTER);
	        headerStyle.setFont(headerFont);
	        headerStyle.setBorderBottom(BorderStyle.THICK);
	        
	        CellStyle descStyle = workbook.createCellStyle();
	        descStyle.setAlignment(HorizontalAlignment.LEFT);
	        descStyle.setFont(headerFont);
	        
	        Row firstRow = sheet.createRow(0);
	        Cell firstCell = firstRow.createCell(0);
	        firstCell.setCellValue("Total Number of records in Source:");
	        firstCell.setCellStyle(descStyle);	        
	        firstCell = firstRow.createCell(3);
	        firstCell.setCellValue(sourceCount);
	        firstCell.setCellStyle(descStyle);	
	        sheet.addMergedRegion(new CellRangeAddress(0, 0, 0, 2 ));
	        
	        Row secondRow = sheet.createRow(1);
	        Cell secondCell = secondRow.createCell(0);
	        secondCell.setCellValue("Total Number of records fetched:");
	        secondCell.setCellStyle(descStyle);
	        secondCell = secondRow.createCell(3);
	        secondCell.setCellValue(wdCount);
	        secondCell.setCellStyle(descStyle);	
	        sheet.addMergedRegion(new CellRangeAddress(1, 1, 0, 2 ));
	        
	        Row thirdRow = sheet.createRow(2);
	        Cell thirdCell = thirdRow.createCell(0);
	        thirdCell.setCellValue("Total Number of record where mismatch found:");
	        thirdCell.setCellStyle(descStyle);
	        thirdCell = thirdRow.createCell(3);
	        thirdCell.setCellValue(mismatchCount);
	        thirdCell.setCellStyle(descStyle);
	        sheet.addMergedRegion(new CellRangeAddress(2, 2, 0, 2 ));
	        
	        Row headerRow = sheet.createRow(4);
	        Cell cell = headerRow.createCell(0);
	        if(commonCol.contains(":"))
	        {
	        	for(int i = 0; i<headingArr.length; i++)
		        {
		        	if(commonCol.substring(0, commonCol.indexOf(":")).equalsIgnoreCase(headingArr[i].substring(headingArr[i].indexOf("|")+1, headingArr[i].length())))
		        	{
		    	        cell.setCellValue(headingArr[i].substring(0, headingArr[i].indexOf("|")));
		    	        cell.setCellStyle(headerStyle);
		    	        break;
		        	}
		        }
	        }
	        else
	        {
	        	for(int i = 0; i<headingArr.length; i++)
		        {
		        	if(commonCol.equalsIgnoreCase(headingArr[i].substring(headingArr[i].indexOf("|")+1, headingArr[i].length())))
		        	{
		    	        cell.setCellValue(headingArr[i].substring(0, headingArr[i].indexOf("|")));
		    	        cell.setCellStyle(headerStyle);
		    	        break;
		        	}
		        }
	        }
	        cell = headerRow.createCell(1);
	        cell.setCellValue("");
	        cell.setCellStyle(headerStyle);
	        for(int i = 1; i<headingArr.length; i++)
	        {
	        	cell = headerRow.createCell(i + 1);
	        	cell.setCellValue(headingArr[i].substring(0, headingArr[i].indexOf("|")));
    	        cell.setCellStyle(headerStyle);
    	        columnMap.put(headingArr[i].substring(0, headingArr[i].indexOf("|")), i + 1);	        	
	        }
	        System.out.println("columnMap--"+columnMap);
	        
			BufferedReader bufReader = new BufferedReader(new StringReader(sbFinal.toString().trim()));				    
		    String line = null;
		    int rowNum = 3;
		    int rowNumWD = 4;
			while( (line=bufReader.readLine()) != null )
			{
				String[] outputArr = line.split(",");
				if(outputArr.length >1)
				{
					if(outputArr.length == 4)
					{
						primaryKey = outputArr[0];
						fieldName = outputArr[1];
						sourceVal = outputArr[2];
						if(sourceVal.contains("?"))
                        {
							sourceVal = sourceVal.replace("?", ",");
                        }
						wdVal = outputArr[3];
						if(wdVal.contains("?"))
                        {
							wdVal = wdVal.replace("?", ",");
                        }
					}
					else
					{
						primaryKey = outputArr[0];
						fieldName = outputArr[1];
						sourceVal = outputArr[2];
						if(sourceVal.contains("?"))
                        {
							sourceVal = sourceVal.replace("?", ",");
                        }
						wdVal = "";
					}
					if(primaryKey.equalsIgnoreCase(oldKey))
					{
						if(ruleName.equalsIgnoreCase("Benefit Individual Rates") || ruleName.equalsIgnoreCase("Change Benefits") || ruleName.equalsIgnoreCase("Submit Payroll Input"))
						{
							rowNum = rowNum + 2;
							rowNumWD = rowNumWD + 2;
							row = sheet.createRow(rowNum);
							rowWD = sheet.createRow(rowNumWD);
							row.createCell(0).setCellValue(primaryKey);
							row.createCell(1).setCellValue("Source");
							rowWD.createCell(1).setCellValue("Workday");
						}
						for(int i = 0; i<headingArr.length; i++)
				        {
				        	if(fieldName.equalsIgnoreCase(headingArr[i].substring(headingArr[i].indexOf("|")+1, headingArr[i].length())))
				        	{
				    	        headerName = headingArr[i].substring(0, headingArr[i].indexOf("|"));
				    	        break;
				        	}
				        }
						//row.createCell(1).setCellValue(fieldName);
						row.createCell(columnMap.get(headerName)).setCellValue(sourceVal);
						rowWD.createCell(columnMap.get(headerName)).setCellValue(wdVal);
					}
					else
					{
						rowNum = rowNum + 2;
						rowNumWD = rowNumWD + 2;
						row = sheet.createRow(rowNum);
						rowWD = sheet.createRow(rowNumWD);
						for(int i = 0; i<headingArr.length; i++)
				        {
				        	if(fieldName.equalsIgnoreCase(headingArr[i].substring(headingArr[i].indexOf("|")+1, headingArr[i].length())))
				        	{
				    	        headerName = headingArr[i].substring(0, headingArr[i].indexOf("|"));
				    	        break;
				        	}
				        }
						if(primaryKey.contains(":"))
						{
							row.createCell(0).setCellValue(primaryKey.substring(0, primaryKey.indexOf(":")));
							row.createCell(1).setCellValue("Source");
							rowWD.createCell(1).setCellValue("Workday");
							for(int i = 0; i<headingArr.length; i++)
					        {
					        	if(commonCol.substring(commonCol.indexOf(":")+1, commonCol.length()).equalsIgnoreCase(headingArr[i].substring(headingArr[i].indexOf("|")+1, headingArr[i].length())))
					        	{
					        		secondaryName = headingArr[i].substring(0, headingArr[i].indexOf("|"));
					    	        break;
					        	}
					        }
							row.createCell(columnMap.get(secondaryName)).setCellValue(primaryKey.substring(primaryKey.indexOf(":")+1, primaryKey.length()));
							rowWD.createCell(columnMap.get(secondaryName)).setCellValue(primaryKey.substring(primaryKey.indexOf(":")+1, primaryKey.length()));
						}
						else
						{
							row.createCell(0).setCellValue(primaryKey);
							row.createCell(1).setCellValue("Source");
							rowWD.createCell(1).setCellValue("Workday");
						}
						//row.createCell(1).setCellValue(fieldName);
						row.createCell(columnMap.get(headerName)).setCellValue(sourceVal);
						rowWD.createCell(columnMap.get(headerName)).setCellValue(wdVal);
					}
					oldKey = primaryKey;
				}
			}
			
			if(errorList.size() >0)
			{
		        int lastRowNum = sheet.getLastRowNum();
				Row notLoadedRow = sheet.createRow(lastRowNum+3);
		        Cell notLoadedCell = notLoadedRow.createCell(0);
		        notLoadedCell.setCellValue("Total Number of records not fetched:");
		        notLoadedCell.setCellStyle(descStyle);	        
		        notLoadedCell = notLoadedRow.createCell(3);
		        notLoadedCell.setCellValue(errorList.size());
		        notLoadedCell.setCellStyle(descStyle);
		        //sheet.addMergedRegion(new CellRangeAddress(lastRowNum, lastRowNum, 0, 2 ));
		        
		        Row notLoadedDetailsRow = null;
		        Cell notLoadedDetailsCell = null;
		        String notLoadedStr = null;
		        String[] notLoadedStrArr = null;
		        int iVal = 4;
		        int iCnt = 1;
		        for (Map.Entry<String,String> entry : sourceEntryMap.entrySet())
		        {
		        	iCnt = 1;
		        	iVal++;
		        	notLoadedDetailsRow = sheet.createRow(lastRowNum+iVal);
		        	notLoadedDetailsCell = notLoadedDetailsRow.createCell(0);
		        	notLoadedDetailsCell.setCellValue(entry.getKey());
		        	notLoadedDetailsCell = notLoadedDetailsRow.createCell(1);
		        	notLoadedDetailsCell.setCellValue("Source");
		        	
		        	notLoadedStr = entry.getValue();
		        	notLoadedStrArr = notLoadedStr.split(",");
		        	for(int c=0;c<notLoadedStrArr.length;c++)
		        	{
		        		iCnt++;
		        		notLoadedDetailsCell = notLoadedDetailsRow.createCell(iCnt);
		        		notLoadedDetailsCell.setCellValue(notLoadedStrArr[c]);
		        	}
		        }
			}		         
		    			
		    for(int i = 0; i < columnMap.size() + 2; i++) {
	            sheet.autoSizeColumn(i);
	        }
		}
        else
        {
        	mismatchCount = 0;
	        Font headerFont = workbook.createFont();
			headerFont.setBold(true);
			
	        CellStyle headerStyle = workbook.createCellStyle();
	        headerStyle.setAlignment(HorizontalAlignment.CENTER);
	        headerStyle.setFont(headerFont);
	        headerStyle.setBorderBottom(BorderStyle.THICK);
	        
	        CellStyle descStyle = workbook.createCellStyle();
	        descStyle.setAlignment(HorizontalAlignment.LEFT);
	        descStyle.setFont(headerFont);
	        
	        Row firstRow = sheet.createRow(0);
	        Cell firstCell = firstRow.createCell(0);
	        firstCell.setCellValue("Total Number of records in Source:");
	        firstCell.setCellStyle(descStyle);	        
	        firstCell = firstRow.createCell(3);
	        firstCell.setCellValue(sourceCount);
	        firstCell.setCellStyle(descStyle);
	        sheet.addMergedRegion(new CellRangeAddress(0, 0, 0, 2 ));
	        
	        Row secondRow = sheet.createRow(1);
	        Cell secondCell = secondRow.createCell(0);
	        secondCell.setCellValue("Total Number of records fetched:");
	        secondCell.setCellStyle(descStyle);
	        secondCell = secondRow.createCell(3);
	        secondCell.setCellValue(wdCount);
	        secondCell.setCellStyle(descStyle);
	        sheet.addMergedRegion(new CellRangeAddress(1, 1, 0, 2 ));
	        
	        Row thirdRow = sheet.createRow(2);
	        Cell thirdCell = thirdRow.createCell(0);
	        thirdCell.setCellValue("Total Number of record where mismatch found:");
	        thirdCell.setCellStyle(descStyle);
	        thirdCell = thirdRow.createCell(3);
	        thirdCell.setCellValue(mismatchCount);
	        thirdCell.setCellStyle(descStyle);
	        sheet.addMergedRegion(new CellRangeAddress(2, 2, 0, 2 ));
	        
	        Row notLoadedRow = sheet.createRow(3);
	        Cell notLoadedCell = notLoadedRow.createCell(0);
	        notLoadedCell.setCellValue("Total Number of records not fetched:");
	        notLoadedCell.setCellStyle(descStyle);	        
	        notLoadedCell = notLoadedRow.createCell(3);
	        notLoadedCell.setCellValue(errorList.size());
	        notLoadedCell.setCellStyle(descStyle);
	        sheet.addMergedRegion(new CellRangeAddress(3, 3, 0, 2 ));
	        
	        Row headerRow = sheet.createRow(5);
	        Cell cell = headerRow.createCell(0);
	        if(commonCol.contains(":"))
	        {
	        	for(int i = 0; i<headingArr.length; i++)
		        {
		        	if(commonCol.substring(0, commonCol.indexOf(":")).equalsIgnoreCase(headingArr[i].substring(headingArr[i].indexOf("|")+1, headingArr[i].length())))
		        	{
		    	        cell.setCellValue(headingArr[i].substring(0, headingArr[i].indexOf("|")));
		    	        cell.setCellStyle(headerStyle);
		    	        break;
		        	}
		        }
	        }
	        else
	        {
	        	for(int i = 0; i<headingArr.length; i++)
		        {
		        	if(commonCol.equalsIgnoreCase(headingArr[i].substring(headingArr[i].indexOf("|")+1, headingArr[i].length())))
		        	{
		    	        cell.setCellValue(headingArr[i].substring(0, headingArr[i].indexOf("|")));
		    	        cell.setCellStyle(headerStyle);
		    	        break;
		        	}
		        }
	        }
	        
			if(errorList.size() >0)
			{
		        headerRow = sheet.createRow(6);
		        cell = headerRow.createCell(0);
		        if(commonCol.contains(":"))
		        {
		        	for(int i = 0; i<headingArr.length; i++)
			        {
			        	if(commonCol.substring(0, commonCol.indexOf(":")).equalsIgnoreCase(headingArr[i].substring(headingArr[i].indexOf("|")+1, headingArr[i].length())))
			        	{
			    	        cell.setCellValue(headingArr[i].substring(0, headingArr[i].indexOf("|")));
			    	        cell.setCellStyle(headerStyle);
			    	        break;
			        	}
			        }
		        }
		        else
		        {
		        	for(int i = 0; i<headingArr.length; i++)
			        {
			        	if(commonCol.equalsIgnoreCase(headingArr[i].substring(headingArr[i].indexOf("|")+1, headingArr[i].length())))
			        	{
			    	        cell.setCellValue(headingArr[i].substring(0, headingArr[i].indexOf("|")));
			    	        cell.setCellStyle(headerStyle);
			    	        break;
			        	}
			        }
		        }
		        cell = headerRow.createCell(1);
		        cell.setCellValue("");
		        cell.setCellStyle(headerStyle);
		        for(int i = 1; i<headingArr.length; i++)
		        {
		        	cell = headerRow.createCell(i + 1);
		        	cell.setCellValue(headingArr[i].substring(0, headingArr[i].indexOf("|")));
	    	        cell.setCellStyle(headerStyle);
	    	        columnMap.put(headingArr[i].substring(0, headingArr[i].indexOf("|")), i + 1);	
		        }
		        
		        int lastRowNum = 5;				
		        
		        Row notLoadedDetailsRow = null;
		        Cell notLoadedDetailsCell = null;
		        String notLoadedStr = null;
		        String[] notLoadedStrArr = null;
		        int iVal = 1;
		        int iCnt = 1;
		        for (Map.Entry<String,String> entry : sourceEntryMap.entrySet())
		        {
		        	iCnt = 1;
		        	iVal++;
		        	notLoadedDetailsRow = sheet.createRow(lastRowNum+iVal);
		        	notLoadedDetailsCell = notLoadedDetailsRow.createCell(0);
		        	notLoadedDetailsCell.setCellValue(entry.getKey());
		        	notLoadedDetailsCell = notLoadedDetailsRow.createCell(1);
		        	notLoadedDetailsCell.setCellValue("Source");
		        	
		        	notLoadedStr = entry.getValue();
		        	notLoadedStrArr = notLoadedStr.split(",");
		        	for(int c=0;c<notLoadedStrArr.length;c++)
		        	{
		        		iCnt++;
		        		notLoadedDetailsCell = notLoadedDetailsRow.createCell(iCnt);
		        		notLoadedDetailsCell.setCellValue(notLoadedStrArr[c]);
		        	}
		        }
			}
			
		    for(int i = 0; i < columnMap.size() + 2; i++) {
	            sheet.autoSizeColumn(i);
	        }
        }
        
        FileOutputStream fileOut = new FileOutputStream(file);
        workbook.write(fileOut);
        
		FileInputStream fis = null;
		response.setHeader("Content-Disposition", "attachment;filename=" + ruleName + ".xlsx" + "");
		response.setContentType("application/vnd.ms-excel");
		try
		{
			fis = new FileInputStream(file);
			IOUtils.copy(fis, response.getOutputStream());
		}
		catch (IOException e) 
		{
			e.printStackTrace();
		}
		fis.close();		
		workbook.close();
		sbFinal = null;
		file.delete();

	}

	private int getMismatchCount(String string) throws IOException {
		
		String primaryKey = "";
		String oldKey = "";
		BufferedReader bufReader = new BufferedReader(new StringReader(sbFinal.toString()));		
	    String line = null;
	    int count = 0;
		while( (line=bufReader.readLine()) != null )
		{
			String[] outputArr = line.split(",");
			if(outputArr.length >1)
			{
				primaryKey = outputArr[0];
				if(!primaryKey.equalsIgnoreCase(oldKey))
				{
					count++;
				}
			}
			oldKey = primaryKey;				
		}
		return count;
	}
	
	private void compareXMLDifference(String key, ArrayList<String> valList1, ArrayList<String> valList2, String[] fields, HttpServletResponse response, 
			String commonCol, String type, String ruleName) throws IOException {

		String fieldVal1 = null;
		String fieldVal2 = null;
		for(int i = 0; i<fields.length; i++)
		{
			fieldVal1 = "";
			fieldVal2 = "";
			for(int j = 0; j<valList1.size(); j++)
			{
				if(valList1.get(j).substring(0, valList1.get(j).indexOf("=")).equalsIgnoreCase(fields[i]))
				{
					String[] valArr = valList1.get(j).split("=");
					fieldVal1 = valArr[1];
					if(fieldVal1.contains("~"))
					{
						fieldVal1 = fieldVal1.replace("~", "|");
					}
					break;
				}
			}
	
			if(valList2 != null)
			{
				for(int k = 0; k<valList2.size(); k++)
				{
					if(valList2.get(k).substring(0, valList2.get(k).indexOf("=")).equalsIgnoreCase(fields[i]))
					{
						String[] valArr = valList2.get(k).split("=");
						fieldVal2 = valArr[1];
						if(fieldVal2.contains("~"))
						{
							fieldVal2 = fieldVal2.replace("~", "|");
						}
						break;
					}
				}
			}
			
			if(valList1 != null && valList1.size() > 0 && valList2 != null && valList2.size() > 0)
			{
				if(!fieldVal1.trim().equalsIgnoreCase(fieldVal2.trim()))
				{
					if(type.equalsIgnoreCase("File"))
					{
						/*if(!fieldVal2.equals(""))
						{
							sbFinal.append(key + "," + fields[i] + "," + fieldVal2 + "," + fieldVal1);
							sbFinal.append("\n");
						}
						else
						{*/
							if(fieldVal1.contains("|") && !fieldVal2.equals(""))
							{
								boolean checked = checkFieldContains(fieldVal1,fieldVal2);
								if(!checked)
								{
									sbFinal.append(key + "," + fields[i] + "," + fieldVal2 + "," + fieldVal1);
									sbFinal.append("\n");
								}
							}
							else
							{
								//if(fieldVal2.equals(""))
								{
									sbFinal.append(key + "," + fields[i] + "," + fieldVal2 + "," + fieldVal1);
									sbFinal.append("\n");
								}
							}
						//}
					}
					else
					{
						sbFinal.append(key + "," + fields[i] + "," + fieldVal2 + "," + fieldVal1);
						sbFinal.append("\n");
					}
				}
			}
		}		
	}
	
	private String compareXMLDifferenceMultipleRow(String key, ArrayList<String> valList1, ArrayList<String> valList2, String[] fields, HttpServletResponse response, 
			String commonCol, String type, String ruleName) throws IOException {

		String fieldVal1 = null;
		String fieldVal2 = null;
		StringBuffer sbTemp = new StringBuffer();
		for(int i = 0; i<fields.length; i++)
		{
			fieldVal1 = "";
			fieldVal2 = "";
			for(int j = 0; j<valList1.size(); j++)
			{
				if(valList1.get(j).substring(0, valList1.get(j).indexOf("=")).equalsIgnoreCase(fields[i]))
				{
					String[] valArr = valList1.get(j).split("=");
					fieldVal1 = valArr[1];
					if(fieldVal1.contains("~"))
					{
						fieldVal1 = fieldVal1.replace("~", "|");
					}
					break;
				}
			}
	
			for(int k = 0; k<valList2.size(); k++)
			{
				if(valList2.get(k).substring(0, valList2.get(k).indexOf("=")).equalsIgnoreCase(fields[i]))
				{
					String[] valArr = valList2.get(k).split("=");
					fieldVal2 = valArr[1];
					if(fieldVal2.contains("~"))
					{
						fieldVal2 = fieldVal2.replace("~", "|");
					}
					break;
				}
			}
			
			if(!fieldVal1.equalsIgnoreCase(fieldVal2))
			{
				if(ruleName.equalsIgnoreCase("National ID") || ruleName.equalsIgnoreCase("Passport") || ruleName.equalsIgnoreCase("Visa") || ruleName.equalsIgnoreCase("Contact Address") ||
					ruleName.equalsIgnoreCase("Change Personal Information") || ruleName.equalsIgnoreCase("Contact EMAIL") || ruleName.equalsIgnoreCase("Contact Phone") ||
					ruleName.equalsIgnoreCase("Compensation History") || ruleName.equalsIgnoreCase("Job Families") || ruleName.equalsIgnoreCase("Job Family Group") || 
					ruleName.equalsIgnoreCase("Job Profile") || ruleName.equalsIgnoreCase("Manage Job History") || ruleName.equalsIgnoreCase("Contact Address Line") ||
					ruleName.equalsIgnoreCase("Dependent Data") || ruleName.equalsIgnoreCase("Dependent Address") || ruleName.equalsIgnoreCase("Dependent Address Line") ||
					ruleName.equalsIgnoreCase("Dependent Phone") || ruleName.equalsIgnoreCase("Education") || ruleName.equalsIgnoreCase("Payment Election Enrollment") ||
					ruleName.equalsIgnoreCase("Bonus Plan") || ruleName.equalsIgnoreCase("Allowance Plan") || ruleName.equalsIgnoreCase("Period Salary Plan") ||
					ruleName.equalsIgnoreCase("Leave of Absence") || ruleName.equalsIgnoreCase("Payroll Payee Ongoing Work Jurisdiction Tax Election") ||
					ruleName.equalsIgnoreCase("Submit Payroll Input") || ruleName.equalsIgnoreCase("Payroll Involuntary Withholding Order") || ruleName.equalsIgnoreCase("Contact Address Line") ||
					ruleName.equalsIgnoreCase("Assign Pay Group") || ruleName.equalsIgnoreCase("Candidates") || ruleName.equalsIgnoreCase("Role Based Security Group") ||
					ruleName.equalsIgnoreCase("Contact Info") || ruleName.equalsIgnoreCase("Benefit Individual Rates") || ruleName.equalsIgnoreCase("Change Benefits") ||
					ruleName.equalsIgnoreCase("Work Other Withholding") || ruleName.equalsIgnoreCase("Change Benefits Life Events") || ruleName.equalsIgnoreCase("Carryover Balance"))//
												
				{
					if(fieldVal1.contains("|") && !fieldVal2.equals(""))
					{
						boolean checked = checkFieldContains(fieldVal1,fieldVal2);
						if(!checked)
						{
							sbFinal.append(key + "," + fields[i] + "," + fieldVal2 + "," + fieldVal1);
							sbFinal.append("\n");
						}
					}
					else //if(fieldVal2.equals(""))
					{
						sbFinal.append(key + "," + fields[i] + "," + fieldVal2 + "," + fieldVal1);
						sbFinal.append("\n");
					}
				}
				else
				{
					if(type.equalsIgnoreCase("File"))
					{
						if(fieldVal2.equals(""))
						{
							sbFinal.append(key + "," + fields[i] + "," + fieldVal2 + "," + fieldVal1);
							sbFinal.append("\n");
						}
						else
						{
							if(fieldVal1.contains("|"))
							{
								boolean checked = checkFieldContains(fieldVal1,fieldVal2);
								if(!checked)
								{
									sbFinal.append(key + "," + fields[i] + "," + fieldVal2 + "," + fieldVal1);
									sbFinal.append("\n");
								}
							}
							else
							{
								sbFinal.append(key + "," + fields[i] + "," + fieldVal2 + "," + fieldVal1);
								sbFinal.append("\n");								
							}
						}
					}
					else
					{
						sbFinal.append(key + "," + fields[i] + "," + fieldVal2 + "," + fieldVal1);
						sbFinal.append("\n");
					}
				}				
			}			 
		}
		return sbTemp.toString();		
	}
	
	private boolean checkFieldContains(String fieldVal1, String fieldVal2) {
		
		boolean checked = false;
		String fieldVal1New = fieldVal1.replace("|", "~");
		String [] fieldVal1Arr = fieldVal1New.split("~");
		for(int i = 0;i<fieldVal1Arr.length;i++)
		{
			if(fieldVal1Arr[i].equalsIgnoreCase(fieldVal2))
			{
				checked = true;
				break;
			}
		}
		return checked;		
	}
	
	public void executeMappingHeader(String paramValue, String loadCycle, String ruleName, String client) {
		
		sourceEntryMap.clear();
		String newSource = "";
		String[] paramValueArr = paramValue.split(",");
		String[] headingFromSourceArr = headingFromSource.split(",");
		String str = "";
		String newStr = "";
		for(int i = 0;i<headingFromSourceArr.length; i++)
		{
			for(int j = 0;j<paramValueArr.length; j++)
			{
				if(paramValueArr[j].substring(0, paramValueArr[j].indexOf("|")).equalsIgnoreCase(headingFromSourceArr[i]))
				{
					str = paramValueArr[j].substring(paramValueArr[j].indexOf("|")+1, paramValueArr[j].length());
					if(str.equals(""))
					{
						str = paramValueArr[j].substring(0, paramValueArr[j].indexOf("|"));
						if(str.indexOf(" ") > 1)
						{
							String [] strArr = str.split(" ");
							for(int k = 0;k<strArr.length;k++)
							{
								newStr = newStr + strArr[k];								
							}
							str = newStr;
						}
					}
					if(newSource.equals(""))
					{
						newSource = str;
						break;
					}
					else
					{
						newSource = newSource + "," + str;
						str = "";
						newStr = "";
						break;
					}
				}
			}
		}
		
		byte[] srcCSVFileContent = sourceContent;
		File sourceCSVfile = null;
		try 
		{
			sourceCSVfile = File.createTempFile(ruleName + "_Source", ".csv");
			FileUtils.writeByteArrayToFile(sourceCSVfile, srcCSVFileContent);
		} 
		catch (IOException e1) 
		{
			e1.printStackTrace();
		}
		String file = sourceCSVfile.getAbsolutePath();
		
		try 
		{
			FileReader filereader = new FileReader(file);
			CSVReader csvReader = new CSVReader(filereader); 
            String[] nextRecord;
            int count = 0;
			String cellValue = "";
            while ((nextRecord = csvReader.readNext()) != null) 
            {
            	cellValue = "";
            	if(count != 0)
            	{
	                for (String cell : nextRecord) 
	                {
	                	if(cellValue.equals(""))
	                	{
	                		cellValue = cell;
	                	}
	                	else
	                	{
	                		cellValue = cellValue + "," + cell;
	                	}	                	 
	                }	                
            	}
            	count++;
            	if(!cellValue.equals(""))
            	{
            		newSource = newSource + "\n" + cellValue; 
            	}
            }
            csvReader.close();
            sourceCount = count - 1;
            System.out.println("newSource--"+newSource);
            String[] sourceResult = newSource.trim().split("\\R", 2);
            String resultNext = sourceResult[1];
            System.out.println("resultNext--"+resultNext);
			String[] resultNextArr = resultNext.trim().split("\n");
			for(int a = 0;a<resultNextArr.length;a++)
			{
				if(errorList.contains(resultNextArr[a].substring(0, resultNextArr[a].indexOf(","))))
				{
					sourceEntryMap.put(resultNextArr[a].substring(0, resultNextArr[a].indexOf(",")), resultNextArr[a].substring(resultNextArr[a].indexOf(",")+1, resultNextArr[a].length()));
				}				
			}
			System.out.println(sourceEntryMap);
			sourceContent = null;
			sourceContent = newSource.toString().getBytes();		
			
			byte[] wdCSVFileContent = targetContent;
			byte[] srcCSVFileContentNew = sourceContent;

			File wdCSVfile = null;
			File srcCSVfileNew = null;
			try 
			{
				wdCSVfile = File.createTempFile(ruleName + "_Target", ".csv");
				FileUtils.writeByteArrayToFile(wdCSVfile, wdCSVFileContent);
				
				srcCSVfileNew = File.createTempFile(ruleName + "_SourceNew", ".csv");
				FileUtils.writeByteArrayToFile(srcCSVfileNew, srcCSVFileContentNew);
			} 
			catch (IOException e1) 
			{
				e1.printStackTrace();
			}
			File wdFile = new File(wdCSVfile.getAbsolutePath());
			File srcFile = new File(srcCSVfileNew.getAbsolutePath());
			
			File wdXMLFile = File.createTempFile("WorkdayXML", ".xml");
			File srcXMLFile = File.createTempFile("SourceXML", ".xml");
			
			String wdXML = wdXMLFile.getAbsolutePath();
			String srcXML = srcXMLFile.getAbsolutePath();
			
			convertCSVToXML(wdFile, wdXML, loadCycle, ruleName, 1, client);
			convertCSVToXML(srcFile, srcXML, loadCycle, ruleName, 2, client);
			
		} 
		catch (FileNotFoundException e) 
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		}
	}

	private void convertCSVToXML(File file, String filename, String loadCycle, String ruleName, int i, String client) {

		ArrayList<String> info = new ArrayList<String>(7);

	    BufferedReader readFile = null;
	    try 
	    {
	        DocumentBuilderFactory df = DocumentBuilderFactory.newInstance();
	        DocumentBuilder db = df.newDocumentBuilder();

	        Document document = db.newDocument();

	        Element rootElement = document.createElement("Root");

	        document.appendChild(rootElement);
	        readFile = new BufferedReader(new FileReader(file));
	        int line = 0;

	        String information = null;
	        while ((information = readFile.readLine()) != null) 
	        {
	            String[] rowValues = information.split(",");
	            if (line == 0) 
	            {
	                for (String columnInfo : rowValues) 
	                {
	                	info.add(columnInfo);
	                }
	            } 
	            else 
	            {
	                Element childElement = document.createElement("details");
	                rootElement.appendChild(childElement);
	                for (int columnInfo = 0; columnInfo < info.size(); columnInfo++) 
	                {
	                    String header = info.get(columnInfo);
	                    String value = null;

	                    if (columnInfo < rowValues.length) 
	                    {
	                        value = rowValues[columnInfo];
	                        if(value.contains("|"))
	                        {
	                        	value = value.replace("|", "?");
	                        }
	                    } 
	                    else 
	                    {
	                        value = " ";
	                    }
	                    Element current = document.createElement(header);
	                    current.appendChild(document.createTextNode(value));
	                    childElement.appendChild(current);
	                    System.out.println(value);
	                }
	            }
	            line++;
	        }
			Transformer tf = TransformerFactory.newInstance().newTransformer();
			tf.setOutputProperty(OutputKeys.ENCODING, "UTF-8");
			tf.setOutputProperty(OutputKeys.INDENT, "yes");
			Writer output = new StringWriter();
			tf.transform(new DOMSource(document), new StreamResult(output));
			
			if(i == 1)
			{
				targetXMLContent = output.toString().getBytes();
			}
			else
			{
				sourceXMLContent = output.toString().getBytes();
			}
		} 
	    catch (Exception e) 
	    {

	    }
	}
	
private static MultiValuedMap<String, List<String>> extractXMLFile(String xmlFile, String commonCol) throws FileNotFoundException, IOException, XMLStreamException {
		
		//Map<String, List<String>> xmlMap = new HashMap<String, List<String>>();
		MultiValuedMap<String, List<String>> xmlMap = new ArrayListValuedHashMap<String, List<String>>();
		//Multimap<Integer, String> multimap = ArrayListMultimap.create();
		List<String> valueList = new ArrayList<String>();
		
		try (InputStream stream = new FileInputStream(xmlFile)) 
		{
		    XMLInputFactory inputFactory = XMLInputFactory.newFactory();
		    inputFactory.setProperty(XMLInputFactory.IS_COALESCING, true);

		    XMLStreamReader reader = inputFactory.createXMLStreamReader(stream);
		    String attributeName = null;
		    String value = null;
		    String keyName = null;
		    String endElement = null;

		    while (reader.hasNext()) {
		        switch (reader.next()) {
		            case XMLStreamConstants.START_ELEMENT:
		                attributeName = reader.getName().toString();
		                break;
		            case XMLStreamConstants.END_ELEMENT:
		            	endElement = reader.getName().toString();
		                //System.out.println("End " + reader.getName());
		                break;
		            case XMLStreamConstants.CHARACTERS:
		            case XMLStreamConstants.SPACE:
		            	value = reader.getText();
		                if(attributeName != null && attributeName.trim().length() > 0 && value != null && value.trim().length() >0 && attributeName.equalsIgnoreCase(commonCol))
		                {
		                	keyName = value;
		                }
				        if(attributeName != null && attributeName.trim().length() > 0 && value != null && value.trim().length() >0 && !attributeName.equalsIgnoreCase(commonCol))
				        {
				        	//System.out.println(attributeName +  ":" + value);
				        	if(valueList == null || valueList.size() == 0)
				        	{
				        		valueList = new ArrayList<String>();
				        	}
				        	valueList.add(attributeName +  "=" + value);
				        }
		                break;
		        }
		        if(endElement != null && endElement.trim().length() > 0 && endElement.equals("details"))
		        {
		        	List<String> newList = new ArrayList<String>();
		        	if(valueList.size() >0)
		        	{
			        	for(int i = 0;i<valueList.size();i++)
			        	{
			        		newList.add(valueList.get(i));
			        	}
			        	xmlMap.put(keyName, newList);		        					    
					    valueList.clear();
		        	}
		        }
		    }
		}
		return xmlMap;
		
	}
	
	private String convertDate(String strDate, String format, String newFormat) {

		SimpleDateFormat inputFormatter=new SimpleDateFormat(format);  
	    Date da = null;
		try 
		{
			da = (Date)inputFormatter.parse(strDate);
		} 
		catch (ParseException e) 
		{
			e.printStackTrace();
		}

	    DateFormat outputFormatter = new SimpleDateFormat(newFormat);
	    String strDateTime = outputFormatter.format(da);
		return strDateTime;
	}

}
