package com.ibm.workday.automation.controller;

import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.xml.namespace.QName;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.soap.MessageFactory;
import javax.xml.soap.SOAPConnection;
import javax.xml.soap.SOAPConnectionFactory;
import javax.xml.soap.SOAPElement;
import javax.xml.soap.SOAPEnvelope;
import javax.xml.soap.SOAPException;
import javax.xml.soap.SOAPHeader;
import javax.xml.soap.SOAPHeaderElement;
import javax.xml.soap.SOAPMessage;
import javax.xml.soap.SOAPPart;
import javax.xml.stream.XMLInputFactory;
import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;

import org.apache.commons.collections4.MultiValuedMap;
import org.apache.commons.collections4.multimap.ArrayListValuedHashMap;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.IOUtils;
import org.apache.commons.json.JSONArray;
import org.apache.commons.json.JSONException;
import org.apache.commons.json.JSONObject;
import org.apache.poi.ss.usermodel.BorderStyle;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Font;
import org.apache.poi.ss.usermodel.HorizontalAlignment;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import org.apache.poi.ss.util.CellRangeAddress;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.w3c.dom.DOMException;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import com.ibm.workday.automation.common.CommonConstants;
import com.ibm.workday.automation.model.GetRequest;
import com.ibm.workday.automation.model.Operation;
import com.ibm.workday.automation.model.Page;
import com.ibm.workday.automation.model.Tenant;
import com.ibm.workday.automation.model.User;
import com.ibm.workday.automation.operation.HttpBasicAuthentication;
import com.ibm.workday.automation.operation.LoadDataRules;
import com.ibm.workday.automation.operation.ReportElement;
import com.ibm.workday.automation.operation.XmlParserManager;
import com.ibm.workday.automation.service.GetRequestService;
import com.ibm.workday.automation.service.MapFileService;
import com.ibm.workday.automation.service.OperationService;
import com.ibm.workday.automation.service.PageService;
import com.ibm.workday.automation.service.PostLoadService;
import com.ibm.workday.automation.service.SectionService;
import com.ibm.workday.automation.service.TenantService;
import com.ibm.workday.automation.service.UserService;

import au.com.bytecode.opencsv.CSVReader;

@RestController
public class PostLoadTenantBasedController implements CommonConstants{

Tenant tenant;
	
	@Autowired
	TenantService tenantService;
	
	@Autowired
	PostLoadService postLoadService;
	
	@Autowired
	GetRequestService getRequestService;
	
	@Autowired
	PageService pageService;
	
	@Autowired
	UserService userService;
	
	@Autowired
	OperationService operationService;
	
	@Autowired
	MapFileService mapFileService;
	
	@Autowired
	LoadDataRules loadDataRules;
	
	@Autowired
	SectionService sectionService;
	
	Operation operation;
	
	String currentCSVfileName = null;
	
	String oldCSVFileName = "";
	
	String uniqueIdVal = null;
	
	Map<String, List<String>> csvFileMap = new HashMap<>();
	
	Map<String, String> sourceEntryMap = new HashMap<String, String>();
	Map<String, String> sourceTenantRowMap = new HashMap<String, String>();
	Map<String, String> targetTenantRowMap = new HashMap<String, String>();
	
	private List<String> sourceTenantColumnList = new ArrayList<String>();
	private List<String> targetTenantColumnList = new ArrayList<String>();
	
	List<String> csvValueList = null;
	
	private static final String NAMESPACE_URL = "urn:com.workday/bsvc";
	private static final String NAMESPACE_PREFIX = "bsvc";
	private static final String HEADER_SECURITY_NAMESPACE = "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd";
	private static final String HEADER_SECURITY_NS_PREFIX = "wsse";
	private static final String PASSWORD_TYPE_ATTR_VALUE = "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText";
	private static final String EMPLOYEE_APPLICANT_MAPPING_RESPONSE_EXPRESSION = "/Report_Data";
	private String headingFromSourceTenant = "";
	private String headingFromTargetTenant = "";
	protected DocumentBuilderFactory domFactory = null;
	protected DocumentBuilder domBuilder = null;
	private List<String> oldEmpList = new ArrayList<String>();
	private List<String> newEmpList = new ArrayList<String>();
	private List<String> errorList = new ArrayList<String>();
	boolean complete = false;
	JSONArray headingArray = null;

	private StringBuffer sbFinal = null;
	private int sourceCount = 0;
	private int wdCount = 0;
	private int mismatchCount = 0;
	private byte[] sourceContent = null;
	private byte[] targetContent = null;
	private byte[] sourceXMLContent = null;
	private byte[] targetXMLContent = null;
	
	@RequestMapping(value = "performTenantBasedPostLoad/{fileName}/{loadCycle}/{ruleName}/{tenantId}", method = RequestMethod.POST, headers = "Accept=application/json")
		public JSONArray performTenantBasedPostLoad(@PathVariable("fileName")String fileName, @PathVariable("loadCycle") final String loadCycle,  @PathVariable("ruleName") String ruleName, 
				@PathVariable("tenantId") Long tenantId, @RequestParam("wdFile") MultipartFile wdFile, HttpSession httpSession) {
		
		complete = false;
		System.out.println("ruleName--"+ ruleName);
		Page page = pageService.getPage(Long.parseLong(loadCycle));
		String loadCycle1 = page.getPageName();
		System.out.println("loadCycle--"+ loadCycle1);
		Long userId = (Long) httpSession.getAttribute(SESSION_USER_ID);
		User user = userService.getUser(userId);
		tenant = tenantService.getTenant(tenantId);		
		byte[] mapFileData = null;
		oldEmpList.clear();
		newEmpList.clear();
		String str = null;
		try 
		{
			mapFileData = wdFile.getBytes();
			if(fileName.contains(".csv"))
			{
				str = new String(mapFileData, "UTF-8");
			}
			else
			{
				InputStream in = wdFile.getInputStream();
				File sourceExcelFile = File.createTempFile(fileName.substring(0, fileName.indexOf(".")), ".xlsx");
			    String excelPath = sourceExcelFile.getAbsolutePath();
			    FileOutputStream f = new FileOutputStream(excelPath);
			    int ch = 0;
			    while ((ch = in.read()) != -1) 
			    {
			        f.write(ch);
			    }
			    f.flush();
			    f.close();
			    
			    InputStream inp = new FileInputStream(excelPath);
			    Workbook wb = WorkbookFactory.create(inp);
			    str = convertExcelToCSV(wb.getSheetAt(0), fileName); 
			}
			System.out.println(str);
			String line = "";
	        BufferedReader reader = new BufferedReader(new StringReader(str));
	        while ((line = reader.readLine()) != null) 
	        { 
            	String [] lineArr = line.split(",");
        		if(lineArr.length >1)
        		{
            		oldEmpList.add(lineArr[0]);
            		newEmpList.add(lineArr[1]);            		
        		}	            	
	        }
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		}
						
		if(ruleName.equalsIgnoreCase("Worker Data"))
		{
			Thread t = new Thread( ) {
				public void run() {
					headingArray = createTemplateForWorkerData(tenant,  loadCycle1, ruleName, user.getClient(), userId);
				}
			};
			t.start();
			//headingArray = createTemplateForApplicantData(tenant,  loadCycle, ruleName, user.getClient(), terminationFromDt, terminationToDt, hireFromDt, hireToDt, userId);
		}
		if(ruleName.equalsIgnoreCase("Worker Address Data"))
		{
			Thread t = new Thread( ) {
				public void run() {
					headingArray = createTemplateForAddressData(tenant,  loadCycle1, ruleName, user.getClient(), userId);
				}
			};
			t.start();
			//headingArray = createTemplateForApplicantData(tenant,  loadCycle, ruleName, user.getClient(), terminationFromDt, terminationToDt, hireFromDt, hireToDt, userId);
		}
		if(ruleName.equalsIgnoreCase("Employment Data"))
		{
			Thread t = new Thread( ) {
				public void run() {
					headingArray = createTemplateForEmploymentData(tenant,  loadCycle1, ruleName, user.getClient(), userId);
				}
			};
			t.start();
			//headingArray = createTemplateForApplicantData(tenant,  loadCycle, ruleName, user.getClient(), terminationFromDt, terminationToDt, hireFromDt, hireToDt, userId);
		}
		if(ruleName.equalsIgnoreCase("Payment Election"))
		{
			Thread t = new Thread( ) {
				public void run() {
					headingArray = createTemplateForPaymentData(tenant,  loadCycle1, ruleName, user.getClient(), userId);
				}
			};
			t.start();
			//headingArray = createTemplateForApplicantData(tenant,  loadCycle, ruleName, user.getClient(), terminationFromDt, terminationToDt, hireFromDt, hireToDt, userId);
		}
		if(ruleName.equalsIgnoreCase("Payment Election Option"))
		{
			Thread t = new Thread( ) {
				public void run() {
					headingArray = createTemplateForPaymentOptionData(tenant,  loadCycle1, ruleName, user.getClient(), userId);
				}
			};
			t.start();
			//headingArray = createTemplateForApplicantData(tenant,  loadCycle, ruleName, user.getClient(), terminationFromDt, terminationToDt, hireFromDt, hireToDt, userId);
		}
		if(ruleName.equalsIgnoreCase("Leave of Absence"))
		{
			Thread t = new Thread( ) {
				public void run() {
					headingArray = createTemplateForLeaveAbsenceData(tenant,  loadCycle1, ruleName, user.getClient(), userId);
				}
			};
			t.start();
			//headingArray = createTemplateForApplicantData(tenant,  loadCycle, ruleName, user.getClient(), terminationFromDt, terminationToDt, hireFromDt, hireToDt, userId);
		}
		if(ruleName.equalsIgnoreCase("Compensation Data"))
		{
			Thread t = new Thread( ) {
				public void run() {
					headingArray = createTemplateForCompensationData(tenant,  loadCycle1, ruleName, user.getClient(), userId);
				}
			};
			t.start();
			//headingArray = createTemplateForCompensationData(tenant,  loadCycle, ruleName, user.getClient(), terminationFromDt, terminationToDt, hireFromDt, hireToDt, userId);
		}
		if(ruleName.equalsIgnoreCase("License"))
		{
			Thread t = new Thread( ) {
				public void run() {
					headingArray = createTemplateForLicenseData(tenant,  loadCycle1, ruleName, user.getClient(), userId);
				}
			};
			t.start();
			//headingArray = createTemplateForEmployeeIDData(tenant,  loadCycle, ruleName, user.getClient(), terminationFromDt, terminationToDt, hireFromDt, hireToDt, userId);
		}
		if(ruleName.equalsIgnoreCase("PassportVisa"))
		{
			Thread t = new Thread( ) {
				public void run() {
					headingArray = createTemplateForPassportVisaData(tenant,  loadCycle1, ruleName, user.getClient(), userId);
				}
			};
			t.start();
			//headingArray = createTemplateForEmployeeIDData(tenant,  loadCycle, ruleName, user.getClient(), terminationFromDt, terminationToDt, hireFromDt, hireToDt, userId);
		}
		if(ruleName.equalsIgnoreCase("Government ID"))
		{
			Thread t = new Thread( ) {
				public void run() {
					headingArray = createTemplateForGovernmentIDData(tenant,  loadCycle1, ruleName, user.getClient(), userId);
				}
			};
			t.start();
			//headingArray = createTemplateForEmployeeIDData(tenant,  loadCycle, ruleName, user.getClient(), terminationFromDt, terminationToDt, hireFromDt, hireToDt, userId);
		}
		if(ruleName.equalsIgnoreCase("Other ID"))
		{
			Thread t = new Thread( ) {
				public void run() {
					headingArray = createTemplateForOtherIDData(tenant,  loadCycle1, ruleName, user.getClient(), userId);
				}
			};
			t.start();
			//headingArray = createTemplateForEmployeeIDData(tenant,  loadCycle, ruleName, user.getClient(), terminationFromDt, terminationToDt, hireFromDt, hireToDt, userId);
		}
		if(ruleName.equalsIgnoreCase("CIPA Brazil"))
		{
			Thread t = new Thread( ) {
				public void run() {
					headingArray = createTemplateForCustomObjects(tenant,  loadCycle, ruleName, user.getClient(), userId);
				}
			};
			t.start();			
		}
		if(ruleName.equalsIgnoreCase("Custom Domain 8"))
		{
			Thread t = new Thread( ) {
				public void run() {
					headingArray = createTemplateForCustomDomain8(tenant,  loadCycle, ruleName, user.getClient(), userId);
				}
			};
			t.start();			
		}
		if(ruleName.equalsIgnoreCase("Time Off Data"))
		{
			Thread t = new Thread( ) {
				public void run() {
					headingArray = createTemplateForTimeOff(tenant,  loadCycle, ruleName, user.getClient(), userId);
				}
			};
			t.start();
		}
		if(ruleName.equalsIgnoreCase("Collective Agreement"))
		{
			Thread t = new Thread( ) {
				public void run() {
					headingArray = createTemplateForCollectiveAgreement(tenant,  loadCycle, ruleName, user.getClient(), userId);
				}				
			};
			t.start();
		}
		if(ruleName.equalsIgnoreCase("Work Schedule"))
		{
			Thread t = new Thread( ) {
				public void run() {
					headingArray = createTemplateForWorkSchedule(tenant,  loadCycle, ruleName, user.getClient(), userId);
				}				
			};
			t.start();
		}
		if(ruleName.equalsIgnoreCase("Payroll Payee TD1X"))
		{
			Thread t = new Thread( ) {
				public void run() {
					headingArray = createTemplateForPayrollPayeeTD1X(tenant,  loadCycle, ruleName, user.getClient(), userId);
				}				
			};
			t.start();
		}
		if(ruleName.equalsIgnoreCase("Federal Annual Elections"))
		{
			Thread t = new Thread( ) {
				public void run() {
					headingArray = createTemplateForFederalAnnualElection(tenant,  loadCycle, ruleName, user.getClient(), userId);
				}				
			};
			t.start();
		}
		if(ruleName.equalsIgnoreCase("Payroll Payee CPP"))
		{
			Thread t = new Thread( ) {
				public void run() {
					headingArray = createTemplateForPayrollPayeeCPP(tenant,  loadCycle, ruleName, user.getClient(), userId);
				}				
			};
			t.start();
		}
		if(ruleName.equalsIgnoreCase("Payroll Payee EI"))
		{
			Thread t = new Thread( ) {
				public void run() {
					headingArray = createTemplateForPayrollPayeeEI(tenant,  loadCycle, ruleName, user.getClient(), userId);
				}				
			};
			t.start();
		}
		if(ruleName.equalsIgnoreCase("Payroll Payee PTD1X"))
		{
			Thread t = new Thread( ) {
				public void run() {
					headingArray = createTemplateForPayrollPayeePTD1X(tenant,  loadCycle, ruleName, user.getClient(), userId);
				}				
			};
			t.start();
		}
		if(ruleName.equalsIgnoreCase("Payroll Payee TD1"))
		{
			Thread t = new Thread( ) {
				public void run() {
					headingArray = createTemplateForPayrollPayeeTD1(tenant,  loadCycle, ruleName, user.getClient(), userId);
				}				
			};
			t.start();
		}
		if(ruleName.equalsIgnoreCase("Payroll Payee Student Loans"))
		{
			Thread t = new Thread( ) {
				public void run() {
					headingArray = createTemplateForPayrollPayeeStudentLoans(tenant,  loadCycle, ruleName, user.getClient(), userId);
				}				
			};
			t.start();
		}
		if(ruleName.equalsIgnoreCase("Payroll Payee Province TD1"))
		{
			Thread t = new Thread( ) {
				public void run() {
					headingArray = createTemplateForPayrollPayeeProvinceTD1(tenant,  loadCycle, ruleName, user.getClient(), userId);
				}				
			};
			t.start();
		}
		if(ruleName.equalsIgnoreCase("Additional Name Data"))
		{
			Thread t = new Thread( ) {
				public void run() {
					headingArray = createTemplateForAdditionalName(tenant,  loadCycle, ruleName, user.getClient(), userId);
				}				
			};
			t.start();
		}
		if(ruleName.equalsIgnoreCase("Benefit Annual Rate"))
		{
			Thread t = new Thread( ) {
				public void run() {
					headingArray = createTemplateForBenefitAnnualRate(tenant, loadCycle, ruleName, user.getClient(), userId);
				}				
			};
			t.start();
		}
		if(ruleName.equalsIgnoreCase("Beneficiary"))
		{
			Thread t = new Thread( ) {
				public void run() {
					headingArray = createTemplateForBeneficiary(tenant, loadCycle, ruleName, user.getClient(), userId);
				}				
			};
			t.start();
		}
		if(ruleName.equalsIgnoreCase("Dependent"))
		{
			Thread t = new Thread( ) {
				public void run() {
					headingArray = createTemplateForDependent(tenant, loadCycle, ruleName, user.getClient(), userId);
				}				
			};
			t.start();
		}
		if(ruleName.equalsIgnoreCase("Manage Education"))
		{
			Thread t = new Thread( ) {
				public void run() {
					headingArray = createTemplateForEducation(tenant, loadCycle, ruleName, user.getClient(), userId);
				}				
			};
			t.start();
		}
		if(ruleName.equalsIgnoreCase("Calculated Salary Plan"))
		{
			Thread t = new Thread( ) {
				public void run() {
					headingArray = createTemplateForCalculatedSalary(tenant, loadCycle, ruleName, user.getClient(), userId);
				}				
			};
			t.start();
		}
		if(ruleName.equalsIgnoreCase("Allowance Override"))
		{
			Thread t = new Thread( ) {
				public void run() {
					headingArray = createTemplateForAllowanceOverride(tenant, loadCycle, ruleName, user.getClient(), userId);
				}				
			};
			t.start();
		}
		return headingArray;
	}

	private JSONArray createTemplateForWorkerData(Tenant tenant, String loadCycle, String ruleName, String client, Long userId) {
		
		sourceContent = null;
		targetContent = null;
		sourceXMLContent = null;
		targetXMLContent = null;
		JSONArray headingArray = new JSONArray();
		InputStream is = null;
		SOAPConnection soapConnection = null;
		createTemplateFromSourceTenantWorker(tenant, is, soapConnection, loadCycle, "PassportVisa1", client, userId);
		is = null;
		soapConnection = null;
		createTemplateFromTargetTenantWorker(tenant, is, soapConnection, loadCycle, ruleName, client, userId);
		headingArray = selectColumnMappingTenantBased(loadCycle, ruleName, "Home_CNUM");
		complete = true;
		return headingArray;
	}
	
	private JSONArray createTemplateForAddressData(Tenant tenant, String loadCycle, String ruleName, String client, Long userId) {

		sourceContent = null;
		targetContent = null;
		sourceXMLContent = null;
		targetXMLContent = null;
		JSONArray headingArray = new JSONArray();
		InputStream is = null;
		SOAPConnection soapConnection = null;
		createTemplateFromSourceTenantAddress(tenant, is, soapConnection, loadCycle, "PassportVisa1", client, userId);
		is = null;
		soapConnection = null;
		createTemplateFromTargetTenantAddress(tenant, is, soapConnection, loadCycle, ruleName, client, userId);
		headingArray = selectColumnMappingTenantBased(loadCycle, ruleName, "Home_CNUM");
		complete = true;
		return headingArray;
	}
	
	private JSONArray createTemplateForEmploymentData(Tenant tenant, String loadCycle, String ruleName, String client, Long userId) {
		
		sourceContent = null;
		targetContent = null;
		sourceXMLContent = null;
		targetXMLContent = null;
		JSONArray headingArray = new JSONArray();
		InputStream is = null;
		SOAPConnection soapConnection = null;
		createTemplateFromSourceTenantEmployment(tenant, is, soapConnection, loadCycle, "PassportVisa1", client, userId);
		is = null;
		soapConnection = null;
		createTemplateFromTargetTenantEmployment(tenant, is, soapConnection, loadCycle, ruleName, client, userId);
		headingArray = selectColumnMappingTenantBased(loadCycle, ruleName, "Home_CNUM");
		complete = true;
		return headingArray;
	}
	
	private JSONArray createTemplateForPaymentData(Tenant tenant, String loadCycle, String ruleName, String client, Long userId) {
		
		sourceContent = null;
		targetContent = null;
		sourceXMLContent = null;
		targetXMLContent = null;
		JSONArray headingArray = new JSONArray();
		InputStream is = null;
		SOAPConnection soapConnection = null;
		createTemplateFromSourceTenantPayment(tenant, is, soapConnection, loadCycle, "PassportVisa1", client, userId);
		is = null;
		soapConnection = null;
		createTemplateFromTargetTenantPayment(tenant, is, soapConnection, loadCycle, ruleName, client, userId);
		headingArray = selectColumnMappingTenantBased(loadCycle, ruleName, "Home_CNUM");
		complete = true;
		return headingArray;
	}
	
	private JSONArray createTemplateForPaymentOptionData(Tenant tenant, String loadCycle, String ruleName, String client, Long userId) {

		sourceContent = null;
		targetContent = null;
		sourceXMLContent = null;
		targetXMLContent = null;
		JSONArray headingArray = new JSONArray();
		InputStream is = null;
		SOAPConnection soapConnection = null;
		createTemplateFromSourceTenantPaymentOption(tenant, is, soapConnection, loadCycle, "PassportVisa1", client, userId);
		is = null;
		soapConnection = null;
		createTemplateFromTargetTenantPaymentOption(tenant, is, soapConnection, loadCycle, ruleName, client, userId);
		headingArray = selectColumnMappingTenantBased(loadCycle, ruleName, "Home_CNUM");
		complete = true;
		return headingArray;
	}

	private JSONArray createTemplateForLeaveAbsenceData(Tenant tenant, String loadCycle, String ruleName, String client, Long userId) {

		sourceContent = null;
		targetContent = null;
		sourceXMLContent = null;
		targetXMLContent = null;
		JSONArray headingArray = new JSONArray();
		InputStream is = null;
		SOAPConnection soapConnection = null;
		createTemplateFromSourceTenantLeave(tenant, is, soapConnection, loadCycle, "PassportVisa1", client, userId);
		is = null;
		soapConnection = null;
		createTemplateFromTargetTenantLeave(tenant, is, soapConnection, loadCycle, ruleName, client, userId);
		headingArray = selectColumnMappingTenantBased(loadCycle, ruleName, "Home_CNUM");
		complete = true;
		return headingArray;
	}
	
	private JSONArray createTemplateForCompensationData(Tenant tenant, String loadCycle, String ruleName, String client, Long userId) {
		
		sourceContent = null;
		targetContent = null;
		sourceXMLContent = null;
		targetXMLContent = null;
		JSONArray headingArray = new JSONArray();
		InputStream is = null;
		SOAPConnection soapConnection = null;
		createTemplateFromSourceTenantCompensation(tenant, is, soapConnection, loadCycle, "PassportVisa1", client, userId);
		is = null;
		soapConnection = null;
		createTemplateFromTargetTenantCompensation(tenant, is, soapConnection, loadCycle, ruleName, client, userId);
		headingArray = selectColumnMappingTenantBased(loadCycle, ruleName, "Home_CNUM");
		complete = true;
		return headingArray;
	}
	
	private JSONArray createTemplateForLicenseData(Tenant tenant, String loadCycle, String ruleName, String client, Long userId) {

		sourceContent = null;
		targetContent = null;
		sourceXMLContent = null;
		targetXMLContent = null;
		JSONArray headingArray = new JSONArray();
		InputStream is = null;
		SOAPConnection soapConnection = null;
		createTemplateFromSourceTenantLicense(tenant, is, soapConnection, loadCycle, "PassportVisa1", client, userId);
		is = null;
		soapConnection = null;
		createTemplateFromTargetTenantLicense(tenant, is, soapConnection, loadCycle, ruleName, client, userId);
		headingArray = selectColumnMappingTenantBased(loadCycle, ruleName, "Home_CNUM");
		complete = true;
		return headingArray;
	}

	private JSONArray createTemplateForPassportVisaData(Tenant tenant, String loadCycle, String ruleName, String client, Long userId) {

		sourceContent = null;
		targetContent = null;
		sourceXMLContent = null;
		targetXMLContent = null;
		JSONArray headingArray = new JSONArray();
		InputStream is = null;
		SOAPConnection soapConnection = null;
		createTemplateFromSourceTenantPassportVisa(tenant, is, soapConnection, loadCycle, ruleName+"1", client, userId);
		is = null;
		soapConnection = null;
		createTemplateFromTargetTenantPassportVisa(tenant, is, soapConnection, loadCycle, ruleName, client, userId);
		headingArray = selectColumnMappingTenantBased(loadCycle, ruleName, "Home_CNUM");
		complete = true;
		return headingArray;
	}


	private JSONArray createTemplateForGovernmentIDData(Tenant tenant, String loadCycle, String ruleName, String client, Long userId) {
		
		sourceContent = null;
		targetContent = null;
		sourceXMLContent = null;
		targetXMLContent = null;
		JSONArray headingArray = new JSONArray();
		InputStream is = null;
		SOAPConnection soapConnection = null;
		createTemplateFromSourceTenantGovernmentID(tenant, is, soapConnection, loadCycle, "PassportVisa1", client, userId);
		is = null;
		soapConnection = null;
		createTemplateFromTargetTenantGovernmentID(tenant, is, soapConnection, loadCycle, ruleName, client, userId);
		headingArray = selectColumnMappingTenantBased(loadCycle, ruleName, "Home_CNUM");
		complete = true;
		return headingArray;
	}

	private JSONArray createTemplateForOtherIDData(Tenant tenant, String loadCycle, String ruleName, String client, Long userId) {

		sourceContent = null;
		targetContent = null;
		sourceXMLContent = null;
		targetXMLContent = null;
		JSONArray headingArray = new JSONArray();
		InputStream is = null;
		SOAPConnection soapConnection = null;
		createTemplateFromSourceTenantOtherID(tenant, is, soapConnection, loadCycle, "PassportVisa1", client, userId);
		is = null;
		soapConnection = null;
		createTemplateFromTargetTenantOtherID(tenant, is, soapConnection, loadCycle, ruleName, client, userId);
		headingArray = selectColumnMappingTenantBased(loadCycle, ruleName, "Home_CNUM");
		complete = true;
		return headingArray;
	}

	private JSONArray createTemplateForCustomObjects(Tenant tenant, String loadCycle, String ruleName, String client, Long userId) {
		
		sourceContent = null;
		targetContent = null;
		sourceXMLContent = null;
		targetXMLContent = null;
		JSONArray headingArray = new JSONArray();
		InputStream is = null;
		SOAPConnection soapConnection = null;
		createTemplateFromSourceTenantBrazil(tenant, is, soapConnection, loadCycle, "PassportVisa1", client, userId);
		is = null;
		soapConnection = null;
		createTemplateFromTargetTenantBrazil(tenant, is, soapConnection, loadCycle, ruleName, client, userId);
		headingArray = selectColumnMappingTenantBased(loadCycle, ruleName, "Home_CNUM");
		complete = true;
		return headingArray;
	}
	
	private JSONArray createTemplateForCustomDomain8(Tenant tenant, String loadCycle, String ruleName, String client, Long userId) {
		
		sourceContent = null;
		targetContent = null;
		sourceXMLContent = null;
		targetXMLContent = null;
		JSONArray headingArray = new JSONArray();
		InputStream is = null;
		SOAPConnection soapConnection = null;
		createTemplateFromSourceTenantCustomDomain8(tenant, is, soapConnection, loadCycle, "PassportVisa1", client, userId);
		is = null;
		soapConnection = null;
		createTemplateFromTargetTenantCustomDomain8(tenant, is, soapConnection, loadCycle, ruleName, client, userId);
		headingArray = selectColumnMappingTenantBased(loadCycle, ruleName, "Home_CNUM");
		complete = true;
		return headingArray;
	}

	private JSONArray createTemplateForTimeOff(Tenant tenant, String loadCycle, String ruleName, String client, Long userId) {
		
		sourceContent = null;
		targetContent = null;
		sourceXMLContent = null;
		targetXMLContent = null;
		JSONArray headingArray = new JSONArray();
		InputStream is = null;
		SOAPConnection soapConnection = null;
		createTemplateFromSourceTenantTimeOff(tenant, is, soapConnection, loadCycle, ruleName, client, userId);
		is = null;
		soapConnection = null;
		createTemplateFromTargetTenantTimeOff(tenant, is, soapConnection, loadCycle, ruleName, client, userId);
		headingArray = selectColumnMappingTenantBased(loadCycle, ruleName, "Home_CNUM");
		complete = true;
		return headingArray;
	}
	
	private JSONArray createTemplateForCollectiveAgreement(Tenant tenant, String loadCycle, String ruleName, String client, Long userId) {
		
		sourceContent = null;
		targetContent = null;
		sourceXMLContent = null;
		targetXMLContent = null;
		JSONArray headingArray = new JSONArray();
		InputStream is = null;
		SOAPConnection soapConnection = null;
		createTemplateFromSourceTenantCollectiveAgreement(tenant, is, soapConnection, loadCycle, "PassportVisa1", client, userId);
		is = null;
		soapConnection = null;
		createTemplateFromTargetTenantCollectiveAgreement(tenant, is, soapConnection, loadCycle, ruleName, client, userId);
		headingArray = selectColumnMappingTenantBased(loadCycle, ruleName, "Home_CNUM");
		complete = true;
		return headingArray;
	}
	
	private JSONArray createTemplateForWorkSchedule(Tenant tenant, String loadCycle, String ruleName, String client, Long userId) {

		sourceContent = null;
		targetContent = null;
		sourceXMLContent = null;
		targetXMLContent = null;
		JSONArray headingArray = new JSONArray();
		InputStream is = null;
		SOAPConnection soapConnection = null;
		createTemplateFromSourceTenantWorkSchedule(tenant, is, soapConnection, loadCycle, "PassportVisa1", client, userId);
		is = null;
		soapConnection = null;
		createTemplateFromTargetTenantWorkSchedule(tenant, is, soapConnection, loadCycle, ruleName, client, userId);
		headingArray = selectColumnMappingTenantBased(loadCycle, ruleName, "Home_CNUM");
		complete = true;
		return headingArray;
	}
	
	private JSONArray createTemplateForPayrollPayeeTD1X(Tenant tenant, String loadCycle, String ruleName, String client, Long userId) {

		sourceContent = null;
		targetContent = null;
		sourceXMLContent = null;
		targetXMLContent = null;
		JSONArray headingArray = new JSONArray();
		InputStream is = null;
		SOAPConnection soapConnection = null;
		createTemplateFromSourceTenantPayrollPayeeTD1X(tenant, is, soapConnection, loadCycle, ruleName, client, userId);
		is = null;
		soapConnection = null;
		createTemplateFromTargetTenantPayrollPayeeTD1X(tenant, is, soapConnection, loadCycle, ruleName, client, userId);
		headingArray = selectColumnMappingTenantBased(loadCycle, ruleName, "Home_CNUM");
		complete = true;
		return headingArray;
	}
	
	private JSONArray createTemplateForFederalAnnualElection(Tenant tenant, String loadCycle, String ruleName, String client, Long userId) {

		sourceContent = null;
		targetContent = null;
		sourceXMLContent = null;
		targetXMLContent = null;
		JSONArray headingArray = new JSONArray();
		InputStream is = null;
		SOAPConnection soapConnection = null;
		createTemplateFromSourceTenantFederalAnnualElection(tenant, is, soapConnection, loadCycle, ruleName, client, userId);
		is = null;
		soapConnection = null;
		createTemplateFromTargetTenantFederalAnnualElection(tenant, is, soapConnection, loadCycle, ruleName, client, userId);
		headingArray = selectColumnMappingTenantBased(loadCycle, ruleName, "Home_CNUM");
		complete = true;
		return headingArray;
	}
	
	private JSONArray createTemplateForPayrollPayeeCPP(Tenant tenant, String loadCycle, String ruleName, String client, Long userId) {
		
		sourceContent = null;
		targetContent = null;
		sourceXMLContent = null;
		targetXMLContent = null;
		JSONArray headingArray = new JSONArray();
		InputStream is = null;
		SOAPConnection soapConnection = null;
		createTemplateFromSourceTenantPayrollPayeeCPP(tenant, is, soapConnection, loadCycle, ruleName, client, userId);
		is = null;
		soapConnection = null;
		createTemplateFromTargetTenantPayrollPayeeCPP(tenant, is, soapConnection, loadCycle, ruleName, client, userId);
		headingArray = selectColumnMappingTenantBased(loadCycle, ruleName, "Home_CNUM");
		complete = true;
		return headingArray;
	}
	
	private JSONArray createTemplateForPayrollPayeeEI(Tenant tenant, String loadCycle, String ruleName, String client, Long userId) {

		sourceContent = null;
		targetContent = null;
		sourceXMLContent = null;
		targetXMLContent = null;
		JSONArray headingArray = new JSONArray();
		InputStream is = null;
		SOAPConnection soapConnection = null;
		createTemplateFromSourceTenantPayrollPayeeEI(tenant, is, soapConnection, loadCycle, ruleName, client, userId);
		is = null;
		soapConnection = null;
		createTemplateFromTargetTenantPayrollPayeeEI(tenant, is, soapConnection, loadCycle, ruleName, client, userId);
		headingArray = selectColumnMappingTenantBased(loadCycle, ruleName, "Home_CNUM");
		complete = true;
		return headingArray;
	}
	
	private JSONArray createTemplateForPayrollPayeePTD1X(Tenant tenant, String loadCycle, String ruleName, String client, Long userId) {

		sourceContent = null;
		targetContent = null;
		sourceXMLContent = null;
		targetXMLContent = null;
		JSONArray headingArray = new JSONArray();
		InputStream is = null;
		SOAPConnection soapConnection = null;
		createTemplateFromSourceTenantPayrollPayeePTD1X(tenant, is, soapConnection, loadCycle, ruleName, client, userId);
		is = null;
		soapConnection = null;
		createTemplateFromTargetTenantPayrollPayeePTD1X(tenant, is, soapConnection, loadCycle, ruleName, client, userId);
		headingArray = selectColumnMappingTenantBased(loadCycle, ruleName, "Home_CNUM");
		complete = true;
		return headingArray;
	}
	
	private JSONArray createTemplateForPayrollPayeeTD1(Tenant tenant, String loadCycle, String ruleName, String client, Long userId) {

		sourceContent = null;
		targetContent = null;
		sourceXMLContent = null;
		targetXMLContent = null;
		JSONArray headingArray = new JSONArray();
		InputStream is = null;
		SOAPConnection soapConnection = null;
		createTemplateFromSourceTenantPayrollPayeeTD1(tenant, is, soapConnection, loadCycle, ruleName, client, userId);
		is = null;
		soapConnection = null;
		createTemplateFromTargetTenantPayrollPayeeTD1(tenant, is, soapConnection, loadCycle, ruleName, client, userId);
		headingArray = selectColumnMappingTenantBased(loadCycle, ruleName, "Home_CNUM");
		complete = true;
		return headingArray;
	}
	
	private JSONArray createTemplateForPayrollPayeeStudentLoans(Tenant tenant, String loadCycle, String ruleName, String client, Long userId) {

		sourceContent = null;
		targetContent = null;
		sourceXMLContent = null;
		targetXMLContent = null;
		JSONArray headingArray = new JSONArray();
		InputStream is = null;
		SOAPConnection soapConnection = null;
		createTemplateFromSourceTenantPayrollPayeeStudentLoans(tenant, is, soapConnection, loadCycle, ruleName, client, userId);
		is = null;
		soapConnection = null;
		createTemplateFromTargetTenantPayrollPayeeStudentLoans(tenant, is, soapConnection, loadCycle, ruleName, client, userId);
		headingArray = selectColumnMappingTenantBased(loadCycle, ruleName, "Home_CNUM");
		complete = true;
		return headingArray;
	}
	
	private JSONArray createTemplateForAdditionalName(Tenant tenant, String loadCycle, String ruleName, String client, Long userId) {

		sourceContent = null;
		targetContent = null;
		sourceXMLContent = null;
		targetXMLContent = null;
		JSONArray headingArray = new JSONArray();
		InputStream is = null;
		SOAPConnection soapConnection = null;
		createTemplateFromSourceTenantAdditionalName(tenant, is, soapConnection, loadCycle, "PassportVisa1", client, userId);
		is = null;
		soapConnection = null;
		createTemplateFromTargetTenantAdditionalName(tenant, is, soapConnection, loadCycle, ruleName, client, userId);
		headingArray = selectColumnMappingTenantBased(loadCycle, ruleName, "Home_CNUM");
		complete = true;
		return headingArray;
	}
	
	private JSONArray createTemplateForBeneficiary(Tenant tenant, String loadCycle, String ruleName, String client, Long userId) {

		sourceContent = null;
		targetContent = null;
		sourceXMLContent = null;
		targetXMLContent = null;
		JSONArray headingArray = new JSONArray();
		InputStream is = null;
		SOAPConnection soapConnection = null;
		createTemplateFromSourceTenantBeneficiary(tenant, is, soapConnection, loadCycle, ruleName, client, userId);
		is = null;
		soapConnection = null;
		createTemplateFromTargetTenantBeneficiary(tenant, is, soapConnection, loadCycle, ruleName, client, userId);
		headingArray = selectColumnMappingTenantBased(loadCycle, ruleName, "Home_CNUM");
		complete = true;
		return headingArray;
	}

	private JSONArray createTemplateForBenefitAnnualRate(Tenant tenant, String loadCycle, String ruleName, String client, Long userId) {

		sourceContent = null;
		targetContent = null;
		sourceXMLContent = null;
		targetXMLContent = null;
		JSONArray headingArray = new JSONArray();
		InputStream is = null;
		SOAPConnection soapConnection = null;
		createTemplateFromSourceTenantBenefitAnnualRate(tenant, is, soapConnection, loadCycle, ruleName, client, userId);
		is = null;
		soapConnection = null;
		createTemplateFromTargetTenantBenefitAnnualRate(tenant, is, soapConnection, loadCycle, ruleName, client, userId);
		headingArray = selectColumnMappingTenantBased(loadCycle, ruleName, "Home_CNUM");
		complete = true;
		return headingArray;
	}
	
	private JSONArray createTemplateForDependent(Tenant tenant, String loadCycle, String ruleName, String client, Long userId) {

		sourceContent = null;
		targetContent = null;
		sourceXMLContent = null;
		targetXMLContent = null;
		JSONArray headingArray = new JSONArray();
		InputStream is = null;
		SOAPConnection soapConnection = null;
		createTemplateFromSourceTenantDependent(tenant, is, soapConnection, loadCycle, ruleName, client, userId);
		is = null;
		soapConnection = null;
		createTemplateFromTargetTenantDependent(tenant, is, soapConnection, loadCycle, ruleName, client, userId);
		headingArray = selectColumnMappingTenantBased(loadCycle, ruleName, "Home_CNUM");
		complete = true;
		return headingArray;
	}
	
	private JSONArray createTemplateForPayrollPayeeProvinceTD1(Tenant tenant, String loadCycle, String ruleName, String client, Long userId) {
		
		sourceContent = null;
		targetContent = null;
		sourceXMLContent = null;
		targetXMLContent = null;
		JSONArray headingArray = new JSONArray();
		InputStream is = null;
		SOAPConnection soapConnection = null;
		createTemplateFromSourceTenantPayrollPayeeProvinceTD1(tenant, is, soapConnection, loadCycle, ruleName, client, userId);
		is = null;
		soapConnection = null;
		createTemplateFromTargetTenantPayrollPayeeProvinceTD1(tenant, is, soapConnection, loadCycle, ruleName, client, userId);
		headingArray = selectColumnMappingTenantBased(loadCycle, ruleName, "Home_CNUM");
		complete = true;
		return headingArray;
	}
	
	private JSONArray createTemplateForEducation(Tenant tenant, String loadCycle, String ruleName, String client, Long userId) {
		
		sourceContent = null;
		targetContent = null;
		sourceXMLContent = null;
		targetXMLContent = null;
		JSONArray headingArray = new JSONArray();
		InputStream is = null;
		SOAPConnection soapConnection = null;
		createTemplateFromSourceTenantEducation(tenant, is, soapConnection, loadCycle, "PassportVisa1", client, userId);
		is = null;
		soapConnection = null;
		createTemplateFromTargetTenantEducation(tenant, is, soapConnection, loadCycle, ruleName, client, userId);
		headingArray = selectColumnMappingTenantBased(loadCycle, ruleName, "Home_CNUM");
		complete = true;
		return headingArray;
	}
	
	private JSONArray createTemplateForCalculatedSalary(Tenant tenant, String loadCycle, String ruleName, String client, Long userId) {

		sourceContent = null;
		targetContent = null;
		sourceXMLContent = null;
		targetXMLContent = null;
		JSONArray headingArray = new JSONArray();
		InputStream is = null;
		SOAPConnection soapConnection = null;
		createTemplateFromSourceTenantCalculatedSalary(tenant, is, soapConnection, loadCycle, "PassportVisa1", client, userId);
		is = null;
		soapConnection = null;
		createTemplateFromTargetTenantCalculatedSalaryn(tenant, is, soapConnection, loadCycle, ruleName, client, userId);
		headingArray = selectColumnMappingTenantBased(loadCycle, ruleName, "Home_CNUM");
		complete = true;
		return headingArray;
	}
	
	private JSONArray createTemplateForAllowanceOverride(Tenant tenant, String loadCycle, String ruleName, String client, Long userId) {

		sourceContent = null;
		targetContent = null;
		sourceXMLContent = null;
		targetXMLContent = null;
		JSONArray headingArray = new JSONArray();
		InputStream is = null;
		SOAPConnection soapConnection = null;
		createTemplateFromSourceTenantAllowanceOverride(tenant, is, soapConnection, loadCycle, "PassportVisa1", client, userId);
		is = null;
		soapConnection = null;
		createTemplateFromTargetTenantAllowanceOverride(tenant, is, soapConnection, loadCycle, ruleName, client, userId);
		headingArray = selectColumnMappingTenantBased(loadCycle, ruleName, "Home_CNUM");
		complete = true;
		return headingArray;
	}

	@RequestMapping(value = "/postloadIsAllCompleteTenant", method = RequestMethod.GET, headers = "Accept=application/json")
	private boolean isCompleted()
	{
		return complete;
	}
	
	@RequestMapping(value = "/getMapResponseTenant", method = RequestMethod.GET, headers = "Accept=application/json")
	private JSONArray getMapResponse()
	{
		return headingArray;
	}


	private void createTemplateFromSourceTenantWorker(Tenant tenant, InputStream is, SOAPConnection soapConnection, String loadCycle, String ruleName, String client, Long userId) {
		
				sourceCount = 0;
				headingFromSourceTenant = "";
				sourceTenantRowMap.clear();
				sourceTenantColumnList.clear();
				errorList.clear();
				String xmlReqFile = null;
				try 
				{			 
					 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
					 if(getRequest != null)
					 {
						 byte[] requestFileContent = getRequest.getRequestXMLContent();
						 File requestfile = null;
						 try 
						 {
							 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
							 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
						 } 
						 catch (IOException e1) 
						 {
						     e1.printStackTrace();
						 }
						 xmlReqFile = requestfile.getAbsolutePath();
						 String outputfile = addHireIdList(xmlReqFile, oldEmpList, ruleName, 0, oldEmpList.size(), "Employee_ID");
						 is = new FileInputStream(outputfile);
					     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     SOAPPart soapPart = soapMessage.getSOAPPart();
					     SOAPEnvelope envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
							  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
					     ByteArrayOutputStream out = new ByteArrayOutputStream();
					     soapMessage.writeTo(out);
					     String strMsg = new String(out.toByteArray());	
					     
					     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
					     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
						 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
						 out = new ByteArrayOutputStream();
						 soapResponse.writeTo(out);
						 strMsg = new String(out.toByteArray(), "utf-8");

						 ReportElement soapResp = XmlParserManager.parseXml(strMsg);
						 
						 ReportElement pageData = soapResp.getChild("env:Body")
									.getChild("wd:Get_Workers_Response")
									.getChild("wd:Response_Results");
						 
						 String totalNoOfPages = pageData.getChild("wd:Total_Pages").getValue().trim();
						 String totalResults = pageData.getChild("wd:Total_Results").getValue().trim();
						 int totalResult = Integer.parseInt(totalResults);
						 System.out.println("totalNoOfPages-"+totalNoOfPages);
						 System.out.println("totalResult-"+totalResult);						 
						 
						 String employeeId = "";
						 String prefix = "";
						 String suffix = "";
						 String formattedName = "";
						 String reportingName = "";
						 String legalFirstName = "";
						 String legalMiddleName = "";
						 String legalLastName = "";
						 String legalSecondaryName = "";
						 String countryISOCode = "";
						 String preferredFirstName = "";
						 String preferredMiddleName = "";
						 String preferredLastName = "";
						 String preferredSecondaryName = "";
						 String localFirstName = "";
						 String localMiddleName = "";
						 String localLastName = "";
						 String localSecondaryName = "";
						 String localScript = "";
						 String empTerminationDate = "";
						 String birthDate = "";
						 String birthCity = "";
						 String birthRegion = "";
						 String tobaccoUse = "";
						 String birthCountry = "";
						 String genderDesc = "";
						 String maritalStatusName = "";
						 String maritalStatusDate = "";
						 String ethnicityName = "";
						 String hispLatino = "";
						 String citizenName = "";						 						 
						 
						 String customIdNumber = "";						 
						 String finalStr = "";
						 String headerStr = "";
						 
						 Map<String,String> keyMap = null;
						 Map<String,String> prefixMap = null;
						 Map<String,String> suffixMap = null;
						 Map<String,String> countryMap = null;
						 Map<String,String> genderMap = null;
						 Map<String,String> maritalMap = null;
						 Map<String,String> ethnMap = null;
						 Map<String,String> citizenMap = null;						 
						 Map<String,String> customTypeMap = null;
						 Map<String,String> nameDataMap = null;
						 Map<String,String> scriptMap = null;
						 
						 int startIndex = 0;
						 int endIndex = 0;
						 
						 for (int j = 1; j <=Integer.parseInt(totalNoOfPages); j++) //
						 {
							//String xmlStr = convertFileToString(xmlReqFile);
							//outputfile = updatePageIndex(xmlStr, j, ruleName);
							 if(j == 1)
							 {
								startIndex = 0;
								if(999 > totalResult)
								{
									endIndex = totalResult;
								}
								else
								{
									endIndex = j*999;
								}
							 }
							 else
							 {
								startIndex = endIndex;
								if(j*999 > totalResult)
								{
									endIndex = totalResult;
								}
								else
								{
									endIndex = (j*999);
								}
							 }
							 outputfile = addHireIdList(xmlReqFile, oldEmpList, ruleName, startIndex, endIndex, "Employee_ID");
							 is = new FileInputStream(outputfile);
						     soapMessage = MessageFactory.newInstance().createMessage(null, is);
						     soapPart = soapMessage.getSOAPPart();
						     envelope = soapPart.getEnvelope();
							 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
							 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
							 {
									envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
									createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
							 }
							 soapMessage.saveChanges();
					         out = new ByteArrayOutputStream();
					         soapMessage.writeTo(out);
					         strMsg = new String(out.toByteArray());
					        
					         soapConnectionFactory = SOAPConnectionFactory.newInstance();
							 soapConnection = soapConnectionFactory.createConnection();
					         soapResponse = soapConnection.call(soapMessage, sourceUrl);
					         out = new ByteArrayOutputStream();
					         soapResponse.writeTo(out);
					         strMsg = new String(out.toByteArray(), "utf-8");
					        
					         soapResp = XmlParserManager.parseXml(strMsg);
					        
					        ReportElement responseData = soapResp.getChild("env:Body")
									.getChild("wd:Get_Workers_Response")
									.getChild("wd:Response_Data");
					        
					        List<ReportElement> applicantData = responseData.getChildren("wd:Worker");
					        for(ReportElement reportElement : applicantData)
							{
					        	ReportElement terminationStatusData = reportElement.getChild("wd:Worker_Data")
							 			.getChild("wd:Employment_Data")
							 			.getChild("wd:Worker_Status_Data");
					        	
					        	empTerminationDate = terminationStatusData.getChild("wd:Termination_Date") != null?terminationStatusData.getChild("wd:Termination_Date").getValue().trim():"";					        	
					        	//if(!empTerminationDate.equalsIgnoreCase(""))
					        	{
					        		//Date termDate = convertWorkdayStringToDate(empTerminationDate);
					        		//if((termDate.equals(termFromDate) || termDate.after(termFromDate)) && (termDate.equals(termToDate) || termDate.before(termToDate)))
					        		{
							        	//System.out.println("empTerminationDate--"+ termDate);
						        		ReportElement element1 = reportElement.getChild("wd:Worker_Data");
						        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
						        		System.out.println("employeeId--"+ employeeId);										 										
										
						        		ReportElement legalNameData = reportElement.getChild("wd:Worker_Data")
									 			.getChild("wd:Personal_Data")
									 			.getChild("wd:Name_Data")
						        				.getChild("wd:Legal_Name_Data")
						        				.getChild("wd:Name_Detail_Data");
						        		
						        		 nameDataMap = legalNameData.getAllAttributes();
						        		 formattedName = nameDataMap.get("wd:Formatted_Name");
						        		 reportingName = nameDataMap.get("wd:Reporting_Name");
						        		 if(reportingName.contains(","))
										 {
						        			 reportingName =  reportingName.replace(",", "|");
										 }
						        		
										 legalFirstName = legalNameData.getChild("wd:First_Name") != null?legalNameData.getChild("wd:First_Name").getValue().trim():"";
										 legalMiddleName = legalNameData.getChild("wd:Middle_Name")!= null?legalNameData.getChild("wd:Middle_Name").getValue().trim():"";										 
										 legalLastName = legalNameData.getChild("wd:Last_Name") != null?legalNameData.getChild("wd:Last_Name").getValue().trim():"";
										 legalSecondaryName = legalNameData.getChild("wd:Secondary_Last_Name")!= null?legalNameData.getChild("wd:Secondary_Last_Name").getValue().trim():"";
										 
										 ReportElement localNameData = reportElement.getChild("wd:Worker_Data")
										 			.getChild("wd:Personal_Data")
										 			.getChild("wd:Name_Data")
								 					.getChild("wd:Legal_Name_Data")
								 					.getChild("wd:Name_Detail_Data")
								 					.getChild("wd:Local_Name_Detail_Data");
										 
										 if(localNameData != null)
										 {
											 localFirstName = localNameData.getChild("wd:First_Name") != null?localNameData.getChild("wd:First_Name").getValue().trim():"";
											 localMiddleName = localNameData.getChild("wd:Middle_Name")!= null?localNameData.getChild("wd:Middle_Name").getValue().trim():"";
											 localLastName = localNameData.getChild("wd:Last_Name") != null?localNameData.getChild("wd:Last_Name").getValue().trim():"";
											 localSecondaryName = localNameData.getChild("wd:Secondary_Last_Name")!= null?localNameData.getChild("wd:Secondary_Last_Name").getValue().trim():"";
											 scriptMap = localNameData.getAllAttributes();
											 localScript = scriptMap.get("wd:Local_Script");
										 }
										 else
										 {
											 localFirstName = "";
											 localMiddleName = "";
											 localLastName = "";
											 localSecondaryName = "";
											 localScript = "";
										 }
										 
										 
										 ReportElement prefixData = legalNameData.getChild("wd:Prefix_Data");								 													 
										 if(prefixData != null)
										 {
											 ReportElement prefixTitleRef = prefixData.getChild("wd:Title_Reference");
											 if(prefixTitleRef != null)
											 {
												 List<ReportElement> prefixList = prefixTitleRef.getChildren("wd:ID");
												 for(ReportElement prefixElement:prefixList)
												 {
													 prefixMap = prefixElement.getAllAttributes();
													 if(prefixMap.get("wd:type").equals("Predefined_Name_Component_ID"))
													 {
														 prefix = prefixElement.getValue().trim();
													 }
												 }
											 }
											 else
											 {
												 prefix = "";
											 }
										 }
										 else
										 {
											 prefix = "";
										 }
										 
										 ReportElement suffixData = legalNameData.getChild("wd:Suffix_Data");										 
										 if(suffixData != null)
										 {
											 ReportElement suffixRef = suffixData.getChild("wd:Social_Suffix_Reference");
											 if(suffixRef != null)
											 {
												 List<ReportElement> suffixList = suffixRef.getChildren("wd:ID");
												 for(ReportElement suffixElement:suffixList)
												 {
													 suffixMap = suffixElement.getAllAttributes();
													 if(suffixMap.get("wd:type").equals("Predefined_Name_Component_ID"))
													 {
														 suffix = suffixElement.getValue().trim();
													 }
												 }
											 }
											 else
											 {
												 suffix = "";
											 }
										 }
										 else
										 {
											 suffix = ""; 
										 }
										 
										 ReportElement countryRef = legalNameData.getChild("wd:Country_Reference");
										 if(countryRef != null)
										 {
											 List<ReportElement> wdData = countryRef.getChildren("wd:ID");											 
											 for(ReportElement wdElement:wdData)
											 {
												 keyMap = wdElement.getAllAttributes();
												 if(keyMap.get("wd:type").equals("ISO_3166-1_Alpha-3_Code"))
												 {
													 countryISOCode = wdElement.getValue().trim();
												 }
											 }
										 }
										 
										 
										 
						        		 ReportElement preferredNameData = reportElement.getChild("wd:Worker_Data")
									 			.getChild("wd:Personal_Data")
									 			.getChild("wd:Name_Data")
						        				.getChild("wd:Preferred_Name_Data")
						        				.getChild("wd:Name_Detail_Data");
						        		 
										 preferredFirstName = preferredNameData.getChild("wd:First_Name") != null?preferredNameData.getChild("wd:First_Name").getValue().trim():"";
										 preferredMiddleName = preferredNameData.getChild("wd:Middle_Name")!= null?preferredNameData.getChild("wd:Middle_Name").getValue().trim():"";
										 preferredLastName = preferredNameData.getChild("wd:Last_Name") != null?preferredNameData.getChild("wd:Last_Name").getValue().trim():"";
										 preferredSecondaryName = preferredNameData.getChild("wd:Secondary_Last_Name")!= null?preferredNameData.getChild("wd:Secondary_Last_Name").getValue().trim():"";
										 
										 ReportElement personalData = reportElement.getChild("wd:Worker_Data")
						 							.getChild("wd:Personal_Data");
										 
										 if(personalData != null)
										 {
											 birthDate = personalData.getChild("wd:Birth_Date") != null?personalData.getChild("wd:Birth_Date").getValue().trim():"";
											 birthCity = personalData.getChild("wd:City_of_Birth") != null?personalData.getChild("wd:City_of_Birth").getValue().trim():"";
											 if(birthCity.contains(","))
											 {
												 birthCity =  birthCity.replace(",", "|");
											 }
											 birthRegion = personalData.getChild("wd:Region_of_Birth_Descriptor") != null?personalData.getChild("wd:Region_of_Birth_Descriptor").getValue().trim():"";
											 tobaccoUse = personalData.getChild("wd:Tobacco_Use") != null?personalData.getChild("wd:Tobacco_Use").getValue().trim():"";
											 if(tobaccoUse.equals("1"))
											 {
												 tobaccoUse = "Y";
											 }
											 else
											 {
												 tobaccoUse = "N";
											 }
											 
											 ReportElement countryBirthData = personalData.getChild("wd:Country_of_Birth_Reference");
											 if(countryBirthData != null)
											 {
												 List<ReportElement> countryData = countryBirthData.getChildren("wd:ID");					 
												 for(ReportElement countryElement:countryData)
												 {
													 countryMap = countryElement.getAllAttributes();
													 if(countryMap.get("wd:type").equals("ISO_3166-1_Alpha-3_Code"))
													 {
														 birthCountry = countryElement.getValue().trim();
													 }
												 }
											 }
											 else
											 {
												 birthCountry = "";
											 }
											 
											 ReportElement genderData = personalData.getChild("wd:Gender_Reference");
											 if(genderData != null)
											 {
												 List<ReportElement> genderList = genderData.getChildren("wd:ID");					 
												 for(ReportElement genderElement:genderList)
												 {
													 genderMap = genderElement.getAllAttributes();
													 if(genderMap.get("wd:type").equals("Gender_Code"))
													 {
														 genderDesc = genderElement.getValue().trim();
													 }
												 }
											 }
											 else
											 {
												 genderDesc = "";
											 }
											 
											 ReportElement maritalStatusData = personalData.getChild("wd:Marital_Status_Reference");
											 if(maritalStatusData != null)
											 {
												 List<ReportElement> maritalStatusList = maritalStatusData.getChildren("wd:ID");					 
												 for(ReportElement maritalElement:maritalStatusList)
												 {
													 maritalMap = maritalElement.getAllAttributes();
													 if(maritalMap.get("wd:type").equals("Marital_Status_ID"))
													 {
														 maritalStatusName = maritalElement.getValue().trim();
													 }
												 }
											 }
											 else
											 {
												 maritalStatusName = "";
											 }
											 
											 maritalStatusDate = personalData.getChild("wd:Marital_Status_Date") != null?personalData.getChild("wd:Marital_Status_Date").getValue().trim():"";
											 
											 ReportElement ethnicityData = personalData.getChild("wd:Ethnicity_Reference");
											 if(ethnicityData != null)
											 {
												 List<ReportElement> ethnData = ethnicityData.getChildren("wd:ID");					 
												 for(ReportElement ethnElement:ethnData)
												 {
													 ethnMap = ethnElement.getAllAttributes();
													 if(ethnMap.get("wd:type").equals("Ethnicity_ID"))
													 {
														 ethnicityName = ethnElement.getValue().trim();
													 }
												 }
											 }
											 else
											 {
												 ethnicityName = "";
											 }
											 
											 hispLatino = personalData.getChild("wd:Hispanic_or_Latino") != null?personalData.getChild("wd:Hispanic_or_Latino").getValue().trim():"";
											 if(hispLatino.equals("1"))
											 {
												 hispLatino = "Y"; 
											 }
											 else
											 {
												 hispLatino = "N";  
											 }
											 
											 ReportElement citizenData = personalData.getChild("wd:Citizenship_Status_Reference");
											 if(citizenData != null)
											 {
												 List<ReportElement> citizenList = citizenData.getChildren("wd:ID");					 
												 for(ReportElement citizenElement:citizenList)
												 {
													 citizenMap = citizenElement.getAllAttributes();
													 if(citizenMap.get("wd:type").equals("Citizenship_Status_Code"))
													 {
														 citizenName = citizenElement.getValue().trim();
													 }
												 }
											 }
											 else
											 {
												 citizenName = "";
											 }											 											 											 
										 }
										 else
										 {
											 birthDate = "";
											 birthCity = "";
											 birthRegion = "";
											 birthCountry = "";
											 genderDesc = "";
											 tobaccoUse = "";
											 maritalStatusName = "";
											 maritalStatusDate = "";
											 ethnicityName = "";
											 hispLatino = "";
											 citizenName = "";
										 }										 										 
										 
										 ReportElement identificationData = reportElement.getChild("wd:Worker_Data")
										 			.getChild("wd:Personal_Data")
										 			.getChild("wd:Identification_Data");
										 
										 if(identificationData != null)
										 {												 											 
											 List<ReportElement> customIDList = identificationData.getChildren("wd:Custom_ID");
											 if(customIDList != null && customIDList.size() >0)
											 {
												 String expirationDate = "";
												 customIdNumber = "" ;
												 for(ReportElement customElement : customIDList)
												 {
													 ReportElement customIdData = customElement.getChild("wd:Custom_ID_Data");
													 expirationDate = customIdData.getChild("wd:Expiration_Date") != null?customIdData.getChild("wd:Expiration_Date").getValue().trim():"";
													 if(customIdData != null)
													 {
														 ReportElement customTypeRef = customIdData.getChild("wd:ID_Type_Reference");
														 if(customTypeRef != null)
														 {
															 List<ReportElement> customIdTypeData = customTypeRef.getChildren("wd:ID");								 
															 for(ReportElement idTypeElement:customIdTypeData)
															 {
																 customTypeMap = idTypeElement.getAllAttributes();
																 if(customTypeMap.get("wd:type").equals("Custom_ID_Type_ID"))
																 {
																	 if(idTypeElement.getValue().trim().equalsIgnoreCase("Global_CNUM") && expirationDate.isEmpty())
																	 {
																		 customIdNumber = customIdData.getChild("wd:ID") != null?customIdData.getChild("wd:ID").getValue().trim():"";
																	 }
																 }
															 }
														 }
													 }
												 }
												 if(customIdNumber.isEmpty())
												 {
													 customIdNumber = "" ;
												 }
											 }
											 else
											 {
												 customIdNumber = "" ;
											 }
										 }
										 else
										 {
											 customIdNumber = "" ;											 
										 }										 										 									 
								}						        						        
					        }
						     headingFromSourceTenant = "Home_CNUM,Employee_ID,"
						     		+ "Prefix,Country_ISO_Code,Formatted_Name,Reporting_Name,Legal_First_Name,Legal_Middle_Name,Legal_Last_Name,Legal_Secondary_Name,Suffix,"
					        			+ "Preferred_First_Name,Preferred_Middle_Name,Preferred_Last_Name,Preferred_Secondary_Name,Local_First_Name,Local_Middle_Name,Local_Last_Name,Local_Secondary_Name,Local_Script,"
					        			+ "Birth_Date,City_of_Birth,Region_of_Birth,Country_of_Birth,Tobacco_Use,Gender,Marital_Status_Name,Marital_Status_Date,Ethnicity,"
					        			+ "Hispanic_or_Latino,Citizenship_Status";
						     
				        	if(!customIdNumber.isEmpty())
							{
					        	headerStr = customIdNumber + "," + employeeId + "," + prefix + "," + countryISOCode + "," + formattedName + "," + reportingName + "," + legalFirstName + "," + legalMiddleName + "," + legalLastName + "," + legalSecondaryName + "," +
								 		    suffix + "," + preferredFirstName + "," + preferredMiddleName + "," + preferredLastName + "," + preferredSecondaryName + "," + 
					        			    localFirstName + "," + localMiddleName + "," + localLastName + "," + localSecondaryName + "," + localScript +
								 		 "," + birthDate + "," + birthCity + "," + birthRegion + "," +birthCountry + "," + tobaccoUse +
								 		 "," + genderDesc + "," + maritalStatusName + "," + maritalStatusDate + "," + ethnicityName + "," + hispLatino + "," + citizenName ; 
					        	
					        	sourceTenantRowMap.put(customIdNumber, headerStr);							        	
					        	sourceTenantColumnList.add(customIdNumber);
					        	
					        	if(finalStr.equals(""))
								{
									 finalStr =  headingFromSourceTenant + "\n" + headerStr;
								}
								else
								{
									 finalStr = finalStr + "\n" + headerStr;
								}
							 }
				          }						 							 
					   }
					
						 System.out.println(finalStr);
						 sourceContent = finalStr.getBytes();						 
						 sourceCount = sourceTenantColumnList.size();
				    }
				}
				catch (FileNotFoundException e)
				{
					e.printStackTrace();
				} 
				catch (IOException e) 
				{
					e.printStackTrace();
				} 
				catch (SOAPException e) 
				{
					e.printStackTrace();
				} 
				catch (Exception e) 
				{
					e.printStackTrace();
				}
	}
	
	
	
	private void createTemplateFromTargetTenantWorker(Tenant tenant, InputStream is, SOAPConnection soapConnection,
			String loadCycle, String ruleName, String client, Long userId) {
		
		wdCount = 0;
		headingFromTargetTenant = "";
		targetTenantRowMap.clear();
		targetTenantColumnList.clear();
		String xmlReqFile = null;
		try 
		{			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 xmlReqFile = requestfile.getAbsolutePath();
				 String outputfile = addHireIdList(xmlReqFile, newEmpList, ruleName, 0, newEmpList.size(), "Employee_ID");
				 is = new FileInputStream(outputfile);
			     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
			     SOAPPart soapPart = soapMessage.getSOAPPart();
			     SOAPEnvelope envelope = soapPart.getEnvelope();
				 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
				 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
				 {
					  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
					  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
				 }
				 soapMessage.saveChanges();
			     ByteArrayOutputStream out = new ByteArrayOutputStream();
			     soapMessage.writeTo(out);
			     String strMsg = new String(out.toByteArray());	
			     
			     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
			     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
				 soapConnection = soapConnectionFactory.createConnection();
				 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
				 out = new ByteArrayOutputStream();
				 soapResponse.writeTo(out);
				 strMsg = new String(out.toByteArray(), "utf-8");

				 ReportElement soapResp = XmlParserManager.parseXml(strMsg);
				 
				 ReportElement pageData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Results");
				 
				 String totalNoOfPages = pageData.getChild("wd:Total_Pages").getValue().trim();
				 String totalResults = pageData.getChild("wd:Total_Results").getValue().trim();
				 int totalResult = Integer.parseInt(totalResults);
				 System.out.println("totalNoOfPages-"+totalNoOfPages);
				 System.out.println("totalResult-"+totalResult);				 
				 
				 String employeeId = "";
				 String prefix = "";
				 String suffix = "";
				 String formattedName = "";
				 String reportingName = "";
				 String localFirstName = "";
				 String localMiddleName = "";
				 String localLastName = "";
				 String localSecondaryName = "";
				 String localScript = "";
				 String employeeHireDate = "";
				 String legalFirstName = "";
				 String legalMiddleName = "";
				 String legalLastName = "";
				 String legalSecondaryName = "";
				 String countryISOCode = "";
				 String preferredFirstName = "";
				 String preferredMiddleName = "";
				 String preferredLastName = "";
				 String preferredSecondaryName = "";
				 String birthDate = "";
				 String birthCity = "";
				 String birthRegion = "";
				 String tobaccoUse = "";
				 String birthCountry = "";
				 String genderDesc = "";
				 String maritalStatusName = "";
				 String maritalStatusDate = "";
				 String ethnicityName = "";
				 String hispLatino = "";
				 String citizenName = "";						 						 
				 
				 String customIdNumber = "";						 
				 String finalStr = "";
				 String headerStr = "";
				 
				 Map<String,String> keyMap = null;
				 Map<String,String> prefixMap = null;
				 Map<String,String> suffixMap = null;
				 Map<String,String> countryMap = null;
				 Map<String,String> genderMap = null;
				 Map<String,String> maritalMap = null;
				 Map<String,String> ethnMap = null;
				 Map<String,String> citizenMap = null;						 
				 Map<String,String> customTypeMap = null;
				 Map<String,String> nameDataMap = null;
				 Map<String,String> scriptMap = null;
				 
				 int startIndex = 0;
				 int endIndex = 0;
				 
				 for (int j = 1; j <=Integer.parseInt(totalNoOfPages); j++) //
				 {
					 if(j == 1)
					 {
						startIndex = 0;
						if(999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = j*999;
						}
					 }
					 else
					 {
						startIndex = endIndex;
						if(j*999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = (j*999);
						}
					 }
					 outputfile = addHireIdList(xmlReqFile, newEmpList, ruleName, startIndex, endIndex, "Employee_ID");
					 is = new FileInputStream(outputfile);
				     soapMessage = MessageFactory.newInstance().createMessage(null, is);
				     soapPart = soapMessage.getSOAPPart();
				     envelope = soapPart.getEnvelope();
					 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
					 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
					 {
							envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
					 }
					 soapMessage.saveChanges();
			         out = new ByteArrayOutputStream();
			         soapMessage.writeTo(out);
			         strMsg = new String(out.toByteArray());
			        
			         soapConnectionFactory = SOAPConnectionFactory.newInstance();
					 soapConnection = soapConnectionFactory.createConnection();
			         soapResponse = soapConnection.call(soapMessage, sourceUrl);
			         out = new ByteArrayOutputStream();
			         soapResponse.writeTo(out);
			         strMsg = new String(out.toByteArray(), "utf-8");
			        
			         soapResp = XmlParserManager.parseXml(strMsg);
			        
			        ReportElement responseData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Data");
			        
			        List<ReportElement> applicantData = responseData.getChildren("wd:Worker");
			        for(ReportElement reportElement : applicantData)
					{
			        	ReportElement hireStatusData = reportElement.getChild("wd:Worker_Data")
					 			.getChild("wd:Employment_Data")
					 			.getChild("wd:Worker_Status_Data");
			        	
			        	employeeHireDate = hireStatusData.getChild("wd:Hire_Date") != null?hireStatusData.getChild("wd:Hire_Date").getValue().trim():"";					        	
			        	if(!employeeHireDate.equalsIgnoreCase(""))
			        	{
			        		Date empHireDate = convertWorkdayStringToDate(employeeHireDate);
			        		//if((empHireDate.equals(hireFromDate) || empHireDate.after(hireFromDate)) && (empHireDate.equals(hireToDate) || empHireDate.before(hireToDate)))
			        		{
					        	System.out.println("empHireDate--"+ empHireDate);
				        		ReportElement element1 = reportElement.getChild("wd:Worker_Data");
				        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
				        		System.out.println("employeeId--"+ employeeId);
				        		
				        		
								
				        		ReportElement legalNameData = reportElement.getChild("wd:Worker_Data")
							 			.getChild("wd:Personal_Data")
							 			.getChild("wd:Name_Data")
				        				.getChild("wd:Legal_Name_Data")
				        				.getChild("wd:Name_Detail_Data");
				        		
				        		 nameDataMap = legalNameData.getAllAttributes();
				        		 formattedName = nameDataMap.get("wd:Formatted_Name");
				        		 reportingName = nameDataMap.get("wd:Reporting_Name");
				        		 if(reportingName.contains(","))
								 {
				        			 reportingName =  reportingName.replace(",", "|");
								 }
				        		
								 legalFirstName = legalNameData.getChild("wd:First_Name") != null?legalNameData.getChild("wd:First_Name").getValue().trim():"";
								 legalMiddleName = legalNameData.getChild("wd:Middle_Name")!= null?legalNameData.getChild("wd:Middle_Name").getValue().trim():"";										 
								 legalLastName = legalNameData.getChild("wd:Last_Name") != null?legalNameData.getChild("wd:Last_Name").getValue().trim():"";
								 legalSecondaryName = legalNameData.getChild("wd:Secondary_Last_Name")!= null?legalNameData.getChild("wd:Secondary_Last_Name").getValue().trim():"";
								 
								 ReportElement localNameData = reportElement.getChild("wd:Worker_Data")
								 			.getChild("wd:Personal_Data")
								 			.getChild("wd:Name_Data")
						 					.getChild("wd:Legal_Name_Data")
						 					.getChild("wd:Name_Detail_Data")
						 					.getChild("wd:Local_Name_Detail_Data");
								 
								 if(localNameData != null)
								 {
									 localFirstName = localNameData.getChild("wd:First_Name") != null?localNameData.getChild("wd:First_Name").getValue().trim():"";
									 localMiddleName = localNameData.getChild("wd:Middle_Name")!= null?localNameData.getChild("wd:Middle_Name").getValue().trim():"";
									 localLastName = localNameData.getChild("wd:Last_Name") != null?localNameData.getChild("wd:Last_Name").getValue().trim():"";
									 localSecondaryName = localNameData.getChild("wd:Secondary_Last_Name")!= null?localNameData.getChild("wd:Secondary_Last_Name").getValue().trim():"";
									 scriptMap = localNameData.getAllAttributes();
									 localScript = scriptMap.get("wd:Local_Script");
								 }
								 else
								 {
									 localFirstName = "";
									 localMiddleName = "";
									 localLastName = "";
									 localSecondaryName = "";
									 localScript = "";
								 }
								 
								 ReportElement prefixData = legalNameData.getChild("wd:Prefix_Data");								 													 
								 if(prefixData != null)
								 {
									 ReportElement prefixTitleRef = prefixData.getChild("wd:Title_Reference");
									 if(prefixTitleRef != null)
									 {
										 List<ReportElement> prefixList = prefixTitleRef.getChildren("wd:ID");
										 for(ReportElement prefixElement:prefixList)
										 {
											 prefixMap = prefixElement.getAllAttributes();
											 if(prefixMap.get("wd:type").equals("Predefined_Name_Component_ID"))
											 {
												 prefix = prefixElement.getValue().trim();
											 }
										 }
									 }
									 else
									 {
										 prefix = "";
									 }
								 }
								 else
								 {
									 prefix = "";
								 }
								 
								 ReportElement suffixData = legalNameData.getChild("wd:Suffix_Data");										 
								 if(suffixData != null)
								 {
									 ReportElement suffixRef = suffixData.getChild("wd:Social_Suffix_Reference");
									 if(suffixRef != null)
									 {
										 List<ReportElement> suffixList = suffixRef.getChildren("wd:ID");
										 for(ReportElement suffixElement:suffixList)
										 {
											 suffixMap = suffixElement.getAllAttributes();
											 if(suffixMap.get("wd:type").equals("Predefined_Name_Component_ID"))
											 {
												 suffix = suffixElement.getValue().trim();
											 }
										 }
									 }
									 else
									 {
										 suffix = "";
									 }
								 }
								 else
								 {
									 suffix = ""; 
								 }
								 
								 ReportElement countryRef = legalNameData.getChild("wd:Country_Reference");
								 if(countryRef != null)
								 {
									 List<ReportElement> wdData = countryRef.getChildren("wd:ID");											 
									 for(ReportElement wdElement:wdData)
									 {
										 keyMap = wdElement.getAllAttributes();
										 if(keyMap.get("wd:type").equals("ISO_3166-1_Alpha-3_Code"))
										 {
											 countryISOCode = wdElement.getValue().trim();
										 }
									 }
								 }
								 
				        		 ReportElement preferredNameData = reportElement.getChild("wd:Worker_Data")
							 			.getChild("wd:Personal_Data")
							 			.getChild("wd:Name_Data")
				        				.getChild("wd:Preferred_Name_Data")
				        				.getChild("wd:Name_Detail_Data");
				        		 
								 preferredFirstName = preferredNameData.getChild("wd:First_Name") != null?preferredNameData.getChild("wd:First_Name").getValue().trim():"";
								 preferredMiddleName = preferredNameData.getChild("wd:Middle_Name")!= null?preferredNameData.getChild("wd:Middle_Name").getValue().trim():"";
								 preferredLastName = preferredNameData.getChild("wd:Last_Name") != null?preferredNameData.getChild("wd:Last_Name").getValue().trim():"";
								 preferredSecondaryName = preferredNameData.getChild("wd:Secondary_Last_Name")!= null?preferredNameData.getChild("wd:Secondary_Last_Name").getValue().trim():"";
								 
								 ReportElement personalData = reportElement.getChild("wd:Worker_Data")
				 							.getChild("wd:Personal_Data");
								 
								 if(personalData != null)
								 {
									 birthDate = personalData.getChild("wd:Birth_Date") != null?personalData.getChild("wd:Birth_Date").getValue().trim():"";
									 birthCity = personalData.getChild("wd:City_of_Birth") != null?personalData.getChild("wd:City_of_Birth").getValue().trim():"";
									 if(birthCity.contains(","))
									 {
										 birthCity =  birthCity.replace(",", "|");
									 }
									 birthRegion = personalData.getChild("wd:Region_of_Birth_Descriptor") != null?personalData.getChild("wd:Region_of_Birth_Descriptor").getValue().trim():"";
									 tobaccoUse = personalData.getChild("wd:Tobacco_Use") != null?personalData.getChild("wd:Tobacco_Use").getValue().trim():"";
									 if(tobaccoUse.equals("1"))
									 {
										 tobaccoUse = "Y";
									 }
									 else
									 {
										 tobaccoUse = "N";
									 }
									 
									 ReportElement countryBirthData = personalData.getChild("wd:Country_of_Birth_Reference");
									 if(countryBirthData != null)
									 {
										 List<ReportElement> countryData = countryBirthData.getChildren("wd:ID");					 
										 for(ReportElement countryElement:countryData)
										 {
											 countryMap = countryElement.getAllAttributes();
											 if(countryMap.get("wd:type").equals("ISO_3166-1_Alpha-3_Code"))
											 {
												 birthCountry = countryElement.getValue().trim();
											 }
										 }
									 }
									 else
									 {
										 birthCountry = "";
									 }
									 
									 ReportElement genderData = personalData.getChild("wd:Gender_Reference");
									 if(genderData != null)
									 {
										 List<ReportElement> genderList = genderData.getChildren("wd:ID");					 
										 for(ReportElement genderElement:genderList)
										 {
											 genderMap = genderElement.getAllAttributes();
											 if(genderMap.get("wd:type").equals("Gender_Code"))
											 {
												 genderDesc = genderElement.getValue().trim();
											 }
										 }
									 }
									 else
									 {
										 genderDesc = "";
									 }
									 
									 ReportElement maritalStatusData = personalData.getChild("wd:Marital_Status_Reference");
									 if(maritalStatusData != null)
									 {
										 List<ReportElement> maritalStatusList = maritalStatusData.getChildren("wd:ID");					 
										 for(ReportElement maritalElement:maritalStatusList)
										 {
											 maritalMap = maritalElement.getAllAttributes();
											 if(maritalMap.get("wd:type").equals("Marital_Status_ID"))
											 {
												 maritalStatusName = maritalElement.getValue().trim();
											 }
										 }
									 }
									 else
									 {
										 maritalStatusName = "";
									 }
									 
									 maritalStatusDate = personalData.getChild("wd:Marital_Status_Date") != null?personalData.getChild("wd:Marital_Status_Date").getValue().trim():"";
									 
									 ReportElement ethnicityData = personalData.getChild("wd:Ethnicity_Reference");
									 if(ethnicityData != null)
									 {
										 List<ReportElement> ethnData = ethnicityData.getChildren("wd:ID");					 
										 for(ReportElement ethnElement:ethnData)
										 {
											 ethnMap = ethnElement.getAllAttributes();
											 if(ethnMap.get("wd:type").equals("Ethnicity_ID"))
											 {
												 ethnicityName = ethnElement.getValue().trim();
											 }
										 }
									 }
									 else
									 {
										 ethnicityName = "";
									 }
									 
									 hispLatino = personalData.getChild("wd:Hispanic_or_Latino") != null?personalData.getChild("wd:Hispanic_or_Latino").getValue().trim():"";
									 if(hispLatino.equals("1"))
									 {
										 hispLatino = "Y"; 
									 }
									 else
									 {
										 hispLatino = "N";  
									 }
									 
									 ReportElement citizenData = personalData.getChild("wd:Citizenship_Status_Reference");
									 if(citizenData != null)
									 {
										 List<ReportElement> citizenList = citizenData.getChildren("wd:ID");					 
										 for(ReportElement citizenElement:citizenList)
										 {
											 citizenMap = citizenElement.getAllAttributes();
											 if(citizenMap.get("wd:type").equals("Citizenship_Status_Code"))
											 {
												 citizenName = citizenElement.getValue().trim();
											 }
										 }
									 }
									 else
									 {
										 citizenName = "";
									 }
									 
									 
								 }
								 else
								 {
									 birthDate = "";
									 birthCity = "";
									 birthRegion = "";
									 birthCountry = "";
									 genderDesc = "";
									 tobaccoUse = "";
									 maritalStatusName = "";
									 maritalStatusDate = "";
									 ethnicityName = "";
									 hispLatino = "";
									 citizenName = "";
								 }								 
								 
								 ReportElement identificationData = reportElement.getChild("wd:Worker_Data")
								 			.getChild("wd:Personal_Data")
								 			.getChild("wd:Identification_Data");
								 
								 if(identificationData != null)
								 {										 
									 List<ReportElement> customIDList = identificationData.getChildren("wd:Custom_ID");
									 if(customIDList != null && customIDList.size() >0)
									 {
										 customIdNumber = "" ;
										 for(ReportElement customElement : customIDList)
										 {
											 ReportElement customIdData = customElement.getChild("wd:Custom_ID_Data");
											 if(customIdData != null)
											 {
												 ReportElement customTypeRef = customIdData.getChild("wd:ID_Type_Reference");
												 if(customTypeRef != null)
												 {
													 List<ReportElement> customIdTypeData = customTypeRef.getChildren("wd:ID");								 
													 for(ReportElement idTypeElement:customIdTypeData)
													 {
														 customTypeMap = idTypeElement.getAllAttributes();
														 if(customTypeMap.get("wd:type").equals("Custom_ID_Type_ID"))
														 {
															 if(idTypeElement.getValue().trim().equalsIgnoreCase("Previous_IBM_CNUM"))
															 {
																 customIdNumber = customIdData.getChild("wd:ID") != null?customIdData.getChild("wd:ID").getValue().trim():""; 
															 }
														 }
													 }
												 }
											 }
										 }
										 if(customIdNumber.isEmpty())
										 {
											 customIdNumber = "" ;
										 }
									 }
									 else
									 {
										 customIdNumber = "" ;
									 }
								 }
								 else
								 {
									 customIdNumber = "" ;
								 }								 								 								 
						}				        				        
			          }
			        	headingFromTargetTenant = "Home_CNUM,Employee_ID,"
					     		+ "Prefix,Country_ISO_Code,Formatted_Name,Reporting_Name,Legal_First_Name,Legal_Middle_Name,Legal_Last_Name,Legal_Secondary_Name,Suffix,"
				        			+ "Preferred_First_Name,Preferred_Middle_Name,Preferred_Last_Name,Preferred_Secondary_Name,Local_First_Name,Local_Middle_Name,Local_Last_Name,Local_Secondary_Name,Local_Script,"
				        			+ "Birth_Date,City_of_Birth,Region_of_Birth,Country_of_Birth,Tobacco_Use,Gender,Marital_Status_Name,Marital_Status_Date,Ethnicity,"
				        			+ "Hispanic_or_Latino,Citizenship_Status";
					     
			        	if(!customIdNumber.isEmpty())
						{
				        	headerStr = customIdNumber + "," + employeeId + "," + prefix + "," + countryISOCode + "," + formattedName + "," + reportingName + "," + legalFirstName + "," + legalMiddleName + "," + legalLastName + "," + legalSecondaryName + "," +
						 		    suffix + "," + preferredFirstName + "," + preferredMiddleName + "," + preferredLastName + "," + preferredSecondaryName + "," + 
			        			    localFirstName + "," + localMiddleName + "," + localLastName + "," + localSecondaryName + "," + localScript +
						 		 "," + birthDate + "," + birthCity + "," + birthRegion + "," +birthCountry + "," + tobaccoUse +
						 		 "," + genderDesc + "," + maritalStatusName + "," + maritalStatusDate + "," + ethnicityName + "," + hispLatino + "," + citizenName ; 
				        	
				        	
			        	 targetTenantRowMap.put(customIdNumber, headerStr);
			        	 targetTenantColumnList.add(customIdNumber);
			        	 
						 if(finalStr.equals(""))
						 {
							 finalStr =  headingFromTargetTenant + "\n" + headerStr;
						 }
						 else
						 {
							 finalStr = finalStr + "\n" + headerStr;
						 }
					 }
				   }						 							 
			     }
				 System.out.println(finalStr);
				 targetContent = finalStr.getBytes();
				 wdCount = targetTenantColumnList.size();
		   }
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
	}
	
	private void createTemplateFromSourceTenantAddress(Tenant tenant, InputStream is, SOAPConnection soapConnection, String loadCycle, String ruleName, String client, Long userId) {
		
		sourceCount = 0;
		headingFromSourceTenant = "";
		sourceTenantRowMap.clear();
		sourceTenantColumnList.clear();
		errorList.clear();
		String xmlReqFile = null;
		try 
		{			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 xmlReqFile = requestfile.getAbsolutePath();
				 String outputfile = addHireIdList(xmlReqFile, oldEmpList, ruleName, 0, oldEmpList.size(), "Employee_ID");
				 is = new FileInputStream(outputfile);
			     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
			     SOAPPart soapPart = soapMessage.getSOAPPart();
			     SOAPEnvelope envelope = soapPart.getEnvelope();
				 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
				 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
				 {
					  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
					  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
				 }
				 soapMessage.saveChanges();
			     ByteArrayOutputStream out = new ByteArrayOutputStream();
			     soapMessage.writeTo(out);
			     String strMsg = new String(out.toByteArray());	
			     
			     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
			     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
				 soapConnection = soapConnectionFactory.createConnection();
				 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
				 out = new ByteArrayOutputStream();
				 soapResponse.writeTo(out);
				 strMsg = new String(out.toByteArray(), "utf-8");

				 ReportElement soapResp = XmlParserManager.parseXml(strMsg);
				 
				 ReportElement pageData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Results");
				 
				 String totalNoOfPages = pageData.getChild("wd:Total_Pages").getValue().trim();
				 String totalResults = pageData.getChild("wd:Total_Results").getValue().trim();
				 int totalResult = Integer.parseInt(totalResults);
				 System.out.println("totalNoOfPages-"+totalNoOfPages);
				 System.out.println("totalResult-"+totalResult);						 
				 
				 String employeeId = "";
				 //String countryPhCode = "";
				 //String countryPhCodeArr = "";
				 //String areaCode = "";
				 //String areaCodeArr = "";
				 String phoneNumber = "";
				 String phoneNumberArr = "";
				 //String phCountryISOCode = "";
				 //String phCountryISOCodeArr = "";
				 String phoneDeviceType = "";
				 String phoneDeviceTypeArr = "";
				 //String usageTypePhone = "";
				 //String usageTypePhoneArr = "";
				 //String primaryPhone = "";
				 //String primaryPhoneArr = "";
				 String empTerminationDate = "";
				 String formattedAddress = "";
				 String formattedAddressArr = "";
				 /*String addrLine_1 = "";
				 String addrLine_2 = "";
				 String addrLine_3 = "";
				 String addrLine_4 = "";
				 String addrLine_5 = "";
				 String addrLine_6 = "";
				 String addrLine_7 = "";
				 String addrLine_8 = "";
				 String addrLine_9 = "";
				 String addrLine_1Arr = "";
				 String addrLine_2Arr = "";
				 String addrLine_3Arr = "";
				 String addrLine_4Arr = "";
				 String addrLine_5Arr = "";
				 String addrLine_6Arr = "";
				 String addrLine_7Arr = "";
				 String addrLine_8Arr = "";
				 String addrLine_9Arr = "";*/
				 String addrCity = "";
				 String subCity1 = "";
				 String subCity2 = "";
				 String subCity1Arr = "";
				 String subCity2Arr = "";
				 String addrRegion = "";
				 String subRegion1 = "";
				 String subRegion2 = "";
				 String subRegion1Arr = "";
				 String subRegion2Arr = "";
				 //String addrUsageType = "";
				 String postalCode = "";
				 String addrCityArr = "";
				 String addrRegionArr = "";
				 //String addrUsageTypeArr = "";
				 String postalCodeArr = "";
				 String email = "";
				 String emailArr = "";
				 
				 String customIdNumber = "";						 
				 String finalStr = "";
				 String headerStr = "";
				 
				 Map<String,String> usageMap = null;
				 //Map<String,String> phUsageMap = null;
				 Map<String,String> phoneMap = null;
				 Map<String,String> phDeviceMap = null;
				 //Map<String,String> primaryPhoneMap = null;					 
				 Map<String,String> customTypeMap = null;
				 Map<String,String> addressMap = null;
				 //Map<String,String> addrLineMap = null;
				 Map<String,String> subCityMap = null;
				 Map<String,String> subRegionMap = null;
				 
				 int startIndex = 0;
				 int endIndex = 0;
				 
				 for (int j = 1; j <=Integer.parseInt(totalNoOfPages); j++) //
				 {
					//String xmlStr = convertFileToString(xmlReqFile);
					//outputfile = updatePageIndex(xmlStr, j, ruleName);
					 if(j == 1)
					 {
						startIndex = 0;
						if(999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = j*999;
						}
					 }
					 else
					 {
						startIndex = endIndex;
						if(j*999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = (j*999);
						}
					 }
					 outputfile = addHireIdList(xmlReqFile, oldEmpList, ruleName, startIndex, endIndex, "Employee_ID");
					 is = new FileInputStream(outputfile);
				     soapMessage = MessageFactory.newInstance().createMessage(null, is);
				     soapPart = soapMessage.getSOAPPart();
				     envelope = soapPart.getEnvelope();
					 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
					 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
					 {
							envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
					 }
					 soapMessage.saveChanges();
			         out = new ByteArrayOutputStream();
			         soapMessage.writeTo(out);
			         strMsg = new String(out.toByteArray());
			        
			         soapConnectionFactory = SOAPConnectionFactory.newInstance();
					 soapConnection = soapConnectionFactory.createConnection();
			         soapResponse = soapConnection.call(soapMessage, sourceUrl);
			         out = new ByteArrayOutputStream();
			         soapResponse.writeTo(out);
			         strMsg = new String(out.toByteArray(), "utf-8");
			        
			         soapResp = XmlParserManager.parseXml(strMsg);
			        
			        ReportElement responseData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Data");
			        
			        List<ReportElement> applicantData = responseData.getChildren("wd:Worker");
			        for(ReportElement reportElement : applicantData)
					{
			        	ReportElement terminationStatusData = reportElement.getChild("wd:Worker_Data")
					 			.getChild("wd:Employment_Data")
					 			.getChild("wd:Worker_Status_Data");
			        	
			        	empTerminationDate = terminationStatusData.getChild("wd:Termination_Date") != null?terminationStatusData.getChild("wd:Termination_Date").getValue().trim():"";					        	
			        	//if(!empTerminationDate.equalsIgnoreCase(""))
			        	{
			        		//Date termDate = convertWorkdayStringToDate(empTerminationDate);
			        		//if((termDate.equals(termFromDate) || termDate.after(termFromDate)) && (termDate.equals(termToDate) || termDate.before(termToDate)))
			        		{
					        	//System.out.println("empTerminationDate--"+ termDate);
				        		ReportElement element1 = reportElement.getChild("wd:Worker_Data");
				        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
				        		System.out.println("employeeId--"+ employeeId);	
				        		
				        		List<ReportElement> emailList = reportElement.getChild("wd:Worker_Data")
							 			.getChild("wd:Personal_Data")
							 			.getChild("wd:Contact_Data")
					 					.getChildren("wd:Email_Address_Data");
							 
								 if(emailList != null && emailList.size() >0)
								 {
									 emailArr = "";										 
									 for(ReportElement emailElement:emailList)
									 {
										 ReportElement usageData = emailElement.getChild("wd:Usage_Data");
										 if(usageData != null)
										 {
											 ReportElement typeDaya = usageData.getChild("wd:Type_Data");
											 if(typeDaya != null)
											 {
												 ReportElement typeRef = typeDaya.getChild("wd:Type_Reference");
												 if(typeRef !=null)
												 {
													 List<ReportElement> typeRefData = typeRef.getChildren("wd:ID");					 
													 for(ReportElement wdElement:typeRefData)
													 {
														 usageMap = wdElement.getAllAttributes();
														 if(usageMap.get("wd:type").equals("Communication_Usage_Type_ID"))
														 {
															 if(wdElement.getValue().trim().equalsIgnoreCase("HOME"))
															 {
																 email = emailElement.getChild("wd:Email_Address") != null?emailElement.getChild("wd:Email_Address").getValue().trim():"";
																 if(emailArr.equals(""))
																 {
																	 emailArr = email;
																 }
																 else
																 {
																	 emailArr = emailArr + "~" + email;
																 }
															 }
															 														
														 }
													 }
												 }
											 }
										 }
									 }
								 }
								 else
								 {
									 emailArr = ""; 
								 }
								 
								 List<ReportElement> phoneList = reportElement.getChild("wd:Worker_Data")
								 			.getChild("wd:Personal_Data")
								 			.getChild("wd:Contact_Data")
						 					.getChildren("wd:Phone_Data");						
								 
									if(phoneList != null && phoneList.size() >0)
									{
										//countryPhCode = "";
										//areaCode = "";
										phoneNumberArr = "";
										//phCountryISOCodeArr = "";
										phoneDeviceTypeArr = "";
										//usageTypePhoneArr = "";
										//primaryPhoneArr = "";
										for(ReportElement phoneElement : phoneList)
										{
											 phoneMap = phoneElement.getAllAttributes();
											 phoneNumber = phoneMap.get("wd:Formatted_Phone");
											 /*countryPhCode = phoneElement.getChild("wd:International_Phone_Code") != null?phoneElement.getChild("wd:International_Phone_Code").getValue().trim():"";
											 if(countryPhCodeArr.equals(""))
											 {
												 countryPhCodeArr = countryPhCode;
											 }
											 else
											 {
												 if(!countryPhCode.equals(""))
												 {
													 countryPhCodeArr = countryPhCodeArr + "~" + countryPhCode;
												 }
											 }
											 areaCode = phoneElement.getChild("wd:Area_Code") != null?phoneElement.getChild("wd:Area_Code").getValue().trim():"";
											 if(areaCodeArr.equals(""))
											 {
												 areaCodeArr = areaCode;
											 }
											 else
											 {
												 if(!areaCode.equals(""))
												 {
													 areaCodeArr = areaCodeArr + "~" + areaCode;
												 }
											 }
											 phoneNumber = phoneElement.getChild("wd:Phone_Number") != null?phoneElement.getChild("wd:Phone_Number").getValue().trim():"";
											 phoneNumber = countryPhCode + areaCode + phoneNumber;*/
											 if(phoneNumberArr.equals(""))
											 {
												 phoneNumberArr = phoneNumber;
											 }
											 else
											 {
												 if(!phoneNumber.isEmpty())
												 {
													 phoneNumberArr = phoneNumberArr + "~" + phoneNumber;
												 }
											 }
											 
											/* phCountryISOCode = phoneElement.getChild("wd:Country_ISO_Code") != null?phoneElement.getChild("wd:Country_ISO_Code").getValue().trim():""; 
											 if(phCountryISOCodeArr.equals(""))
											 {
												 phCountryISOCodeArr = phCountryISOCode;
											 }
											 else
											 {
												 if(!phCountryISOCode.equals(""))
												 {
													 phCountryISOCodeArr = phCountryISOCodeArr + "~" + phCountryISOCode;
												 }
											 }*/
											 
											 ReportElement phDeviceTypeData = phoneElement.getChild("wd:Phone_Device_Type_Reference");
											 if(phDeviceTypeData != null)
											 {
												 List<ReportElement> phDeviceData = phDeviceTypeData.getChildren("wd:ID");								 
												 for(ReportElement phDeviceElement:phDeviceData)
												 {
													 phDeviceMap = phDeviceElement.getAllAttributes();
													 if(phDeviceMap.get("wd:type").equals("Phone_Device_Type_ID"))
													 {
														 phoneDeviceType = phDeviceElement.getValue().trim();
														 if(phoneDeviceTypeArr.equals(""))
														 {
															 phoneDeviceTypeArr = phoneDeviceType;
														 }
														 else
														 {
															 phoneDeviceTypeArr = phoneDeviceTypeArr + "~" + phoneDeviceType;
														 }
													 }
												 }
											 }											 

											 
											 /*ReportElement phUsageData = phoneElement.getChild("wd:Usage_Data");
											 if(phUsageData != null)
											 {
												 ReportElement phTypeData = phUsageData.getChild("wd:Type_Data");
												 if(phTypeData != null)
												 {
													 primaryPhoneMap = phTypeData.getAllAttributes();
													 if(primaryPhoneMap.get("wd:Primary").equals("1"))
													 {
														 primaryPhone = "PRIMARY";
													 }
													 else
													 {
														 primaryPhone = "";
													 }
													 if(primaryPhoneArr.equals(""))
													 {
														 primaryPhoneArr = primaryPhone;
													 }
													 else
													 {
														 if(!primaryPhone.equals(""))
														 {
															 primaryPhoneArr = primaryPhoneArr + "~" + primaryPhone;
														 }
													 }
													 ReportElement phTypeRef = phTypeData.getChild("wd:Type_Reference");
													 if(phTypeRef !=null)
													 {
														 List<ReportElement> phUsageList = phTypeRef.getChildren("wd:ID");					 
														 for(ReportElement wdElement:phUsageList)
														 {
															 phUsageMap = wdElement.getAllAttributes();
															 if(phUsageMap.get("wd:type").equals("Communication_Usage_Type_ID"))
															 {
																 usageTypePhone = wdElement.getValue().trim();
															 }
														 }
													 }
													 else
													 {
														 usageTypePhone = ""; 
													 }
												 }
											 }
											 else
											 {
												 usageTypePhone = "";
											 }
											 
											 if(usageTypePhoneArr.equals(""))
											 {
												 usageTypePhoneArr = usageTypePhone;
											 }
											 else
											 {
												 usageTypePhoneArr = usageTypePhoneArr + "~" + usageTypePhone;
											 }*/
										}		
					        	 }
								 else
								 {
										//countryPhCode = "";
										//areaCode = "";
										phoneNumberArr = "";
										//phCountryISOCodeArr = "";
										phoneDeviceTypeArr = "";
										//usageTypePhoneArr = "";
										//primaryPhoneArr = "";	
								 }
									
								 List<ReportElement> addressList = reportElement.getChild("wd:Worker_Data")
								 			.getChild("wd:Personal_Data")
								 			.getChild("wd:Contact_Data")
						 					.getChildren("wd:Address_Data");
								 
								 if(addressList != null && addressList.size() > 0)
								 {
									 formattedAddressArr = "";
									 /*addrLine_1Arr = "";
									 addrLine_2Arr = "";
									 addrLine_3Arr = "";
									 addrLine_4Arr = "";
									 addrLine_5Arr = "";
									 addrLine_6Arr = "";
									 addrLine_7Arr = "";
									 addrLine_8Arr = "";
									 addrLine_9Arr = "";*/
								     addrCityArr = "";
								     addrRegionArr = "";
								     postalCodeArr = "";
									 //addrUsageTypeArr = "";
									 subCity1Arr = "";
									 subCity2Arr = "";
									 subRegion1Arr = "";
									 subRegion2Arr = "";
									 
									 for(ReportElement addressElement:addressList)
									 {
										 addressMap = addressElement.getAllAttributes();
										 formattedAddress = addressMap.get("wd:Formatted_Address");
										 if(formattedAddress.contains(","))
										 {
											 formattedAddress = formattedAddress.replaceAll(",", "|");
										 }
										 if(formattedAddressArr.equals(""))
										 {
											 formattedAddressArr = formattedAddress;
										 }
										 else
										 {
											 if(!formattedAddress.isEmpty())
											 {
												 formattedAddressArr = formattedAddressArr + "~" + formattedAddress;
											 }
										 }	
										 List<ReportElement> addrLineData = addressElement.getChildren("wd:Address_Line_Data");
										 if(addrLineData != null)
										 {
											 /*for(ReportElement addrLineElement:addrLineData)
											 {
												 addrLineMap = addrLineElement.getAllAttributes();
												 if(addrLineMap.get("wd:Type").equals("ADDRESS_LINE_1"))
												 {
													addrLine_1 =  addrLineElement.getValue().trim();
													if(addrLine_1.contains(","))
													{
														addrLine_1 = addrLine_1.replaceAll(",", "|");
													}
													if(addrLine_1Arr.equals(""))
													{
														addrLine_1Arr = addrLine_1;
													}
													else
													{
														addrLine_1Arr = addrLine_1Arr + "~" + addrLine_1;
													}
												 }
												 else if(addrLineMap.get("wd:Type").equals("ADDRESS_LINE_2"))
												 {
													addrLine_2 =  addrLineElement.getValue().trim();
													if(addrLine_2.contains(","))
													{
														addrLine_2 = addrLine_2.replaceAll(",", "|");
													}
													if(addrLine_2Arr.equals(""))
													{
														addrLine_2Arr = addrLine_2;
													}
													else
													{
														addrLine_2Arr = addrLine_2Arr + "~" + addrLine_2;
													}
												 }
												 else if(addrLineMap.get("wd:Type").equals("ADDRESS_LINE_3"))
												 {
													addrLine_3 =  addrLineElement.getValue().trim();
													if(addrLine_3.contains(","))
													{
														addrLine_3 = addrLine_3.replaceAll(",", "|");
													}
													if(addrLine_3Arr.equals(""))
													{
														addrLine_3Arr = addrLine_3;
													}
													else
													{
														addrLine_3Arr = addrLine_3Arr + "~" + addrLine_3;
													}
												 }
												 else if(addrLineMap.get("wd:Type").equals("ADDRESS_LINE_4"))
												 {
													addrLine_4 =  addrLineElement.getValue().trim();
													if(addrLine_4.contains(","))
													{
														addrLine_4 = addrLine_4.replaceAll(",", "|");
													}
													if(addrLine_4Arr.equals(""))
													{
														addrLine_4Arr = addrLine_4;
													}
													else
													{
														addrLine_4Arr = addrLine_4Arr + "~" + addrLine_4;
													}
												 }
												 else if(addrLineMap.get("wd:Type").equals("ADDRESS_LINE_5"))
												 {
													addrLine_5 =  addrLineElement.getValue().trim();
													if(addrLine_5.contains(","))
													{
														addrLine_5 = addrLine_5.replaceAll(",", "|");
													}
													if(addrLine_5Arr.equals(""))
													{
														addrLine_5Arr = addrLine_5;
													}
													else
													{
														addrLine_5Arr = addrLine_5Arr + "~" + addrLine_5;
													}
												 }
												 else if(addrLineMap.get("wd:Type").equals("ADDRESS_LINE_6"))
												 {
													addrLine_6 =  addrLineElement.getValue().trim();
													if(addrLine_6.contains(","))
													{
														addrLine_6 = addrLine_6.replaceAll(",", "|");
													}
													if(addrLine_6Arr.equals(""))
													{
														addrLine_6Arr = addrLine_6;
													}
													else
													{
														addrLine_6Arr = addrLine_6Arr + "~" + addrLine_6;
													}
												 }
												 else if(addrLineMap.get("wd:Type").equals("ADDRESS_LINE_7"))
												 {
													addrLine_7 =  addrLineElement.getValue().trim();
													if(addrLine_7.contains(","))
													{
														addrLine_7 = addrLine_7.replaceAll(",", "|");
													}
													if(addrLine_7Arr.equals(""))
													{
														addrLine_7Arr = addrLine_7;
													}
													else
													{
														addrLine_7Arr = addrLine_7Arr + "~" + addrLine_7;
													}
												 }
												 else if(addrLineMap.get("wd:Type").equals("ADDRESS_LINE_8"))
												 {
													addrLine_8 =  addrLineElement.getValue().trim();
													if(addrLine_8.contains(","))
													{
														addrLine_8 = addrLine_8.replaceAll(",", "|");
													}
													if(addrLine_8Arr.equals(""))
													{
														addrLine_8Arr = addrLine_8;
													}
													else
													{
														addrLine_8Arr = addrLine_8Arr + "~" + addrLine_8;
													}
												 }
												 else if(addrLineMap.get("wd:Type").equals("ADDRESS_LINE_9"))
												 {
													addrLine_9 =  addrLineElement.getValue().trim();
													if(addrLine_9.contains(","))
													{
														addrLine_9 = addrLine_9.replaceAll(",", "|");
													}
													if(addrLine_9Arr.equals(""))
													{
														addrLine_9Arr = addrLine_9;
													}
													else
													{
														addrLine_9Arr = addrLine_9Arr + "~" + addrLine_9;
													}
												 }
											 }*/
										 }
										 
										 addrCity = addressElement.getChild("wd:Municipality") != null?addressElement.getChild("wd:Municipality").getValue().trim():"";
										 if(addrCity.contains(","))
										 {
											 addrCity = addrCity.replaceAll(",", "|");
										 }
										 if(addrCityArr.equals(""))
										 {
											 addrCityArr = addrCity;
										 }
										 else
										 {
											 if(!addrCity.isEmpty())
											 {
												 addrCityArr = addrCityArr + "~" + addrCity;
											 }
										 }
										 List<ReportElement> subCityData = addressElement.getChildren("wd:Submunicipality_Data");
										 if(subCityData != null)
										 {
											 for(ReportElement subCityElement:subCityData)
											 {
												 subCityMap = subCityElement.getAllAttributes();
												 if(subCityMap.get("wd:Type").equals("CITY_SUBDIVISION_1"))
												 {
													 subCity1 =  subCityElement.getValue().trim();
													 if(subCity1Arr.equals(""))
													 {
														 subCity1Arr = subCity1;
													 }
													 else
													 {
														 subCity1Arr = subCity1Arr + "~" + subCity1;
													 }
												 }
												 else if(subCityMap.get("wd:Type").equals("CITY_SUBDIVISION_2"))
												 {
													 subCity2 =  subCityElement.getValue().trim();
													 if(subCity2Arr.equals(""))
													 {
														 subCity2Arr = subCity2;
													 }
													 else
													 {
														 subCity2Arr = subCity2Arr + "~" + subCity2;
													 }
												 }
											 }
										 }
										 addrRegion = addressElement.getChild("wd:Country_Region_Descriptor") != null?addressElement.getChild("wd:Country_Region_Descriptor").getValue().trim():"";
										 if(addrRegion.contains(","))
										 {
											 addrRegion = addrRegion.replaceAll(",", "|");
										 }
										 if(addrRegionArr.equals(""))
										 {
											 addrRegionArr = addrRegion;
										 }
										 else
										 {
											 if(!addrRegion.isEmpty())
											 {
												 addrRegionArr = addrRegionArr + "~" + addrRegion;
											 }
										 }	
										 List<ReportElement> subRegionData = addressElement.getChildren("wd:Subregion_Data");
										 if(subRegionData != null)
										 {
											 for(ReportElement subRegionElement:subRegionData)
											 {
												 subRegionMap = subRegionElement.getAllAttributes();
												 if(subRegionMap.get("wd:Type").equals("REGION_SUBDIVISION_1"))
												 {
													subRegion1 =  subRegionElement.getValue().trim();
													if(subRegion1Arr.equals(""))
													{
														subRegion1Arr = subRegion1;
													}
													else
													{
														subRegion1Arr = subRegion1Arr + "~" + subRegion1;
													}
												 }
												 else if(subRegionMap.get("wd:Type").equals("REGION_SUBDIVISION_2"))
												 {
													 subRegion2 =  subRegionElement.getValue().trim();
													 if(subRegion2Arr.equals(""))
													 {
														subRegion2Arr = subRegion2;
													 }
													 else
													 {
														subRegion2Arr = subRegion2Arr + "~" + subRegion2;
													 }
												 }
											 }
										 }
										 postalCode = addressElement.getChild("wd:Postal_Code") != null?addressElement.getChild("wd:Postal_Code").getValue().trim():"";
										 if(postalCodeArr.equals(""))
										 {
											 postalCodeArr = postalCode;
										 }
										 else
										 {
											 if(!postalCode.isEmpty())
											 {
												 postalCodeArr = postalCodeArr + "~" + postalCode;
											 }
										 }
										 
										 /*ReportElement addrUsageData = addressElement.getChild("wd:Usage_Data");
										 if(addrUsageData != null)
										 {
											 ReportElement addrTypeData = addrUsageData.getChild("wd:Type_Data");
											 if(addrTypeData != null)
											 {
												 ReportElement addrTypeRef = addrTypeData.getChild("wd:Type_Reference");
												 if(addrTypeRef !=null)
												 {
													 List<ReportElement> usageData = addrTypeRef.getChildren("wd:ID");					 
													 for(ReportElement wdElement:usageData)
													 {
														 usageMap = wdElement.getAllAttributes();
														 if(usageMap.get("wd:type").equals("Communication_Usage_Type_ID"))
														 {
															 addrUsageType = wdElement.getValue().trim();
														 }
													 }
												 }
												 else
												 {
													 addrUsageType = ""; 
												 }
												 if(addrUsageTypeArr.equals(""))
												 {
													 addrUsageTypeArr = addrUsageType;
												 }
												 else
												 {
													 addrUsageTypeArr = addrUsageTypeArr + "~" + addrUsageType;
												 }
											 }
										 }*/
									 }
								 }
								 else
								 {
									 formattedAddressArr = "";
									 /*addrLine_1Arr = "";
									 addrLine_2Arr = "";
									 addrLine_3Arr = "";
									 addrLine_4Arr = "";
									 addrLine_5Arr = "";
									 addrLine_6Arr = "";
									 addrLine_7Arr = "";
									 addrLine_8Arr = "";
									 addrLine_9Arr = "";*/
								     addrCityArr = "";
								     addrRegionArr = "";
								     postalCodeArr = "";
									 //addrUsageTypeArr = "";
									 subCity1Arr = "";
									 subCity2Arr = "";
									 subRegion1Arr = "";
									 subRegion2Arr = "";
								 }
								 
								 ReportElement identificationData = reportElement.getChild("wd:Worker_Data")
								 			.getChild("wd:Personal_Data")
								 			.getChild("wd:Identification_Data");
								 
								 if(identificationData != null)
								 {												 											 
									 List<ReportElement> customIDList = identificationData.getChildren("wd:Custom_ID");
									 if(customIDList != null && customIDList.size() >0)
									 {
										 String expirationDate = "";
										 customIdNumber = "" ;
										 for(ReportElement customElement : customIDList)
										 {
											 ReportElement customIdData = customElement.getChild("wd:Custom_ID_Data");
											 if(customIdData != null)
											 {
												 expirationDate = customIdData.getChild("wd:Expiration_Date") != null?customIdData.getChild("wd:Expiration_Date").getValue().trim():"";
												 ReportElement customTypeRef = customIdData.getChild("wd:ID_Type_Reference");
												 if(customTypeRef != null)
												 {
													 List<ReportElement> customIdTypeData = customTypeRef.getChildren("wd:ID");								 
													 for(ReportElement idTypeElement:customIdTypeData)
													 {
														 customTypeMap = idTypeElement.getAllAttributes();
														 if(customTypeMap.get("wd:type").equals("Custom_ID_Type_ID"))
														 {
															 if(idTypeElement.getValue().trim().equalsIgnoreCase("Global_CNUM") && expirationDate.isEmpty())
															 {
																 customIdNumber = customIdData.getChild("wd:ID") != null?customIdData.getChild("wd:ID").getValue().trim():""; 
															 }
														 }
													 }
												 }												 												 
											 }
										 }
										 if(customIdNumber.isEmpty())
										 {
											 customIdNumber = "" ;
										 }
									 }
									 else
									 {
										 customIdNumber = "" ;
									 }
								 }
								 else
								 {
									 customIdNumber = "" ;											 
								 }										 										 									 
						}						        						        
			        }
				     headingFromSourceTenant = "Home_CNUM,Employee_ID,"
			        			+ "Phone_Number,Phone_Device_Type,Formatted_Address,"
			        			+ "Arddress_City,Sub_City1,Sub_City2,"
			        			+ "Address_Region,Sub_Region1,Sub_Region2,Postal_Code,Email";
				     
		        	if(!customIdNumber.isEmpty())
					{
			        	headerStr = customIdNumber + "," + employeeId  +
						 		 "," + phoneNumberArr + "," + phoneDeviceTypeArr + "," + formattedAddressArr +
						 		 "," + addrCityArr + "," + subCity1Arr + "," + subCity2Arr + "," + addrRegionArr + "," + subRegion1Arr + "," + subRegion2Arr + "," + postalCodeArr + "," + emailArr; 
			        	
			        	sourceTenantRowMap.put(customIdNumber, headerStr);							        	
			        	sourceTenantColumnList.add(customIdNumber);
			        	
			        	if(finalStr.equals(""))
						{
							 finalStr =  headingFromSourceTenant + "\n" + headerStr;
						}
						else
						{
							 finalStr = finalStr + "\n" + headerStr;
						}
					 }
		          }						 							 
			   }
			
				 System.out.println(finalStr);
				 sourceContent = finalStr.getBytes();						 
				 sourceCount = sourceTenantColumnList.size();
		    }
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
	}



	private void createTemplateFromTargetTenantAddress(Tenant tenant, InputStream is, SOAPConnection soapConnection,
			String loadCycle, String ruleName, String client, Long userId) {

			wdCount = 0;
			headingFromTargetTenant = "";
			targetTenantRowMap.clear();
			targetTenantColumnList.clear();
			String xmlReqFile = null;
			try 
			{			 
				 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
				 if(getRequest != null)
				 {
					 byte[] requestFileContent = getRequest.getRequestXMLContent();
					 File requestfile = null;
					 try 
					 {
						 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
						 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
					 } 
					 catch (IOException e1) 
					 {
					     e1.printStackTrace();
					 }
					 xmlReqFile = requestfile.getAbsolutePath();
					 String outputfile = addHireIdList(xmlReqFile, newEmpList, ruleName, 0, newEmpList.size(), "Employee_ID");
					 is = new FileInputStream(outputfile);
				     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
				     SOAPPart soapPart = soapMessage.getSOAPPart();
				     SOAPEnvelope envelope = soapPart.getEnvelope();
					 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
					 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
					 {
						  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
						  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
					 }
					 soapMessage.saveChanges();
				     ByteArrayOutputStream out = new ByteArrayOutputStream();
				     soapMessage.writeTo(out);
				     String strMsg = new String(out.toByteArray());	
				     
				     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
				     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
					 soapConnection = soapConnectionFactory.createConnection();
					 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
					 out = new ByteArrayOutputStream();
					 soapResponse.writeTo(out);
					 strMsg = new String(out.toByteArray(), "utf-8");
			
					 ReportElement soapResp = XmlParserManager.parseXml(strMsg);
					 
					 ReportElement pageData = soapResp.getChild("env:Body")
								.getChild("wd:Get_Workers_Response")
								.getChild("wd:Response_Results");
					 
					 String totalNoOfPages = pageData.getChild("wd:Total_Pages").getValue().trim();
					 String totalResults = pageData.getChild("wd:Total_Results").getValue().trim();
					 int totalResult = Integer.parseInt(totalResults);
					 System.out.println("totalNoOfPages-"+totalNoOfPages);
					 System.out.println("totalResult-"+totalResult);				 
					 
					 String employeeId = "";
					 //String countryPhCode = "";
					 //String countryPhCodeArr = "";
					 //String areaCode = "";
					 //String areaCodeArr = "";
					 String phoneNumber = "";
					 String phoneNumberArr = "";
					 //String phCountryISOCode = "";
					 //String phCountryISOCodeArr = "";
					 String phoneDeviceType = "";
					 String phoneDeviceTypeArr = "";
					 //String usageTypePhone = "";
					 //String usageTypePhoneArr = "";
					 //String primaryPhone = "";
					 //String primaryPhoneArr = "";
					 String formattedAddress = "";
					 String formattedAddressArr = "";
					 /*String addrLine_1 = "";
					 String addrLine_2 = "";
					 String addrLine_3 = "";
					 String addrLine_4 = "";
					 String addrLine_5 = "";
					 String addrLine_6 = "";
					 String addrLine_7 = "";
					 String addrLine_8 = "";
					 String addrLine_9 = "";
					 String addrLine_1Arr = "";
					 String addrLine_2Arr = "";
					 String addrLine_3Arr = "";
					 String addrLine_4Arr = "";
					 String addrLine_5Arr = "";
					 String addrLine_6Arr = "";
					 String addrLine_7Arr = "";
					 String addrLine_8Arr = "";
					 String addrLine_9Arr = "";*/
					 String addrCity = "";
					 String subCity1 = "";
					 String subCity2 = "";
					 String subCity1Arr = "";
					 String subCity2Arr = "";
					 String addrRegion = "";
					 String subRegion1 = "";
					 String subRegion2 = "";
					 String subRegion1Arr = "";
					 String subRegion2Arr = "";
					 //String addrUsageType = "";
					 String postalCode = "";
					 String addrCityArr = "";
					 String addrRegionArr = "";
					 //String addrUsageTypeArr = "";
					 String postalCodeArr = "";
					 String email = "";
					 String emailArr = "";
					 String employeeHireDate = "";
					 String customIdNumber = "";						 
					 String finalStr = "";
					 String headerStr = "";
					 
					 Map<String,String> usageMap = null;
					 //Map<String,String> phUsageMap = null;
					 Map<String,String> phoneMap = null;
					 Map<String,String> phDeviceMap = null;
					 //Map<String,String> primaryPhoneMap = null;					 
					 Map<String,String> customTypeMap = null;
					 Map<String,String> addressMap = null;
					 //Map<String,String> addrLineMap = null;
					 Map<String,String> subCityMap = null;
					 Map<String,String> subRegionMap = null;
					 
					 int startIndex = 0;
					 int endIndex = 0;
					 
					 for (int j = 1; j <=Integer.parseInt(totalNoOfPages); j++) //
					 {
						 if(j == 1)
						 {
							startIndex = 0;
							if(999 > totalResult)
							{
								endIndex = totalResult;
							}
							else
							{
								endIndex = j*999;
							}
						 }
						 else
						 {
							startIndex = endIndex;
							if(j*999 > totalResult)
							{
								endIndex = totalResult;
							}
							else
							{
								endIndex = (j*999);
							}
						 }
						 outputfile = addHireIdList(xmlReqFile, newEmpList, ruleName, startIndex, endIndex, "Employee_ID");
						 is = new FileInputStream(outputfile);
					     soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     soapPart = soapMessage.getSOAPPart();
					     envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
								envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
								createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
				         out = new ByteArrayOutputStream();
				         soapMessage.writeTo(out);
				         strMsg = new String(out.toByteArray());
				        
				         soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
				         soapResponse = soapConnection.call(soapMessage, sourceUrl);
				         out = new ByteArrayOutputStream();
				         soapResponse.writeTo(out);
				         strMsg = new String(out.toByteArray(), "utf-8");
				        
				         soapResp = XmlParserManager.parseXml(strMsg);
				        
				        ReportElement responseData = soapResp.getChild("env:Body")
								.getChild("wd:Get_Workers_Response")
								.getChild("wd:Response_Data");
				        
				        List<ReportElement> applicantData = responseData.getChildren("wd:Worker");
				        for(ReportElement reportElement : applicantData)
						{
				        	ReportElement hireStatusData = reportElement.getChild("wd:Worker_Data")
						 			.getChild("wd:Employment_Data")
						 			.getChild("wd:Worker_Status_Data");
				        	
				        	employeeHireDate = hireStatusData.getChild("wd:Hire_Date") != null?hireStatusData.getChild("wd:Hire_Date").getValue().trim():"";					        	
				        	if(!employeeHireDate.equalsIgnoreCase(""))
				        	{
				        		Date empHireDate = convertWorkdayStringToDate(employeeHireDate);
				        		//if((empHireDate.equals(hireFromDate) || empHireDate.after(hireFromDate)) && (empHireDate.equals(hireToDate) || empHireDate.before(hireToDate)))
				        		{
						        	System.out.println("empHireDate--"+ empHireDate);
					        		ReportElement element1 = reportElement.getChild("wd:Worker_Data");
					        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
					        		System.out.println("employeeId--"+ employeeId);	
					        		
					        		List<ReportElement> emailList = reportElement.getChild("wd:Worker_Data")
								 			.getChild("wd:Personal_Data")
								 			.getChild("wd:Contact_Data")
						 					.getChildren("wd:Email_Address_Data");
								 
									 if(emailList != null && emailList.size() >0)
									 {
										 emailArr = "";										 
										 for(ReportElement emailElement:emailList)
										 {
											 ReportElement usageData = emailElement.getChild("wd:Usage_Data");
											 if(usageData != null)
											 {
												 ReportElement typeDaya = usageData.getChild("wd:Type_Data");
												 if(typeDaya != null)
												 {
													 ReportElement typeRef = typeDaya.getChild("wd:Type_Reference");
													 if(typeRef !=null)
													 {
														 List<ReportElement> typeRefData = typeRef.getChildren("wd:ID");					 
														 for(ReportElement wdElement:typeRefData)
														 {
															 usageMap = wdElement.getAllAttributes();
															 if(usageMap.get("wd:type").equals("Communication_Usage_Type_ID"))
															 {
																 if(wdElement.getValue().trim().equalsIgnoreCase("HOME"))
																 {
																	 email = emailElement.getChild("wd:Email_Address") != null?emailElement.getChild("wd:Email_Address").getValue().trim():"";
																	 if(emailArr.equals(""))
																	 {
																		 emailArr = email;
																	 }
																	 else
																	 {
																		 emailArr = emailArr + "~" + email;
																	 }
																 }
																 														
															 }
														 }
													 }
												 }
											 }
										 }
									 }
									 else
									 {
										 emailArr = "";
									 }
									 
									 List<ReportElement> phoneList = reportElement.getChild("wd:Worker_Data")
									 			.getChild("wd:Personal_Data")
									 			.getChild("wd:Contact_Data")
							 					.getChildren("wd:Phone_Data");						
									 
										if(phoneList != null && phoneList.size() >0)
										{
											//countryPhCode = "";
											//areaCode = "";
											phoneNumberArr = "";
											//phCountryISOCodeArr = "";
											phoneDeviceTypeArr = "";
											//usageTypePhoneArr = "";
											//primaryPhoneArr = "";
											for(ReportElement phoneElement : phoneList)
											{
												 phoneMap = phoneElement.getAllAttributes();
												 phoneNumber = phoneMap.get("wd:Formatted_Phone");
												 /*countryPhCode = phoneElement.getChild("wd:International_Phone_Code") != null?phoneElement.getChild("wd:International_Phone_Code").getValue().trim():"";
												 if(countryPhCodeArr.equals(""))
												 {
													 countryPhCodeArr = countryPhCode;
												 }
												 else
												 {
													 if(!countryPhCode.equals(""))
													 {
														 countryPhCodeArr = countryPhCodeArr + "~" + countryPhCode;
													 }
												 }
												 areaCode = phoneElement.getChild("wd:Area_Code") != null?phoneElement.getChild("wd:Area_Code").getValue().trim():"";
												 if(areaCodeArr.equals(""))
												 {
													 areaCodeArr = areaCode;
												 }
												 else
												 {
													 if(!areaCode.equals(""))
													 {
														 areaCodeArr = areaCodeArr + "~" + areaCode;
													 }
												 }
												 phoneNumber = phoneElement.getChild("wd:Phone_Number") != null?phoneElement.getChild("wd:Phone_Number").getValue().trim():"";
												 phoneNumber = countryPhCode + areaCode + phoneNumber;*/
												 if(phoneNumberArr.equals(""))
												 {
													 phoneNumberArr = phoneNumber;
												 }
												 else
												 {
													 if(!phoneNumber.isEmpty())
													 {
														 phoneNumberArr = phoneNumberArr + "~" + phoneNumber;
													 }
												 }
												 
												 /*phCountryISOCode = phoneElement.getChild("wd:Country_ISO_Code") != null?phoneElement.getChild("wd:Country_ISO_Code").getValue().trim():""; 
												 if(phCountryISOCodeArr.equals(""))
												 {
													 phCountryISOCodeArr = phCountryISOCode;
												 }
												 else
												 {
													 if(!phCountryISOCode.equals(""))
													 {
														 phCountryISOCodeArr = phCountryISOCodeArr + "~" + phCountryISOCode;
													 }
												 }*/
												 
												 ReportElement phDeviceTypeData = phoneElement.getChild("wd:Phone_Device_Type_Reference");
												 if(phDeviceTypeData != null)
												 {
													 List<ReportElement> phDeviceData = phDeviceTypeData.getChildren("wd:ID");								 
													 for(ReportElement phDeviceElement:phDeviceData)
													 {
														 phDeviceMap = phDeviceElement.getAllAttributes();
														 if(phDeviceMap.get("wd:type").equals("Phone_Device_Type_ID"))
														 {
															 phoneDeviceType = phDeviceElement.getValue().trim();
															 if(phoneDeviceTypeArr.equals(""))
															 {
																 phoneDeviceTypeArr = phoneDeviceType;
															 }
															 else
															 {
																 phoneDeviceTypeArr = phoneDeviceTypeArr + "~" + phoneDeviceType;
															 }
														 }
													 }
												 }												 												 
												 
												 /*ReportElement phUsageData = phoneElement.getChild("wd:Usage_Data");
												 if(phUsageData != null)
												 {
													 ReportElement phTypeData = phUsageData.getChild("wd:Type_Data");
													 if(phTypeData != null)
													 {
														 primaryPhoneMap = phTypeData.getAllAttributes();
														 if(primaryPhoneMap.get("wd:Primary").equals("1"))
														 {
															 primaryPhone = "PRIMARY";
														 }
														 else
														 {
															 primaryPhone = "";
														 }
														 if(primaryPhoneArr.equals(""))
														 {
															 primaryPhoneArr = primaryPhone;
														 }
														 else
														 {
															 if(!primaryPhone.equals(""))
															 {
																 primaryPhoneArr = primaryPhoneArr + "~" + primaryPhone;
															 }
														 }
														 ReportElement phTypeRef = phTypeData.getChild("wd:Type_Reference");
														 if(phTypeRef !=null)
														 {
															 List<ReportElement> phUsageList = phTypeRef.getChildren("wd:ID");					 
															 for(ReportElement wdElement:phUsageList)
															 {
																 phUsageMap = wdElement.getAllAttributes();
																 if(phUsageMap.get("wd:type").equals("Communication_Usage_Type_ID"))
																 {
																	 usageTypePhone = wdElement.getValue().trim();
																 }
															 }
														 }
														 else
														 {
															 usageTypePhone = ""; 
														 }
													 }
												 }
												 else
												 {
													 usageTypePhone = "";
												 }
												 
												 if(usageTypePhoneArr.equals(""))
												 {
													 usageTypePhoneArr = usageTypePhone;
												 }
												 else
												 {
													 usageTypePhoneArr = usageTypePhoneArr + "~" + usageTypePhone;
												 }*/
											}		
										 }
										 else
										 {
												//countryPhCode = "";
												//areaCode = "";
												phoneNumberArr = "";
												//phCountryISOCodeArr = "";
												phoneDeviceTypeArr = "";
												//usageTypePhoneArr = "";
												//primaryPhoneArr = "";
										 }
										
									 List<ReportElement> addressList = reportElement.getChild("wd:Worker_Data")
									 			.getChild("wd:Personal_Data")
									 			.getChild("wd:Contact_Data")
							 					.getChildren("wd:Address_Data");
									 
									 if(addressList != null && addressList.size() > 0)
									 {
										 formattedAddressArr = "";
										 /*addrLine_1Arr = "";
										 addrLine_2Arr = "";
										 addrLine_3Arr = "";
										 addrLine_4Arr = "";
										 addrLine_5Arr = "";
										 addrLine_6Arr = "";
										 addrLine_7Arr = "";
										 addrLine_8Arr = "";
										 addrLine_9Arr = "";*/
									     addrCityArr = "";
									     addrRegionArr = "";
									     postalCodeArr = "";
										 //addrUsageTypeArr = "";
										 subCity1Arr = "";
										 subCity2Arr = "";
										 subRegion1Arr = "";
										 subRegion2Arr = "";
										 
										 for(ReportElement addressElement:addressList)
										 {
											 addressMap = addressElement.getAllAttributes();
											 formattedAddress = addressMap.get("wd:Formatted_Address");
											 if(formattedAddress.contains(","))
											 {
												 formattedAddress = formattedAddress.replaceAll(",", "|");
											 }
											 if(formattedAddressArr.equals(""))
											 {
												 formattedAddressArr = formattedAddress;
											 }
											 else
											 {
												 if(!formattedAddress.isEmpty())
												 {
													 formattedAddressArr = formattedAddressArr + "~" + formattedAddress;
												 }
											 }
											 List<ReportElement> addrLineData = addressElement.getChildren("wd:Address_Line_Data");
											 if(addrLineData != null)
											 {
												 /*for(ReportElement addrLineElement:addrLineData)
												 {
													 addrLineMap = addrLineElement.getAllAttributes();
													 if(addrLineMap.get("wd:Type").equals("ADDRESS_LINE_1"))
													 {
														addrLine_1 =  addrLineElement.getValue().trim();
														if(addrLine_1.contains(","))
														{
															addrLine_1 = addrLine_1.replaceAll(",", "|");
														}
														if(addrLine_1Arr.equals(""))
														{
															addrLine_1Arr = addrLine_1;
														}
														else
														{
															addrLine_1Arr = addrLine_1Arr + "~" + addrLine_1;
														}
													 }
													 else if(addrLineMap.get("wd:Type").equals("ADDRESS_LINE_2"))
													 {
														addrLine_2 =  addrLineElement.getValue().trim();
														if(addrLine_2.contains(","))
														{
															addrLine_2 = addrLine_2.replaceAll(",", "|");
														}
														if(addrLine_2Arr.equals(""))
														{
															addrLine_2Arr = addrLine_2;
														}
														else
														{
															addrLine_2Arr = addrLine_2Arr + "~" + addrLine_2;
														}
													 }
													 else if(addrLineMap.get("wd:Type").equals("ADDRESS_LINE_3"))
													 {
														addrLine_3 =  addrLineElement.getValue().trim();
														if(addrLine_3.contains(","))
														{
															addrLine_3 = addrLine_3.replaceAll(",", "|");
														}
														if(addrLine_3Arr.equals(""))
														{
															addrLine_3Arr = addrLine_3;
														}
														else
														{
															addrLine_3Arr = addrLine_3Arr + "~" + addrLine_3;
														}
													 }
													 else if(addrLineMap.get("wd:Type").equals("ADDRESS_LINE_4"))
													 {
														addrLine_4 =  addrLineElement.getValue().trim();
														if(addrLine_4.contains(","))
														{
															addrLine_4 = addrLine_4.replaceAll(",", "|");
														}
														if(addrLine_4Arr.equals(""))
														{
															addrLine_4Arr = addrLine_4;
														}
														else
														{
															addrLine_4Arr = addrLine_4Arr + "~" + addrLine_4;
														}
													 }
													 else if(addrLineMap.get("wd:Type").equals("ADDRESS_LINE_5"))
													 {
														addrLine_5 =  addrLineElement.getValue().trim();
														if(addrLine_5.contains(","))
														{
															addrLine_5 = addrLine_5.replaceAll(",", "|");
														}
														if(addrLine_5Arr.equals(""))
														{
															addrLine_5Arr = addrLine_5;
														}
														else
														{
															addrLine_5Arr = addrLine_5Arr + "~" + addrLine_5;
														}
													 }
													 else if(addrLineMap.get("wd:Type").equals("ADDRESS_LINE_6"))
													 {
														addrLine_6 =  addrLineElement.getValue().trim();
														if(addrLine_6.contains(","))
														{
															addrLine_6 = addrLine_6.replaceAll(",", "|");
														}
														if(addrLine_6Arr.equals(""))
														{
															addrLine_6Arr = addrLine_6;
														}
														else
														{
															addrLine_6Arr = addrLine_6Arr + "~" + addrLine_6;
														}
													 }
													 else if(addrLineMap.get("wd:Type").equals("ADDRESS_LINE_7"))
													 {
														addrLine_7 =  addrLineElement.getValue().trim();
														if(addrLine_7.contains(","))
														{
															addrLine_7 = addrLine_7.replaceAll(",", "|");
														}
														if(addrLine_7Arr.equals(""))
														{
															addrLine_7Arr = addrLine_7;
														}
														else
														{
															addrLine_7Arr = addrLine_7Arr + "~" + addrLine_7;
														}
													 }
													 else if(addrLineMap.get("wd:Type").equals("ADDRESS_LINE_8"))
													 {
														addrLine_8 =  addrLineElement.getValue().trim();
														if(addrLine_8.contains(","))
														{
															addrLine_8 = addrLine_8.replaceAll(",", "|");
														}
														if(addrLine_8Arr.equals(""))
														{
															addrLine_8Arr = addrLine_8;
														}
														else
														{
															addrLine_8Arr = addrLine_8Arr + "~" + addrLine_8;
														}
													 }
													 else if(addrLineMap.get("wd:Type").equals("ADDRESS_LINE_9"))
													 {
														addrLine_9 =  addrLineElement.getValue().trim();
														if(addrLine_9.contains(","))
														{
															addrLine_9 = addrLine_9.replaceAll(",", "|");
														}
														if(addrLine_9Arr.equals(""))
														{
															addrLine_9Arr = addrLine_9;
														}
														else
														{
															addrLine_9Arr = addrLine_9Arr + "~" + addrLine_9;
														}
													 }
												 }*/
											 }
											 
											 addrCity = addressElement.getChild("wd:Municipality") != null?addressElement.getChild("wd:Municipality").getValue().trim():"";
											 if(addrCity.contains(","))
											 {
												 addrCity = addrCity.replaceAll(",", "|");
											 }
											 if(addrCityArr.equals(""))
											 {
												 addrCityArr = addrCity;
											 }
											 else
											 {
												 if(!addrCity.isEmpty())
												 {
													 addrCityArr = addrCityArr + "~" + addrCity;
												 }
											 }
											 List<ReportElement> subCityData = addressElement.getChildren("wd:Submunicipality_Data");
											 if(subCityData != null)
											 {
												 for(ReportElement subCityElement:subCityData)
												 {
													 subCityMap = subCityElement.getAllAttributes();
													 if(subCityMap.get("wd:Type").equals("CITY_SUBDIVISION_1"))
													 {
														 subCity1 =  subCityElement.getValue().trim();
														 if(subCity1Arr.equals(""))
														 {
															 subCity1Arr = subCity1;
														 }
														 else
														 {
															 subCity1Arr = subCity1Arr + "~" + subCity1;
														 }
													 }
													 else if(subCityMap.get("wd:Type").equals("CITY_SUBDIVISION_2"))
													 {
														 subCity2 =  subCityElement.getValue().trim();
														 if(subCity2Arr.equals(""))
														 {
															 subCity2Arr = subCity2;
														 }
														 else
														 {
															 subCity2Arr = subCity2Arr + "~" + subCity2;
														 }
													 }
												 }
											 }
											 addrRegion = addressElement.getChild("wd:Country_Region_Descriptor") != null?addressElement.getChild("wd:Country_Region_Descriptor").getValue().trim():"";
											 if(addrRegion.contains(","))
											 {
												 addrRegion = addrRegion.replaceAll(",", "|");
											 }
											 if(addrRegionArr.equals(""))
											 {
												 addrRegionArr = addrRegion;
											 }
											 else
											 {
												 if(!addrRegion.isEmpty())
												 {
													 addrRegionArr = addrRegionArr + "~" + addrRegion;
												 }
											 }
											 List<ReportElement> subRegionData = addressElement.getChildren("wd:Subregion_Data");
											 if(subRegionData != null)
											 {
												 for(ReportElement subRegionElement:subRegionData)
												 {
													 subRegionMap = subRegionElement.getAllAttributes();
													 if(subRegionMap.get("wd:Type").equals("REGION_SUBDIVISION_1"))
													 {
														subRegion1 =  subRegionElement.getValue().trim();
														if(subRegion1Arr.equals(""))
														{
															subRegion1Arr = subRegion1;
														}
														else
														{
															subRegion1Arr = subRegion1Arr + "~" + subRegion1;
														}
													 }
													 else if(subRegionMap.get("wd:Type").equals("REGION_SUBDIVISION_2"))
													 {
														 subRegion2 =  subRegionElement.getValue().trim();
														 if(subRegion2Arr.equals(""))
														 {
															subRegion2Arr = subRegion2;
														 }
														 else
														 {
															subRegion2Arr = subRegion2Arr + "~" + subRegion2;
														 }
													 }
												 }
											 }
											 postalCode = addressElement.getChild("wd:Postal_Code") != null?addressElement.getChild("wd:Postal_Code").getValue().trim():"";
											 if(postalCodeArr.equals(""))
											 {
												 postalCodeArr = postalCode;
											 }
											 else
											 {
												 if(!postalCode.isEmpty())
												 {
													 postalCodeArr = postalCodeArr + "~" + postalCode;
												 }
											 }
											 
											 /*ReportElement addrUsageData = addressElement.getChild("wd:Usage_Data");
											 if(addrUsageData != null)
											 {
												 ReportElement addrTypeData = addrUsageData.getChild("wd:Type_Data");
												 if(addrTypeData != null)
												 {
													 ReportElement addrTypeRef = addrTypeData.getChild("wd:Type_Reference");
													 if(addrTypeRef !=null)
													 {
														 List<ReportElement> usageData = addrTypeRef.getChildren("wd:ID");					 
														 for(ReportElement wdElement:usageData)
														 {
															 usageMap = wdElement.getAllAttributes();
															 if(usageMap.get("wd:type").equals("Communication_Usage_Type_ID"))
															 {
																 addrUsageType = wdElement.getValue().trim();
															 }
														 }
													 }
													 else
													 {
														 addrUsageType = ""; 
													 }
													 if(addrUsageTypeArr.equals(""))
													 {
														 addrUsageTypeArr = addrUsageType;
													 }
													 else
													 {
														 addrUsageTypeArr = addrUsageTypeArr + "~" + addrUsageType;
													 }
												 }
											 }*/
										 }
									 }
									 else
									 {
										 formattedAddressArr = "";
										 /*addrLine_1Arr = "";
										 addrLine_2Arr = "";
										 addrLine_3Arr = "";
										 addrLine_4Arr = "";
										 addrLine_5Arr = "";
										 addrLine_6Arr = "";
										 addrLine_7Arr = "";
										 addrLine_8Arr = "";
										 addrLine_9Arr = "";*/
									     addrCityArr = "";
									     addrRegionArr = "";
									     postalCodeArr = "";
										 //addrUsageTypeArr = "";
										 subCity1Arr = "";
										 subCity2Arr = "";
										 subRegion1Arr = "";
										 subRegion2Arr = "";
									 }
									 
									 ReportElement identificationData = reportElement.getChild("wd:Worker_Data")
									 			.getChild("wd:Personal_Data")
									 			.getChild("wd:Identification_Data");
									 
									 if(identificationData != null)
									 {										 
										 List<ReportElement> customIDList = identificationData.getChildren("wd:Custom_ID");
										 if(customIDList != null && customIDList.size() >0)
										 {
											 customIdNumber = "" ;
											 for(ReportElement customElement : customIDList)
											 {
												 ReportElement customIdData = customElement.getChild("wd:Custom_ID_Data");
												 if(customIdData != null)
												 {
													 ReportElement customTypeRef = customIdData.getChild("wd:ID_Type_Reference");
													 if(customTypeRef != null)
													 {
														 List<ReportElement> customIdTypeData = customTypeRef.getChildren("wd:ID");								 
														 for(ReportElement idTypeElement:customIdTypeData)
														 {
															 customTypeMap = idTypeElement.getAllAttributes();
															 if(customTypeMap.get("wd:type").equals("Custom_ID_Type_ID"))
															 {
																 if(idTypeElement.getValue().trim().equalsIgnoreCase("Previous_IBM_CNUM"))
																 {
																	 customIdNumber = customIdData.getChild("wd:ID") != null?customIdData.getChild("wd:ID").getValue().trim():""; 
																 }
															 }
														 }
													 }
												 }
											 }
											 if(customIdNumber.isEmpty())
											 {
												 customIdNumber = "" ;
											 }
										 }
										 else
										 {
											 customIdNumber = "" ;
										 }
									 }
									 else
									 {
										 customIdNumber = "" ;
									 }								 								 								 
							}				        				        
				          }
						     headingFromTargetTenant = "Home_CNUM,Employee_ID,"
					        			+ "Phone_Number,Phone_Device_Type,Formatted_Address,"
					        			+ "Arddress_City,Sub_City1,Sub_City2,"
					        			+ "Address_Region,Sub_Region1,Sub_Region2,Postal_Code,Email";
						     
				        	if(!customIdNumber.isEmpty())
							{
					        	headerStr = customIdNumber + "," + employeeId  +
								 		 "," + phoneNumberArr + "," + phoneDeviceTypeArr + "," + formattedAddressArr +
								 		 "," + addrCityArr + "," + subCity1Arr + "," + subCity2Arr + "," + addrRegionArr + "," + subRegion1Arr + "," + subRegion2Arr + "," + postalCodeArr + "," + emailArr;  
					        	
					        	
				        	 targetTenantRowMap.put(customIdNumber, headerStr);
				        	 targetTenantColumnList.add(customIdNumber);
				        	 
							 if(finalStr.equals(""))
							 {
								 finalStr =  headingFromTargetTenant + "\n" + headerStr;
							 }
							 else
							 {
								 finalStr = finalStr + "\n" + headerStr;
							 }
						 }
					   }						 							 
				     }
					 System.out.println(finalStr);
					 targetContent = finalStr.getBytes();
					 wdCount = targetTenantColumnList.size();
			   }
			}
			catch (FileNotFoundException e)
			{
				e.printStackTrace();
			} 
			catch (IOException e) 
			{
				e.printStackTrace();
			} 
			catch (SOAPException e) 
			{
				e.printStackTrace();
			} 
			catch (Exception e) 
			{
				e.printStackTrace();
			}
}
	
	private void createTemplateFromSourceTenantEmployment(Tenant tenant, InputStream is, SOAPConnection soapConnection, String loadCycle, String ruleName, String client, Long userId) {
		
		sourceCount = 0;
		headingFromSourceTenant = "";
		sourceTenantRowMap.clear();
		sourceTenantColumnList.clear();
		errorList.clear();
		String xmlReqFile = null;
		try 
		{			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 xmlReqFile = requestfile.getAbsolutePath();
				 String outputfile = addHireIdList(xmlReqFile, oldEmpList, ruleName, 0, oldEmpList.size(), "Employee_ID");
				 is = new FileInputStream(outputfile);
			     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
			     SOAPPart soapPart = soapMessage.getSOAPPart();
			     SOAPEnvelope envelope = soapPart.getEnvelope();
				 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
				 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
				 {
					  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
					  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
				 }
				 soapMessage.saveChanges();
			     ByteArrayOutputStream out = new ByteArrayOutputStream();
			     soapMessage.writeTo(out);
			     String strMsg = new String(out.toByteArray());	
			     
			     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
			     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
				 soapConnection = soapConnectionFactory.createConnection();
				 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
				 out = new ByteArrayOutputStream();
				 soapResponse.writeTo(out);
				 strMsg = new String(out.toByteArray(), "utf-8");

				 ReportElement soapResp = XmlParserManager.parseXml(strMsg);
				 
				 ReportElement pageData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Results");
				 
				 String totalNoOfPages = pageData.getChild("wd:Total_Pages").getValue().trim();
				 String totalResults = pageData.getChild("wd:Total_Results").getValue().trim();
				 int totalResult = Integer.parseInt(totalResults);
				 System.out.println("totalNoOfPages-"+totalNoOfPages);
				 System.out.println("totalResult-"+totalResult);						 
				 
				 String employeeId = "";
				 String empTerminationDate = "";
				 String hireDate = "";
				 String hireReason = "";
				 String positionTitle = "";
				 String businessTitle = "";
				 String defaultWeeklyHours = "";
				 String scheduledWeeklyHours = "";
				 String jobCode = "";
				 String jobProfileName = "";
				 String timeType = "";
				 String payTypeName = "";
				 String location = "";
				 String originalHireDate = "";
				 String contServiceDate = "";
				 String expectedRetirementDate = "";
				 String retirementElegibilityDate = "";
				 String endEmploymentDate = "";
				 String seniorityDate = "";
				 String severanceDate = "";
				 String benefitsServiceDate = "";
				 String companyServiceDate = "";
				 String timeOffServiceDate = "";
				 String vestingDate = "";
				 String workforceEnteredDate = "";
				 String daysUnemployed = "";
				 String monthsContPriorEmp = "";				 				 
				 String customIdNumber = "";
				 			 
				 String finalStr = "";
				 String headerStr = "";
				 
				 Map<String,String> hireReasonMap = null;
				 Map<String,String> jobProfMap = null;
				 Map<String,String> posTimeTypeMap = null;
				 Map<String,String> payRateMap = null;
				 Map<String,String> locationMap = null;
				 Map<String,String> customTypeMap = null;
				 
				 int startIndex = 0;
				 int endIndex = 0;
				 
				 for (int j = 1; j <=Integer.parseInt(totalNoOfPages); j++) //
				 {
					 if(j == 1)
					 {
						startIndex = 0;
						if(999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = j*999;
						}
					 }
					 else
					 {
						startIndex = endIndex;
						if(j*999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = (j*999);
						}
					 }
					 outputfile = addHireIdList(xmlReqFile, oldEmpList, ruleName, startIndex, endIndex, "Employee_ID");
					 is = new FileInputStream(outputfile);
				     soapMessage = MessageFactory.newInstance().createMessage(null, is);
				     soapPart = soapMessage.getSOAPPart();
				     envelope = soapPart.getEnvelope();
					 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
					 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
					 {
							envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
					 }
					 soapMessage.saveChanges();
			         out = new ByteArrayOutputStream();
			         soapMessage.writeTo(out);
			         strMsg = new String(out.toByteArray());
			        
			         soapConnectionFactory = SOAPConnectionFactory.newInstance();
					 soapConnection = soapConnectionFactory.createConnection();
			         soapResponse = soapConnection.call(soapMessage, sourceUrl);
			         out = new ByteArrayOutputStream();
			         soapResponse.writeTo(out);
			         strMsg = new String(out.toByteArray(), "utf-8");
			        
			         soapResp = XmlParserManager.parseXml(strMsg);
			        
			        ReportElement responseData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Data");
			        
			        List<ReportElement> applicantData = responseData.getChildren("wd:Worker");
			        for(ReportElement reportElement : applicantData)
					{
			        	ReportElement terminationStatusData = reportElement.getChild("wd:Worker_Data")
					 			.getChild("wd:Employment_Data")
					 			.getChild("wd:Worker_Status_Data");
			        	
			        	empTerminationDate = terminationStatusData.getChild("wd:Termination_Date") != null?terminationStatusData.getChild("wd:Termination_Date").getValue().trim():"";					        	
			        	//if(!empTerminationDate.equalsIgnoreCase(""))
			        	{
			        		//Date termDate = convertWorkdayStringToDate(empTerminationDate);
			        		//if((termDate.equals(termFromDate) || termDate.after(termFromDate)) && (termDate.equals(termToDate) || termDate.before(termToDate)))
			        		{
					        	//System.out.println("empTerminationDate--"+ termDate);
				        		ReportElement element1 = reportElement.getChild("wd:Worker_Data");
				        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
				        		System.out.println("employeeId--"+ employeeId);
								 
								 ReportElement workerStatusData = reportElement.getChild("wd:Worker_Data")
				 							.getChild("wd:Employment_Data")
				 							.getChild("wd:Worker_Status_Data");
								 
								 if(workerStatusData != null)
								 {
									 hireDate = workerStatusData.getChild("wd:Hire_Date") != null?workerStatusData.getChild("wd:Hire_Date").getValue().trim():"";
									 originalHireDate = workerStatusData.getChild("wd:Original_Hire_Date") != null?workerStatusData.getChild("wd:Original_Hire_Date").getValue().trim():""; 
									 contServiceDate = workerStatusData.getChild("wd:Continuous_Service_Date") != null?workerStatusData.getChild("wd:Continuous_Service_Date").getValue().trim():""; 
									 expectedRetirementDate = workerStatusData.getChild("wd:Expected_Retirement_Date") != null?workerStatusData.getChild("wd:Expected_Retirement_Date").getValue().trim():""; 
									 retirementElegibilityDate = workerStatusData.getChild("wd:Retirement_Eligibility_Date") != null?workerStatusData.getChild("wd:Retirement_Eligibility_Date").getValue().trim():"";
									 endEmploymentDate = workerStatusData.getChild("wd:End_Employment_Date") != null?workerStatusData.getChild("wd:End_Employment_Date").getValue().trim():""; 
									 seniorityDate = workerStatusData.getChild("wd:Seniority_Date") != null?workerStatusData.getChild("wd:Seniority_Date").getValue().trim():""; 
									 severanceDate = workerStatusData.getChild("wd:Severance_Date") != null?workerStatusData.getChild("wd:Severance_Date").getValue().trim():""; 
									 benefitsServiceDate = workerStatusData.getChild("wd:Benefits_Service_Date") != null?workerStatusData.getChild("wd:Benefits_Service_Date").getValue().trim():""; 
									 companyServiceDate = workerStatusData.getChild("wd:Company_Service_Date") != null?workerStatusData.getChild("wd:Company_Service_Date").getValue().trim():""; 
									 timeOffServiceDate = workerStatusData.getChild("wd:Time_Off_Service_Date") != null?workerStatusData.getChild("wd:Time_Off_Service_Date").getValue().trim():""; 
									 vestingDate = workerStatusData.getChild("wd:Vesting_Date") != null?workerStatusData.getChild("wd:Vesting_Date").getValue().trim():""; 
									 workforceEnteredDate = workerStatusData.getChild("wd:Date_Entered_Workforce") != null?workerStatusData.getChild("wd:Date_Entered_Workforce").getValue().trim():"";
									 daysUnemployed = workerStatusData.getChild("wd:Days_Unemployed") != null?workerStatusData.getChild("wd:Days_Unemployed").getValue().trim():""; 
									 monthsContPriorEmp = workerStatusData.getChild("wd:Months_Continuous_Prior_Employment") != null?workerStatusData.getChild("wd:Months_Continuous_Prior_Employment").getValue().trim():"";
									 
									 ReportElement hireReasonData = workerStatusData.getChild("wd:Hire_Reason_Reference");
									 if(hireReasonData != null)
									 {
										 List<ReportElement> reasonData = hireReasonData.getChildren("wd:ID");					 
										 for(ReportElement reasonElement:reasonData)
										 {
											 hireReasonMap = reasonElement.getAllAttributes();
											 if(hireReasonMap.get("wd:type").equals("Event_Classification_Subcategory_ID") || hireReasonMap.get("wd:type").equals("General_Event_Subcategory_ID"))
											 {
												 hireReason = reasonElement.getValue().trim();
											 }
										 }
									 }
									 else
									 {
										 hireReason = "";
									 }
								 }
								 else
								 {
									 hireDate = "";
									 hireReason = "";
									 originalHireDate = "";
									 contServiceDate = "";
									 expectedRetirementDate = "";
									 retirementElegibilityDate = "";
									 endEmploymentDate = "";
									 seniorityDate = "";
									 severanceDate = "";
									 benefitsServiceDate = "";
									 companyServiceDate = "";
									 timeOffServiceDate = "";
									 vestingDate = "";
									 workforceEnteredDate = "";
									 daysUnemployed = "";
									 monthsContPriorEmp = "";
								 }								 								 
								 
								 ReportElement workerJobData = reportElement.getChild("wd:Worker_Data")
				 							.getChild("wd:Employment_Data")
				 							.getChild("wd:Worker_Job_Data");
								 
								 if(workerJobData != null)
								 {
									 ReportElement positionData = workerJobData.getChild("wd:Position_Data");
									 if(positionData != null)
									 {
										 positionTitle = positionData.getChild("wd:Position_Title") != null?positionData.getChild("wd:Position_Title").getValue().trim():"";
										 if(positionTitle.contains(","))
										 {
											 positionTitle = positionTitle.replaceAll(",", "|");
										 }
										 businessTitle = positionData.getChild("wd:Business_Title") != null?positionData.getChild("wd:Business_Title").getValue().trim():"";
										 if(businessTitle.contains(","))
										 {
											 businessTitle = businessTitle.replaceAll(",", "|");
										 }
										 defaultWeeklyHours = positionData.getChild("wd:Default_Weekly_Hours") != null?positionData.getChild("wd:Default_Weekly_Hours").getValue().trim():"";
										 scheduledWeeklyHours = positionData.getChild("wd:Scheduled_Weekly_Hours") != null?positionData.getChild("wd:Scheduled_Weekly_Hours").getValue().trim():"";
										 
										 ReportElement jobProfileSummaryData = positionData.getChild("wd:Job_Profile_Summary_Data");
										 if(jobProfileSummaryData != null)
										 {
											 ReportElement jobProfileData = jobProfileSummaryData.getChild("wd:Job_Profile_Reference");
											 if(jobProfileData != null)
											 {
												 List<ReportElement> jobProfileList = jobProfileData.getChildren("wd:ID");					 
												 for(ReportElement jobProfElement:jobProfileList)
												 {
													 jobProfMap = jobProfElement.getAllAttributes();
													 if(jobProfMap.get("wd:type").equals("Job_Profile_ID"))
													 {
														 jobCode = jobProfElement.getValue().trim();
													 }
												 }
											 }
											 else
											 {
												 jobCode = "";
											 }
											 jobProfileName = jobProfileSummaryData.getChild("wd:Job_Profile_Name") != null?jobProfileSummaryData.getChild("wd:Job_Profile_Name").getValue().trim():"";
											 if(jobProfileName.contains(","))
											 {
												 jobProfileName = jobProfileName.replaceAll(",", "|");
											 }
										 }
										 else
										 {
											 jobCode = "";
											 jobProfileName = "";
										 }
										 
										 ReportElement positionTimeTypeData = positionData.getChild("wd:Position_Time_Type_Reference");
										 if(positionTimeTypeData != null)
										 {
											 List<ReportElement> positionTimeTypeList = positionTimeTypeData.getChildren("wd:ID");					 
											 for(ReportElement timeElement:positionTimeTypeList)
											 {
												 posTimeTypeMap = timeElement.getAllAttributes();
												 if(posTimeTypeMap.get("wd:type").equals("Position_Time_Type_ID"))
												 {
													 timeType = timeElement.getValue().trim();
												 }
											 }
										 }
										 else
										 {
											 timeType = "";
										 }
										 
										 ReportElement payRateTypeData = positionData.getChild("wd:Pay_Rate_Type_Reference");
										 if(payRateTypeData != null)
										 {
											 List<ReportElement> payData = payRateTypeData.getChildren("wd:ID");					 
											 for(ReportElement payElement:payData)
											 {
												 payRateMap = payElement.getAllAttributes();
												 if(payRateMap.get("wd:type").equals("Pay_Rate_Type_ID"))
												 {
													 payTypeName = payElement.getValue().trim();
												 }
											 }
										 }
										 else
										 {
											 payTypeName = "";
										 }
										 
										 ReportElement siteData = positionData.getChild("wd:Business_Site_Summary_Data");
										 if(siteData != null)
										 {
											 ReportElement locationRef = siteData.getChild("wd:Location_Reference");
											 if(locationRef != null)
											 {
												 List<ReportElement> locationData = locationRef.getChildren("wd:ID");					 
												 for(ReportElement locationElement:locationData)
												 {
													 locationMap = locationElement.getAllAttributes();
													 if(locationMap.get("wd:type").equals("Location_ID"))
													 {
														 location = locationElement.getValue().trim();
													 }
												 }
											 }
										 }
										 else
										 {
											 location = ""; 
										 }
									 }
									 else
									 {
										 positionTitle = "";
										 businessTitle = "";
										 defaultWeeklyHours = "";
										 scheduledWeeklyHours = "";
										 jobCode = "";
										 jobProfileName = "";
										 timeType = "";
										 payTypeName = "";
										 location = "";
									 }
								 }
								 else
								 {
									 positionTitle = "";
									 businessTitle = "";
									 defaultWeeklyHours = "";
									 scheduledWeeklyHours = "";
									 jobCode = "";
									 jobProfileName = "";
									 timeType = "";
									 payTypeName = "";
									 location = ""; 
								 }								 
								 
								 ReportElement identificationData = reportElement.getChild("wd:Worker_Data")
								 			.getChild("wd:Personal_Data")
								 			.getChild("wd:Identification_Data");
								 
								 if(identificationData != null)
								 {												 											 
									 List<ReportElement> customIDList = identificationData.getChildren("wd:Custom_ID");
									 if(customIDList != null && customIDList.size() >0)
									 {
										 String expirationDate = "";
										 customIdNumber = "" ;
										 for(ReportElement customElement : customIDList)
										 {
											 ReportElement customIdData = customElement.getChild("wd:Custom_ID_Data");
											 if(customIdData != null)
											 {
												 expirationDate = customIdData.getChild("wd:Expiration_Date") != null?customIdData.getChild("wd:Expiration_Date").getValue().trim():"";
												 ReportElement customTypeRef = customIdData.getChild("wd:ID_Type_Reference");
												 if(customTypeRef != null)
												 {
													 List<ReportElement> customIdTypeData = customTypeRef.getChildren("wd:ID");								 
													 for(ReportElement idTypeElement:customIdTypeData)
													 {
														 customTypeMap = idTypeElement.getAllAttributes();
														 if(customTypeMap.get("wd:type").equals("Custom_ID_Type_ID"))
														 {
															 if(idTypeElement.getValue().trim().equalsIgnoreCase("Global_CNUM") && expirationDate.isEmpty())
															 {
																 customIdNumber = customIdData.getChild("wd:ID") != null?customIdData.getChild("wd:ID").getValue().trim():""; 
															 }
														 }
													 }
												 }
											 }
										 }
										 if(customIdNumber.isEmpty())
										 {
											 customIdNumber = "" ;
										 }
									 }
									 else
									 {
										 customIdNumber = "" ;
									 }
								 }
								 else
								 {
									 customIdNumber = "" ;										 
								 }										 										 									 
						}						        						        
			        }
				     headingFromSourceTenant = "Home_CNUM,Employee_ID,Hire_Date,Hire_Reason,Continuous_Service_Date,"
			        			+ "Expected_Retirement_Date,Retirement_Eligibility_Date,End_Employment_Date,Seniority_Date,Severance_Date,Benefits_Service_Date,Company_Service_Date,Time_Off_Service_Date,"
			        			+ "Vesting_Date,Date_Entered_Workforce,Days_Unemployed,Months_Continuous_Prior_Employment,Position_Title,Business_Title,"
			        			+ "Job_Code,Job_Profile_Name,Position_Time_Type,Pay_Rate_Type,Default_Weekly_Hours,Scheduled_Weekly_Hours,Location";
				     
		        	if(!customIdNumber.isEmpty())
					{
			        	headerStr = customIdNumber + "," + employeeId + "," +  hireDate + "," + hireReason +
						 		 "," + contServiceDate + "," + expectedRetirementDate + "," + retirementElegibilityDate + "," + endEmploymentDate + "," + seniorityDate + "," + severanceDate +
						 		 "," + benefitsServiceDate + "," + companyServiceDate + "," + timeOffServiceDate + "," + vestingDate + "," + workforceEnteredDate + "," + daysUnemployed + "," + monthsContPriorEmp +
						 		 "," + positionTitle + "," + businessTitle + "," + jobCode + "," + jobProfileName + "," + timeType + "," + payTypeName + "," + defaultWeeklyHours + "," + scheduledWeeklyHours +
						 		 "," + location ;
			        	
			        	sourceTenantRowMap.put(customIdNumber, headerStr);							        	
			        	sourceTenantColumnList.add(customIdNumber);
			        	
			        	if(finalStr.equals(""))
						{
							 finalStr =  headingFromSourceTenant + "\n" + headerStr;
						}
						else
						{
							 finalStr = finalStr + "\n" + headerStr;
						}
					 }
		          }						 							 
			   }
			
				 System.out.println(finalStr);
				 sourceContent = finalStr.getBytes();						 
				 sourceCount = sourceTenantColumnList.size();
		    }
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
}



	private void createTemplateFromTargetTenantEmployment(Tenant tenant, InputStream is, SOAPConnection soapConnection,
	String loadCycle, String ruleName, String client, Long userId) {

		wdCount = 0;
		headingFromTargetTenant = "";
		targetTenantRowMap.clear();
		targetTenantColumnList.clear();
		String xmlReqFile = null;
		try 
		{			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 xmlReqFile = requestfile.getAbsolutePath();
				 String outputfile = addHireIdList(xmlReqFile, newEmpList, ruleName, 0, newEmpList.size(), "Employee_ID");
				 is = new FileInputStream(outputfile);
			     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
			     SOAPPart soapPart = soapMessage.getSOAPPart();
			     SOAPEnvelope envelope = soapPart.getEnvelope();
				 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
				 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
				 {
					  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
					  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
				 }
				 soapMessage.saveChanges();
			     ByteArrayOutputStream out = new ByteArrayOutputStream();
			     soapMessage.writeTo(out);
			     String strMsg = new String(out.toByteArray());	
			     
			     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
			     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
				 soapConnection = soapConnectionFactory.createConnection();
				 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
				 out = new ByteArrayOutputStream();
				 soapResponse.writeTo(out);
				 strMsg = new String(out.toByteArray(), "utf-8");
		
				 ReportElement soapResp = XmlParserManager.parseXml(strMsg);
				 
				 ReportElement pageData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Results");
				 
				 String totalNoOfPages = pageData.getChild("wd:Total_Pages").getValue().trim();
				 String totalResults = pageData.getChild("wd:Total_Results").getValue().trim();
				 int totalResult = Integer.parseInt(totalResults);
				 System.out.println("totalNoOfPages-"+totalNoOfPages);
				 System.out.println("totalResult-"+totalResult);				 
				 
				 String employeeId = "";
				 String employeeHireDate = "";
				 String hireDate = "";
				 String hireReason = "";
				 String positionTitle = "";
				 String businessTitle = "";
				 String defaultWeeklyHours = "";
				 String scheduledWeeklyHours = "";
				 String jobCode = "";
				 String jobProfileName = "";
				 String timeType = "";
				 String payTypeName = "";
				 String location = "";
				 String originalHireDate = "";
				 String contServiceDate = "";
				 String expectedRetirementDate = "";
				 String retirementElegibilityDate = "";
				 String endEmploymentDate = "";
				 String seniorityDate = "";
				 String severanceDate = "";
				 String benefitsServiceDate = "";
				 String companyServiceDate = "";
				 String timeOffServiceDate = "";
				 String vestingDate = "";
				 String workforceEnteredDate = "";
				 String daysUnemployed = "";
				 String monthsContPriorEmp = "";				 				 
				 String customIdNumber = "";
				 			 
				 String finalStr = "";
				 String headerStr = "";
				 
				 Map<String,String> hireReasonMap = null;
				 Map<String,String> jobProfMap = null;
				 Map<String,String> posTimeTypeMap = null;
				 Map<String,String> payRateMap = null;
				 Map<String,String> locationMap = null;
				 Map<String,String> customTypeMap = null;
				 
				 int startIndex = 0;
				 int endIndex = 0;
				 
				 for (int j = 1; j <=Integer.parseInt(totalNoOfPages); j++) //
				 {
					 if(j == 1)
					 {
						startIndex = 0;
						if(999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = j*999;
						}
					 }
					 else
					 {
						startIndex = endIndex;
						if(j*999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = (j*999);
						}
					 }
					 outputfile = addHireIdList(xmlReqFile, newEmpList, ruleName, startIndex, endIndex, "Employee_ID");
					 is = new FileInputStream(outputfile);
				     soapMessage = MessageFactory.newInstance().createMessage(null, is);
				     soapPart = soapMessage.getSOAPPart();
				     envelope = soapPart.getEnvelope();
					 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
					 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
					 {
							envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
					 }
					 soapMessage.saveChanges();
			         out = new ByteArrayOutputStream();
			         soapMessage.writeTo(out);
			         strMsg = new String(out.toByteArray());
			        
			         soapConnectionFactory = SOAPConnectionFactory.newInstance();
					 soapConnection = soapConnectionFactory.createConnection();
			         soapResponse = soapConnection.call(soapMessage, sourceUrl);
			         out = new ByteArrayOutputStream();
			         soapResponse.writeTo(out);
			         strMsg = new String(out.toByteArray(), "utf-8");
			        
			         soapResp = XmlParserManager.parseXml(strMsg);
			        
			        ReportElement responseData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Data");
			        
			        List<ReportElement> applicantData = responseData.getChildren("wd:Worker");
			        for(ReportElement reportElement : applicantData)
					{
			        	ReportElement hireStatusData = reportElement.getChild("wd:Worker_Data")
					 			.getChild("wd:Employment_Data")
					 			.getChild("wd:Worker_Status_Data");
			        	
			        	employeeHireDate = hireStatusData.getChild("wd:Hire_Date") != null?hireStatusData.getChild("wd:Hire_Date").getValue().trim():"";					        	
			        	if(!employeeHireDate.equalsIgnoreCase(""))
			        	{
			        		Date empHireDate = convertWorkdayStringToDate(employeeHireDate);
			        		//if((empHireDate.equals(hireFromDate) || empHireDate.after(hireFromDate)) && (empHireDate.equals(hireToDate) || empHireDate.before(hireToDate)))
			        		{
					        	System.out.println("empHireDate--"+ empHireDate);
				        		ReportElement element1 = reportElement.getChild("wd:Worker_Data");
				        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
				        		System.out.println("employeeId--"+ employeeId);
								 
								 ReportElement workerStatusData = reportElement.getChild("wd:Worker_Data")
				 							.getChild("wd:Employment_Data")
				 							.getChild("wd:Worker_Status_Data");
								 
								 if(workerStatusData != null)
								 {
									 hireDate = workerStatusData.getChild("wd:Original_Hire_Date") != null?workerStatusData.getChild("wd:Original_Hire_Date").getValue().trim():"";
									 originalHireDate = workerStatusData.getChild("wd:Original_Hire_Date") != null?workerStatusData.getChild("wd:Original_Hire_Date").getValue().trim():""; 
									 contServiceDate = workerStatusData.getChild("wd:Continuous_Service_Date") != null?workerStatusData.getChild("wd:Continuous_Service_Date").getValue().trim():""; 
									 expectedRetirementDate = workerStatusData.getChild("wd:Expected_Retirement_Date") != null?workerStatusData.getChild("wd:Expected_Retirement_Date").getValue().trim():""; 
									 retirementElegibilityDate = workerStatusData.getChild("wd:Retirement_Eligibility_Date") != null?workerStatusData.getChild("wd:Retirement_Eligibility_Date").getValue().trim():"";
									 endEmploymentDate = workerStatusData.getChild("wd:End_Employment_Date") != null?workerStatusData.getChild("wd:End_Employment_Date").getValue().trim():""; 
									 seniorityDate = workerStatusData.getChild("wd:Seniority_Date") != null?workerStatusData.getChild("wd:Seniority_Date").getValue().trim():""; 
									 severanceDate = workerStatusData.getChild("wd:Severance_Date") != null?workerStatusData.getChild("wd:Severance_Date").getValue().trim():""; 
									 benefitsServiceDate = workerStatusData.getChild("wd:Benefits_Service_Date") != null?workerStatusData.getChild("wd:Benefits_Service_Date").getValue().trim():""; 
									 companyServiceDate = workerStatusData.getChild("wd:Company_Service_Date") != null?workerStatusData.getChild("wd:Company_Service_Date").getValue().trim():""; 
									 timeOffServiceDate = workerStatusData.getChild("wd:Time_Off_Service_Date") != null?workerStatusData.getChild("wd:Time_Off_Service_Date").getValue().trim():""; 
									 vestingDate = workerStatusData.getChild("wd:Vesting_Date") != null?workerStatusData.getChild("wd:Vesting_Date").getValue().trim():""; 
									 workforceEnteredDate = workerStatusData.getChild("wd:Date_Entered_Workforce") != null?workerStatusData.getChild("wd:Date_Entered_Workforce").getValue().trim():"";
									 daysUnemployed = workerStatusData.getChild("wd:Days_Unemployed") != null?workerStatusData.getChild("wd:Days_Unemployed").getValue().trim():""; 
									 monthsContPriorEmp = workerStatusData.getChild("wd:Months_Continuous_Prior_Employment") != null?workerStatusData.getChild("wd:Months_Continuous_Prior_Employment").getValue().trim():"";
									 ReportElement hireReasonData = workerStatusData.getChild("wd:Hire_Reason_Reference");
									 if(hireReasonData != null)
									 {
										 List<ReportElement> reasonData = hireReasonData.getChildren("wd:ID");					 
										 for(ReportElement reasonElement:reasonData)
										 {
											 hireReasonMap = reasonElement.getAllAttributes();
											 if(hireReasonMap.get("wd:type").equals("Event_Classification_Subcategory_ID") || hireReasonMap.get("wd:type").equals("General_Event_Subcategory_ID"))
											 {
												 hireReason = reasonElement.getValue().trim();
											 }
										 }
									 }
									 else
									 {
										 hireReason = "";
									 }
								 }
								 else
								 {
									 hireDate = "";
									 hireReason = "";
									 originalHireDate = "";
									 contServiceDate = "";
									 expectedRetirementDate = "";
									 retirementElegibilityDate = "";
									 endEmploymentDate = "";
									 seniorityDate = "";
									 severanceDate = "";
									 benefitsServiceDate = "";
									 companyServiceDate = "";
									 timeOffServiceDate = "";
									 vestingDate = "";
									 workforceEnteredDate = "";
									 daysUnemployed = "";
									 monthsContPriorEmp = "";
								 }								 								 
								 
								 ReportElement workerJobData = reportElement.getChild("wd:Worker_Data")
				 							.getChild("wd:Employment_Data")
				 							.getChild("wd:Worker_Job_Data");
								 
								 if(workerJobData != null)
								 {
									 ReportElement positionData = workerJobData.getChild("wd:Position_Data");
									 if(positionData != null)
									 {
										 positionTitle = positionData.getChild("wd:Position_Title") != null?positionData.getChild("wd:Position_Title").getValue().trim():"";
										 if(positionTitle.contains(","))
										 {
											 positionTitle = positionTitle.replaceAll(",", "|");
										 }
										 businessTitle = positionData.getChild("wd:Business_Title") != null?positionData.getChild("wd:Business_Title").getValue().trim():"";
										 if(businessTitle.contains(","))
										 {
											 businessTitle = businessTitle.replaceAll(",", "|");
										 }
										 defaultWeeklyHours = positionData.getChild("wd:Default_Weekly_Hours") != null?positionData.getChild("wd:Default_Weekly_Hours").getValue().trim():"";
										 scheduledWeeklyHours = positionData.getChild("wd:Scheduled_Weekly_Hours") != null?positionData.getChild("wd:Scheduled_Weekly_Hours").getValue().trim():"";
										 
										 ReportElement jobProfileSummaryData = positionData.getChild("wd:Job_Profile_Summary_Data");
										 if(jobProfileSummaryData != null)
										 {
											 ReportElement jobProfileData = jobProfileSummaryData.getChild("wd:Job_Profile_Reference");
											 if(jobProfileData != null)
											 {
												 List<ReportElement> jobProfileList = jobProfileData.getChildren("wd:ID");					 
												 for(ReportElement jobProfElement:jobProfileList)
												 {
													 jobProfMap = jobProfElement.getAllAttributes();
													 if(jobProfMap.get("wd:type").equals("Job_Profile_ID"))
													 {
														 jobCode = jobProfElement.getValue().trim();
													 }
												 }
											 }
											 else
											 {
												 jobCode = "";
											 }
											 jobProfileName = jobProfileSummaryData.getChild("wd:Job_Profile_Name") != null?jobProfileSummaryData.getChild("wd:Job_Profile_Name").getValue().trim():"";
											 if(jobProfileName.contains(","))
											 {
												 jobProfileName = jobProfileName.replaceAll(",", "|");
											 }
										 }
										 else
										 {
											 jobCode = "";
											 jobProfileName = "";
										 }
										 
										 ReportElement positionTimeTypeData = positionData.getChild("wd:Position_Time_Type_Reference");
										 if(positionTimeTypeData != null)
										 {
											 List<ReportElement> positionTimeTypeList = positionTimeTypeData.getChildren("wd:ID");					 
											 for(ReportElement timeElement:positionTimeTypeList)
											 {
												 posTimeTypeMap = timeElement.getAllAttributes();
												 if(posTimeTypeMap.get("wd:type").equals("Position_Time_Type_ID"))
												 {
													 timeType = timeElement.getValue().trim();
												 }
											 }
										 }
										 else
										 {
											 timeType = "";
										 }
										 
										 ReportElement payRateTypeData = positionData.getChild("wd:Pay_Rate_Type_Reference");
										 if(payRateTypeData != null)
										 {
											 List<ReportElement> payData = payRateTypeData.getChildren("wd:ID");					 
											 for(ReportElement payElement:payData)
											 {
												 payRateMap = payElement.getAllAttributes();
												 if(payRateMap.get("wd:type").equals("Pay_Rate_Type_ID"))
												 {
													 payTypeName = payElement.getValue().trim();
												 }
											 }
										 }
										 else
										 {
											 payTypeName = "";
										 }
										 
										 ReportElement siteData = positionData.getChild("wd:Business_Site_Summary_Data");
										 if(siteData != null)
										 {
											 ReportElement locationRef = siteData.getChild("wd:Location_Reference");
											 if(locationRef != null)
											 {
												 List<ReportElement> locationData = locationRef.getChildren("wd:ID");					 
												 for(ReportElement locationElement:locationData)
												 {
													 locationMap = locationElement.getAllAttributes();
													 if(locationMap.get("wd:type").equals("Location_ID"))
													 {
														 location = locationElement.getValue().trim();
													 }
												 }
											 }
										 }
										 else
										 {
											 location = ""; 
										 }
									 }
									 else
									 {
										 positionTitle = "";
										 businessTitle = "";
										 defaultWeeklyHours = "";
										 scheduledWeeklyHours = "";
										 jobCode = "";
										 jobProfileName = "";
										 timeType = "";
										 payTypeName = "";
										 location = "";
									 }
								 }
								 else
								 {
									 positionTitle = "";
									 businessTitle = "";
									 defaultWeeklyHours = "";
									 scheduledWeeklyHours = "";
									 jobCode = "";
									 jobProfileName = "";
									 timeType = "";
									 payTypeName = "";
									 location = ""; 
								 }								 								 
								 
								 ReportElement identificationData = reportElement.getChild("wd:Worker_Data")
								 			.getChild("wd:Personal_Data")
								 			.getChild("wd:Identification_Data");
								 
								 if(identificationData != null)
								 {										 
									 List<ReportElement> customIDList = identificationData.getChildren("wd:Custom_ID");
									 if(customIDList != null && customIDList.size() >0)
									 {
										 customIdNumber = "" ;
										 for(ReportElement customElement : customIDList)
										 {
											 ReportElement customIdData = customElement.getChild("wd:Custom_ID_Data");
											 if(customIdData != null)
											 {
												 ReportElement customTypeRef = customIdData.getChild("wd:ID_Type_Reference");
												 if(customTypeRef != null)
												 {
													 List<ReportElement> customIdTypeData = customTypeRef.getChildren("wd:ID");								 
													 for(ReportElement idTypeElement:customIdTypeData)
													 {
														 customTypeMap = idTypeElement.getAllAttributes();
														 if(customTypeMap.get("wd:type").equals("Custom_ID_Type_ID"))
														 {
															 if(idTypeElement.getValue().trim().equalsIgnoreCase("Previous_IBM_CNUM"))
															 {
																 customIdNumber = customIdData.getChild("wd:ID") != null?customIdData.getChild("wd:ID").getValue().trim():"";
															 }
														 }
													 }
												 }
											 }
										 }
										 if(customIdNumber.isEmpty())
										 {
											 customIdNumber = "" ;
										 }
									 }
									 else
									 {
										 customIdNumber = "" ;
									 }
								 }
								 else
								 {
									 customIdNumber = "" ;
								 }								 								 								 
						}				        				        
			          }
					     headingFromTargetTenant = "Home_CNUM,Employee_ID,Hire_Date,Hire_Reason,Continuous_Service_Date,"
				        			+ "Expected_Retirement_Date,Retirement_Eligibility_Date,End_Employment_Date,Seniority_Date,Severance_Date,Benefits_Service_Date,Company_Service_Date,Time_Off_Service_Date,"
				        			+ "Vesting_Date,Date_Entered_Workforce,Days_Unemployed,Months_Continuous_Prior_Employment,Position_Title,Business_Title,"
				        			+ "Job_Code,Job_Profile_Name,Position_Time_Type,Pay_Rate_Type,Default_Weekly_Hours,Scheduled_Weekly_Hours,Location";
					     
			        	if(!customIdNumber.isEmpty())
						{
				        	headerStr = customIdNumber + "," + employeeId + "," +  hireDate + "," + hireReason +
							 		 "," + contServiceDate + "," + expectedRetirementDate + "," + retirementElegibilityDate + "," + endEmploymentDate + "," + seniorityDate + "," + severanceDate +
							 		 "," + benefitsServiceDate + "," + companyServiceDate + "," + timeOffServiceDate + "," + vestingDate + "," + workforceEnteredDate + "," + daysUnemployed + "," + monthsContPriorEmp +
							 		 "," + positionTitle + "," + businessTitle + "," + jobCode + "," + jobProfileName + "," + timeType + "," + payTypeName + "," + defaultWeeklyHours + "," + scheduledWeeklyHours +
							 		 "," + location ;
				        	
			        	 targetTenantRowMap.put(customIdNumber, headerStr);
			        	 targetTenantColumnList.add(customIdNumber);
			        	 
						 if(finalStr.equals(""))
						 {
							 finalStr =  headingFromTargetTenant + "\n" + headerStr;
						 }
						 else
						 {
							 finalStr = finalStr + "\n" + headerStr;
						 }
					 }
				   }						 							 
			     }
				 System.out.println(finalStr);
				 targetContent = finalStr.getBytes();
				 wdCount = targetTenantColumnList.size();
		   }
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
	}
	
	private void createTemplateFromSourceTenantPayment(Tenant tenant, InputStream is, SOAPConnection soapConnection, String loadCycle, String ruleName, String client, Long userId) {
		
		sourceCount = 0;
		headingFromSourceTenant = "";
		sourceTenantRowMap.clear();
		sourceTenantColumnList.clear();
		errorList.clear();
		String xmlReqFile = null;
		try 
		{			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 xmlReqFile = requestfile.getAbsolutePath();
				 String outputfile = addHireIdList(xmlReqFile, oldEmpList, ruleName, 0, oldEmpList.size(), "Employee_ID");
				 is = new FileInputStream(outputfile);
			     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
			     SOAPPart soapPart = soapMessage.getSOAPPart();
			     SOAPEnvelope envelope = soapPart.getEnvelope();
				 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
				 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
				 {
					  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
					  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
				 }
				 soapMessage.saveChanges();
			     ByteArrayOutputStream out = new ByteArrayOutputStream();
			     soapMessage.writeTo(out);
			     String strMsg = new String(out.toByteArray());	
			     
			     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
			     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
				 soapConnection = soapConnectionFactory.createConnection();
				 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
				 out = new ByteArrayOutputStream();
				 soapResponse.writeTo(out);
				 strMsg = new String(out.toByteArray(), "utf-8");

				 ReportElement soapResp = XmlParserManager.parseXml(strMsg);
				 
				 ReportElement pageData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Results");
				 
				 String totalNoOfPages = pageData.getChild("wd:Total_Pages").getValue().trim();
				 String totalResults = pageData.getChild("wd:Total_Results").getValue().trim();
				 int totalResult = Integer.parseInt(totalResults);
				 System.out.println("totalNoOfPages-"+totalNoOfPages);
				 System.out.println("totalResult-"+totalResult);						 
				 
				 String employeeId = "";
				 String WID = "";

				 String empTerminationDate = "";				 
				 String customIdNumber = "";
				 String bankAccountNickname = "";
				 String bankName = "";
				 String bankId = "";
				 String bankAccountNumnber = "";
				 String IBAN = "";
				 String distribution = "";
				 String bankAccountType = "";
				 String bankPaymentType = "";
				 String bankCountry = "";
				 String bankCurrency = "";
				 String bankAccountNicknameArr = "";
				 String bankNameArr = "";
				 String bankIdArr = "";
				 String bankAccountNumnberArr = "";
				 String IBANArr = "";
				 String distributionArr = "";
				 String bankAccountTypeArr = "";
				 String bankPaymentTypeArr = "";
				 String bankCountryArr = "";
				 String bankCurrencyArr = "";						 
				 String finalStr = "";
				 String headerStr = "";
				 
				 Map<String,String> customTypeMap = null;
				 Map<String,String> widMap = null;
				 
				 String reportURL = "";
				 int startIndex = 0;
				 int endIndex = 0;
				 
				 for (int j = 1; j <=Integer.parseInt(totalNoOfPages); j++) //
				 {
					 if(j == 1)
					 {
						startIndex = 0;
						if(999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = j*999;
						}
					 }
					 else
					 {
						startIndex = endIndex;
						if(j*999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = (j*999);
						}
					 }
					 outputfile = addHireIdList(xmlReqFile, oldEmpList, ruleName, startIndex, endIndex, "Employee_ID");
					 is = new FileInputStream(outputfile);
				     soapMessage = MessageFactory.newInstance().createMessage(null, is);
				     soapPart = soapMessage.getSOAPPart();
				     envelope = soapPart.getEnvelope();
					 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
					 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
					 {
							envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
					 }
					 soapMessage.saveChanges();
			         out = new ByteArrayOutputStream();
			         soapMessage.writeTo(out);
			         strMsg = new String(out.toByteArray());
			        
			         soapConnectionFactory = SOAPConnectionFactory.newInstance();
					 soapConnection = soapConnectionFactory.createConnection();
			         soapResponse = soapConnection.call(soapMessage, sourceUrl);
			         out = new ByteArrayOutputStream();
			         soapResponse.writeTo(out);
			         strMsg = new String(out.toByteArray(), "utf-8");
			        
			         soapResp = XmlParserManager.parseXml(strMsg);
			        
			        ReportElement responseData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Data");
			        
			        List<ReportElement> applicantData = responseData.getChildren("wd:Worker");
			        for(ReportElement reportElement : applicantData)
					{
			        	ReportElement terminationStatusData = reportElement.getChild("wd:Worker_Data")
					 			.getChild("wd:Employment_Data")
					 			.getChild("wd:Worker_Status_Data");
			        	
			        	empTerminationDate = terminationStatusData.getChild("wd:Termination_Date") != null?terminationStatusData.getChild("wd:Termination_Date").getValue().trim():"";					        	
			        	//if(!empTerminationDate.equalsIgnoreCase(""))
			        	{
			        		//Date termDate = convertWorkdayStringToDate(empTerminationDate);
			        		//if((termDate.equals(termFromDate) || termDate.after(termFromDate)) && (termDate.equals(termToDate) || termDate.before(termToDate)))
			        		{
					        	//System.out.println("empTerminationDate--"+ termDate);
				        		ReportElement element1 = reportElement.getChild("wd:Worker_Data");
				        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
				        		System.out.println("employeeId--"+ employeeId);
				        		
				        		ReportElement widRef = reportElement.getChild("wd:Worker_Reference");
								 if(widRef != null)
								 {
									 List<ReportElement> idList = widRef.getChildren("wd:ID");
									 for(ReportElement idElement:idList)
									 {
										 widMap = idElement.getAllAttributes();
										 if(widMap.get("wd:type").equals("WID"))
										 {
											 WID = idElement.getValue().trim();
										 }
									 }
								 }
								 else
								 {
									 WID = "";
								 }
								
								 /*if(tenant.getTenantName().equalsIgnoreCase("ibm6"))
								 {
									 reportURL = "https://" + tenant.getTenantUrl() + "customreport2/" + tenant.getTenantName() + "/ISU_Verify_Global/" + "Payment_Elections_Enrollment?Employee!WID=" + WID;
								 }
								 else if(tenant.getTenantName().equalsIgnoreCase("ibm10"))
								 {*/
									 reportURL = "https://" + tenant.getTenantUrl() + "customreport2/" + tenant.getTenantName() + "/ISU_Verify_Global/" + "Payment_Elections_Enrollment?Entry_Date_and_Time=2021-10-11T11:29:59.000-07:00&Employee!WID=" + WID;
								 //}
								 
								JSONArray jArr = createPaymentElectionEnrollmentData(reportURL);
								if(jArr != null && jArr.length() >0)
								{
									 bankAccountNicknameArr = "";
									 bankNameArr = "";
									 bankIdArr = "";
									 bankAccountNumnberArr = "";
									 IBANArr = "";
									 distributionArr = "";
									 bankAccountTypeArr = "";
									 bankPaymentTypeArr = "";
									 bankCountryArr = "";
									 bankCurrencyArr = "";
									for(int i = 0; i<jArr.length(); i++) 
							        {
										JSONObject objects = jArr.getJSONObject(i);
										bankAccountNickname = objects.isNull("accountNickname")?"":objects.getString("accountNickname");
										if(bankAccountNicknameArr.equals(""))
										{
											bankAccountNicknameArr = bankAccountNickname;
										}
										else
										{
											if(!bankAccountNickname.isEmpty())
											{
												bankAccountNicknameArr = bankAccountNicknameArr + "~" + bankAccountNickname;
											}
										}
										bankName = objects.isNull("bankName")?"":objects.getString("bankName");
										if(bankName.contains(","))
										{
											bankName = bankName.replaceAll(",", "|");
										}
										if(bankNameArr.equals(""))
										{
											bankNameArr = bankName;
										}
										else
										{
											if(!bankName.isEmpty())
											{
												bankNameArr = bankNameArr + "~" + bankName;
											}
										}
										bankId = objects.isNull("bankId")?"":objects.getString("bankId");
										if(bankIdArr.equals(""))
										{
											bankIdArr = bankId;
										}
										else
										{
											if(!bankId.isEmpty())
											{
												bankIdArr = bankIdArr + "~" + bankId;
											}
										}
										bankAccountNumnber = objects.isNull("accountNumber")?"":objects.getString("accountNumber");
										if(bankAccountNumnberArr.equals(""))
										{
											bankAccountNumnberArr = bankAccountNumnber;
										}
										else
										{
											if(!bankAccountNumnber.isEmpty())
											{
												bankAccountNumnberArr = bankAccountNumnberArr + "~" + bankAccountNumnber;
											}
										}
										IBAN = objects.isNull("IBAN")?"":objects.getString("IBAN");
										if(IBANArr.equals(""))
										{
											IBANArr = IBAN;
										}
										else
										{
											if(!IBAN.isEmpty())
											{
												IBANArr = IBANArr + "~" + IBAN;
											}
										}
										distribution = objects.isNull("distribution")?"":objects.getString("distribution");
										if(distributionArr.equals(""))
										{
											distributionArr = distribution;
										}
										else
										{
											if(!distribution.equals(""))
											{
												distributionArr = distributionArr + "~" + distribution;
											}
										}
										bankAccountType = objects.isNull("accountType")?"":objects.getString("accountType");
										if(bankAccountTypeArr.equals(""))
										{
											bankAccountTypeArr = bankAccountType;
										}
										else
										{
											if(!bankAccountType.isEmpty())
											{
												bankAccountTypeArr = bankAccountTypeArr + "~" + bankAccountType;
											}
										}
										bankPaymentType = objects.isNull("paymentType")?"":objects.getString("paymentType");
										if(bankPaymentTypeArr.equals(""))
										{
											bankPaymentTypeArr = bankPaymentType;
										}
										else
										{
											if(!bankPaymentType.isEmpty())
											{
												bankPaymentTypeArr = bankPaymentTypeArr + "~" + bankPaymentType;
											}
										}
										bankCountry = objects.isNull("country")?"":objects.getString("country");
										if(bankCountryArr.equals(""))
										{
											bankCountryArr = bankCountry;
										}
										else
										{
											if(!bankCountry.isEmpty())
											{
												bankCountryArr = bankCountryArr + "~" + bankCountry;
											}
										}
										bankCurrency = objects.isNull("currency")?"":objects.getString("currency");
										if(bankCurrencyArr.equals(""))
										{
											bankCurrencyArr = bankCurrency;
										}
										else
										{
											if(!bankCurrency.isEmpty())
											{
												bankCurrencyArr = bankCurrencyArr + "~" + bankCurrency;
											}
										}
							        }
								}
								else
								{
									 bankAccountNicknameArr = "";
									 bankNameArr = "";
									 bankIdArr = "";
									 bankAccountNumnberArr = "";
									 IBANArr = "";
									 distributionArr = "";
									 bankAccountTypeArr = "";
									 bankPaymentTypeArr = "";
									 bankCountryArr = "";
									 bankCurrencyArr = "";
								} 
								 
								 ReportElement identificationData = reportElement.getChild("wd:Worker_Data")
								 			.getChild("wd:Personal_Data")
								 			.getChild("wd:Identification_Data");
								 
								 if(identificationData != null)
								 {												 											 
									 List<ReportElement> customIDList = identificationData.getChildren("wd:Custom_ID");
									 if(customIDList != null && customIDList.size() >0)
									 {
										 String expirationDate = "";
										 customIdNumber = "" ;
										 for(ReportElement customElement : customIDList)
										 {
											 ReportElement customIdData = customElement.getChild("wd:Custom_ID_Data");
											 if(customIdData != null)
											 {
												 expirationDate = customIdData.getChild("wd:Expiration_Date") != null?customIdData.getChild("wd:Expiration_Date").getValue().trim():"";
												 ReportElement customTypeRef = customIdData.getChild("wd:ID_Type_Reference");
												 if(customTypeRef != null)
												 {
													 List<ReportElement> customIdTypeData = customTypeRef.getChildren("wd:ID");								 
													 for(ReportElement idTypeElement:customIdTypeData)
													 {
														 customTypeMap = idTypeElement.getAllAttributes();
														 if(customTypeMap.get("wd:type").equals("Custom_ID_Type_ID"))
														 {
															 if(idTypeElement.getValue().trim().equalsIgnoreCase("Global_CNUM") && expirationDate.isEmpty())
															 {
																 customIdNumber = customIdData.getChild("wd:ID") != null?customIdData.getChild("wd:ID").getValue().trim():""; 
															 }
														 }
													 }
												 }												 
											 }
										 }
										 if(customIdNumber.isEmpty())
										 {
											 customIdNumber = "" ;
										 }
									 }
									 else
									 {
										 customIdNumber = "" ;
									 }
								 }
								 else
								 {
									 customIdNumber = "" ;										 
								 }										 										 									 
						}						        						        
			        }
				     headingFromSourceTenant = "Home_CNUM,Employee_ID,"
			        			+ "Bank_ID,Bank_Name,Bank_Account_Nickname,Bank_Account_Number,Bank_Account_Type,Payment_Type,Bank_Country,Bank_Currency,IBAN,Distribution";
				     
		        	if(!customIdNumber.isEmpty())
					{
			        	headerStr = customIdNumber + "," + employeeId + "," +  bankIdArr + "," + bankNameArr + "," + bankAccountNicknameArr + "," + bankAccountNumnberArr + "," + bankAccountTypeArr +
						 		 "," + bankPaymentTypeArr + "," + bankCountryArr + "," + bankCurrencyArr + "," + IBANArr + "," + distributionArr; 
			        	
			        	sourceTenantRowMap.put(customIdNumber, headerStr);							        	
			        	sourceTenantColumnList.add(customIdNumber);
			        	
			        	if(finalStr.equals(""))
						{
							 finalStr =  headingFromSourceTenant + "\n" + headerStr;
						}
						else
						{
							 finalStr = finalStr + "\n" + headerStr;
						}
					 }
		          }						 							 
			   }
			
				 System.out.println(finalStr);
				 sourceContent = finalStr.getBytes();						 
				 sourceCount = sourceTenantColumnList.size();
		    }
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
	}

	private void createTemplateFromTargetTenantPayment(Tenant tenant, InputStream is, SOAPConnection soapConnection, String loadCycle, String ruleName, String client, Long userId) {

			wdCount = 0;
			headingFromTargetTenant = "";
			targetTenantRowMap.clear();
			targetTenantColumnList.clear();
			String xmlReqFile = null;
			try 
			{			 
				 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
				 if(getRequest != null)
				 {
					 byte[] requestFileContent = getRequest.getRequestXMLContent();
					 File requestfile = null;
					 try 
					 {
						 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
						 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
					 } 
					 catch (IOException e1) 
					 {
					     e1.printStackTrace();
					 }
					 xmlReqFile = requestfile.getAbsolutePath();
					 String outputfile = addHireIdList(xmlReqFile, newEmpList, ruleName, 0, newEmpList.size(), "Employee_ID");
					 is = new FileInputStream(outputfile);
				     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
				     SOAPPart soapPart = soapMessage.getSOAPPart();
				     SOAPEnvelope envelope = soapPart.getEnvelope();
					 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
					 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
					 {
						  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
						  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
					 }
					 soapMessage.saveChanges();
				     ByteArrayOutputStream out = new ByteArrayOutputStream();
				     soapMessage.writeTo(out);
				     String strMsg = new String(out.toByteArray());	
				     
				     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
				     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
					 soapConnection = soapConnectionFactory.createConnection();
					 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
					 out = new ByteArrayOutputStream();
					 soapResponse.writeTo(out);
					 strMsg = new String(out.toByteArray(), "utf-8");
			
					 ReportElement soapResp = XmlParserManager.parseXml(strMsg);
					 
					 ReportElement pageData = soapResp.getChild("env:Body")
								.getChild("wd:Get_Workers_Response")
								.getChild("wd:Response_Results");
					 
					 String totalNoOfPages = pageData.getChild("wd:Total_Pages").getValue().trim();
					 String totalResults = pageData.getChild("wd:Total_Results").getValue().trim();
					 int totalResult = Integer.parseInt(totalResults);
					 System.out.println("totalNoOfPages-"+totalNoOfPages);
					 System.out.println("totalResult-"+totalResult);				 
					 
					 String employeeId = "";
					 String WID = "";
					 String employeeHireDate = "";				 
					 String customIdNumber = "";
					 String bankAccountNickname = "";
					 String bankName = "";
					 String bankId = "";
					 String bankAccountNumnber = "";
					 String IBAN = "";
					 String distribution = "";
					 String bankAccountType = "";
					 String bankPaymentType = "";
					 String bankCountry = "";
					 String bankCurrency = "";
					 String bankAccountNicknameArr = "";
					 String bankNameArr = "";
					 String bankIdArr = "";
					 String bankAccountNumnberArr = "";
					 String IBANArr = "";
					 String distributionArr = "";
					 String bankAccountTypeArr = "";
					 String bankPaymentTypeArr = "";
					 String bankCountryArr = "";
					 String bankCurrencyArr = "";						 
					 String finalStr = "";
					 String headerStr = "";
					 
					 Map<String,String> customTypeMap = null;
					 Map<String,String> widMap = null;
					 
					 String reportURL = "";
					 int startIndex = 0;
					 int endIndex = 0;
					 
					 for (int j = 1; j <=Integer.parseInt(totalNoOfPages); j++) //
					 {
						 if(j == 1)
						 {
							startIndex = 0;
							if(999 > totalResult)
							{
								endIndex = totalResult;
							}
							else
							{
								endIndex = j*999;
							}
						 }
						 else
						 {
							startIndex = endIndex;
							if(j*999 > totalResult)
							{
								endIndex = totalResult;
							}
							else
							{
								endIndex = (j*999);
							}
						 }
						 outputfile = addHireIdList(xmlReqFile, newEmpList, ruleName, startIndex, endIndex, "Employee_ID");
						 is = new FileInputStream(outputfile);
					     soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     soapPart = soapMessage.getSOAPPart();
					     envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
								envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
								createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
				         out = new ByteArrayOutputStream();
				         soapMessage.writeTo(out);
				         strMsg = new String(out.toByteArray());
				        
				         soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
				         soapResponse = soapConnection.call(soapMessage, sourceUrl);
				         out = new ByteArrayOutputStream();
				         soapResponse.writeTo(out);
				         strMsg = new String(out.toByteArray(), "utf-8");
				        
				         soapResp = XmlParserManager.parseXml(strMsg);
				        
				        ReportElement responseData = soapResp.getChild("env:Body")
								.getChild("wd:Get_Workers_Response")
								.getChild("wd:Response_Data");
				        
				        List<ReportElement> applicantData = responseData.getChildren("wd:Worker");
				        for(ReportElement reportElement : applicantData)
						{
				        	ReportElement hireStatusData = reportElement.getChild("wd:Worker_Data")
						 			.getChild("wd:Employment_Data")
						 			.getChild("wd:Worker_Status_Data");
				        	
				        	employeeHireDate = hireStatusData.getChild("wd:Hire_Date") != null?hireStatusData.getChild("wd:Hire_Date").getValue().trim():"";					        	
				        	if(!employeeHireDate.equalsIgnoreCase(""))
				        	{
				        		Date empHireDate = convertWorkdayStringToDate(employeeHireDate);
				        		//if((empHireDate.equals(hireFromDate) || empHireDate.after(hireFromDate)) && (empHireDate.equals(hireToDate) || empHireDate.before(hireToDate)))
				        		{
						        	System.out.println("empHireDate--"+ empHireDate);
					        		ReportElement element1 = reportElement.getChild("wd:Worker_Data");
					        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
					        		System.out.println("employeeId--"+ employeeId);
					        		
					        		ReportElement widRef = reportElement.getChild("wd:Worker_Reference");
									 if(widRef != null)
									 {
										 List<ReportElement> idList = widRef.getChildren("wd:ID");
										 for(ReportElement idElement:idList)
										 {
											 widMap = idElement.getAllAttributes();
											 if(widMap.get("wd:type").equals("WID"))
											 {
												 WID = idElement.getValue().trim();
											 }
										 }
									 }
									 else
									 {
										 WID = "";
									 }
									 
									 /*if(tenant.getTenantName().equalsIgnoreCase("ibm6"))
									 {
										 reportURL = "https://" + tenant.getTenantUrl() + "customreport2/" + tenant.getTenantName() + "/ISU_Verify_Global/" + "Payment_Elections_Enrollment?Employee!WID=" + WID;
									 }
									 else if(tenant.getTenantName().equalsIgnoreCase("ibm10"))
									 {*/
										 reportURL = "https://" + tenant.getTenantUrl() + "customreport2/" + tenant.getTenantName() + "/ISU_Verify_Global/" + "Payment_Elections_Enrollment?Entry_Date_and_Time=2021-11-01T11:29:59.000-07:00&Employee!WID=" + WID;
									 //}
									 
									JSONArray jArr = createPaymentElectionEnrollmentData(reportURL);
									if(jArr != null && jArr.length() >0)
									{
										 bankAccountNicknameArr = "";
										 bankNameArr = "";
										 bankIdArr = "";
										 bankAccountNumnberArr = "";
										 IBANArr = "";
										 distributionArr = "";
										 bankAccountTypeArr = "";
										 bankPaymentTypeArr = "";
										 bankCountryArr = "";
										 bankCurrencyArr = "";
										 
										for(int i = 0; i<jArr.length(); i++) 
								        {
											JSONObject objects = jArr.getJSONObject(i);
											bankAccountNickname = objects.isNull("accountNickname")?"":objects.getString("accountNickname");
											if(bankAccountNicknameArr.equals(""))
											{
												bankAccountNicknameArr = bankAccountNickname;
											}
											else
											{
												if(!bankAccountNickname.isEmpty())
												{
													bankAccountNicknameArr = bankAccountNicknameArr + "~" + bankAccountNickname;
												}
											}
											bankName = objects.isNull("bankName")?"":objects.getString("bankName");
											if(bankName.contains(","))
											{
												bankName = bankName.replaceAll(",", "|");
											}
											if(bankNameArr.equals(""))
											{
												bankNameArr = bankName;
											}
											else
											{
												if(!bankName.isEmpty())
												{
													bankNameArr = bankNameArr + "~" + bankName;
												}
											}
											bankId = objects.isNull("bankId")?"":objects.getString("bankId");
											if(bankIdArr.equals(""))
											{
												bankIdArr = bankId;
											}
											else
											{
												if(!bankId.isEmpty())
												{
													bankIdArr = bankIdArr + "~" + bankId;
												}
											}
											bankAccountNumnber = objects.isNull("accountNumber")?"":objects.getString("accountNumber");
											if(bankAccountNumnberArr.equals(""))
											{
												bankAccountNumnberArr = bankAccountNumnber;
											}
											else
											{
												if(!bankAccountNumnber.isEmpty())
												{
													bankAccountNumnberArr = bankAccountNumnberArr + "~" + bankAccountNumnber;
												}
											}
											IBAN = objects.isNull("IBAN")?"":objects.getString("IBAN");
											if(IBANArr.equals(""))
											{
												IBANArr = IBAN;
											}
											else
											{
												if(!IBAN.isEmpty())
												{
													IBANArr = IBANArr + "~" + IBAN;
												}
											}
											distribution = objects.isNull("distribution")?"":objects.getString("distribution");
											if(distributionArr.equals(""))
											{
												distributionArr = distribution;
											}
											else
											{
												if(!distribution.equals(""))
												{
													distributionArr = distributionArr + "~" + distribution;
												}
											}
											bankAccountType = objects.isNull("accountType")?"":objects.getString("accountType");
											if(bankAccountTypeArr.equals(""))
											{
												bankAccountTypeArr = bankAccountType;
											}
											else
											{
												if(!bankAccountType.isEmpty())
												{
													bankAccountTypeArr = bankAccountTypeArr + "~" + bankAccountType;
												}
											}
											bankPaymentType = objects.isNull("paymentType")?"":objects.getString("paymentType");
											if(bankPaymentTypeArr.equals(""))
											{
												bankPaymentTypeArr = bankPaymentType;
											}
											else
											{
												if(!bankPaymentType.isEmpty())
												{
													bankPaymentTypeArr = bankPaymentTypeArr + "~" + bankPaymentType;
												}
											}
											bankCountry = objects.isNull("country")?"":objects.getString("country");
											if(bankCountryArr.equals(""))
											{
												bankCountryArr = bankCountry;
											}
											else
											{
												if(!bankCountry.isEmpty())
												{
													bankCountryArr = bankCountryArr + "~" + bankCountry;
												}
											}
											bankCurrency = objects.isNull("currency")?"":objects.getString("currency");
											if(bankCurrencyArr.equals(""))
											{
												bankCurrencyArr = bankCurrency;
											}
											else
											{
												if(!bankCurrency.isEmpty())
												{
													bankCurrencyArr = bankCurrencyArr + "~" + bankCurrency;
												}
											}
								        }
									}
									else
									{
										 bankAccountNicknameArr = "";
										 bankNameArr = "";
										 bankIdArr = "";
										 bankAccountNumnberArr = "";
										 IBANArr = "";
										 distributionArr = "";
										 bankAccountTypeArr = "";
										 bankPaymentTypeArr = "";
										 bankCountryArr = "";
										 bankCurrencyArr = "";
									}
									 
									 ReportElement identificationData = reportElement.getChild("wd:Worker_Data")
									 			.getChild("wd:Personal_Data")
									 			.getChild("wd:Identification_Data");
									 
									 if(identificationData != null)
									 {										 
										 List<ReportElement> customIDList = identificationData.getChildren("wd:Custom_ID");
										 if(customIDList != null && customIDList.size() >0)
										 {
											 customIdNumber = "" ;
											 for(ReportElement customElement : customIDList)
											 {
												 ReportElement customIdData = customElement.getChild("wd:Custom_ID_Data");
												 if(customIdData != null)
												 {
													 ReportElement customTypeRef = customIdData.getChild("wd:ID_Type_Reference");
													 if(customTypeRef != null)
													 {
														 List<ReportElement> customIdTypeData = customTypeRef.getChildren("wd:ID");								 
														 for(ReportElement idTypeElement:customIdTypeData)
														 {
															 customTypeMap = idTypeElement.getAllAttributes();
															 if(customTypeMap.get("wd:type").equals("Custom_ID_Type_ID"))
															 {
																 if(idTypeElement.getValue().trim().equalsIgnoreCase("Previous_IBM_CNUM"))
																 {
																	 customIdNumber = customIdData.getChild("wd:ID") != null?customIdData.getChild("wd:ID").getValue().trim():""; 
																 }
															 }
														 }
													 }
												 }
											 }
											 if(customIdNumber.isEmpty())
											 {
												 customIdNumber = "" ;
											 }
										 }
										 else
										 {
											 customIdNumber = "" ;
										 }
									 }
									 else
									 {
										 customIdNumber = "" ;
									 }								 								 								 
							}				        				        
				          }
						     headingFromTargetTenant = "Home_CNUM,Employee_ID,"
					        			+ "Bank_ID,Bank_Name,Bank_Account_Nickname,Bank_Account_Number,Bank_Account_Type,Payment_Type,Bank_Country,Bank_Currency,IBAN,Distribution";
						     
				        	if(!customIdNumber.isEmpty())
							{
					        	headerStr = customIdNumber + "," + employeeId + "," +  bankIdArr + "," + bankNameArr + "," + bankAccountNicknameArr + "," + bankAccountNumnberArr + "," + bankAccountTypeArr +
								 		 "," + bankPaymentTypeArr + "," + bankCountryArr + "," + bankCurrencyArr + "," + IBANArr + "," + distributionArr;
					        	
					        	
				        	 targetTenantRowMap.put(customIdNumber, headerStr);
				        	 targetTenantColumnList.add(customIdNumber);
				        	 
							 if(finalStr.equals(""))
							 {
								 finalStr =  headingFromTargetTenant + "\n" + headerStr;
							 }
							 else
							 {
								 finalStr = finalStr + "\n" + headerStr;
							 }
						 }
					   }						 							 
				     }
					 System.out.println(finalStr);
					 targetContent = finalStr.getBytes();
					 wdCount = targetTenantColumnList.size();
			   }
			}
			catch (FileNotFoundException e)
			{
				e.printStackTrace();
			} 
			catch (IOException e) 
			{
				e.printStackTrace();
			} 
			catch (SOAPException e) 
			{
				e.printStackTrace();
			} 
			catch (Exception e) 
			{
				e.printStackTrace();
			}
	}
	
	private void createTemplateFromSourceTenantPaymentOption(Tenant tenant2, InputStream is, SOAPConnection soapConnection, String loadCycle, String ruleName, String client, Long userId) {
		
		sourceCount = 0;
		headingFromSourceTenant = "";
		sourceTenantRowMap.clear();
		sourceTenantColumnList.clear();
		errorList.clear();
		String xmlReqFile = null;
		try 
		{			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 xmlReqFile = requestfile.getAbsolutePath();
				 String outputfile = addHireIdList(xmlReqFile, oldEmpList, ruleName, 0, oldEmpList.size(), "Employee_ID");
				 is = new FileInputStream(outputfile);
			     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
			     SOAPPart soapPart = soapMessage.getSOAPPart();
			     SOAPEnvelope envelope = soapPart.getEnvelope();
				 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
				 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
				 {
					  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
					  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
				 }
				 soapMessage.saveChanges();
			     ByteArrayOutputStream out = new ByteArrayOutputStream();
			     soapMessage.writeTo(out);
			     String strMsg = new String(out.toByteArray());	
			     
			     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
			     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
				 soapConnection = soapConnectionFactory.createConnection();
				 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
				 out = new ByteArrayOutputStream();
				 soapResponse.writeTo(out);
				 strMsg = new String(out.toByteArray(), "utf-8");

				 ReportElement soapResp = XmlParserManager.parseXml(strMsg);
				 
				 ReportElement pageData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Results");
				 
				 String totalNoOfPages = pageData.getChild("wd:Total_Pages").getValue().trim();
				 String totalResults = pageData.getChild("wd:Total_Results").getValue().trim();
				 int totalResult = Integer.parseInt(totalResults);
				 System.out.println("totalNoOfPages-"+totalNoOfPages);
				 System.out.println("totalResult-"+totalResult);						 
				 
				 String employeeId = "";
				 String WID = "";

				 String empTerminationDate = "";				 
				 String customIdNumber = "";
				 String defaultCurrency = "";
				 String defaultCurrencyArr = "";
				 String paymentCurrency = "";
				 String paymentCurrencyArr = "";
				 String payType = "";
				 String payTypeArr = "";
				 String paymentType = "";
				 String paymentTypeArr = "";
						 
				 String finalStr = "";
				 String headerStr = "";
				 
				 Map<String,String> customTypeMap = null;
				 Map<String,String> widMap = null;
				 
				 String reportURL = "";
				 int startIndex = 0;
				 int endIndex = 0;
				 
				 for (int j = 1; j <=Integer.parseInt(totalNoOfPages); j++) //
				 {
					 if(j == 1)
					 {
						startIndex = 0;
						if(999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = j*999;
						}
					 }
					 else
					 {
						startIndex = endIndex;
						if(j*999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = (j*999);
						}
					 }
					 outputfile = addHireIdList(xmlReqFile, oldEmpList, ruleName, startIndex, endIndex, "Employee_ID");
					 is = new FileInputStream(outputfile);
				     soapMessage = MessageFactory.newInstance().createMessage(null, is);
				     soapPart = soapMessage.getSOAPPart();
				     envelope = soapPart.getEnvelope();
					 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
					 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
					 {
							envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
					 }
					 soapMessage.saveChanges();
			         out = new ByteArrayOutputStream();
			         soapMessage.writeTo(out);
			         strMsg = new String(out.toByteArray());
			        
			         soapConnectionFactory = SOAPConnectionFactory.newInstance();
					 soapConnection = soapConnectionFactory.createConnection();
			         soapResponse = soapConnection.call(soapMessage, sourceUrl);
			         out = new ByteArrayOutputStream();
			         soapResponse.writeTo(out);
			         strMsg = new String(out.toByteArray(), "utf-8");
			        
			         soapResp = XmlParserManager.parseXml(strMsg);
			        
			        ReportElement responseData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Data");
			        
			        List<ReportElement> applicantData = responseData.getChildren("wd:Worker");
			        for(ReportElement reportElement : applicantData)
					{
			        	ReportElement terminationStatusData = reportElement.getChild("wd:Worker_Data")
					 			.getChild("wd:Employment_Data")
					 			.getChild("wd:Worker_Status_Data");
			        	
			        	empTerminationDate = terminationStatusData.getChild("wd:Termination_Date") != null?terminationStatusData.getChild("wd:Termination_Date").getValue().trim():"";					        	
			        	//if(!empTerminationDate.equalsIgnoreCase(""))
			        	{
			        		//Date termDate = convertWorkdayStringToDate(empTerminationDate);
			        		//if((termDate.equals(termFromDate) || termDate.after(termFromDate)) && (termDate.equals(termToDate) || termDate.before(termToDate)))
			        		{
					        	//System.out.println("empTerminationDate--"+ termDate);
				        		ReportElement element1 = reportElement.getChild("wd:Worker_Data");
				        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
				        		System.out.println("employeeId--"+ employeeId);
				        		
				        		ReportElement widRef = reportElement.getChild("wd:Worker_Reference");
								 if(widRef != null)
								 {
									 List<ReportElement> idList = widRef.getChildren("wd:ID");
									 for(ReportElement idElement:idList)
									 {
										 widMap = idElement.getAllAttributes();
										 if(widMap.get("wd:type").equals("WID"))
										 {
											 WID = idElement.getValue().trim();
										 }
									 }
								 }
								 else
								 {
									 WID = "";
								 }
								
								 /*if(tenant.getTenantName().equalsIgnoreCase("ibm6"))
								 {
									 reportURL = "https://" + tenant.getTenantUrl() + "customreport2/" + tenant.getTenantName() + "/ISU_Verify_Global/" + "Payment_Election_Option?Employee!WID=" + WID;
								 }
								 else if(tenant.getTenantName().equalsIgnoreCase("ibm10"))
								 {*/
									 reportURL = "https://" + tenant.getTenantUrl() + "customreport2/" + tenant.getTenantName() + "/ISU_Verify_Global/" + "Payment_Election_Option?Entry_Date_and_Time=2021-10-11T11:29:59.000-07:00&Employee!WID=" + WID;
								 //}
								 
								JSONArray jArr = createPaymentElectionOptionData(reportURL);
								if(jArr != null && jArr.length() >0)
								{
									defaultCurrencyArr = "";
									paymentCurrencyArr = "";
									payTypeArr = "";
									paymentTypeArr = "";
									for(int i = 0; i<jArr.length(); i++) 
							        {
										JSONObject objects = jArr.getJSONObject(i);
										defaultCurrency = objects.isNull("defaultCurrency")?"":objects.getString("defaultCurrency");
										if(defaultCurrencyArr.equals(""))
										{
											defaultCurrencyArr = defaultCurrency;
										}
										else
										{
											if(!defaultCurrency.isEmpty())
											{
												defaultCurrencyArr = defaultCurrencyArr + "~" + defaultCurrency;
											}
										}
										paymentCurrency = objects.isNull("paymentCurrency")?"":objects.getString("paymentCurrency");
										if(paymentCurrencyArr.equals(""))
										{
											paymentCurrencyArr = paymentCurrency;
										}
										else
										{
											paymentCurrencyArr = paymentCurrencyArr + "~" + paymentCurrency;
										}
										payType = objects.isNull("payType")?"":objects.getString("payType");
										if(payTypeArr.equals(""))
										{
											payTypeArr = payType;
										}
										else
										{
											payTypeArr = payTypeArr + "~" + payType;
										}
										paymentType = objects.isNull("paymentType")?"":objects.getString("paymentType");
										if(paymentTypeArr.equals(""))
										{
											paymentTypeArr = paymentType;
										}
										else
										{
											paymentTypeArr = paymentTypeArr + "~" + paymentType;
										}
							        }
								}
								else
								{
									defaultCurrencyArr = "";
									paymentCurrencyArr = "";
									payTypeArr = "";
									paymentTypeArr = "";
								}
		 
								 
								 ReportElement identificationData = reportElement.getChild("wd:Worker_Data")
								 			.getChild("wd:Personal_Data")
								 			.getChild("wd:Identification_Data");
								 
								 if(identificationData != null)
								 {												 											 
									 List<ReportElement> customIDList = identificationData.getChildren("wd:Custom_ID");
									 if(customIDList != null && customIDList.size() >0)
									 {
										 String expirationDate = "";
										 customIdNumber = "" ;
										 for(ReportElement customElement : customIDList)
										 {
											 ReportElement customIdData = customElement.getChild("wd:Custom_ID_Data");
											 if(customIdData != null)
											 {
												 expirationDate = customIdData.getChild("wd:Expiration_Date") != null?customIdData.getChild("wd:Expiration_Date").getValue().trim():"";
												 ReportElement customTypeRef = customIdData.getChild("wd:ID_Type_Reference");
												 if(customTypeRef != null)
												 {
													 List<ReportElement> customIdTypeData = customTypeRef.getChildren("wd:ID");								 
													 for(ReportElement idTypeElement:customIdTypeData)
													 {
														 customTypeMap = idTypeElement.getAllAttributes();
														 if(customTypeMap.get("wd:type").equals("Custom_ID_Type_ID"))
														 {
															 if(idTypeElement.getValue().trim().equalsIgnoreCase("Global_CNUM") && expirationDate.isEmpty())
															 {
																 customIdNumber = customIdData.getChild("wd:ID") != null?customIdData.getChild("wd:ID").getValue().trim():""; 
															 }
														 }
													 }
												 }												 
											 }
										 }
										 if(customIdNumber.isEmpty())
										 {
											 customIdNumber = "" ;
										 }
									 }
									 else
									 {
										 customIdNumber = "" ;
									 }
								 }
								 else
								 {
									 customIdNumber = "" ;										 
								 }										 										 									 
						}						        						        
			        }
				     headingFromSourceTenant = "Home_CNUM,Employee_ID,Default_Currency,Payment_Currency,Pay_Type,Payment_Type";
				     
		        	if(!customIdNumber.isEmpty())
					{
			        	headerStr = customIdNumber + "," + employeeId + "," + defaultCurrencyArr + "," + paymentCurrencyArr + "," + payTypeArr + "," + paymentTypeArr; 
			        	
			        	sourceTenantRowMap.put(customIdNumber, headerStr);							        	
			        	sourceTenantColumnList.add(customIdNumber);
			        	
			        	if(finalStr.equals(""))
						{
							 finalStr =  headingFromSourceTenant + "\n" + headerStr;
						}
						else
						{
							 finalStr = finalStr + "\n" + headerStr;
						}
					 }
		          }						 							 
			   }
			
				 System.out.println(finalStr);
				 sourceContent = finalStr.getBytes();						 
				 sourceCount = sourceTenantColumnList.size();
		    }
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		
	}

	private void createTemplateFromTargetTenantPaymentOption(Tenant tenant2, InputStream is, SOAPConnection soapConnection, String loadCycle, String ruleName, String client, Long userId) {
		
		wdCount = 0;
		headingFromTargetTenant = "";
		targetTenantRowMap.clear();
		targetTenantColumnList.clear();
		String xmlReqFile = null;
		try 
		{			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 xmlReqFile = requestfile.getAbsolutePath();
				 String outputfile = addHireIdList(xmlReqFile, newEmpList, ruleName, 0, newEmpList.size(), "Employee_ID");
				 is = new FileInputStream(outputfile);
			     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
			     SOAPPart soapPart = soapMessage.getSOAPPart();
			     SOAPEnvelope envelope = soapPart.getEnvelope();
				 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
				 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
				 {
					  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
					  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
				 }
				 soapMessage.saveChanges();
			     ByteArrayOutputStream out = new ByteArrayOutputStream();
			     soapMessage.writeTo(out);
			     String strMsg = new String(out.toByteArray());	
			     
			     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
			     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
				 soapConnection = soapConnectionFactory.createConnection();
				 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
				 out = new ByteArrayOutputStream();
				 soapResponse.writeTo(out);
				 strMsg = new String(out.toByteArray(), "utf-8");
		
				 ReportElement soapResp = XmlParserManager.parseXml(strMsg);
				 
				 ReportElement pageData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Results");
				 
				 String totalNoOfPages = pageData.getChild("wd:Total_Pages").getValue().trim();
				 String totalResults = pageData.getChild("wd:Total_Results").getValue().trim();
				 int totalResult = Integer.parseInt(totalResults);
				 System.out.println("totalNoOfPages-"+totalNoOfPages);
				 System.out.println("totalResult-"+totalResult);				 
				 
				 String employeeId = "";
				 String WID = "";
				 String employeeHireDate = "";				 
				 String customIdNumber = "";
				 String defaultCurrency = "";
				 String defaultCurrencyArr = "";
				 String paymentCurrency = "";
				 String paymentCurrencyArr = "";
				 String payType = "";
				 String payTypeArr = "";
				 String paymentType = "";
				 String paymentTypeArr = "";						 
				 String finalStr = "";
				 String headerStr = "";
				 
				 Map<String,String> customTypeMap = null;
				 Map<String,String> widMap = null;
				 
				 String reportURL = "";
				 int startIndex = 0;
				 int endIndex = 0;
				 
				 for (int j = 1; j <=Integer.parseInt(totalNoOfPages); j++) //
				 {
					 if(j == 1)
					 {
						startIndex = 0;
						if(999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = j*999;
						}
					 }
					 else
					 {
						startIndex = endIndex;
						if(j*999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = (j*999);
						}
					 }
					 outputfile = addHireIdList(xmlReqFile, newEmpList, ruleName, startIndex, endIndex, "Employee_ID");
					 is = new FileInputStream(outputfile);
				     soapMessage = MessageFactory.newInstance().createMessage(null, is);
				     soapPart = soapMessage.getSOAPPart();
				     envelope = soapPart.getEnvelope();
					 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
					 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
					 {
							envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
					 }
					 soapMessage.saveChanges();
			         out = new ByteArrayOutputStream();
			         soapMessage.writeTo(out);
			         strMsg = new String(out.toByteArray());
			        
			         soapConnectionFactory = SOAPConnectionFactory.newInstance();
					 soapConnection = soapConnectionFactory.createConnection();
			         soapResponse = soapConnection.call(soapMessage, sourceUrl);
			         out = new ByteArrayOutputStream();
			         soapResponse.writeTo(out);
			         strMsg = new String(out.toByteArray(), "utf-8");
			        
			         soapResp = XmlParserManager.parseXml(strMsg);
			        
			        ReportElement responseData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Data");
			        
			        List<ReportElement> applicantData = responseData.getChildren("wd:Worker");
			        for(ReportElement reportElement : applicantData)
					{
			        	ReportElement hireStatusData = reportElement.getChild("wd:Worker_Data")
					 			.getChild("wd:Employment_Data")
					 			.getChild("wd:Worker_Status_Data");
			        	
			        	employeeHireDate = hireStatusData.getChild("wd:Hire_Date") != null?hireStatusData.getChild("wd:Hire_Date").getValue().trim():"";					        	
			        	if(!employeeHireDate.equalsIgnoreCase(""))
			        	{
			        		Date empHireDate = convertWorkdayStringToDate(employeeHireDate);
			        		//if((empHireDate.equals(hireFromDate) || empHireDate.after(hireFromDate)) && (empHireDate.equals(hireToDate) || empHireDate.before(hireToDate)))
			        		{
					        	System.out.println("empHireDate--"+ empHireDate);
				        		ReportElement element1 = reportElement.getChild("wd:Worker_Data");
				        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
				        		System.out.println("employeeId--"+ employeeId);
				        		
				        		ReportElement widRef = reportElement.getChild("wd:Worker_Reference");
								 if(widRef != null)
								 {
									 List<ReportElement> idList = widRef.getChildren("wd:ID");
									 for(ReportElement idElement:idList)
									 {
										 widMap = idElement.getAllAttributes();
										 if(widMap.get("wd:type").equals("WID"))
										 {
											 WID = idElement.getValue().trim();
										 }
									 }
								 }
								 else
								 {
									 WID = "";
								 }
								 
								 /*if(tenant.getTenantName().equalsIgnoreCase("ibm6"))
								 {
									 reportURL = "https://" + tenant.getTenantUrl() + "customreport2/" + tenant.getTenantName() + "/ISU_Verify_Global/" + "Payment_Election_Option?Employee!WID=" + WID;
								 }
								 else if(tenant.getTenantName().equalsIgnoreCase("ibm10"))
								 {*/
									 reportURL = "https://" + tenant.getTenantUrl() + "customreport2/" + tenant.getTenantName() + "/ISU_Verify_Global/" + "Payment_Election_Option?Entry_Date_and_Time=2021-11-01T11:29:59.000-07:00&Employee!WID=" + WID;
								 //}
								 
								 JSONArray jArr = createPaymentElectionOptionData(reportURL);
									if(jArr != null && jArr.length() >0)
									{
										defaultCurrencyArr = "";
										paymentCurrencyArr = "";
										payTypeArr = "";
										paymentTypeArr = "";
										for(int i = 0; i<jArr.length(); i++) 
								        {
											JSONObject objects = jArr.getJSONObject(i);
											defaultCurrency = objects.isNull("defaultCurrency")?"":objects.getString("defaultCurrency");
											if(defaultCurrencyArr.equals(""))
											{
												defaultCurrencyArr = defaultCurrency;
											}
											else
											{
												if(!defaultCurrency.isEmpty())
												{
													defaultCurrencyArr = defaultCurrencyArr + "~" + defaultCurrency;
												}
											}
											paymentCurrency = objects.isNull("paymentCurrency")?"":objects.getString("paymentCurrency");
											if(paymentCurrencyArr.equals(""))
											{
												paymentCurrencyArr = paymentCurrency;
											}
											else
											{
												paymentCurrencyArr = paymentCurrencyArr + "~" + paymentCurrency;
											}
											payType = objects.isNull("payType")?"":objects.getString("payType");
											if(payTypeArr.equals(""))
											{
												payTypeArr = payType;
											}
											else
											{
												payTypeArr = payTypeArr + "~" + payType;
											}
											paymentType = objects.isNull("paymentType")?"":objects.getString("paymentType");
											if(paymentTypeArr.equals(""))
											{
												paymentTypeArr = paymentType;
											}
											else
											{
												paymentTypeArr = paymentTypeArr + "~" + paymentType;
											}
								        }
									}
									else
									{
										defaultCurrencyArr = "";
										paymentCurrencyArr = "";
										payTypeArr = "";
										paymentTypeArr = "";
									}
								 
								 ReportElement identificationData = reportElement.getChild("wd:Worker_Data")
								 			.getChild("wd:Personal_Data")
								 			.getChild("wd:Identification_Data");
								 
								 if(identificationData != null)
								 {										 
									 List<ReportElement> customIDList = identificationData.getChildren("wd:Custom_ID");
									 if(customIDList != null && customIDList.size() >0)
									 {
										 customIdNumber = "" ;
										 for(ReportElement customElement : customIDList)
										 {
											 ReportElement customIdData = customElement.getChild("wd:Custom_ID_Data");
											 if(customIdData != null)
											 {
												 ReportElement customTypeRef = customIdData.getChild("wd:ID_Type_Reference");
												 if(customTypeRef != null)
												 {
													 List<ReportElement> customIdTypeData = customTypeRef.getChildren("wd:ID");								 
													 for(ReportElement idTypeElement:customIdTypeData)
													 {
														 customTypeMap = idTypeElement.getAllAttributes();
														 if(customTypeMap.get("wd:type").equals("Custom_ID_Type_ID"))
														 {
															 if(idTypeElement.getValue().trim().equalsIgnoreCase("Previous_IBM_CNUM"))
															 {
																 customIdNumber = customIdData.getChild("wd:ID") != null?customIdData.getChild("wd:ID").getValue().trim():""; 
															 }
														 }
													 }
												 }
											 }
										 }
										 if(customIdNumber.isEmpty())
										 {
											 customIdNumber = "" ;
										 }
									 }
									 else
									 {
										 customIdNumber = "" ;
									 }
								 }
								 else
								 {
									 customIdNumber = "" ;
								 }								 								 								 
						}				        				        
			          }
			        	headingFromTargetTenant = "Home_CNUM,Employee_ID,Default_Currency,Payment_Currency,Pay_Type,Payment_Type";
					     
			        	if(!customIdNumber.isEmpty())
						{
				        	headerStr = customIdNumber + "," + employeeId + "," + defaultCurrencyArr + "," + paymentCurrencyArr + "," + payTypeArr + "," + paymentTypeArr; 
				        	
				        	
			        	 targetTenantRowMap.put(customIdNumber, headerStr);
			        	 targetTenantColumnList.add(customIdNumber);
			        	 
						 if(finalStr.equals(""))
						 {
							 finalStr =  headingFromTargetTenant + "\n" + headerStr;
						 }
						 else
						 {
							 finalStr = finalStr + "\n" + headerStr;
						 }
					 }
				   }						 							 
			     }
				 System.out.println(finalStr);
				 targetContent = finalStr.getBytes();
				 wdCount = targetTenantColumnList.size();
		   }
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		
	}
	
	private JSONArray createPaymentElectionOptionData(String reportURL) throws JSONException {
		
		JSONArray jArr = new JSONArray();
		DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilder dBuilder;
		XPath xPath = XPathFactory.newInstance().newXPath();
		HttpBasicAuthentication httpBasicAuthentication = new HttpBasicAuthentication();
		String output = httpBasicAuthentication.getWithBasicAuthentication(reportURL, tenant.getTenantUser(), tenant.getTenantUserPassword());
		Reader reader1 = new StringReader(output);
		Document doc;
		try 
		{
			dBuilder = dbFactory.newDocumentBuilder();
			doc = dBuilder.parse(new InputSource(reader1));
			doc.getDocumentElement().normalize();
			String expression = EMPLOYEE_APPLICANT_MAPPING_RESPONSE_EXPRESSION;
			NodeList nodeList = (NodeList) xPath.compile(expression).evaluate(doc, XPathConstants.NODESET);
			for (int i = 0; i < nodeList.getLength(); i++) 
			{
				try 
				{
					jArr = parseNodesForPaymentElectionOption(nodeList);
				} 
				catch (DOMException e)
				{
					e.printStackTrace();
				}
			}			
		} 
		catch (SAXException e) 
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (XPathExpressionException e) 
		{
			e.printStackTrace();
		} 
		catch (ParserConfigurationException e) 
		{
			e.printStackTrace();
		}
		return jArr;
	}
	
	private JSONArray parseNodesForPaymentElectionOption(NodeList nodeList) throws JSONException {

		JSONArray details = new JSONArray();
		for (int i = 0; i < nodeList.getLength(); i++) 
		{
		    Node nNode = nodeList.item(i);
		    if (nNode.getNodeName().equals("wd:Report_Data")) 
		    {
				if (nNode.getNodeType() == Node.ELEMENT_NODE) 
				{
					Element eElement = (Element) nNode;
					if (eElement.hasChildNodes()) 
					{
						NodeList childNodes = eElement.getChildNodes();
						for (int j = 0; j < childNodes.getLength(); j++) 
						{
							Node aChildNode = childNodes.item(j);
							if (aChildNode.getNodeName().equals("wd:Report_Entry")) 
							{
								Element eElementEntry = (Element) aChildNode;
								if (eElement.hasChildNodes()) 
								{
									NodeList childNodesEntry = eElementEntry.getChildNodes();
									for (int k = 0; k < childNodesEntry.getLength(); k++) 
									{										
										Node aChildNodeEntry = childNodesEntry.item(k);
										JSONObject obj = new JSONObject();
										if(aChildNodeEntry.getNodeName().equals("wd:Payment_Election_Option_group"))
										{
											Element eElemEntry = (Element) aChildNodeEntry;
											if (eElementEntry.hasChildNodes()) 
											{												
												NodeList childNodesEnt = eElemEntry.getChildNodes();
												for (int l = 0; l < childNodesEnt.getLength(); l++) 
												{													
													Node nChildNodeEntry = childNodesEnt.item(l);
													if(nChildNodeEntry.getNodeName().equals("wd:Default_Currency"))
													{
														String defCurrVal = nChildNodeEntry.getAttributes().getNamedItem("wd:Descriptor").toString();
														String defCurrencyVal = defCurrVal.replaceAll("\"", "");
														int pos = defCurrencyVal.trim().indexOf("=") + 1;
														String actualDefCurrencyVal = defCurrencyVal.substring(pos, defCurrencyVal.length());
														obj.put("defaultCurrency", actualDefCurrencyVal);	
													}													
												}
											}
										}
										else if(aChildNodeEntry.getNodeName().equals("wd:Payment_Election_Option_Lines_group"))
										{
											Element eElemEntry = (Element) aChildNodeEntry;
											if (eElementEntry.hasChildNodes()) 
											{												
												NodeList childNodesEnt = eElemEntry.getChildNodes();
												for (int l = 0; l < childNodesEnt.getLength(); l++) 
												{													
													Node nChildNodeEntry = childNodesEnt.item(l);
													if(nChildNodeEntry.getNodeName().equals("wd:Currency"))
													{
														String payCurrVal = nChildNodeEntry.getAttributes().getNamedItem("wd:Descriptor").toString();
														String payCurrencyVal = payCurrVal.replaceAll("\"", "");
														int pos = payCurrencyVal.trim().indexOf("=") + 1;
														String actualPayCurrencyVal = payCurrencyVal.substring(pos, payCurrencyVal.length());
														obj.put("paymentCurrency", actualPayCurrencyVal);	
													}
													else if(nChildNodeEntry.getNodeName().equals("wd:Pay_Type"))
													{
														String payTypVal = nChildNodeEntry.getAttributes().getNamedItem("wd:Descriptor").toString();
														String payTypeVal = payTypVal.replaceAll("\"", "");
														int pos = payTypeVal.trim().indexOf("=") + 1;
														String actualPayTypeVal = payTypeVal.substring(pos, payTypeVal.length());
														obj.put("payType", actualPayTypeVal);	
													}
													else if(nChildNodeEntry.getNodeName().equals("wd:Payment_Type"))
													{
														String paymentTypVal = nChildNodeEntry.getAttributes().getNamedItem("wd:Descriptor").toString();
														String paymentTypeVal = paymentTypVal.replaceAll("\"", "");
														int pos = paymentTypeVal.trim().indexOf("=") + 1;
														String actualPaymentTypeVal = paymentTypeVal.substring(pos, paymentTypeVal.length());
														obj.put("paymentType", actualPaymentTypeVal);	
													}	
												}
											}
										}
										details.put(obj);
									}
								}
							}
						}
					}
				}
		    }
		}
		return details;
	}

	private void createTemplateFromSourceTenantLeave(Tenant tenant, InputStream is, SOAPConnection soapConnection, String loadCycle, String ruleName, String client, Long userId) {
		
		sourceCount = 0;
		headingFromSourceTenant = "";
		sourceTenantRowMap.clear();
		sourceTenantColumnList.clear();
		errorList.clear();
		String xmlReqFile = null;
		try 
		{			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 xmlReqFile = requestfile.getAbsolutePath();
				 String outputfile = addHireIdList(xmlReqFile, oldEmpList, ruleName, 0, oldEmpList.size(), "Employee_ID");
				 is = new FileInputStream(outputfile);
			     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
			     SOAPPart soapPart = soapMessage.getSOAPPart();
			     SOAPEnvelope envelope = soapPart.getEnvelope();
				 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
				 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
				 {
					  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
					  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
				 }
				 soapMessage.saveChanges();
			     ByteArrayOutputStream out = new ByteArrayOutputStream();
			     soapMessage.writeTo(out);
			     String strMsg = new String(out.toByteArray());	
			     
			     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
			     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
				 soapConnection = soapConnectionFactory.createConnection();
				 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
				 out = new ByteArrayOutputStream();
				 soapResponse.writeTo(out);
				 strMsg = new String(out.toByteArray(), "utf-8");

				 ReportElement soapResp = XmlParserManager.parseXml(strMsg);
				 
				 ReportElement pageData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Results");
				 
				 String totalNoOfPages = pageData.getChild("wd:Total_Pages").getValue().trim();
				 String totalResults = pageData.getChild("wd:Total_Results").getValue().trim();
				 int totalResult = Integer.parseInt(totalResults);
				 System.out.println("totalNoOfPages-"+totalNoOfPages);
				 System.out.println("totalResult-"+totalResult);						 
				 
				 String employeeId = "";
				 String empTerminationDate = "";
				 String leaveTypeName = "";
				 String leaveDesc = "";
				 String lastDayOfWork = "";
				 String firstDayOfLeave = "";
				 String estLastDayOfLeave = "";
				 String firstDayOfWork = "";
				 String lastDayOfLeave = "";
				 String lastDateForWhichPaid = "";
				 String expectedDueDate = "";
				 String childsBirthDate = "";
				 String stillbirthBabyDeceased = "";
				 String babyArrivalHomeDate = "";
				 String adoptionPlacementDate = "";
				 String childEnteredCountryDate = "";
				 String multipleChildIndicator = "";
				 String noOfBabiesAdopted = "";
				 String noOfPreviousBirth = "";
				 String noOfPreviousMaternityLeaves = "";
				 String noOfChildDependents = "";
				 String singleParentIndicator = "";
				 String ageOfDependent = "";
				 String lastDateForWhichPaidArr = "";
				 String expectedDueDateArr = "";
				 String childsBirthDateArr = "";
				 String stillbirthBabyDeceasedArr = "";
				 String babyArrivalHomeDateArr = "";
				 String adoptionPlacementDateArr = "";
				 String childEnteredCountryDateArr = "";
				 String multipleChildIndicatorArr = "";
				 String noOfBabiesAdoptedArr = "";
				 String noOfPreviousBirthArr = "";
				 String noOfPreviousMaternityLeavesArr = "";
				 String noOfChildDependentsArr = "";
				 String singleParentIndicatorArr = "";
				 String ageOfDependentArr = "";
				 String leaveTypeNameArr = "";
				 String leaveDescArr = "";
				 String lastDayOfWorkArr = "";
				 String firstDayOfLeaveArr = "";
				 String estLastDayOfLeaveArr = "";
				 String firstDayOfWorkArr = "";
				 String lastDayOfLeaveArr = "";				 
				 String customIdNumber = "";
					 
				 String finalStr = "";
				 String headerStr = "";
				 
				 Map<String,String> customTypeMap = null;
				 Map<String,String> leaveMap = null;

				 int startIndex = 0;
				 int endIndex = 0;
				 
				 for (int j = 1; j <=Integer.parseInt(totalNoOfPages); j++) //
				 {
					 if(j == 1)
					 {
						startIndex = 0;
						if(999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = j*999;
						}
					 }
					 else
					 {
						startIndex = endIndex;
						if(j*999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = (j*999);
						}
					 }
					 outputfile = addHireIdList(xmlReqFile, oldEmpList, ruleName, startIndex, endIndex, "Employee_ID");
					 is = new FileInputStream(outputfile);
				     soapMessage = MessageFactory.newInstance().createMessage(null, is);
				     soapPart = soapMessage.getSOAPPart();
				     envelope = soapPart.getEnvelope();
					 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
					 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
					 {
							envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
					 }
					 soapMessage.saveChanges();
			         out = new ByteArrayOutputStream();
			         soapMessage.writeTo(out);
			         strMsg = new String(out.toByteArray());
			        
			         soapConnectionFactory = SOAPConnectionFactory.newInstance();
					 soapConnection = soapConnectionFactory.createConnection();
			         soapResponse = soapConnection.call(soapMessage, sourceUrl);
			         out = new ByteArrayOutputStream();
			         soapResponse.writeTo(out);
			         strMsg = new String(out.toByteArray(), "utf-8");
			        
			         soapResp = XmlParserManager.parseXml(strMsg);
			        
			        ReportElement responseData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Data");
			        
			        List<ReportElement> applicantData = responseData.getChildren("wd:Worker");
			        for(ReportElement reportElement : applicantData)
					{
			        	ReportElement terminationStatusData = reportElement.getChild("wd:Worker_Data")
					 			.getChild("wd:Employment_Data")
					 			.getChild("wd:Worker_Status_Data");
			        	
			        	empTerminationDate = terminationStatusData.getChild("wd:Termination_Date") != null?terminationStatusData.getChild("wd:Termination_Date").getValue().trim():"";					        	
			        	//if(!empTerminationDate.equalsIgnoreCase(""))
			        	{
			        		//Date termDate = convertWorkdayStringToDate(empTerminationDate);
			        		//if((termDate.equals(termFromDate) || termDate.after(termFromDate)) && (termDate.equals(termToDate) || termDate.before(termToDate)))
			        		{
					        	//System.out.println("empTerminationDate--"+ termDate);
				        		ReportElement element1 = reportElement.getChild("wd:Worker_Data");
				        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
				        		System.out.println("employeeId--"+ employeeId);
				        		
				        		
								 
								 List<ReportElement> leaveData = reportElement.getChild("wd:Worker_Data")
								 			.getChild("wd:Employment_Data")
								 			.getChild("wd:Worker_Status_Data")
								 			.getChildren("wd:Leave_Status_Data");
								 
								 if(leaveData != null && leaveData.size() >0)
								 {
									 leaveTypeNameArr = "";
									 leaveDescArr = "";
									 lastDayOfWorkArr = "";
									 firstDayOfLeaveArr = "";
									 estLastDayOfLeaveArr = "";
									 firstDayOfWorkArr = "";
									 lastDayOfLeaveArr = "";
									 lastDateForWhichPaidArr = "";
									 expectedDueDateArr = "";
									 childsBirthDateArr = "";
									 stillbirthBabyDeceasedArr = "";
									 babyArrivalHomeDateArr = "";
									 adoptionPlacementDateArr = "";
									 childEnteredCountryDateArr = "";
									 multipleChildIndicatorArr = "";
									 noOfBabiesAdoptedArr = "";
									 noOfPreviousBirthArr = "";
									 noOfPreviousMaternityLeavesArr = "";
									 noOfChildDependentsArr = "";
									 singleParentIndicatorArr = "";
									 ageOfDependentArr = "";
									 for(ReportElement leaveElement : leaveData)
									 {
										 ReportElement element2 = leaveElement.getChild("wd:Leave_of_Absence_Type_Reference");
										 if(element2 != null)
										 {
											 List<ReportElement> leaveTypeData = element2.getChildren("wd:ID");								 
											 for(ReportElement leaveTypeElement:leaveTypeData)
											 {
												 leaveMap = leaveTypeElement.getAllAttributes();
												 if(leaveMap.get("wd:type").equals("Leave_of_Absence_Type_ID"))
												 {
													 leaveTypeName = leaveTypeElement.getValue().trim();
													 if(leaveTypeName.contains(","))
													 {
														 leaveTypeName = leaveTypeName.replaceAll(",", "|");														 
													 }
													 if(leaveTypeNameArr.equals(""))
													 {
														 leaveTypeNameArr = leaveTypeName;
													 }
													 else
													 {
														 if(!leaveTypeName.equals(""))
														 {
															 leaveTypeNameArr = leaveTypeNameArr + "~" + leaveTypeName;
														 }
													 }
												 }
											 }
										 }
										 
										 leaveDesc = leaveElement.getChild("wd:Leave_Request_Description") != null?leaveElement.getChild("wd:Leave_Request_Description").getValue().trim():"";
										 if(leaveDesc.contains(","))
										 {
											 leaveDesc = leaveDesc.replaceAll(",", "|");
										 }
										 if(leaveDescArr.equals(""))
										 {
											 leaveDescArr = leaveDesc;
										 }
										 else
										 {
											 if(!leaveDesc.equals(""))
											 {
												 leaveDescArr = leaveDescArr + "~" + leaveDesc;
											 }
										 }
										 lastDayOfWork = leaveElement.getChild("wd:Leave_Last_Day_of_Work") != null?leaveElement.getChild("wd:Leave_Last_Day_of_Work").getValue().trim():"";
										 if(lastDayOfWorkArr.equals(""))
										 {
											 lastDayOfWorkArr = lastDayOfWork;
										 }
										 else
										 {
											 if(!lastDayOfWork.equals(""))
											 {
												 lastDayOfWorkArr = lastDayOfWorkArr + "~" + lastDayOfWork;
											 }
										 }
										 firstDayOfLeave = leaveElement.getChild("wd:Leave_Start_Date") != null?leaveElement.getChild("wd:Leave_Start_Date").getValue().trim():"";
										 if(firstDayOfLeaveArr.equals(""))
										 {
											 firstDayOfLeaveArr = firstDayOfLeave;
										 }
										 else
										 {
											 if(!firstDayOfLeave.equals(""))
											 {
												 firstDayOfLeaveArr = firstDayOfLeaveArr + "~" + firstDayOfLeave;
											 }
										 }
										 estLastDayOfLeave = leaveElement.getChild("wd:Estimated_Leave_End_Date") != null?leaveElement.getChild("wd:Estimated_Leave_End_Date").getValue().trim():"";
										 if(estLastDayOfLeaveArr.equals(""))
										 {
											 estLastDayOfLeaveArr = estLastDayOfLeave;
										 }
										 else
										 {
											 if(!estLastDayOfLeave.equals(""))
											 {
												 estLastDayOfLeaveArr = estLastDayOfLeaveArr + "~" + estLastDayOfLeave;
											 }
										 }
										 firstDayOfWork = leaveElement.getChild("wd:First_Day_Of_Work") != null?leaveElement.getChild("wd:First_Day_Of_Work").getValue().trim():"";
										 if(firstDayOfWorkArr.equals(""))
										 {
											 firstDayOfWorkArr = firstDayOfWork;
										 }
										 else
										 {
											 if(!firstDayOfWork.equals(""))
											 {
												 firstDayOfWorkArr = firstDayOfWorkArr + "~" + firstDayOfWork;
											 }
										 }
										 lastDayOfLeave = leaveElement.getChild("wd:Leave_End_Date") != null?leaveElement.getChild("wd:Leave_End_Date").getValue().trim():"";
										 if(lastDayOfLeaveArr.equals(""))
										 {
											 lastDayOfLeaveArr = lastDayOfLeave;
										 }
										 else
										 {
											 if(!lastDayOfLeave.equals(""))
											 {
												 lastDayOfLeaveArr = lastDayOfLeaveArr + "~" + lastDayOfLeave;
											 }
										 }
										 
										 ReportElement leaveAdditionalData = leaveElement.getChild("wd:Leave_Request_Additional_Fields");
										 if(leaveAdditionalData != null)
										 {
											 lastDateForWhichPaid = leaveAdditionalData.getChild("wd:Last_Date_for_Which_Paid") != null?leaveAdditionalData.getChild("wd:Last_Date_for_Which_Paid").getValue().trim():"";
											 if(lastDateForWhichPaidArr.equals(""))
											 {
												 lastDateForWhichPaidArr = lastDateForWhichPaid;
											 }
											 else
											 {
												 if(!lastDateForWhichPaid.equals(""))
												 {
													 lastDateForWhichPaidArr = lastDateForWhichPaidArr + "~" + lastDateForWhichPaid;
												 }
											 }
											 expectedDueDate = leaveAdditionalData.getChild("wd:Expected_Due_Date") != null?leaveAdditionalData.getChild("wd:Expected_Due_Date").getValue().trim():"";
											 if(expectedDueDateArr.equals(""))
											 {
												 expectedDueDateArr = expectedDueDate;
											 }
											 else
											 {
												 if(!expectedDueDate.equals(""))
												 {
													 expectedDueDateArr = expectedDueDateArr + "~" + expectedDueDate;
												 }
											 }
											 childsBirthDate = leaveAdditionalData.getChild("wd:Child_s_Birth_Date") != null?leaveAdditionalData.getChild("wd:Child_s_Birth_Date").getValue().trim():"";
											 if(childsBirthDateArr.equals(""))
											 {
												 childsBirthDateArr = childsBirthDate;
											 }
											 else
											 {
												 if(!childsBirthDate.equals(""))
												 {
													 childsBirthDateArr = childsBirthDateArr + "~" + childsBirthDate;
												 }
											 }
											 stillbirthBabyDeceased = leaveAdditionalData.getChild("wd:Stillbirth_Baby_Deceased") != null?leaveAdditionalData.getChild("wd:Stillbirth_Baby_Deceased").getValue().trim():"";
											 if(stillbirthBabyDeceased.equalsIgnoreCase("1"))
											 {
												 stillbirthBabyDeceased = "true";
											 }
											 else
											 {
												 stillbirthBabyDeceased = "false";
											 }
											 if(stillbirthBabyDeceasedArr.equals(""))
											 {
												 stillbirthBabyDeceasedArr = stillbirthBabyDeceased;
											 }
											 else
											 {
												 if(!stillbirthBabyDeceased.equals(""))
												 {
													 stillbirthBabyDeceasedArr = stillbirthBabyDeceasedArr + "~" + stillbirthBabyDeceased;
												 }
											 }
											 babyArrivalHomeDate = leaveAdditionalData.getChild("wd:Date_Baby_Arrived_Home_From_Hospital") != null?leaveAdditionalData.getChild("wd:Date_Baby_Arrived_Home_From_Hospital").getValue().trim():"";
											 if(babyArrivalHomeDateArr.equals(""))
											 {
												 babyArrivalHomeDateArr = babyArrivalHomeDate;
											 }
											 else
											 {
												 if(!babyArrivalHomeDate.equals(""))
												 {
													 babyArrivalHomeDateArr = babyArrivalHomeDateArr + "~" + babyArrivalHomeDate;
												 }
											 }
											 adoptionPlacementDate = leaveAdditionalData.getChild("wd:Adoption_Placement_Date") != null?leaveAdditionalData.getChild("wd:CAdoption_Placement_Date").getValue().trim():"";
											 if(adoptionPlacementDateArr.equals(""))
											 {
												 adoptionPlacementDateArr = adoptionPlacementDate;
											 }
											 else
											 {
												 if(!adoptionPlacementDate.equals(""))
												 {
													 adoptionPlacementDateArr = adoptionPlacementDateArr + "~" + adoptionPlacementDate;
												 }
											 }
											 multipleChildIndicator = leaveAdditionalData.getChild("wd:Multiple_Child_Indicator") != null?leaveAdditionalData.getChild("wd:Multiple_Child_Indicator").getValue().trim():"";
											 if(multipleChildIndicator.equalsIgnoreCase("1"))
											 {
												 multipleChildIndicator = "true";
											 }
											 else
											 {
												 multipleChildIndicator = "false";
											 }
											 if(multipleChildIndicatorArr.equals(""))
											 {
												 multipleChildIndicatorArr = multipleChildIndicator;
											 }
											 else
											 {
												 if(!multipleChildIndicator.equals(""))
												 {
													 multipleChildIndicatorArr = multipleChildIndicatorArr + "~" + multipleChildIndicator;
												 }
											 }
											 noOfBabiesAdopted = leaveAdditionalData.getChild("wd:Number_of_Babies_Adopted_Children") != null?leaveAdditionalData.getChild("wd:Number_of_Babies_Adopted_Children").getValue().trim():"";
											 if(noOfBabiesAdoptedArr.equals(""))
											 {
												 noOfBabiesAdoptedArr = noOfBabiesAdopted;
											 }
											 else
											 {
												 if(!noOfBabiesAdopted.equals(""))
												 {
													 noOfBabiesAdoptedArr = noOfBabiesAdoptedArr + "~" + noOfBabiesAdopted;
												 }
											 }
											 childEnteredCountryDate = leaveAdditionalData.getChild("wd:Date_Child_Entered_Country") != null?leaveAdditionalData.getChild("wd:Date_Child_Entered_Country").getValue().trim():"";
											 if(childEnteredCountryDateArr.equals(""))
											 {
												 childEnteredCountryDateArr = childEnteredCountryDate;
											 }
											 else
											 {
												 if(!childEnteredCountryDate.equals(""))
												 {
													 childEnteredCountryDateArr = childEnteredCountryDateArr + "~" + childEnteredCountryDate;
												 }
											 }
											 noOfPreviousBirth = leaveAdditionalData.getChild("wd:Number_of_Previous_Births") != null?leaveAdditionalData.getChild("wd:Number_of_Previous_Births").getValue().trim():"";
											 if(noOfPreviousBirthArr.equals(""))
											 {
												 noOfPreviousBirthArr = noOfPreviousBirth;
											 }
											 else
											 {
												 if(!noOfPreviousBirth.equals(""))
												 {
													 noOfPreviousBirthArr = noOfPreviousBirthArr + "~" + noOfPreviousBirth;
												 }
											 }
											 noOfPreviousMaternityLeaves = leaveAdditionalData.getChild("wd:Number_of_Previous_Maternity_Leaves") != null?leaveAdditionalData.getChild("wd:Number_of_Previous_Maternity_Leaves").getValue().trim():"";
											 if(noOfPreviousMaternityLeavesArr.equals(""))
											 {
												 noOfPreviousMaternityLeavesArr = noOfPreviousMaternityLeaves;
											 }
											 else
											 {
												 if(!noOfPreviousMaternityLeaves.equals(""))
												 {
													 noOfPreviousMaternityLeavesArr = noOfPreviousMaternityLeavesArr + "~" + noOfPreviousMaternityLeaves;
												 }
											 }
											 noOfChildDependents = leaveAdditionalData.getChild("wd:Number_of_Child_Dependents") != null?leaveAdditionalData.getChild("wd:Number_of_Child_Dependents").getValue().trim():"";
											 if(noOfChildDependentsArr.equals(""))
											 {
												 noOfChildDependentsArr = noOfChildDependents;
											 }
											 else
											 {
												 if(!noOfChildDependents.equals(""))
												 {
													 noOfChildDependentsArr = noOfChildDependentsArr + "~" + noOfChildDependents;
												 }
											 }
											 singleParentIndicator = leaveAdditionalData.getChild("wd:Single_Parent_Indicator") != null?leaveAdditionalData.getChild("wd:Single_Parent_Indicator").getValue().trim():"";
											 if(singleParentIndicator.equalsIgnoreCase("1"))
											 {
												 singleParentIndicator = "true";
											 }
											 else
											 {
												 singleParentIndicator = "false";
											 }
											 if(singleParentIndicatorArr.equals(""))
											 {
												 singleParentIndicatorArr = singleParentIndicator;
											 }
											 else
											 {
												 if(!singleParentIndicator.equals(""))
												 {
													 singleParentIndicatorArr = singleParentIndicatorArr + "~" + singleParentIndicator;
												 }
											 }
											 ageOfDependent = leaveAdditionalData.getChild("wd:Age_of_Dependent") != null?leaveAdditionalData.getChild("wd:Age_of_Dependent").getValue().trim():"";
											 if(ageOfDependentArr.equals(""))
											 {
												 ageOfDependentArr = ageOfDependent;
											 }
											 else
											 {
												 if(!ageOfDependent.equals(""))
												 {
													 ageOfDependentArr = ageOfDependentArr + "~" + ageOfDependent;
												 }
											 }
										 }
										 else
										 {
											 lastDateForWhichPaidArr = "";
											 expectedDueDateArr = "";
											 childsBirthDateArr = "";
											 stillbirthBabyDeceasedArr = "";
											 babyArrivalHomeDateArr = "";
											 adoptionPlacementDateArr = "";
											 childEnteredCountryDateArr = "";
											 multipleChildIndicatorArr = "";
											 noOfBabiesAdoptedArr = "";
											 noOfPreviousBirthArr = "";
											 noOfPreviousMaternityLeavesArr = "";
											 noOfChildDependentsArr = "";
											 singleParentIndicatorArr = "";
											 ageOfDependentArr = "";
										 }
									 }
								 }
								 else
								 {
									 leaveTypeNameArr = "";
									 leaveDescArr = "";
									 lastDayOfWorkArr = "";
									 firstDayOfLeaveArr = "";
									 estLastDayOfLeaveArr = "";
									 firstDayOfWorkArr = "";
									 lastDayOfLeaveArr = "";
									 lastDateForWhichPaidArr = "";
									 expectedDueDateArr = "";
									 childsBirthDateArr = "";
									 stillbirthBabyDeceasedArr = "";
									 babyArrivalHomeDateArr = "";
									 adoptionPlacementDateArr = "";
									 childEnteredCountryDateArr = "";
									 multipleChildIndicatorArr = "";
									 noOfBabiesAdoptedArr = "";
									 noOfPreviousBirthArr = "";
									 noOfPreviousMaternityLeavesArr = "";
									 noOfChildDependentsArr = "";
									 singleParentIndicatorArr = "";
									 ageOfDependentArr = "";
								 }
								 
								 ReportElement identificationData = reportElement.getChild("wd:Worker_Data")
								 			.getChild("wd:Personal_Data")
								 			.getChild("wd:Identification_Data");
								 
								 if(identificationData != null)
								 {												 											 
									 List<ReportElement> customIDList = identificationData.getChildren("wd:Custom_ID");
									 if(customIDList != null && customIDList.size() >0)
									 {
										 String expirationDate = "";
										 customIdNumber = "" ;
										 for(ReportElement customElement : customIDList)
										 {
											 ReportElement customIdData = customElement.getChild("wd:Custom_ID_Data");
											 if(customIdData != null)
											 {
												 expirationDate = customIdData.getChild("wd:Expiration_Date") != null?customIdData.getChild("wd:Expiration_Date").getValue().trim():"";
												 ReportElement customTypeRef = customIdData.getChild("wd:ID_Type_Reference");
												 if(customTypeRef != null)
												 {
													 List<ReportElement> customIdTypeData = customTypeRef.getChildren("wd:ID");								 
													 for(ReportElement idTypeElement:customIdTypeData)
													 {
														 customTypeMap = idTypeElement.getAllAttributes();
														 if(customTypeMap.get("wd:type").equals("Custom_ID_Type_ID"))
														 {
															 if(idTypeElement.getValue().trim().equalsIgnoreCase("Global_CNUM") && expirationDate.isEmpty())
															 {
																 customIdNumber = customIdData.getChild("wd:ID") != null?customIdData.getChild("wd:ID").getValue().trim():"";
															 }
														 }
													 }
												 }
											 }
										 }
										 if(customIdNumber.isEmpty())
										 {
											 customIdNumber = "" ;
										 }
									 }
									 else
									 {
										 customIdNumber = "" ;
									 }
								 }
								 else
								 {
									 customIdNumber = "" ;											 
								 }										 										 									 
						}						        						        
			        }
				     headingFromSourceTenant = "Home_CNUM,Employee_ID,Leave_of_Absence_Type,Leave_Request_Description,Leave_Last_Day_of_Work,"
			        			+ "Leave_Start_Date,Estimated_Leave_End_Date,First_Day_Of_Work,Leave_End_Date,Last_Date_For_Which_Paid,Expected_Due_Date,Child_s_Birth_Date,Stillbirth_Baby_Deceased,"
			        			+ "Date_Baby_Arrived_Home_From_Hospital,Adoption_Placement_Date,Date_Child_Entered_Country,Multiple_Child_Indicator,Number_of_Babies_Adopted_Children,"
			        			+ "Number_of_Previous_Births,Number_of_Previous_Maternity_Leaves,Number_of_Child_Dependents,Single_Parent_Indicator,Age_of_Dependent";
				     
		        	if(!customIdNumber.isEmpty())
					{
			        	headerStr = customIdNumber + "," + employeeId +
						 		 "," + leaveTypeNameArr + "," + leaveDescArr + "," +  lastDayOfWorkArr + "," + firstDayOfLeaveArr + "," + estLastDayOfLeaveArr + "," + firstDayOfWorkArr + "," + lastDayOfLeaveArr +
						 		 "," + lastDateForWhichPaidArr + "," + expectedDueDateArr + "," + childsBirthDateArr + "," + stillbirthBabyDeceasedArr + "," + babyArrivalHomeDateArr + "," + adoptionPlacementDateArr +
						 		 "," + childEnteredCountryDateArr + "," + multipleChildIndicatorArr + "," + noOfBabiesAdoptedArr + "," + noOfPreviousBirthArr + "," + noOfPreviousMaternityLeavesArr + "," + noOfChildDependentsArr +
						 		 "," + singleParentIndicatorArr + "," + ageOfDependentArr; 
			        	
			        	sourceTenantRowMap.put(customIdNumber, headerStr);							        	
			        	sourceTenantColumnList.add(customIdNumber);
			        	
			        	if(finalStr.equals(""))
						{
							 finalStr =  headingFromSourceTenant + "\n" + headerStr;
						}
						else
						{
							 finalStr = finalStr + "\n" + headerStr;
						}
					 }
		          }						 							 
			   }
			
				 System.out.println(finalStr);
				 sourceContent = finalStr.getBytes();						 
				 sourceCount = sourceTenantColumnList.size();
		    }
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
	}

	private void createTemplateFromTargetTenantLeave(Tenant tenant, InputStream is, SOAPConnection soapConnection,
			String loadCycle, String ruleName, String client, Long userId) {

			wdCount = 0;
			headingFromTargetTenant = "";
			targetTenantRowMap.clear();
			targetTenantColumnList.clear();
			String xmlReqFile = null;
			try 
			{			 
				 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
				 if(getRequest != null)
				 {
					 byte[] requestFileContent = getRequest.getRequestXMLContent();
					 File requestfile = null;
					 try 
					 {
						 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
						 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
					 } 
					 catch (IOException e1) 
					 {
					     e1.printStackTrace();
					 }
					 xmlReqFile = requestfile.getAbsolutePath();
					 String outputfile = addHireIdList(xmlReqFile, newEmpList, ruleName, 0, newEmpList.size(), "Employee_ID");
					 is = new FileInputStream(outputfile);
				     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
				     SOAPPart soapPart = soapMessage.getSOAPPart();
				     SOAPEnvelope envelope = soapPart.getEnvelope();
					 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
					 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
					 {
						  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
						  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
					 }
					 soapMessage.saveChanges();
				     ByteArrayOutputStream out = new ByteArrayOutputStream();
				     soapMessage.writeTo(out);
				     String strMsg = new String(out.toByteArray());	
				     
				     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
				     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
					 soapConnection = soapConnectionFactory.createConnection();
					 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
					 out = new ByteArrayOutputStream();
					 soapResponse.writeTo(out);
					 strMsg = new String(out.toByteArray(), "utf-8");
			
					 ReportElement soapResp = XmlParserManager.parseXml(strMsg);
					 
					 ReportElement pageData = soapResp.getChild("env:Body")
								.getChild("wd:Get_Workers_Response")
								.getChild("wd:Response_Results");
					 
					 String totalNoOfPages = pageData.getChild("wd:Total_Pages").getValue().trim();
					 String totalResults = pageData.getChild("wd:Total_Results").getValue().trim();
					 int totalResult = Integer.parseInt(totalResults);
					 System.out.println("totalNoOfPages-"+totalNoOfPages);
					 System.out.println("totalResult-"+totalResult);				 
					 
					 String employeeId = "";
					 String employeeHireDate = "";
					 String leaveTypeName = "";
					 String leaveDesc = "";
					 String lastDayOfWork = "";
					 String firstDayOfLeave = "";
					 String estLastDayOfLeave = "";
					 String firstDayOfWork = "";
					 String lastDayOfLeave = "";
					 String lastDateForWhichPaid = "";
					 String expectedDueDate = "";
					 String childsBirthDate = "";
					 String stillbirthBabyDeceased = "";
					 String babyArrivalHomeDate = "";
					 String adoptionPlacementDate = "";
					 String childEnteredCountryDate = "";
					 String multipleChildIndicator = "";
					 String noOfBabiesAdopted = "";
					 String noOfPreviousBirth = "";
					 String noOfPreviousMaternityLeaves = "";
					 String noOfChildDependents = "";
					 String singleParentIndicator = "";
					 String ageOfDependent = "";
					 String lastDateForWhichPaidArr = "";
					 String expectedDueDateArr = "";
					 String childsBirthDateArr = "";
					 String stillbirthBabyDeceasedArr = "";
					 String babyArrivalHomeDateArr = "";
					 String adoptionPlacementDateArr = "";
					 String childEnteredCountryDateArr = "";
					 String multipleChildIndicatorArr = "";
					 String noOfBabiesAdoptedArr = "";
					 String noOfPreviousBirthArr = "";
					 String noOfPreviousMaternityLeavesArr = "";
					 String noOfChildDependentsArr = "";
					 String singleParentIndicatorArr = "";
					 String ageOfDependentArr = "";
					 String leaveTypeNameArr = "";
					 String leaveDescArr = "";
					 String lastDayOfWorkArr = "";
					 String firstDayOfLeaveArr = "";
					 String estLastDayOfLeaveArr = "";
					 String firstDayOfWorkArr = "";
					 String lastDayOfLeaveArr = "";				 
					 String customIdNumber = "";
						 
					 String finalStr = "";
					 String headerStr = "";
					 
					 Map<String,String> customTypeMap = null;
					 Map<String,String> leaveMap = null;
					 
					 int startIndex = 0;
					 int endIndex = 0;
					 
					 for (int j = 1; j <=Integer.parseInt(totalNoOfPages); j++) //
					 {
						 if(j == 1)
						 {
							startIndex = 0;
							if(999 > totalResult)
							{
								endIndex = totalResult;
							}
							else
							{
								endIndex = j*999;
							}
						 }
						 else
						 {
							startIndex = endIndex;
							if(j*999 > totalResult)
							{
								endIndex = totalResult;
							}
							else
							{
								endIndex = (j*999);
							}
						 }
						 outputfile = addHireIdList(xmlReqFile, newEmpList, ruleName, startIndex, endIndex, "Employee_ID");
						 is = new FileInputStream(outputfile);
					     soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     soapPart = soapMessage.getSOAPPart();
					     envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
								envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
								createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
				         out = new ByteArrayOutputStream();
				         soapMessage.writeTo(out);
				         strMsg = new String(out.toByteArray());
				        
				         soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
				         soapResponse = soapConnection.call(soapMessage, sourceUrl);
				         out = new ByteArrayOutputStream();
				         soapResponse.writeTo(out);
				         strMsg = new String(out.toByteArray(), "utf-8");
				        
				         soapResp = XmlParserManager.parseXml(strMsg);
				        
				        ReportElement responseData = soapResp.getChild("env:Body")
								.getChild("wd:Get_Workers_Response")
								.getChild("wd:Response_Data");
				        
				        List<ReportElement> applicantData = responseData.getChildren("wd:Worker");
				        for(ReportElement reportElement : applicantData)
						{
				        	ReportElement hireStatusData = reportElement.getChild("wd:Worker_Data")
						 			.getChild("wd:Employment_Data")
						 			.getChild("wd:Worker_Status_Data");
				        	
				        	employeeHireDate = hireStatusData.getChild("wd:Hire_Date") != null?hireStatusData.getChild("wd:Hire_Date").getValue().trim():"";					        	
				        	if(!employeeHireDate.equalsIgnoreCase(""))
				        	{
				        		Date empHireDate = convertWorkdayStringToDate(employeeHireDate);
				        		//if((empHireDate.equals(hireFromDate) || empHireDate.after(hireFromDate)) && (empHireDate.equals(hireToDate) || empHireDate.before(hireToDate)))
				        		{
						        	System.out.println("empHireDate--"+ empHireDate);
					        		ReportElement element1 = reportElement.getChild("wd:Worker_Data");
					        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
					        		System.out.println("employeeId--"+ employeeId);
					        		
					        		
									 
									 List<ReportElement> leaveData = reportElement.getChild("wd:Worker_Data")
									 			.getChild("wd:Employment_Data")
									 			.getChild("wd:Worker_Status_Data")
									 			.getChildren("wd:Leave_Status_Data");
									 
									 if(leaveData != null && leaveData.size() >0)
									 {
										 leaveTypeNameArr = "";
										 leaveDescArr = "";
										 lastDayOfWorkArr = "";
										 firstDayOfLeaveArr = "";
										 estLastDayOfLeaveArr = "";
										 firstDayOfWorkArr = "";
										 lastDayOfLeaveArr = "";
										 lastDateForWhichPaidArr = "";
										 expectedDueDateArr = "";
										 childsBirthDateArr = "";
										 stillbirthBabyDeceasedArr = "";
										 babyArrivalHomeDateArr = "";
										 adoptionPlacementDateArr = "";
										 childEnteredCountryDateArr = "";
										 multipleChildIndicatorArr = "";
										 noOfBabiesAdoptedArr = "";
										 noOfPreviousBirthArr = "";
										 noOfPreviousMaternityLeavesArr = "";
										 noOfChildDependentsArr = "";
										 singleParentIndicatorArr = "";
										 ageOfDependentArr = "";
										 for(ReportElement leaveElement : leaveData)
										 {
											 ReportElement element2 = leaveElement.getChild("wd:Leave_of_Absence_Type_Reference");
											 if(element2 != null)
											 {
												 List<ReportElement> leaveTypeData = element2.getChildren("wd:ID");								 
												 for(ReportElement leaveTypeElement:leaveTypeData)
												 {
													 leaveMap = leaveTypeElement.getAllAttributes();
													 if(leaveMap.get("wd:type").equals("Leave_of_Absence_Type_ID"))
													 {
														 leaveTypeName = leaveTypeElement.getValue().trim();
														 if(leaveTypeName.contains(","))
														 {
															 leaveTypeName = leaveTypeName.replaceAll(",", "|");
														 }
														 if(leaveTypeNameArr.equals(""))
														 {
															 leaveTypeNameArr = leaveTypeName;
														 }
														 else
														 {
															 if(!leaveTypeName.equals(""))
															 {
																 leaveTypeNameArr = leaveTypeNameArr + "~" + leaveTypeName;
															 }
														 }
													 }
												 }
											 }
											 
											 leaveDesc = leaveElement.getChild("wd:Leave_Request_Description") != null?leaveElement.getChild("wd:Leave_Request_Description").getValue().trim():"";
											 if(leaveDesc.contains(","))
											 {
												 leaveDesc = leaveDesc.replaceAll(",", "|");
											 }
											 if(leaveDescArr.equals(""))
											 {
												 leaveDescArr = leaveDesc;
											 }
											 else
											 {
												 if(!leaveDesc.equals(""))
												 {
													 leaveDescArr = leaveDescArr + "~" + leaveDesc;
												 }
											 }
											 lastDayOfWork = leaveElement.getChild("wd:Leave_Last_Day_of_Work") != null?leaveElement.getChild("wd:Leave_Last_Day_of_Work").getValue().trim():"";
											 if(lastDayOfWorkArr.equals(""))
											 {
												 lastDayOfWorkArr = lastDayOfWork;
											 }
											 else
											 {
												 if(!lastDayOfWork.equals(""))
												 {
													 lastDayOfWorkArr = lastDayOfWorkArr + "~" + lastDayOfWork;
												 }
											 }
											 firstDayOfLeave = leaveElement.getChild("wd:Leave_Start_Date") != null?leaveElement.getChild("wd:Leave_Start_Date").getValue().trim():"";
											 if(firstDayOfLeaveArr.equals(""))
											 {
												 firstDayOfLeaveArr = firstDayOfLeave;
											 }
											 else
											 {
												 if(!firstDayOfLeave.equals(""))
												 {
													 firstDayOfLeaveArr = firstDayOfLeaveArr + "~" + firstDayOfLeave;
												 }
											 }
											 estLastDayOfLeave = leaveElement.getChild("wd:Estimated_Leave_End_Date") != null?leaveElement.getChild("wd:Estimated_Leave_End_Date").getValue().trim():"";
											 if(estLastDayOfLeaveArr.equals(""))
											 {
												 estLastDayOfLeaveArr = estLastDayOfLeave;
											 }
											 else
											 {
												 if(!estLastDayOfLeave.equals(""))
												 {
													 estLastDayOfLeaveArr = estLastDayOfLeaveArr + "~" + estLastDayOfLeave;
												 }
											 }
											 firstDayOfWork = leaveElement.getChild("wd:First_Day_Of_Work") != null?leaveElement.getChild("wd:First_Day_Of_Work").getValue().trim():"";
											 if(firstDayOfWorkArr.equals(""))
											 {
												 firstDayOfWorkArr = firstDayOfWork;
											 }
											 else
											 {
												 if(!firstDayOfWork.equals(""))
												 {
													 firstDayOfWorkArr = firstDayOfWorkArr + "~" + firstDayOfWork;
												 }
											 }
											 lastDayOfLeave = leaveElement.getChild("wd:Leave_End_Date") != null?leaveElement.getChild("wd:Leave_End_Date").getValue().trim():"";
											 if(lastDayOfLeaveArr.equals(""))
											 {
												 lastDayOfLeaveArr = lastDayOfLeave;
											 }
											 else
											 {
												 if(!lastDayOfLeave.equals(""))
												 {
													 lastDayOfLeaveArr = lastDayOfLeaveArr + "~" + lastDayOfLeave;
												 }
											 }
											 
											 ReportElement leaveAdditionalData = leaveElement.getChild("wd:Leave_Request_Additional_Fields");
											 if(leaveAdditionalData != null)
											 {
												 lastDateForWhichPaid = leaveAdditionalData.getChild("wd:Last_Date_for_Which_Paid") != null?leaveAdditionalData.getChild("wd:Last_Date_for_Which_Paid").getValue().trim():"";
												 if(lastDateForWhichPaidArr.equals(""))
												 {
													 lastDateForWhichPaidArr = lastDateForWhichPaid;
												 }
												 else
												 {
													 if(!lastDateForWhichPaid.equals(""))
													 {
														 lastDateForWhichPaidArr = lastDateForWhichPaidArr + "~" + lastDateForWhichPaid;
													 }
												 }
												 expectedDueDate = leaveAdditionalData.getChild("wd:Expected_Due_Date") != null?leaveAdditionalData.getChild("wd:Expected_Due_Date").getValue().trim():"";
												 if(expectedDueDateArr.equals(""))
												 {
													 expectedDueDateArr = expectedDueDate;
												 }
												 else
												 {
													 if(!expectedDueDate.equals(""))
													 {
														 expectedDueDateArr = expectedDueDateArr + "~" + expectedDueDate;
													 }
												 }
												 childsBirthDate = leaveAdditionalData.getChild("wd:Child_s_Birth_Date") != null?leaveAdditionalData.getChild("wd:Child_s_Birth_Date").getValue().trim():"";
												 if(childsBirthDateArr.equals(""))
												 {
													 childsBirthDateArr = childsBirthDate;
												 }
												 else
												 {
													 if(!childsBirthDate.equals(""))
													 {
														 childsBirthDateArr = childsBirthDateArr + "~" + childsBirthDate;
													 }
												 }
												 stillbirthBabyDeceased = leaveAdditionalData.getChild("wd:Stillbirth_Baby_Deceased") != null?leaveAdditionalData.getChild("wd:Stillbirth_Baby_Deceased").getValue().trim():"";
												 if(stillbirthBabyDeceased.equalsIgnoreCase("1"))
												 {
													 stillbirthBabyDeceased = "true";
												 }
												 else
												 {
													 stillbirthBabyDeceased = "false";
												 }
												 if(stillbirthBabyDeceasedArr.equals(""))
												 {
													 stillbirthBabyDeceasedArr = stillbirthBabyDeceased;
												 }
												 else
												 {
													 if(!stillbirthBabyDeceased.equals(""))
													 {
														 stillbirthBabyDeceasedArr = stillbirthBabyDeceasedArr + "~" + stillbirthBabyDeceased;
													 }
												 }
												 babyArrivalHomeDate = leaveAdditionalData.getChild("wd:Date_Baby_Arrived_Home_From_Hospital") != null?leaveAdditionalData.getChild("wd:Date_Baby_Arrived_Home_From_Hospital").getValue().trim():"";
												 if(babyArrivalHomeDateArr.equals(""))
												 {
													 babyArrivalHomeDateArr = babyArrivalHomeDate;
												 }
												 else
												 {
													 if(!babyArrivalHomeDate.equals(""))
													 {
														 babyArrivalHomeDateArr = babyArrivalHomeDateArr + "~" + babyArrivalHomeDate;
													 }
												 }
												 adoptionPlacementDate = leaveAdditionalData.getChild("wd:Adoption_Placement_Date") != null?leaveAdditionalData.getChild("wd:CAdoption_Placement_Date").getValue().trim():"";
												 if(adoptionPlacementDateArr.equals(""))
												 {
													 adoptionPlacementDateArr = adoptionPlacementDate;
												 }
												 else
												 {
													 if(!adoptionPlacementDate.equals(""))
													 {
														 adoptionPlacementDateArr = adoptionPlacementDateArr + "~" + adoptionPlacementDate;
													 }
												 }
												 multipleChildIndicator = leaveAdditionalData.getChild("wd:Multiple_Child_Indicator") != null?leaveAdditionalData.getChild("wd:Multiple_Child_Indicator").getValue().trim():"";
												 if(multipleChildIndicator.equalsIgnoreCase("1"))
												 {
													 multipleChildIndicator = "true";
												 }
												 else
												 {
													 multipleChildIndicator = "false";
												 }
												 if(multipleChildIndicatorArr.equals(""))
												 {
													 multipleChildIndicatorArr = multipleChildIndicator;
												 }
												 else
												 {
													 if(!multipleChildIndicator.equals(""))
													 {
														 multipleChildIndicatorArr = multipleChildIndicatorArr + "~" + multipleChildIndicator;
													 }
												 }
												 noOfBabiesAdopted = leaveAdditionalData.getChild("wd:Number_of_Babies_Adopted_Children") != null?leaveAdditionalData.getChild("wd:Number_of_Babies_Adopted_Children").getValue().trim():"";
												 if(noOfBabiesAdoptedArr.equals(""))
												 {
													 noOfBabiesAdoptedArr = noOfBabiesAdopted;
												 }
												 else
												 {
													 if(!noOfBabiesAdopted.equals(""))
													 {
														 noOfBabiesAdoptedArr = noOfBabiesAdoptedArr + "~" + noOfBabiesAdopted;
													 }
												 }
												 childEnteredCountryDate = leaveAdditionalData.getChild("wd:Date_Child_Entered_Country") != null?leaveAdditionalData.getChild("wd:Date_Child_Entered_Country").getValue().trim():"";
												 if(childEnteredCountryDateArr.equals(""))
												 {
													 childEnteredCountryDateArr = childEnteredCountryDate;
												 }
												 else
												 {
													 if(!childEnteredCountryDate.equals(""))
													 {
														 childEnteredCountryDateArr = childEnteredCountryDateArr + "~" + childEnteredCountryDate;
													 }
												 }
												 noOfPreviousBirth = leaveAdditionalData.getChild("wd:Number_of_Previous_Births") != null?leaveAdditionalData.getChild("wd:Number_of_Previous_Births").getValue().trim():"";
												 if(noOfPreviousBirthArr.equals(""))
												 {
													 noOfPreviousBirthArr = noOfPreviousBirth;
												 }
												 else
												 {
													 if(!noOfPreviousBirth.equals(""))
													 {
														 noOfPreviousBirthArr = noOfPreviousBirthArr + "~" + noOfPreviousBirth;
													 }
												 }
												 noOfPreviousMaternityLeaves = leaveAdditionalData.getChild("wd:Number_of_Previous_Maternity_Leaves") != null?leaveAdditionalData.getChild("wd:Number_of_Previous_Maternity_Leaves").getValue().trim():"";
												 if(noOfPreviousMaternityLeavesArr.equals(""))
												 {
													 noOfPreviousMaternityLeavesArr = noOfPreviousMaternityLeaves;
												 }
												 else
												 {
													 if(!noOfPreviousMaternityLeaves.equals(""))
													 {
														 noOfPreviousMaternityLeavesArr = noOfPreviousMaternityLeavesArr + "~" + noOfPreviousMaternityLeaves;
													 }
												 }
												 noOfChildDependents = leaveAdditionalData.getChild("wd:Number_of_Child_Dependents") != null?leaveAdditionalData.getChild("wd:Number_of_Child_Dependents").getValue().trim():"";
												 if(noOfChildDependentsArr.equals(""))
												 {
													 noOfChildDependentsArr = noOfChildDependents;
												 }
												 else
												 {
													 if(!noOfChildDependents.equals(""))
													 {
														 noOfChildDependentsArr = noOfChildDependentsArr + "~" + noOfChildDependents;
													 }
												 }
												 singleParentIndicator = leaveAdditionalData.getChild("wd:Single_Parent_Indicator") != null?leaveAdditionalData.getChild("wd:Single_Parent_Indicator").getValue().trim():"";
												 if(singleParentIndicator.equalsIgnoreCase("1"))
												 {
													 singleParentIndicator = "true";
												 }
												 else
												 {
													 singleParentIndicator = "false";
												 }
												 if(singleParentIndicatorArr.equals(""))
												 {
													 singleParentIndicatorArr = singleParentIndicator;
												 }
												 else
												 {
													 if(!singleParentIndicator.equals(""))
													 {
														 singleParentIndicatorArr = singleParentIndicatorArr + "~" + singleParentIndicator;
													 }
												 }
												 ageOfDependent = leaveAdditionalData.getChild("wd:Age_of_Dependent") != null?leaveAdditionalData.getChild("wd:Age_of_Dependent").getValue().trim():"";
												 if(ageOfDependentArr.equals(""))
												 {
													 ageOfDependentArr = ageOfDependent;
												 }
												 else
												 {
													 if(!ageOfDependent.equals(""))
													 {
														 ageOfDependentArr = ageOfDependentArr + "~" + ageOfDependent;
													 }
												 }
											 }
											 else
											 {
												 lastDateForWhichPaidArr = "";
												 expectedDueDateArr = "";
												 childsBirthDateArr = "";
												 stillbirthBabyDeceasedArr = "";
												 babyArrivalHomeDateArr = "";
												 adoptionPlacementDateArr = "";
												 childEnteredCountryDateArr = "";
												 multipleChildIndicatorArr = "";
												 noOfBabiesAdoptedArr = "";
												 noOfPreviousBirthArr = "";
												 noOfPreviousMaternityLeavesArr = "";
												 noOfChildDependentsArr = "";
												 singleParentIndicatorArr = "";
												 ageOfDependentArr = "";
											 }
										 }
									 }
									 else
									 {
										 leaveTypeNameArr = "";
										 leaveDescArr = "";
										 lastDayOfWorkArr = "";
										 firstDayOfLeaveArr = "";
										 estLastDayOfLeaveArr = "";
										 firstDayOfWorkArr = "";
										 lastDayOfLeaveArr = "";
										 lastDateForWhichPaidArr = "";
										 expectedDueDateArr = "";
										 childsBirthDateArr = "";
										 stillbirthBabyDeceasedArr = "";
										 babyArrivalHomeDateArr = "";
										 adoptionPlacementDateArr = "";
										 childEnteredCountryDateArr = "";
										 multipleChildIndicatorArr = "";
										 noOfBabiesAdoptedArr = "";
										 noOfPreviousBirthArr = "";
										 noOfPreviousMaternityLeavesArr = "";
										 noOfChildDependentsArr = "";
										 singleParentIndicatorArr = "";
										 ageOfDependentArr = "";
									 }
									 
									 ReportElement identificationData = reportElement.getChild("wd:Worker_Data")
									 			.getChild("wd:Personal_Data")
									 			.getChild("wd:Identification_Data");
									 
									 if(identificationData != null)
									 {										 
										 List<ReportElement> customIDList = identificationData.getChildren("wd:Custom_ID");
										 if(customIDList != null && customIDList.size() >0)
										 {
											 customIdNumber = "" ;
											 for(ReportElement customElement : customIDList)
											 {
												 ReportElement customIdData = customElement.getChild("wd:Custom_ID_Data");
												 if(customIdData != null)
												 {
													 ReportElement customTypeRef = customIdData.getChild("wd:ID_Type_Reference");
													 if(customTypeRef != null)
													 {
														 List<ReportElement> customIdTypeData = customTypeRef.getChildren("wd:ID");								 
														 for(ReportElement idTypeElement:customIdTypeData)
														 {
															 customTypeMap = idTypeElement.getAllAttributes();
															 if(customTypeMap.get("wd:type").equals("Custom_ID_Type_ID"))
															 {
																 if(idTypeElement.getValue().trim().equalsIgnoreCase("Previous_IBM_CNUM"))
																 {
																	 customIdNumber = customIdData.getChild("wd:ID") != null?customIdData.getChild("wd:ID").getValue().trim():""; 
																 }
															 }
														 }
													 }
												 }
											 }
											 if(customIdNumber.isEmpty())
											 {
												 customIdNumber = "" ;
											 }
										 }
										 else
										 {
											 customIdNumber = "" ;
										 }
									 }
									 else
									 {
										 customIdNumber = "" ;
									 }								 								 								 
							}				        				        
				          }
						     headingFromTargetTenant = "Home_CNUM,Employee_ID,Leave_of_Absence_Type,Leave_Request_Description,Leave_Last_Day_of_Work,"
					        			+ "Leave_Start_Date,Estimated_Leave_End_Date,First_Day_Of_Work,Leave_End_Date,Last_Date_For_Which_Paid,Expected_Due_Date,Child_s_Birth_Date,Stillbirth_Baby_Deceased,"
					        			+ "Date_Baby_Arrived_Home_From_Hospital,Adoption_Placement_Date,Date_Child_Entered_Country,Multiple_Child_Indicator,Number_of_Babies_Adopted_Children,"
					        			+ "Number_of_Previous_Births,Number_of_Previous_Maternity_Leaves,Number_of_Child_Dependents,Single_Parent_Indicator,Age_of_Dependent";
						     
				        	if(!customIdNumber.isEmpty())
							{
					        	headerStr = customIdNumber + "," + employeeId + 
								 		 "," + leaveTypeNameArr + "," + leaveDescArr + "," +  lastDayOfWorkArr + "," + firstDayOfLeaveArr + "," + estLastDayOfLeaveArr + "," + firstDayOfWorkArr + "," + lastDayOfLeaveArr +
								 		 "," + lastDateForWhichPaidArr + "," + expectedDueDateArr + "," + childsBirthDateArr + "," + stillbirthBabyDeceasedArr + "," + babyArrivalHomeDateArr + "," + adoptionPlacementDateArr +
								 		 "," + childEnteredCountryDateArr + "," + multipleChildIndicatorArr + "," + noOfBabiesAdoptedArr + "," + noOfPreviousBirthArr + "," + noOfPreviousMaternityLeavesArr + "," + noOfChildDependentsArr +
								 		 "," + singleParentIndicatorArr + "," + ageOfDependentArr; 
					        	
					        	
				        	 targetTenantRowMap.put(customIdNumber, headerStr);
				        	 targetTenantColumnList.add(customIdNumber);
				        	 
							 if(finalStr.equals(""))
							 {
								 finalStr =  headingFromTargetTenant + "\n" + headerStr;
							 }
							 else
							 {
								 finalStr = finalStr + "\n" + headerStr;
							 }
						 }
					   }						 							 
				     }
					 System.out.println(finalStr);
					 targetContent = finalStr.getBytes();
					 wdCount = targetTenantColumnList.size();
					 /*File targetCSVfile = File.createTempFile(loadCycle + "_" + ruleName + "_Target", ".csv");
					 PrintWriter writer = new PrintWriter(targetCSVfile);
					 writer.write(finalStr.toString());
					 writer.flush();
					 writer.close();
					 
					 PostLoad postLoad = postLoadService.getPostLoadByLoadRuleClient(loadCycle, ruleName, client);
					 postLoad.setWdCSVFileName(loadCycle + "_" + ruleName + "_Target" + ".csv");
					 postLoad.setWdCSVFileContent(Files.readAllBytes(targetCSVfile.toPath()));
					 postLoadService.updatePostLoad(postLoad);*/
			   }
			}
			catch (FileNotFoundException e)
			{
				e.printStackTrace();
			} 
			catch (IOException e) 
			{
				e.printStackTrace();
			} 
			catch (SOAPException e) 
			{
				e.printStackTrace();
			} 
			catch (Exception e) 
			{
				e.printStackTrace();
			}
}
	
	private void createTemplateFromSourceTenantCompensation(Tenant tenant, InputStream is, SOAPConnection soapConnection,
			String loadCycle, String ruleName, String client, Long userId) {
		
				sourceCount = 0;
				headingFromSourceTenant = "";
				sourceTenantRowMap.clear();
				sourceTenantColumnList.clear();
				errorList.clear();
				String xmlReqFile = null;
				try 
				{			 
					 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
					 if(getRequest != null)
					 {
						 byte[] requestFileContent = getRequest.getRequestXMLContent();
						 File requestfile = null;
						 try 
						 {
							 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
							 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
						 } 
						 catch (IOException e1) 
						 {
						     e1.printStackTrace();
						 }
						 xmlReqFile = requestfile.getAbsolutePath();
						 String outputfile = addHireIdList(xmlReqFile, oldEmpList, ruleName, 0, oldEmpList.size(), "Employee_ID");
						 is = new FileInputStream(outputfile);
					     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
					     SOAPPart soapPart = soapMessage.getSOAPPart();
					     SOAPEnvelope envelope = soapPart.getEnvelope();
						 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
						 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
						 {
							  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
						 }
						 soapMessage.saveChanges();
					     ByteArrayOutputStream out = new ByteArrayOutputStream();
					     soapMessage.writeTo(out);
					     String strMsg = new String(out.toByteArray());	
					     
					     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
					     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
						 soapConnection = soapConnectionFactory.createConnection();
						 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
						 out = new ByteArrayOutputStream();
						 soapResponse.writeTo(out);
						 strMsg = new String(out.toByteArray(), "utf-8");

						 ReportElement soapResp = XmlParserManager.parseXml(strMsg);
						 
						 ReportElement pageData = soapResp.getChild("env:Body")
									.getChild("wd:Get_Workers_Response")
									.getChild("wd:Response_Results");
						 
						 String totalNoOfPages = pageData.getChild("wd:Total_Pages").getValue().trim();
						 String totalResults = pageData.getChild("wd:Total_Results").getValue().trim();
						 int totalResult = Integer.parseInt(totalResults);
						 System.out.println("totalNoOfPages-"+totalNoOfPages);
						 System.out.println("totalResult-"+totalResult);						 
						 
						 String employeeId = "";
						 String empTerminationDate = "";						 
						 String customIdNumber = "";
						 //String compEffectiveDate = "";
						 //String compReasonName = "";
						 String compPackageName = "";
						 String compGradeName = "";
						 String compProfileName = "";
						 String bonusPlanName = "";
						 String bonusElementName = "";
						 String bonusAmount = "";
						 String bonusDefaultAmount ="";
						 String bonusPercentage = "";
						 String bonusDefaultPercentage = "";
						 String bonusGuaranteedMinimum = "";
						 String bonusCurrencyCode = "";
						 String bonusFrequencyName = "";
						 String bonusPercentageAssigned = "";
						 String bonusPlanNameArr = "";
						 String bonusElementNameArr = "";
						 String bonusAmountArr = "";
						 String bonusDefaultAmountArr = "";
						 String bonusPercentageArr = "";
						 String bonusDefaultPercentageArr = "";
						 String bonusGuaranteedMinimumArr = "";
						 String bonusCurrencyCodeArr = "";
						 String bonusFrequencyNameArr = "";
						 String bonusPercentageAssignedArr = "";
						 String bonusActualEndDate = "";
						 String bonusActualEndDateArr = "";
						 String allowancePlanName = "";
						 String allowanceElementName = "";
						 String allowanceAmount = "";
						 String allowancePercentage = "";
						 String allowanceCurrency = "";
						 String allowanceFrequency = "";
						 String allowancePlanNameArr = "";
						 String allowanceElementNameArr = "";
						 String allowanceAmountArr = "";
						 String allowancePercentageArr = "";
						 String allowanceCurrencyArr = "";
						 String allowanceFrequencyArr = "";
						 String allowanceActualEndDate = "";
						 String allowanceActualEndDateArr = "";
						 String unitAllowancePlanName = "";
						 String unitAllowanceElementName = "";
						 String unitAllowanceUnitOfMeasureName = "";
						 String unitAllowancePerUnitAmount = "";
						 String unitAllowanceCurrency = "";
						 String unitAllowanceNoOfUnits = "";
						 String unitAllowanceFrequency = "";
						 String unitAllowanceActualEndDate = "";
						 String periodSalaryPlanName = "";
						 String periodSalaryElementName = "";
						 String compensationPeriod = "";
						 String compensationPeriodMultiplier = "";
						 String periodSalaryCurrency = "";
						 String periodSalaryFrequency = "";
						 String periodActualendDate = "";
						 String finalStr = "";
						 String headerStr = "";
						 						 
						 Map<String,String> customTypeMap = null;
						 //Map<String,String> reasonMap = null;
						 Map<String,String> packageMap = null;
						 Map<String,String> gradeMap = null;
						 Map<String,String> profileMap = null;
						 Map<String,String> bonusPlanMap = null;
						 Map<String,String> bonusElementMap = null;
						 Map<String,String> bonusCurrencyMap = null;
						 Map<String,String> bonusFrequencyMap = null;
						 Map<String,String> allowancePlanMap = null;
						 Map<String,String> allowanceElementMap = null;
						 Map<String,String> allowanceCurrencyMap = null;
						 Map<String,String> allowanceFrequencyMap = null;
						 Map<String,String> unitAllowanceMap = null;
						 Map<String,String> unitAllowanceElementMap = null;
						 Map<String,String> unitAllowanceMeasureMap = null;
						 Map<String,String> unitAllowanceCurrencyMap = null;
						 Map<String,String> unitAllowanceFrequencyMap = null;
						 Map<String,String> periodSalaryPlanMap = null;
						 Map<String,String> periodSalaryElementMap = null;
						 Map<String,String> compensationPeriodMap = null;
						 Map<String,String> periodSalaryCurrencyMap = null;
						 Map<String,String> periodSalaryFrequencyMap = null;
						 
						 int startIndex = 0;
						 int endIndex = 0;
						 
						 for (int j = 1; j <=Integer.parseInt(totalNoOfPages); j++) //
						 {
							 if(j == 1)
							 {
								startIndex = 0;
								if(999 > totalResult)
								{
									endIndex = totalResult;
								}
								else
								{
									endIndex = j*999;
								}
							 }
							 else
							 {
								startIndex = endIndex;
								if(j*999 > totalResult)
								{
									endIndex = totalResult;
								}
								else
								{
									endIndex = (j*999);
								}
							 }
							 outputfile = addHireIdList(xmlReqFile, oldEmpList, ruleName, startIndex, endIndex, "Employee_ID");
							 is = new FileInputStream(outputfile);
						     soapMessage = MessageFactory.newInstance().createMessage(null, is);
						     soapPart = soapMessage.getSOAPPart();
						     envelope = soapPart.getEnvelope();
							 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
							 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
							 {
									envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
									createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
							 }
							 soapMessage.saveChanges();
					         out = new ByteArrayOutputStream();
					         soapMessage.writeTo(out);
					         strMsg = new String(out.toByteArray());
					        
					         soapConnectionFactory = SOAPConnectionFactory.newInstance();
							 soapConnection = soapConnectionFactory.createConnection();
					         soapResponse = soapConnection.call(soapMessage, sourceUrl);
					         out = new ByteArrayOutputStream();
					         soapResponse.writeTo(out);
					         strMsg = new String(out.toByteArray(), "utf-8");
					        
					         soapResp = XmlParserManager.parseXml(strMsg);
					        
					        ReportElement responseData = soapResp.getChild("env:Body")
									.getChild("wd:Get_Workers_Response")
									.getChild("wd:Response_Data");
					        
					        List<ReportElement> applicantData = responseData.getChildren("wd:Worker");
					        for(ReportElement reportElement : applicantData)
							{
					        	ReportElement terminationStatusData = reportElement.getChild("wd:Worker_Data")
							 			.getChild("wd:Employment_Data")
							 			.getChild("wd:Worker_Status_Data");
					        	
					        	empTerminationDate = terminationStatusData.getChild("wd:Termination_Date") != null?terminationStatusData.getChild("wd:Termination_Date").getValue().trim():"";					        	
					        	//if(!empTerminationDate.equalsIgnoreCase(""))
					        	{
					        		//Date termDate = convertWorkdayStringToDate(empTerminationDate);
					        		//if((termDate.equals(termFromDate) || termDate.after(termFromDate)) && (termDate.equals(termToDate) || termDate.before(termToDate)))
					        		{
							        	//System.out.println("empTerminationDate--"+ termDate);
						        		ReportElement element1 = reportElement.getChild("wd:Worker_Data");
						        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
						        		System.out.println("employeeId--"+ employeeId);
										 																											 
										 ReportElement identificationData = reportElement.getChild("wd:Worker_Data")
										 			.getChild("wd:Personal_Data")
										 			.getChild("wd:Identification_Data");
										 
										 if(identificationData != null)
										 {												 
											 List<ReportElement> customIDList = identificationData.getChildren("wd:Custom_ID");
											 if(customIDList != null && customIDList.size() >0)
											 {
												 String expirationDate = "";
												 customIdNumber = "" ;
												 for(ReportElement customElement : customIDList)
												 {
													 ReportElement customIdData = customElement.getChild("wd:Custom_ID_Data");
													 if(customIdData != null)
													 {
														 expirationDate = customIdData.getChild("wd:Expiration_Date") != null?customIdData.getChild("wd:Expiration_Date").getValue().trim():"";
														 ReportElement customTypeRef = customIdData.getChild("wd:ID_Type_Reference");
														 if(customTypeRef != null)
														 {
															 List<ReportElement> customIdTypeData = customTypeRef.getChildren("wd:ID");								 
															 for(ReportElement idTypeElement:customIdTypeData)
															 {
																 customTypeMap = idTypeElement.getAllAttributes();
																 if(customTypeMap.get("wd:type").equals("Custom_ID_Type_ID"))
																 {
																	 if(idTypeElement.getValue().trim().equalsIgnoreCase("Global_CNUM") && expirationDate.isEmpty())
																	 {
																		 customIdNumber = customIdData.getChild("wd:ID") != null?customIdData.getChild("wd:ID").getValue().trim():""; 
																	 }
																 }
															 }
														 }
													 }
												 }
												 if(customIdNumber.isEmpty())
												 {
													 customIdNumber = "" ;
												 }
											 }
											 else
											 {
												 customIdNumber = "" ;
											 }
										 }
										 else
										 {
											 customIdNumber = "" ;										 
										 }
										 
										 ReportElement compensationData = reportElement.getChild("wd:Worker_Data")
						 							.getChild("wd:Compensation_Data");
										 if(compensationData != null)
										 {
											 /*compEffectiveDate = compensationData.getChild("wd:Compensation_Effective_Date") != null?compensationData.getChild("wd:Compensation_Effective_Date").getValue().trim():"";
											 ReportElement reasonRef = compensationData.getChild("wd:Reason_Reference");
											 if(reasonRef != null)
											 {
												 List<ReportElement> reasonData = reasonRef.getChildren("wd:ID");					 
												 for(ReportElement reasonElement:reasonData)
												 {
													 reasonMap = reasonElement.getAllAttributes();
													 if(reasonMap.get("wd:type").equals("Event_Classification_Subcategory_ID"))
													 {
														 compReasonName = reasonElement.getValue().trim();
													 }
												 }
											 }
											 else
											 {
												 compReasonName = "";
											 }*/
											 
											 ReportElement compensationGuidelineData = compensationData.getChild("wd:Compensation_Guidelines_Data");
											 if(compensationGuidelineData != null)
											 {
												 ReportElement compPackageRef = compensationGuidelineData.getChild("wd:Compensation_Package_Reference");
												 if(compPackageRef != null)
												 {
													 List<ReportElement> packageData = compPackageRef.getChildren("wd:ID");					 
													 for(ReportElement packageElement:packageData)
													 {
														 packageMap = packageElement.getAllAttributes();
														 if(packageMap.get("wd:type").equals("Compensation_Package_ID"))
														 {
															 compPackageName = packageElement.getValue().trim();
														 }
													 }
												 }
												 else
												 {
													 compPackageName = "";
												 }
												 
												 ReportElement compGradeRef = compensationGuidelineData.getChild("wd:Compensation_Grade_Reference");
												 if(compGradeRef != null)
												 {
													 List<ReportElement> gradeData = compGradeRef.getChildren("wd:ID");					 
													 for(ReportElement gradeElement:gradeData)
													 {
														 gradeMap = gradeElement.getAllAttributes();
														 if(gradeMap.get("wd:type").equals("Compensation_Grade_ID"))
														 {
															 compGradeName = gradeElement.getValue().trim();
														 }
													 }
												 }
												 else
												 {
													 compGradeName = "";
												 }
												 
												 ReportElement compGradeProfileRef = compensationGuidelineData.getChild("wd:Compensation_Grade_Profile_Reference");
												 if(compGradeProfileRef != null)
												 {
													 List<ReportElement> profileData = compGradeProfileRef.getChildren("wd:ID");					 
													 for(ReportElement profileElement:profileData)
													 {
														 profileMap = profileElement.getAllAttributes();
														 if(profileMap.get("wd:type").equals("Compensation_Grade_Profile_ID"))
														 {
															 compProfileName = profileElement.getValue().trim();
														 }
													 }
												 }
												 else
												 {
													 compProfileName = "";
												 }
											 }
											 else
											 {
												 //compEffectiveDate = "";
												 compPackageName = "";
												 compGradeName = "";
												 compProfileName = "";
											 }
											 
											 List<ReportElement> bonusPlanList = compensationData.getChildren("wd:Bonus_Plan_Data");
											 if(bonusPlanList != null && bonusPlanList.size() >0)
											 {
												 bonusPlanNameArr = "";
												 bonusElementNameArr = "";
												 bonusDefaultAmountArr = "";
												 bonusAmountArr = "";
												 bonusDefaultPercentageArr = "";
												 bonusPercentageArr = "";
												 bonusGuaranteedMinimumArr = "";
												 bonusCurrencyCodeArr = "";
												 bonusFrequencyNameArr = "";
												 bonusPercentageAssignedArr = "";
												 bonusActualEndDateArr = "";
												 
												 for(ReportElement bonusPlanElement: bonusPlanList)
												 {
													 ReportElement bonusCompPlanRef = bonusPlanElement.getChild("wd:Compensation_Plan_Reference");
													 if(bonusCompPlanRef != null)
													 {
														 List<ReportElement> bonusData = bonusCompPlanRef.getChildren("wd:ID");					 
														 for(ReportElement bonusElement:bonusData)
														 {
															 bonusPlanMap = bonusElement.getAllAttributes();
															 if(bonusPlanMap.get("wd:type").equals("Compensation_Plan_ID"))
															 {
																 bonusPlanName= bonusElement.getValue().trim();											
															 }
														 }
													 }
													 else
													 {
														 bonusPlanName = "";
													 }
													 if(bonusPlanNameArr.equals(""))
													 {
														 bonusPlanNameArr = bonusPlanName;
													 }
													 else
													 {
														 bonusPlanNameArr = bonusPlanNameArr + "~" + bonusPlanName;
													 }									 
													 
													 ReportElement bonusCompElementRef = bonusPlanElement.getChild("wd:Compensation_Element_Reference");
													 if(bonusCompElementRef != null)
													 {
														 List<ReportElement> bonusElementData = bonusCompElementRef.getChildren("wd:ID");					 
														 for(ReportElement bonusElement:bonusElementData)
														 {
															 bonusElementMap = bonusElement.getAllAttributes();
															 if(bonusElementMap.get("wd:type").equals("Compensation_Element_ID"))
															 {
																 bonusElementName= bonusElement.getValue().trim();
																 if(bonusElementName.contains(","))
																 {
																	 bonusElementName = bonusElementName.replaceAll(",", "|");
																 }
															 }
														 }
													 }
													 else
													 {
														 bonusElementName = "";
													 }
													 
													 if(bonusElementNameArr.equals(""))
													 {
														 bonusElementNameArr = bonusElementName;
													 }
													 else
													 {
														 bonusElementNameArr = bonusElementNameArr + "~" + bonusElementName;
													 }
													 bonusAmount = bonusPlanElement.getChild("wd:Individual_Target_Amount") != null?bonusPlanElement.getChild("wd:Individual_Target_Amount").getValue().trim():"";
													 if(bonusAmountArr.equals(""))
													 {
														 bonusAmountArr = bonusAmount;
													 }
													 else
													 {
														 if(!bonusAmount.isEmpty())
														 {
															 bonusAmountArr = bonusAmountArr + "~" + bonusAmount;
														 }
													 }
													 bonusDefaultAmount = bonusPlanElement.getChild("wd:Default_Target_Amount") != null?bonusPlanElement.getChild("wd:Default_Target_Amount").getValue().trim():"";
													 if(bonusDefaultAmountArr.equals(""))
													 {
														 bonusDefaultAmountArr = bonusDefaultAmount;
													 }
													 else
													 {
														 if(!bonusDefaultAmount.isEmpty())
														 {
															 bonusDefaultAmountArr = bonusDefaultAmountArr + "~" + bonusDefaultAmount;
														 }
													 }
													 bonusPercentage = bonusPlanElement.getChild("wd:Individual_Target_Percent") != null?bonusPlanElement.getChild("wd:Individual_Target_Percent").getValue().trim():"";
													 if(bonusPercentageArr.equals(""))
													 {
														 bonusPercentageArr = bonusPercentage;
													 }
													 else
													 {
														 bonusPercentageArr = bonusPercentageArr + "~" + bonusPercentage;
													 }
													 bonusDefaultPercentage = bonusPlanElement.getChild("wd:Default_Target_Percent") != null?bonusPlanElement.getChild("wd:Default_Target_Percent").getValue().trim():"";
													 if(bonusDefaultPercentageArr.equals(""))
													 {
														 bonusDefaultPercentageArr = bonusDefaultPercentage;
													 }
													 else
													 {
														 bonusDefaultPercentageArr = bonusDefaultPercentageArr + "~" + bonusDefaultPercentage;
													 }
													 bonusGuaranteedMinimum = bonusPlanElement.getChild("wd:Guaranteed_Minimum") != null?bonusPlanElement.getChild("wd:Guaranteed_Minimum").getValue().trim():"";
													 if(bonusGuaranteedMinimum.equals("1"))
													 {
														 bonusGuaranteedMinimum = "true";
													 }
													 else
													 {
														 bonusGuaranteedMinimum = "false";
													 }
													 if(bonusGuaranteedMinimumArr.equals(""))
													 {
														 bonusGuaranteedMinimumArr = bonusGuaranteedMinimum;
													 }
													 else
													 {
														 bonusGuaranteedMinimumArr = bonusGuaranteedMinimumArr + "~" + bonusGuaranteedMinimum;
													 }
													 bonusPercentageAssigned = bonusPlanElement.getChild("wd:Percent_Assigned") != null?bonusPlanElement.getChild("wd:Percent_Assigned").getValue().trim():"";
													 if(bonusPercentageAssignedArr.equals(""))
													 {
														 bonusPercentageAssignedArr = bonusPercentageAssigned;
													 }
													 else
													 {
														 bonusPercentageAssignedArr = bonusPercentageAssignedArr + "~" + bonusPercentageAssigned;
													 }
													 ReportElement bonusCurrRef = bonusPlanElement.getChild("wd:Currency_Reference");
													 if(bonusCurrRef != null)
													 {
														 List<ReportElement> bonusCurrencyData = bonusCurrRef.getChildren("wd:ID");					 
														 for(ReportElement bonusCurrencyElement:bonusCurrencyData)
														 {
															 bonusCurrencyMap = bonusCurrencyElement.getAllAttributes();
															 if(bonusCurrencyMap.get("wd:type").equals("Currency_ID"))
															 {
																 bonusCurrencyCode = bonusCurrencyElement.getValue().trim();
															 }
														 }
													 }
													 else
													 {
														 bonusCurrencyCode = "";
													 }
													 
													 if(bonusCurrencyCodeArr.equals(""))
													 {
														 bonusCurrencyCodeArr = bonusCurrencyCode;
													 }
													 else
													 {
														 bonusCurrencyCodeArr = bonusCurrencyCodeArr + "~" + bonusCurrencyCode;
													 }
													 
													 ReportElement bonusFreqRef = bonusPlanElement.getChild("wd:Frequency_Reference");
													 if(bonusFreqRef != null)
													 {
														 List<ReportElement> bonusFrequencyData = bonusFreqRef.getChildren("wd:ID");					 
														 for(ReportElement bonusFrequencyElement:bonusFrequencyData)
														 {
															 bonusFrequencyMap = bonusFrequencyElement.getAllAttributes();
															 if(bonusFrequencyMap.get("wd:type").equals("Frequency_ID"))
															 {
																 bonusFrequencyName = bonusFrequencyElement.getValue().trim();
															 }
														 }
													 }
													 else
													 {
														 bonusFrequencyName = "";
													 }
													 
													 if(bonusFrequencyNameArr.equals(""))
													 {
														 bonusFrequencyNameArr = bonusFrequencyName;
													 }
													 else
													 {
														 bonusFrequencyNameArr = bonusFrequencyNameArr + "~" + bonusFrequencyName;
													 }
													 
													 bonusActualEndDate = bonusPlanElement.getChild("wd:Actual_End_Date") != null?bonusPlanElement.getChild("wd:Actual_End_Date").getValue().trim():"";
													 if(bonusActualEndDateArr.equals(""))
													 {
														 bonusActualEndDateArr = bonusActualEndDate;
													 }
													 else
													 {
														 if(!bonusActualEndDate.equals(""))
														 {
															 bonusActualEndDateArr = bonusActualEndDateArr + "~" + bonusActualEndDate;
														 }
													 }
												 }
											 }
											 else
											 {
												 bonusPlanNameArr = "";
												 bonusElementNameArr = "";
												 bonusAmountArr = "";
												 bonusDefaultAmountArr = "";
												 bonusPercentageArr = "";
												 bonusDefaultPercentageArr = "";
												 bonusGuaranteedMinimumArr = "";
												 bonusCurrencyCodeArr = "";
												 bonusFrequencyNameArr = "";
												 bonusPercentageAssignedArr = "";
												 bonusActualEndDateArr = "";
											 }
											 
											 List<ReportElement> allowancePlanList = compensationData.getChildren("wd:Allowance_Plan_Data");
											 if(allowancePlanList != null && allowancePlanList.size() >0)
											 {
												 allowancePlanNameArr = "";
												 allowanceElementNameArr = "";
												 allowanceAmountArr = "";
												 allowancePercentageArr = "";
												 allowanceCurrencyArr = "";
												 allowanceFrequencyArr = "";
												 allowanceActualEndDateArr = "";
												 
												 for(ReportElement allowancePlanElement: allowancePlanList)
												 {
													 ReportElement allowancePlanRef = allowancePlanElement.getChild("wd:Compensation_Plan_Reference");
													 if(allowancePlanRef != null)
													 {
														 List<ReportElement> allowanceData = allowancePlanRef.getChildren("wd:ID");					 
														 for(ReportElement allowanceElement:allowanceData)
														 {
															 allowancePlanMap = allowanceElement.getAllAttributes();
															 if(allowancePlanMap.get("wd:type").equals("Compensation_Plan_ID"))
															 {
																 allowancePlanName= allowanceElement.getValue().trim();											
															 }
														 }
													 }
													 else
													 {
														 allowancePlanName = "";
													 }
													 
													 if(allowancePlanNameArr.equals(""))
													 {
														 allowancePlanNameArr = allowancePlanName;
													 }
													 else
													 {
														 allowancePlanNameArr = allowancePlanNameArr + "~" + allowancePlanName;
													 }
													 
													 ReportElement allowanceCompElementRef = allowancePlanElement.getChild("wd:Compensation_Element_Reference");
													 if(allowanceCompElementRef != null)
													 {
														 List<ReportElement> allowanceElementData = allowanceCompElementRef.getChildren("wd:ID");					 
														 for(ReportElement allowanceElement:allowanceElementData)
														 {
															 allowanceElementMap = allowanceElement.getAllAttributes();
															 if(allowanceElementMap.get("wd:type").equals("Compensation_Element_ID"))
															 {
																 allowanceElementName= allowanceElement.getValue().trim();
																 if(allowanceElementName.contains(","))
																 {
																	 allowanceElementName = allowanceElementName.replaceAll(",", "|");
																 }
															 }
														 }
													 }
													 else
													 {
														 allowanceElementName = "";
													 }
													 
													 if(allowanceElementNameArr.equals(""))
													 {
														 allowanceElementNameArr = allowanceElementName;
													 }
													 else
													 {
														 allowanceElementNameArr = allowanceElementNameArr + "~" + allowanceElementName;
													 }
													 
													 allowanceAmount = allowancePlanElement.getChild("wd:Amount") != null?allowancePlanElement.getChild("wd:Amount").getValue().trim():"";
													 if(allowanceAmountArr.equals(""))
													 {
														 allowanceAmountArr = allowanceAmount;
													 }
													 else
													 {
														 if(!allowanceAmount.isEmpty())
														 {
															 allowanceAmountArr = allowanceAmountArr + "~" + allowanceAmount;
														 }
													 }
													 allowancePercentage = allowancePlanElement.getChild("wd:Percent") != null?allowancePlanElement.getChild("wd:Percent").getValue().trim():"";
													 if(allowancePercentageArr.equals(""))
													 {
														 allowancePercentageArr = allowancePercentage;
													 }
													 else
													 {
														 if(!allowancePercentage.isEmpty())
														 {
															 allowancePercentageArr = allowancePercentageArr + "~" + allowancePercentage;
														 }
													 }
													 
													 ReportElement allowanceCurrRef = allowancePlanElement.getChild("wd:Currency_Reference");
													 if(allowanceCurrRef != null)
													 {
														 List<ReportElement> allowanceCurrencyData = allowanceCurrRef.getChildren("wd:ID");					 
														 for(ReportElement allowanceCurrencyElement:allowanceCurrencyData)
														 {
															 allowanceCurrencyMap = allowanceCurrencyElement.getAllAttributes();
															 if(allowanceCurrencyMap.get("wd:type").equals("Currency_ID"))
															 {
																 allowanceCurrency = allowanceCurrencyElement.getValue().trim();
															 }
														 }
													 }
													 else
													 {
														 allowanceCurrency = "";
													 }
													 
													 if(allowanceCurrencyArr.equals(""))
													 {
														 allowanceCurrencyArr = allowanceCurrency;
													 }
													 else
													 {
														 allowanceCurrencyArr = allowanceCurrencyArr + "~" + allowanceCurrency;
													 }
													 
													 ReportElement allowanceFreqRef = allowancePlanElement.getChild("wd:Frequency_Reference");
													 if(allowanceFreqRef != null)
													 {
														 List<ReportElement> allowanceFrequencyData = allowanceFreqRef.getChildren("wd:ID");					 
														 for(ReportElement allowanceFrequencyElement:allowanceFrequencyData)
														 {
															 allowanceFrequencyMap = allowanceFrequencyElement.getAllAttributes();
															 if(allowanceFrequencyMap.get("wd:type").equals("Frequency_ID"))
															 {
																 allowanceFrequency = allowanceFrequencyElement.getValue().trim();
															 }
														 }
													 }
													 else
													 {
														 allowanceFrequency = "";
													 }
													 
													 if(allowanceFrequencyArr.equals(""))
													 {
														 allowanceFrequencyArr = allowanceFrequency;
													 }
													 else
													 {
														 allowanceFrequencyArr = allowanceFrequencyArr + "~" + allowanceFrequency;
													 }
													 
													 allowanceActualEndDate = allowancePlanElement.getChild("wd:Actual_End_Date") != null?allowancePlanElement.getChild("wd:Actual_End_Date").getValue().trim():"";	
													 if(allowanceActualEndDateArr.equals(""))
													 {
														 allowanceActualEndDateArr = allowanceActualEndDate;
													 }
													 else
													 {
														 if(!allowanceActualEndDate.equals(""))
														 {
															 allowanceActualEndDateArr = allowanceActualEndDateArr + "~" + allowanceActualEndDate;
														 }
													 }
												 }
											 }
											 else
											 {
												 allowancePlanNameArr = "";
												 allowanceElementNameArr = "";
												 allowanceAmountArr = "";
												 allowancePercentageArr = "";
												 allowanceCurrencyArr = "";
												 allowanceFrequencyArr = "";
												 allowanceActualEndDateArr = "";
											 }
											 
											 List<ReportElement> unitAllowancePlanList = compensationData.getChildren("wd:Unit_Allowance_Plan_Data");
											 if(unitAllowancePlanList != null && unitAllowancePlanList.size()>0)
											 {								 
												 for(ReportElement unitAllowancePlanElement: unitAllowancePlanList)
												 {
													 ReportElement unitAllowancePlanRef = unitAllowancePlanElement.getChild("wd:Compensation_Plan_Reference");
													 if(unitAllowancePlanRef != null)
													 {
														 List<ReportElement> unitAllowPlanData = unitAllowancePlanRef.getChildren("wd:ID");					 
														 for(ReportElement unitAllowPlanElement:unitAllowPlanData)
														 {
															 unitAllowanceMap = unitAllowPlanElement.getAllAttributes();
															 if(unitAllowanceMap.get("wd:type").equals("Compensation_Plan_ID"))
															 {
																 unitAllowancePlanName= unitAllowPlanElement.getValue().trim();											
															 }
														 }
													 }
													 else
													 {
														 unitAllowancePlanName = "";
													 }
													 
													 ReportElement unitAllowanceElementRef = unitAllowancePlanElement.getChild("wd:Compensation_Element_Reference");
													 if(unitAllowanceElementRef != null)
													 {
														 List<ReportElement> unitAllowanceElementData = unitAllowanceElementRef.getChildren("wd:ID");					 
														 for(ReportElement unitAllowanceElementElement:unitAllowanceElementData)
														 {
															 unitAllowanceElementMap = unitAllowanceElementElement.getAllAttributes();
															 if(unitAllowanceElementMap.get("wd:type").equals("Compensation_Element_ID"))
															 {
																 unitAllowanceElementName= unitAllowanceElementElement.getValue().trim();
																 if(unitAllowanceElementName.contains(","))
																 {
																	 unitAllowanceElementName = unitAllowanceElementName.replaceAll(",", "|");
																 }
															 }
														 }
													 }
													 else
													 {
														 unitAllowanceElementName = "";
													 }
													 
													 ReportElement unitAllowanceUnitRef = unitAllowancePlanElement.getChild("wd:Unit_Reference");
													 if(unitAllowanceUnitRef != null)
													 {
														 List<ReportElement> unitMeasureElementData = unitAllowanceUnitRef.getChildren("wd:ID");					 
														 for(ReportElement unitSalaryMeasureElement:unitMeasureElementData)
														 {
															 unitAllowanceMeasureMap = unitSalaryMeasureElement.getAllAttributes();
															 if(unitAllowanceMeasureMap.get("wd:type").equals("UN_CEFACT_Common_Code_ID"))
															 {
																 unitAllowanceUnitOfMeasureName = unitSalaryMeasureElement.getValue().trim();
															 }
														 }
													 }
													 else
													 {
														 unitAllowanceUnitOfMeasureName = "";
													 }
													 
													 unitAllowanceNoOfUnits = unitAllowancePlanElement.getChild("wd:Number_of_Units") != null?unitAllowancePlanElement.getChild("wd:Number_of_Units").getValue().trim():"";
													 unitAllowancePerUnitAmount = unitAllowancePlanElement.getChild("wd:Per_Unit_Amount") != null?unitAllowancePlanElement.getChild("wd:Per_Unit_Amount").getValue().trim():"";
													 
													 ReportElement unitAllowanceCurrRef = unitAllowancePlanElement.getChild("wd:Currency_Reference");
													 if(unitAllowanceCurrRef != null)
													 {
														 List<ReportElement> unitCurrencyElementData = unitAllowanceCurrRef.getChildren("wd:ID");					 
														 for(ReportElement unitCurrencyElement:unitCurrencyElementData)
														 {
															 unitAllowanceCurrencyMap = unitCurrencyElement.getAllAttributes();
															 if(unitAllowanceCurrencyMap.get("wd:type").equals("Currency_ID"))
															 {
																 unitAllowanceCurrency = unitCurrencyElement.getValue().trim();
															 }
														 }
													 }
													 else
													 {
														 unitAllowanceCurrency = "";
													 }
													 
													 ReportElement unitAllowanceFreqRef = unitAllowancePlanElement.getChild("wd:Frequency_Reference");
													 if(unitAllowanceFreqRef != null)
													 {
														 List<ReportElement> unitFrequencyElementData = unitAllowanceFreqRef.getChildren("wd:ID");					 
														 for(ReportElement unitFrequencyElement:unitFrequencyElementData)
														 {
															 unitAllowanceFrequencyMap = unitFrequencyElement.getAllAttributes();
															 if(unitAllowanceFrequencyMap.get("wd:type").equals("Frequency_ID"))
															 {
																 unitAllowanceFrequency = unitFrequencyElement.getValue().trim();
															 }
														 }
													 }
													 else
													 {
														 unitAllowanceFrequency = "";
													 }
													 unitAllowanceActualEndDate = unitAllowancePlanElement.getChild("wd:Actual_End_Date") != null?unitAllowancePlanElement.getChild("wd:Actual_End_Date").getValue().trim():"";	
												 }
											 }
											 else
											 {
												 unitAllowancePlanName = "";
												 unitAllowanceElementName = "";
												 unitAllowanceUnitOfMeasureName = "";
												 unitAllowancePerUnitAmount = "";
												 unitAllowanceCurrency = "";
												 unitAllowanceNoOfUnits = "";
												 unitAllowanceFrequency = "";
												 unitAllowanceActualEndDate = "";
											 }
											 
											 List<ReportElement> periodSalaryPlanList = compensationData.getChildren("wd:Period_Salary_Plan_Data");
											 if(periodSalaryPlanList != null && periodSalaryPlanList.size() >0)
											 {
												 periodSalaryPlanName = "";
												 periodSalaryElementName = "";
												 compensationPeriod = "";
												 compensationPeriodMultiplier = "";
												 periodSalaryCurrency = "";
												 periodSalaryFrequency = "";
												 periodActualendDate = "";
												 for(ReportElement periodSalaryPlanElement: periodSalaryPlanList)
												 {
													 ReportElement periodSalaryPlanRef = periodSalaryPlanElement.getChild("wd:Compensation_Plan_Reference");
													 if(periodSalaryPlanRef != null)
													 {
														 List<ReportElement> periodSalaryPlanData = periodSalaryPlanRef.getChildren("wd:ID");					 
														 for(ReportElement periodSalPlanElement:periodSalaryPlanData)
														 {
															 periodSalaryPlanMap = periodSalPlanElement.getAllAttributes();
															 if(periodSalaryPlanMap.get("wd:type").equals("Compensation_Plan_ID"))
															 {
																 periodSalaryPlanName= periodSalPlanElement.getValue().trim();											
															 }
														 }
													 }
													 else
													 {
														 periodSalaryPlanName = "";
													 }
													 
													 ReportElement periodSalaryElementRef = periodSalaryPlanElement.getChild("wd:Compensation_Element_Reference");
													 if(periodSalaryElementRef != null)
													 {
														 List<ReportElement> periodSalaryElementData = periodSalaryElementRef.getChildren("wd:ID");					 
														 for(ReportElement periodSalaryElement:periodSalaryElementData)
														 {
															 periodSalaryElementMap = periodSalaryElement.getAllAttributes();
															 if(periodSalaryElementMap.get("wd:type").equals("Compensation_Element_ID"))
															 {
																 periodSalaryElementName= periodSalaryElement.getValue().trim();
																 if(periodSalaryElementName.contains(","))
																 {
																	 periodSalaryElementName = periodSalaryElementName.replaceAll(",", "|");
																 }
															 }
														 }
													 }
													 else
													 {
														 periodSalaryElementName = "";
													 }
													 
													 ReportElement compPeriodRefRef = periodSalaryPlanElement.getChild("wd:Compensation_Period_Reference");
													 if(compPeriodRefRef != null)
													 {
														 List<ReportElement> compPeriodElementData = compPeriodRefRef.getChildren("wd:ID");					 
														 for(ReportElement compPeriodElement:compPeriodElementData)
														 {
															 compensationPeriodMap = compPeriodElement.getAllAttributes();
															 if(compensationPeriodMap.get("wd:type").equals("Compensation_Period_ID"))
															 {
																 compensationPeriod = compPeriodElement.getValue().trim();
															 }
														 }
													 }
													 else
													 {
														 compensationPeriod = "";
													 }
													 
													 compensationPeriodMultiplier = periodSalaryPlanElement.getChild("wd:Compensation_Period_Multiplier") != null?periodSalaryPlanElement.getChild("wd:Compensation_Period_Multiplier").getValue().trim():"";
													 
													 ReportElement periodSalaryCurrRef = periodSalaryPlanElement.getChild("wd:Currency_Reference");
													 if(periodSalaryCurrRef != null)
													 {
														 List<ReportElement> periodSalaryCurrData = periodSalaryCurrRef.getChildren("wd:ID");					 
														 for(ReportElement periodSalaryCurrencyElement:periodSalaryCurrData)
														 {
															 periodSalaryCurrencyMap = periodSalaryCurrencyElement.getAllAttributes();
															 if(periodSalaryCurrencyMap.get("wd:type").equals("Currency_ID"))
															 {
																 periodSalaryCurrency = periodSalaryCurrencyElement.getValue().trim();
															 }
														 }
													 }
													 else
													 {
														 periodSalaryCurrency = "";
													 }
													 
													 if(periodSalaryCurrency.equalsIgnoreCase("AUT"))
													 {
														 if(periodSalaryPlanName.equalsIgnoreCase("15.5 Salary Months"))
														 {
															 periodSalaryPlanName = "14 Salary Months";
														 }
													 }
													 
													 ReportElement periodSalaryFreqRef = periodSalaryPlanElement.getChild("wd:Frequency_Reference");
													 if(periodSalaryFreqRef != null)
													 {
														 List<ReportElement> periodSalaryFrequencyData = periodSalaryFreqRef.getChildren("wd:ID");					 
														 for(ReportElement periodSalaryFrequencyElement:periodSalaryFrequencyData)
														 {
															 periodSalaryFrequencyMap = periodSalaryFrequencyElement.getAllAttributes();
															 if(periodSalaryFrequencyMap.get("wd:type").equals("Frequency_ID"))
															 {
																 periodSalaryFrequency = periodSalaryFrequencyElement.getValue().trim();
															 }
														 }
													 }
													 else
													 {
														 periodSalaryFrequency = "";
													 }									 
													 periodActualendDate = periodSalaryPlanElement.getChild("wd:Actual_End_Date") != null?periodSalaryPlanElement.getChild("wd:Actual_End_Date").getValue().trim():"";									 
												 }
											 }
											 else
											 {
												 periodSalaryPlanName = "";
												 periodSalaryElementName = "";
												 compensationPeriod = "";
												 compensationPeriodMultiplier = "";
												 periodSalaryCurrency = "";
												 periodSalaryFrequency = "";
												 periodActualendDate = "";
											 }											 
										 }
										 else
										 {
											 //compEffectiveDate = "";
											 //compReasonName = "";
											 compPackageName = "";
											 compGradeName = "";
											 compProfileName = "";
											 bonusPlanNameArr = "";
											 bonusElementNameArr = "";
											 bonusAmountArr = "";
											 bonusPercentageArr = "";
											 bonusGuaranteedMinimumArr = "";
											 bonusCurrencyCodeArr = "";
											 bonusFrequencyNameArr = "";
											 bonusPercentageAssignedArr = "";
											 bonusActualEndDateArr = "";
											 allowancePlanNameArr = "";
											 allowanceElementNameArr = "";
											 allowanceAmountArr = "";
											 allowancePercentageArr = "";
											 allowanceCurrencyArr = "";
											 allowanceFrequencyArr = "";
											 allowanceActualEndDateArr = "";
											 unitAllowancePlanName = "";
											 unitAllowanceElementName = "";
											 unitAllowanceUnitOfMeasureName = "";
											 unitAllowancePerUnitAmount = "";
											 unitAllowanceCurrency = "";
											 unitAllowanceNoOfUnits = "";
											 unitAllowanceFrequency = "";
											 unitAllowanceActualEndDate = "";
											 periodSalaryPlanName = "";
											 periodSalaryElementName = "";
											 compensationPeriod = "";
											 compensationPeriodMultiplier = "";
											 periodSalaryCurrency = "";
											 periodSalaryFrequency = "";
											 periodActualendDate = "";
										 }										 
								}						        
						        
					        }
				        	headingFromSourceTenant = "Home_CNUM,Employee_ID,Compensation_Package_Name,Compensation_Grade_Name,Compensation_Grade_Profile_Name,"
				        			+ "Bonus_Plan_name,Bonus_Element_Name,Bonus_Default_Amount,Bonus_Amount,Bonus_Default_Percentage,Bonus_Percentage,Bonus_Guaranteed_Minimum,Bonus_Currency,Bonus_Frequency,Bonus_Percentage_Assigned,Bonus_Actual_End_Date,"
				        			+ "Allowance_Plan_Name,Allowance_Element_Name,Allowance_Amount,Allowance_Percentage,Allowance_Currency,Allowance_Frequency,Allowance_Actual_End_Date,Unit_Allowance_Plan_Name,"
				        			+ "Unit_Allowance_Element_Name,Unit_Allowance_Unit_Of_Measure_Name,Unit_Allowance_Per_Unit_Amount,Unit_Allowance_Currency,Unit_Allowance_No_Of_Unit,Unit_Allowance_Frequency,"
				        			+ "Unit_Allowance_Actual_End_Date,Period_Salary_Plan_Name,Period_Salary_Element_Name,Compensation_Period,Compensation_Period_Multiplier,Period_Salary_Currency,"
				        			+ "Period_Salary_Frequency,Period_Actual_End_Date";

				        	if(!customIdNumber.isEmpty())
							{
					        	headerStr = customIdNumber + "," + employeeId + 
								 		 "," + compPackageName + "," + compGradeName + "," + compProfileName + "," + bonusPlanNameArr + "," + bonusElementNameArr + "," + bonusDefaultAmountArr +
								 		 "," + bonusAmountArr + "," + bonusDefaultPercentageArr + "," + bonusPercentageArr + "," + bonusGuaranteedMinimumArr + "," + bonusCurrencyCodeArr + "," + bonusFrequencyNameArr + "," + bonusPercentageAssignedArr + "," + bonusActualEndDateArr +
								 		 "," + allowancePlanNameArr + "," + allowanceElementNameArr + "," + allowanceAmountArr + "," + allowancePercentageArr + "," + allowanceCurrencyArr + "," + allowanceFrequencyArr + "," + allowanceActualEndDateArr +
								 		 "," + unitAllowancePlanName + "," + unitAllowanceElementName + "," + unitAllowanceUnitOfMeasureName + "," + unitAllowancePerUnitAmount + "," + unitAllowanceCurrency + "," + unitAllowanceNoOfUnits +
								 		 "," + unitAllowanceFrequency + "," + unitAllowanceActualEndDate + "," + periodSalaryPlanName + "," + periodSalaryElementName + "," + compensationPeriod + "," + compensationPeriodMultiplier +
								 		 "," + periodSalaryCurrency + "," + periodSalaryFrequency + "," + periodActualendDate ;
					        	
					        	sourceTenantRowMap.put(customIdNumber, headerStr);							        	
					        	sourceTenantColumnList.add(customIdNumber);
					        	
					        	if(finalStr.equals(""))
								{
									 finalStr =  headingFromSourceTenant + "\n" + headerStr;
								}
								else
								{
									 finalStr = finalStr + "\n" + headerStr;
								}
							 }
					     }						 							 
					   }
						 
						
						 System.out.println(finalStr);
						 sourceContent = finalStr.getBytes();
						 sourceCount = sourceTenantColumnList.size();
				    }
				}
				catch (FileNotFoundException e)
				{
					e.printStackTrace();
				} 
				catch (IOException e) 
				{
					e.printStackTrace();
				} 
				catch (SOAPException e) 
				{
					e.printStackTrace();
				} 
				catch (Exception e) 
				{
					e.printStackTrace();
				}
	}
	
	private void createTemplateFromTargetTenantCompensation(Tenant tenant, InputStream is, SOAPConnection soapConnection,
			String loadCycle, String ruleName, String client, Long userId) {
		
		wdCount = 0;
		headingFromTargetTenant = "";
		targetTenantRowMap.clear();
		targetTenantColumnList.clear();
		String xmlReqFile = null;
		try 
		{			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 xmlReqFile = requestfile.getAbsolutePath();
				 String outputfile = addHireIdList(xmlReqFile, newEmpList, ruleName, 0, newEmpList.size(), "Employee_ID");
				 is = new FileInputStream(outputfile);
			     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
			     SOAPPart soapPart = soapMessage.getSOAPPart();
			     SOAPEnvelope envelope = soapPart.getEnvelope();
				 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
				 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
				 {
					  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
					  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
				 }
				 soapMessage.saveChanges();
			     ByteArrayOutputStream out = new ByteArrayOutputStream();
			     soapMessage.writeTo(out);
			     String strMsg = new String(out.toByteArray());	
			     
			     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
			     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
				 soapConnection = soapConnectionFactory.createConnection();
				 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
				 out = new ByteArrayOutputStream();
				 soapResponse.writeTo(out);
				 strMsg = new String(out.toByteArray(), "utf-8");

				 ReportElement soapResp = XmlParserManager.parseXml(strMsg);
				 
				 ReportElement pageData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Results");
				 
				 String totalNoOfPages = pageData.getChild("wd:Total_Pages").getValue().trim();
				 String totalResults = pageData.getChild("wd:Total_Results").getValue().trim();
				 int totalResult = Integer.parseInt(totalResults);
				 System.out.println("totalNoOfPages-"+totalNoOfPages);
				 System.out.println("totalResult-"+totalResult);				 
				 
				 String employeeId = "";
				 String employeeHireDate = "";
				 String customIdNumber = "";				 
				 //String compEffectiveDate = "";
				 //String compReasonName = "";
				 String compPackageName = "";
				 String compGradeName = "";
				 String compProfileName = "";
				 String bonusPlanName = "";
				 String bonusElementName = "";
				 String bonusDefaultAmount = "";
				 String bonusDefaultAmountArr = "";
				 String bonusAmount = "";
				 String bonusDefaultPercentage = "";
				 String bonusDefaultPercentageArr = "";
				 String bonusPercentage = "";
				 String bonusGuaranteedMinimum = "";
				 String bonusCurrencyCode = "";
				 String bonusFrequencyName = "";
				 String bonusPercentageAssigned = "";
				 String bonusPlanNameArr = "";
				 String bonusElementNameArr = "";
				 String bonusAmountArr = "";
				 String bonusPercentageArr = "";
				 String bonusGuaranteedMinimumArr = "";
				 String bonusCurrencyCodeArr = "";
				 String bonusFrequencyNameArr = "";
				 String bonusPercentageAssignedArr = "";
				 String bonusActualEndDate = "";
				 String bonusActualEndDateArr = "";
				 String allowancePlanName = "";
				 String allowanceElementName = "";
				 String allowanceAmount = "";
				 String allowancePercentage = "";
				 String allowanceCurrency = "";
				 String allowanceFrequency = "";
				 String allowancePlanNameArr = "";
				 String allowanceElementNameArr = "";
				 String allowanceAmountArr = "";
				 String allowancePercentageArr = "";
				 String allowanceCurrencyArr = "";
				 String allowanceFrequencyArr = "";
				 String allowanceActualEndDate = "";
				 String allowanceActualEndDateArr = "";
				 String unitAllowancePlanName = "";
				 String unitAllowanceElementName = "";
				 String unitAllowanceUnitOfMeasureName = "";
				 String unitAllowancePerUnitAmount = "";
				 String unitAllowanceCurrency = "";
				 String unitAllowanceNoOfUnits = "";
				 String unitAllowanceFrequency = "";
				 String unitAllowanceActualEndDate = "";
				 String periodSalaryPlanName = "";
				 String periodSalaryElementName = "";
				 String compensationPeriod = "";
				 String compensationPeriodMultiplier = "";
				 String periodSalaryCurrency = "";
				 String periodSalaryFrequency = "";
				 String periodActualendDate = "";
				 String finalStr = "";
				 String headerStr = "";
				 

				 Map<String,String> customTypeMap = null;
				 //Map<String,String> reasonMap = null;
				 Map<String,String> packageMap = null;
				 Map<String,String> gradeMap = null;
				 Map<String,String> profileMap = null;
				 Map<String,String> bonusPlanMap = null;
				 Map<String,String> bonusElementMap = null;
				 Map<String,String> bonusCurrencyMap = null;
				 Map<String,String> bonusFrequencyMap = null;
				 Map<String,String> allowancePlanMap = null;
				 Map<String,String> allowanceElementMap = null;
				 Map<String,String> allowanceCurrencyMap = null;
				 Map<String,String> allowanceFrequencyMap = null;
				 Map<String,String> unitAllowanceMap = null;
				 Map<String,String> unitAllowanceElementMap = null;
				 Map<String,String> unitAllowanceMeasureMap = null;
				 Map<String,String> unitAllowanceCurrencyMap = null;
				 Map<String,String> unitAllowanceFrequencyMap = null;
				 Map<String,String> periodSalaryPlanMap = null;
				 Map<String,String> periodSalaryElementMap = null;
				 Map<String,String> compensationPeriodMap = null;
				 Map<String,String> periodSalaryCurrencyMap = null;
				 Map<String,String> periodSalaryFrequencyMap = null;
				 
				 int startIndex = 0;
				 int endIndex = 0;
				 
				 for (int j = 1; j <=Integer.parseInt(totalNoOfPages); j++) //
				 {
					 if(j == 1)
					 {
						startIndex = 0;
						if(999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = j*999;
						}
					 }
					 else
					 {
						startIndex = endIndex;
						if(j*999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = (j*999);
						}
					 }
					 outputfile = addHireIdList(xmlReqFile, newEmpList, ruleName, startIndex, endIndex, "Employee_ID");
					 is = new FileInputStream(outputfile);
				     soapMessage = MessageFactory.newInstance().createMessage(null, is);
				     soapPart = soapMessage.getSOAPPart();
				     envelope = soapPart.getEnvelope();
					 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
					 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
					 {
							envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
					 }
					 soapMessage.saveChanges();
			         out = new ByteArrayOutputStream();
			         soapMessage.writeTo(out);
			         strMsg = new String(out.toByteArray());
			        
			         soapConnectionFactory = SOAPConnectionFactory.newInstance();
					 soapConnection = soapConnectionFactory.createConnection();
			         soapResponse = soapConnection.call(soapMessage, sourceUrl);
			         out = new ByteArrayOutputStream();
			         soapResponse.writeTo(out);
			         strMsg = new String(out.toByteArray(), "utf-8");
			        
			         soapResp = XmlParserManager.parseXml(strMsg);
			        
			        ReportElement responseData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Data");
			        
			        List<ReportElement> applicantData = responseData.getChildren("wd:Worker");
			        for(ReportElement reportElement : applicantData)
					{
			        	ReportElement hireStatusData = reportElement.getChild("wd:Worker_Data")
					 			.getChild("wd:Employment_Data")
					 			.getChild("wd:Worker_Status_Data");
			        	
			        	employeeHireDate = hireStatusData.getChild("wd:Hire_Date") != null?hireStatusData.getChild("wd:Hire_Date").getValue().trim():"";					        	
			        	if(!employeeHireDate.equalsIgnoreCase(""))
			        	{
			        		Date empHireDate = convertWorkdayStringToDate(employeeHireDate);
			        		//if((empHireDate.equals(hireFromDate) || empHireDate.after(hireFromDate)) && (empHireDate.equals(hireToDate) || empHireDate.before(hireToDate)))
			        		{
					        	System.out.println("empHireDate--"+ empHireDate);
				        		ReportElement element1 = reportElement.getChild("wd:Worker_Data");
				        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
				        		System.out.println("employeeId--"+ employeeId);
				        		
				        		
								 
								 ReportElement identificationData = reportElement.getChild("wd:Worker_Data")
								 			.getChild("wd:Personal_Data")
								 			.getChild("wd:Identification_Data");
								 
								 if(identificationData != null)
								 {										 									 
									 List<ReportElement> customIDList = identificationData.getChildren("wd:Custom_ID");
									 if(customIDList != null && customIDList.size() >0)
									 {
										 customIdNumber = "" ;
										 for(ReportElement customElement : customIDList)
										 {
											 ReportElement customIdData = customElement.getChild("wd:Custom_ID_Data");
											 if(customIdData != null)
											 {
												 ReportElement customTypeRef = customIdData.getChild("wd:ID_Type_Reference");
												 if(customTypeRef != null)
												 {
													 List<ReportElement> customIdTypeData = customTypeRef.getChildren("wd:ID");								 
													 for(ReportElement idTypeElement:customIdTypeData)
													 {
														 customTypeMap = idTypeElement.getAllAttributes();
														 if(customTypeMap.get("wd:type").equals("Custom_ID_Type_ID"))
														 {
															 if(idTypeElement.getValue().trim().equalsIgnoreCase("Previous_IBM_CNUM"))
															 {
																 customIdNumber = customIdData.getChild("wd:ID") != null?customIdData.getChild("wd:ID").getValue().trim():""; 
															 }
														 }
													 }
												 }
											 }
										 }
										 if(customIdNumber.isEmpty())
										 {
											 customIdNumber = "" ;
										 }
									 }
									 else
									 {
										 customIdNumber = "" ;
									 }
								 }
								 else
								 {
									 customIdNumber = "" ;
								 }
								 
								 ReportElement compensationData = reportElement.getChild("wd:Worker_Data")
				 							.getChild("wd:Compensation_Data");
								 if(compensationData != null)
								 {
									 /*compEffectiveDate = compensationData.getChild("wd:Compensation_Effective_Date") != null?compensationData.getChild("wd:Compensation_Effective_Date").getValue().trim():"";
									 ReportElement reasonRef = compensationData.getChild("wd:Reason_Reference");
									 if(reasonRef != null)
									 {
										 List<ReportElement> reasonData = reasonRef.getChildren("wd:ID");					 
										 for(ReportElement reasonElement:reasonData)
										 {
											 reasonMap = reasonElement.getAllAttributes();
											 if(reasonMap.get("wd:type").equals("Event_Classification_Subcategory_ID"))
											 {
												 compReasonName = reasonElement.getValue().trim();
											 }
										 }
									 }
									 else
									 {
										 compReasonName = "";
									 }*/
									 
									 ReportElement compensationGuidelineData = compensationData.getChild("wd:Compensation_Guidelines_Data");
									 if(compensationGuidelineData != null)
									 {
										 ReportElement compPackageRef = compensationGuidelineData.getChild("wd:Compensation_Package_Reference");
										 if(compPackageRef != null)
										 {
											 List<ReportElement> packageData = compPackageRef.getChildren("wd:ID");					 
											 for(ReportElement packageElement:packageData)
											 {
												 packageMap = packageElement.getAllAttributes();
												 if(packageMap.get("wd:type").equals("Compensation_Package_ID"))
												 {
													 compPackageName = packageElement.getValue().trim();
												 }
											 }
										 }
										 else
										 {
											 compPackageName = "";
										 }
										 
										 ReportElement compGradeRef = compensationGuidelineData.getChild("wd:Compensation_Grade_Reference");
										 if(compGradeRef != null)
										 {
											 List<ReportElement> gradeData = compGradeRef.getChildren("wd:ID");					 
											 for(ReportElement gradeElement:gradeData)
											 {
												 gradeMap = gradeElement.getAllAttributes();
												 if(gradeMap.get("wd:type").equals("Compensation_Grade_ID"))
												 {
													 compGradeName = gradeElement.getValue().trim();
												 }
											 }
										 }
										 else
										 {
											 compGradeName = "";
										 }
										 
										 ReportElement compGradeProfileRef = compensationGuidelineData.getChild("wd:Compensation_Grade_Profile_Reference");
										 if(compGradeProfileRef != null)
										 {
											 List<ReportElement> profileData = compGradeProfileRef.getChildren("wd:ID");					 
											 for(ReportElement profileElement:profileData)
											 {
												 profileMap = profileElement.getAllAttributes();
												 if(profileMap.get("wd:type").equals("Compensation_Grade_Profile_ID"))
												 {
													 compProfileName = profileElement.getValue().trim();
												 }
											 }
										 }
										 else
										 {
											 compProfileName = "";
										 }
									 }
									 else
									 {
										 //compEffectiveDate = "";
										 compPackageName = "";
										 compGradeName = "";
										 compProfileName = "";
									 }
									 
									 List<ReportElement> bonusPlanList = compensationData.getChildren("wd:Bonus_Plan_Data");
									 if(bonusPlanList != null && bonusPlanList.size() >0)
									 {
										 bonusPlanNameArr = "";
										 bonusElementNameArr = "";
										 bonusAmountArr = "";
										 bonusDefaultAmountArr = "";
										 bonusPercentageArr = "";
										 bonusDefaultPercentageArr = "";
										 bonusGuaranteedMinimumArr = "";
										 bonusCurrencyCodeArr = "";
										 bonusFrequencyNameArr = "";
										 bonusPercentageAssignedArr = "";
										 bonusActualEndDateArr = "";
										 
										 for(ReportElement bonusPlanElement: bonusPlanList)
										 {
											 ReportElement bonusCompPlanRef = bonusPlanElement.getChild("wd:Compensation_Plan_Reference");
											 if(bonusCompPlanRef != null)
											 {
												 List<ReportElement> bonusData = bonusCompPlanRef.getChildren("wd:ID");					 
												 for(ReportElement bonusElement:bonusData)
												 {
													 bonusPlanMap = bonusElement.getAllAttributes();
													 if(bonusPlanMap.get("wd:type").equals("Compensation_Plan_ID"))
													 {
														 bonusPlanName= bonusElement.getValue().trim();											
													 }
												 }
											 }
											 else
											 {
												 bonusPlanName = "";
											 }
											 if(bonusPlanNameArr.equals(""))
											 {
												 bonusPlanNameArr = bonusPlanName;
											 }
											 else
											 {
												 bonusPlanNameArr = bonusPlanNameArr + "~" + bonusPlanName;
											 }									 
											 
											 ReportElement bonusCompElementRef = bonusPlanElement.getChild("wd:Compensation_Element_Reference");
											 if(bonusCompElementRef != null)
											 {
												 List<ReportElement> bonusElementData = bonusCompElementRef.getChildren("wd:ID");					 
												 for(ReportElement bonusElement:bonusElementData)
												 {
													 bonusElementMap = bonusElement.getAllAttributes();
													 if(bonusElementMap.get("wd:type").equals("Compensation_Element_ID"))
													 {
														 bonusElementName= bonusElement.getValue().trim();
														 if(bonusElementName.contains(","))
														 {
															 bonusElementName = bonusElementName.replaceAll(",", "|");
														 }
													 }
												 }
											 }
											 else
											 {
												 bonusElementName = "";
											 }
											 
											 if(bonusElementNameArr.equals(""))
											 {
												 bonusElementNameArr = bonusElementName;
											 }
											 else
											 {
												 bonusElementNameArr = bonusElementNameArr + "~" + bonusElementName;
											 }
											 bonusDefaultAmount = bonusPlanElement.getChild("wd:Default_Target_Amount") != null?bonusPlanElement.getChild("wd:Default_Target_Amount").getValue().trim():"";
											 if(bonusDefaultAmountArr.equals(""))
											 {
												 bonusDefaultAmountArr = bonusDefaultAmount;
											 }
											 else
											 {
												 if(!bonusDefaultAmount.isEmpty())
												 {
													 bonusDefaultAmountArr = bonusDefaultAmountArr + "~" + bonusDefaultAmount;
												 }
											 }
											 bonusAmount = bonusPlanElement.getChild("wd:Individual_Target_Amount") != null?bonusPlanElement.getChild("wd:Individual_Target_Amount").getValue().trim():"";
											 if(bonusAmountArr.equals(""))
											 {
												 bonusAmountArr = bonusAmount;
											 }
											 else
											 {
												 if(!bonusAmount.isEmpty())
												 {
													 bonusAmountArr = bonusAmountArr + "~" + bonusAmount;
												 }
											 }
											 bonusPercentage = bonusPlanElement.getChild("wd:Individual_Target_Percent") != null?bonusPlanElement.getChild("wd:Individual_Target_Percent").getValue().trim():"";
											 if(bonusPercentageArr.equals(""))
											 {
												 bonusPercentageArr = bonusPercentage;
											 }
											 else
											 {
												 bonusPercentageArr = bonusPercentageArr + "~" + bonusPercentage;
											 }
											 bonusDefaultPercentage = bonusPlanElement.getChild("wd:Default_Target_Percent") != null?bonusPlanElement.getChild("wd:Default_Target_Percent").getValue().trim():"";
											 if(bonusDefaultPercentageArr.equals(""))
											 {
												 bonusDefaultPercentageArr = bonusDefaultPercentage;
											 }
											 else
											 {
												 bonusDefaultPercentageArr = bonusDefaultPercentageArr + "~" + bonusDefaultPercentage;
											 }
											 bonusGuaranteedMinimum = bonusPlanElement.getChild("wd:Guaranteed_Minimum") != null?bonusPlanElement.getChild("wd:Guaranteed_Minimum").getValue().trim():"";
											 if(bonusGuaranteedMinimum.equals("1"))
											 {
												 bonusGuaranteedMinimum = "true";
											 }
											 else
											 {
												 bonusGuaranteedMinimum = "false";
											 }
											 if(bonusGuaranteedMinimumArr.equals(""))
											 {
												 bonusGuaranteedMinimumArr = bonusGuaranteedMinimum;
											 }
											 else
											 {
												 bonusGuaranteedMinimumArr = bonusGuaranteedMinimumArr + "~" + bonusGuaranteedMinimum;
											 }
											 bonusPercentageAssigned = bonusPlanElement.getChild("wd:Percent_Assigned") != null?bonusPlanElement.getChild("wd:Percent_Assigned").getValue().trim():"";
											 if(bonusPercentageAssignedArr.equals(""))
											 {
												 bonusPercentageAssignedArr = bonusPercentageAssigned;
											 }
											 else
											 {
												 bonusPercentageAssignedArr = bonusPercentageAssignedArr + "~" + bonusPercentageAssigned;
											 }
											 ReportElement bonusCurrRef = bonusPlanElement.getChild("wd:Currency_Reference");
											 if(bonusCurrRef != null)
											 {
												 List<ReportElement> bonusCurrencyData = bonusCurrRef.getChildren("wd:ID");					 
												 for(ReportElement bonusCurrencyElement:bonusCurrencyData)
												 {
													 bonusCurrencyMap = bonusCurrencyElement.getAllAttributes();
													 if(bonusCurrencyMap.get("wd:type").equals("Currency_ID"))
													 {
														 bonusCurrencyCode = bonusCurrencyElement.getValue().trim();
													 }
												 }
											 }
											 else
											 {
												 bonusCurrencyCode = "";
											 }
											 
											 if(bonusCurrencyCodeArr.equals(""))
											 {
												 bonusCurrencyCodeArr = bonusCurrencyCode;
											 }
											 else
											 {
												 bonusCurrencyCodeArr = bonusCurrencyCodeArr + "~" + bonusCurrencyCode;
											 }
											 
											 ReportElement bonusFreqRef = bonusPlanElement.getChild("wd:Frequency_Reference");
											 if(bonusFreqRef != null)
											 {
												 List<ReportElement> bonusFrequencyData = bonusFreqRef.getChildren("wd:ID");					 
												 for(ReportElement bonusFrequencyElement:bonusFrequencyData)
												 {
													 bonusFrequencyMap = bonusFrequencyElement.getAllAttributes();
													 if(bonusFrequencyMap.get("wd:type").equals("Frequency_ID"))
													 {
														 bonusFrequencyName = bonusFrequencyElement.getValue().trim();
													 }
												 }
											 }
											 else
											 {
												 bonusFrequencyName = "";
											 }
											 
											 if(bonusFrequencyNameArr.equals(""))
											 {
												 bonusFrequencyNameArr = bonusFrequencyName;
											 }
											 else
											 {
												 bonusFrequencyNameArr = bonusFrequencyNameArr + "~" + bonusFrequencyName;
											 }
											 
											 bonusActualEndDate = bonusPlanElement.getChild("wd:Actual_End_Date") != null?bonusPlanElement.getChild("wd:Actual_End_Date").getValue().trim():"";
											 if(bonusActualEndDateArr.equals(""))
											 {
												 bonusActualEndDateArr = bonusActualEndDate;
											 }
											 else
											 {
												 if(!bonusActualEndDate.equals(""))
												 {
													 bonusActualEndDateArr = bonusActualEndDateArr + "~" + bonusActualEndDate;
												 }
											 }
										 }
									 }
									 else
									 {
										 bonusPlanNameArr = "";
										 bonusElementNameArr = "";
										 bonusAmountArr = "";
										 bonusDefaultAmountArr = "";
										 bonusPercentageArr = "";
										 bonusDefaultPercentageArr = "";
										 bonusGuaranteedMinimumArr = "";
										 bonusCurrencyCodeArr = "";
										 bonusFrequencyNameArr = "";
										 bonusPercentageAssignedArr = "";
										 bonusActualEndDateArr = "";
									 }
									 
									 List<ReportElement> allowancePlanList = compensationData.getChildren("wd:Allowance_Plan_Data");
									 if(allowancePlanList != null && allowancePlanList.size() >0)
									 {
										 allowancePlanNameArr = "";
										 allowanceElementNameArr = "";
										 allowanceAmountArr = "";
										 allowancePercentageArr = "";
										 allowanceCurrencyArr = "";
										 allowanceFrequencyArr = "";
										 allowanceActualEndDateArr = "";
										 
										 for(ReportElement allowancePlanElement: allowancePlanList)
										 {
											 ReportElement allowancePlanRef = allowancePlanElement.getChild("wd:Compensation_Plan_Reference");
											 if(allowancePlanRef != null)
											 {
												 List<ReportElement> allowanceData = allowancePlanRef.getChildren("wd:ID");					 
												 for(ReportElement allowanceElement:allowanceData)
												 {
													 allowancePlanMap = allowanceElement.getAllAttributes();
													 if(allowancePlanMap.get("wd:type").equals("Compensation_Plan_ID"))
													 {
														 allowancePlanName= allowanceElement.getValue().trim();											
													 }
												 }
											 }
											 else
											 {
												 allowancePlanName = "";
											 }
											 
											 if(allowancePlanNameArr.equals(""))
											 {
												 allowancePlanNameArr = allowancePlanName;
											 }
											 else
											 {
												 allowancePlanNameArr = allowancePlanNameArr + "~" + allowancePlanName;
											 }
											 
											 ReportElement allowanceCompElementRef = allowancePlanElement.getChild("wd:Compensation_Element_Reference");
											 if(allowanceCompElementRef != null)
											 {
												 List<ReportElement> allowanceElementData = allowanceCompElementRef.getChildren("wd:ID");					 
												 for(ReportElement allowanceElement:allowanceElementData)
												 {
													 allowanceElementMap = allowanceElement.getAllAttributes();
													 if(allowanceElementMap.get("wd:type").equals("Compensation_Element_ID"))
													 {
														 allowanceElementName= allowanceElement.getValue().trim();
														 if(allowanceElementName.contains(","))
														 {
															 allowanceElementName = allowanceElementName.replaceAll(",", "|");
														 }
													 }
												 }
											 }
											 else
											 {
												 allowanceElementName = "";
											 }
											 
											 if(allowanceElementNameArr.equals(""))
											 {
												 allowanceElementNameArr = allowanceElementName;
											 }
											 else
											 {
												 allowanceElementNameArr = allowanceElementNameArr + "~" + allowanceElementName;
											 }
											 
											 allowanceAmount = allowancePlanElement.getChild("wd:Amount") != null?allowancePlanElement.getChild("wd:Amount").getValue().trim():"";
											 if(allowanceAmountArr.equals(""))
											 {
												 allowanceAmountArr = allowanceAmount;
											 }
											 else
											 {
												 if(!allowanceAmount.isEmpty())
												 {
													 allowanceAmountArr = allowanceAmountArr + "~" + allowanceAmount;
												 }
											 }
											 allowancePercentage = allowancePlanElement.getChild("wd:Percent") != null?allowancePlanElement.getChild("wd:Percent").getValue().trim():"";
											 if(allowancePercentageArr.equals(""))
											 {
												 allowancePercentageArr = allowancePercentage;
											 }
											 else
											 {
												 if(!allowancePercentage.isEmpty())
												 {
													 allowancePercentageArr = allowancePercentageArr + "~" + allowancePercentage;
												 }
											 }
											 
											 ReportElement allowanceCurrRef = allowancePlanElement.getChild("wd:Currency_Reference");
											 if(allowanceCurrRef != null)
											 {
												 List<ReportElement> allowanceCurrencyData = allowanceCurrRef.getChildren("wd:ID");					 
												 for(ReportElement allowanceCurrencyElement:allowanceCurrencyData)
												 {
													 allowanceCurrencyMap = allowanceCurrencyElement.getAllAttributes();
													 if(allowanceCurrencyMap.get("wd:type").equals("Currency_ID"))
													 {
														 allowanceCurrency = allowanceCurrencyElement.getValue().trim();
													 }
												 }
											 }
											 else
											 {
												 allowanceCurrency = "";
											 }
											 
											 if(allowanceCurrencyArr.equals(""))
											 {
												 allowanceCurrencyArr = allowanceCurrency;
											 }
											 else
											 {
												 allowanceCurrencyArr = allowanceCurrencyArr + "~" + allowanceCurrency;
											 }
											 
											 ReportElement allowanceFreqRef = allowancePlanElement.getChild("wd:Frequency_Reference");
											 if(allowanceFreqRef != null)
											 {
												 List<ReportElement> allowanceFrequencyData = allowanceFreqRef.getChildren("wd:ID");					 
												 for(ReportElement allowanceFrequencyElement:allowanceFrequencyData)
												 {
													 allowanceFrequencyMap = allowanceFrequencyElement.getAllAttributes();
													 if(allowanceFrequencyMap.get("wd:type").equals("Frequency_ID"))
													 {
														 allowanceFrequency = allowanceFrequencyElement.getValue().trim();
													 }
												 }
											 }
											 else
											 {
												 allowanceFrequency = "";
											 }
											 
											 if(allowanceFrequencyArr.equals(""))
											 {
												 allowanceFrequencyArr = allowanceFrequency;
											 }
											 else
											 {
												 allowanceFrequencyArr = allowanceFrequencyArr + "~" + allowanceFrequency;
											 }
											 
											 allowanceActualEndDate = allowancePlanElement.getChild("wd:Actual_End_Date") != null?allowancePlanElement.getChild("wd:Actual_End_Date").getValue().trim():"";	
											 if(allowanceActualEndDateArr.equals(""))
											 {
												 allowanceActualEndDateArr = allowanceActualEndDate;
											 }
											 else
											 {
												 if(!allowanceActualEndDate.equals(""))
												 {
													 allowanceActualEndDateArr = allowanceActualEndDateArr + "~" + allowanceActualEndDate;
												 }
											 }
										 }
									 }
									 else
									 {
										 allowancePlanNameArr = "";
										 allowanceElementNameArr = "";
										 allowanceAmountArr = "";
										 allowancePercentageArr = "";
										 allowanceCurrencyArr = "";
										 allowanceFrequencyArr = "";
										 allowanceActualEndDateArr = "";
									 }
									 
									 List<ReportElement> unitAllowancePlanList = compensationData.getChildren("wd:Unit_Allowance_Plan_Data");
									 if(unitAllowancePlanList != null && unitAllowancePlanList.size()>0)
									 {								 
										 for(ReportElement unitAllowancePlanElement: unitAllowancePlanList)
										 {
											 ReportElement unitAllowancePlanRef = unitAllowancePlanElement.getChild("wd:Compensation_Plan_Reference");
											 if(unitAllowancePlanRef != null)
											 {
												 List<ReportElement> unitAllowPlanData = unitAllowancePlanRef.getChildren("wd:ID");					 
												 for(ReportElement unitAllowPlanElement:unitAllowPlanData)
												 {
													 unitAllowanceMap = unitAllowPlanElement.getAllAttributes();
													 if(unitAllowanceMap.get("wd:type").equals("Compensation_Plan_ID"))
													 {
														 unitAllowancePlanName= unitAllowPlanElement.getValue().trim();											
													 }
												 }
											 }
											 else
											 {
												 unitAllowancePlanName = "";
											 }
											 
											 ReportElement unitAllowanceElementRef = unitAllowancePlanElement.getChild("wd:Compensation_Element_Reference");
											 if(unitAllowanceElementRef != null)
											 {
												 List<ReportElement> unitAllowanceElementData = unitAllowanceElementRef.getChildren("wd:ID");					 
												 for(ReportElement unitAllowanceElementElement:unitAllowanceElementData)
												 {
													 unitAllowanceElementMap = unitAllowanceElementElement.getAllAttributes();
													 if(unitAllowanceElementMap.get("wd:type").equals("Compensation_Element_ID"))
													 {
														 unitAllowanceElementName= unitAllowanceElementElement.getValue().trim();
														 if(unitAllowanceElementName.contains(","))
														 {
															 unitAllowanceElementName = unitAllowanceElementName.replaceAll(",", "|");
														 }
													 }
												 }
											 }
											 else
											 {
												 unitAllowanceElementName = "";
											 }
											 
											 ReportElement unitAllowanceUnitRef = unitAllowancePlanElement.getChild("wd:Unit_Reference");
											 if(unitAllowanceUnitRef != null)
											 {
												 List<ReportElement> unitMeasureElementData = unitAllowanceUnitRef.getChildren("wd:ID");					 
												 for(ReportElement unitSalaryMeasureElement:unitMeasureElementData)
												 {
													 unitAllowanceMeasureMap = unitSalaryMeasureElement.getAllAttributes();
													 if(unitAllowanceMeasureMap.get("wd:type").equals("UN_CEFACT_Common_Code_ID"))
													 {
														 unitAllowanceUnitOfMeasureName = unitSalaryMeasureElement.getValue().trim();
													 }
												 }
											 }
											 else
											 {
												 unitAllowanceUnitOfMeasureName = "";
											 }
											 
											 unitAllowanceNoOfUnits = unitAllowancePlanElement.getChild("wd:Number_of_Units") != null?unitAllowancePlanElement.getChild("wd:Number_of_Units").getValue().trim():"";
											 unitAllowancePerUnitAmount = unitAllowancePlanElement.getChild("wd:Per_Unit_Amount") != null?unitAllowancePlanElement.getChild("wd:Per_Unit_Amount").getValue().trim():"";
											 
											 ReportElement unitAllowanceCurrRef = unitAllowancePlanElement.getChild("wd:Currency_Reference");
											 if(unitAllowanceCurrRef != null)
											 {
												 List<ReportElement> unitCurrencyElementData = unitAllowanceCurrRef.getChildren("wd:ID");					 
												 for(ReportElement unitCurrencyElement:unitCurrencyElementData)
												 {
													 unitAllowanceCurrencyMap = unitCurrencyElement.getAllAttributes();
													 if(unitAllowanceCurrencyMap.get("wd:type").equals("Currency_ID"))
													 {
														 unitAllowanceCurrency = unitCurrencyElement.getValue().trim();
													 }
												 }
											 }
											 else
											 {
												 unitAllowanceCurrency = "";
											 }
											 
											 ReportElement unitAllowanceFreqRef = unitAllowancePlanElement.getChild("wd:Frequency_Reference");
											 if(unitAllowanceFreqRef != null)
											 {
												 List<ReportElement> unitFrequencyElementData = unitAllowanceFreqRef.getChildren("wd:ID");					 
												 for(ReportElement unitFrequencyElement:unitFrequencyElementData)
												 {
													 unitAllowanceFrequencyMap = unitFrequencyElement.getAllAttributes();
													 if(unitAllowanceFrequencyMap.get("wd:type").equals("Frequency_ID"))
													 {
														 unitAllowanceFrequency = unitFrequencyElement.getValue().trim();
													 }
												 }
											 }
											 else
											 {
												 unitAllowanceFrequency = "";
											 }
											 unitAllowanceActualEndDate = unitAllowancePlanElement.getChild("wd:Actual_End_Date") != null?unitAllowancePlanElement.getChild("wd:Actual_End_Date").getValue().trim():"";	
										 }
									 }
									 else
									 {
										 unitAllowancePlanName = "";
										 unitAllowanceElementName = "";
										 unitAllowanceUnitOfMeasureName = "";
										 unitAllowancePerUnitAmount = "";
										 unitAllowanceCurrency = "";
										 unitAllowanceNoOfUnits = "";
										 unitAllowanceFrequency = "";
										 unitAllowanceActualEndDate = "";
									 }
									 
									 List<ReportElement> periodSalaryPlanList = compensationData.getChildren("wd:Period_Salary_Plan_Data");
									 if(periodSalaryPlanList != null && periodSalaryPlanList.size() >0)
									 {
										 periodSalaryPlanName = "";
										 periodSalaryElementName = "";
										 compensationPeriod = "";
										 compensationPeriodMultiplier = "";
										 periodSalaryCurrency = "";
										 periodSalaryFrequency = "";
										 periodActualendDate = "";
										 for(ReportElement periodSalaryPlanElement: periodSalaryPlanList)
										 {
											 ReportElement periodSalaryPlanRef = periodSalaryPlanElement.getChild("wd:Compensation_Plan_Reference");
											 if(periodSalaryPlanRef != null)
											 {
												 List<ReportElement> periodSalaryPlanData = periodSalaryPlanRef.getChildren("wd:ID");					 
												 for(ReportElement periodSalPlanElement:periodSalaryPlanData)
												 {
													 periodSalaryPlanMap = periodSalPlanElement.getAllAttributes();
													 if(periodSalaryPlanMap.get("wd:type").equals("Compensation_Plan_ID"))
													 {
														 periodSalaryPlanName= periodSalPlanElement.getValue().trim();											
													 }
												 }
											 }
											 else
											 {
												 periodSalaryPlanName = "";
											 }
											 
											 ReportElement periodSalaryElementRef = periodSalaryPlanElement.getChild("wd:Compensation_Element_Reference");
											 if(periodSalaryElementRef != null)
											 {
												 List<ReportElement> periodSalaryElementData = periodSalaryElementRef.getChildren("wd:ID");					 
												 for(ReportElement periodSalaryElement:periodSalaryElementData)
												 {
													 periodSalaryElementMap = periodSalaryElement.getAllAttributes();
													 if(periodSalaryElementMap.get("wd:type").equals("Compensation_Element_ID"))
													 {
														 periodSalaryElementName= periodSalaryElement.getValue().trim();
														 if(periodSalaryElementName.contains(","))
														 {
															 periodSalaryElementName = periodSalaryElementName.replaceAll(",", "|");
														 }
													 }
												 }
											 }
											 else
											 {
												 periodSalaryElementName = "";
											 }
											 
											 ReportElement compPeriodRefRef = periodSalaryPlanElement.getChild("wd:Compensation_Period_Reference");
											 if(compPeriodRefRef != null)
											 {
												 List<ReportElement> compPeriodElementData = compPeriodRefRef.getChildren("wd:ID");					 
												 for(ReportElement compPeriodElement:compPeriodElementData)
												 {
													 compensationPeriodMap = compPeriodElement.getAllAttributes();
													 if(compensationPeriodMap.get("wd:type").equals("Compensation_Period_ID"))
													 {
														 compensationPeriod = compPeriodElement.getValue().trim();
													 }
												 }
											 }
											 else
											 {
												 compensationPeriod = "";
											 }
											 
											 compensationPeriodMultiplier = periodSalaryPlanElement.getChild("wd:Compensation_Period_Multiplier") != null?periodSalaryPlanElement.getChild("wd:Compensation_Period_Multiplier").getValue().trim():"";
											 
											 ReportElement periodSalaryCurrRef = periodSalaryPlanElement.getChild("wd:Currency_Reference");
											 if(periodSalaryCurrRef != null)
											 {
												 List<ReportElement> periodSalaryCurrData = periodSalaryCurrRef.getChildren("wd:ID");					 
												 for(ReportElement periodSalaryCurrencyElement:periodSalaryCurrData)
												 {
													 periodSalaryCurrencyMap = periodSalaryCurrencyElement.getAllAttributes();
													 if(periodSalaryCurrencyMap.get("wd:type").equals("Currency_ID"))
													 {
														 periodSalaryCurrency = periodSalaryCurrencyElement.getValue().trim();
													 }
												 }
											 }
											 else
											 {
												 periodSalaryCurrency = "";
											 }
											 
											 if(periodSalaryCurrency.equalsIgnoreCase("AUT"))
											 {
												 if(periodSalaryPlanName.equalsIgnoreCase("15.5 Salary Months"))
												 {
													 periodSalaryPlanName = "14 Salary Months";
												 }
											 }
											 
											 ReportElement periodSalaryFreqRef = periodSalaryPlanElement.getChild("wd:Frequency_Reference");
											 if(periodSalaryFreqRef != null)
											 {
												 List<ReportElement> periodSalaryFrequencyData = periodSalaryFreqRef.getChildren("wd:ID");					 
												 for(ReportElement periodSalaryFrequencyElement:periodSalaryFrequencyData)
												 {
													 periodSalaryFrequencyMap = periodSalaryFrequencyElement.getAllAttributes();
													 if(periodSalaryFrequencyMap.get("wd:type").equals("Frequency_ID"))
													 {
														 periodSalaryFrequency = periodSalaryFrequencyElement.getValue().trim();
													 }
												 }
											 }
											 else
											 {
												 periodSalaryFrequency = "";
											 }									 
											 periodActualendDate = periodSalaryPlanElement.getChild("wd:Actual_End_Date") != null?periodSalaryPlanElement.getChild("wd:Actual_End_Date").getValue().trim():"";									 
										 }
									 }
									 else
									 {
										 periodSalaryPlanName = "";
										 periodSalaryElementName = "";
										 compensationPeriod = "";
										 compensationPeriodMultiplier = "";
										 periodSalaryCurrency = "";
										 periodSalaryFrequency = "";
										 periodActualendDate = "";
									 }									 
								 }
								 else
								 {
									 //compEffectiveDate = "";
									 //compReasonName = "";
									 compPackageName = "";
									 compGradeName = "";
									 compProfileName = "";
									 bonusPlanNameArr = "";
									 bonusElementNameArr = "";
									 bonusAmountArr = "";
									 bonusPercentageArr = "";
									 bonusGuaranteedMinimumArr = "";
									 bonusCurrencyCodeArr = "";
									 bonusFrequencyNameArr = "";
									 bonusPercentageAssignedArr = "";
									 bonusActualEndDate = "";
									 bonusActualEndDateArr = "";
									 allowancePlanNameArr = "";
									 allowanceElementNameArr = "";
									 allowanceAmountArr = "";
									 allowancePercentageArr = "";
									 allowanceCurrencyArr = "";
									 allowanceFrequencyArr = "";
									 allowanceActualEndDate = "";
									 allowanceActualEndDateArr = "";
									 unitAllowancePlanName = "";
									 unitAllowanceElementName = "";
									 unitAllowanceUnitOfMeasureName = "";
									 unitAllowancePerUnitAmount = "";
									 unitAllowanceCurrency = "";
									 unitAllowanceNoOfUnits = "";
									 unitAllowanceFrequency = "";
									 unitAllowanceActualEndDate = "";
									 periodSalaryPlanName = "";
									 periodSalaryElementName = "";
									 compensationPeriod = "";
									 compensationPeriodMultiplier = "";
									 periodSalaryCurrency = "";
									 periodSalaryFrequency = "";
									 periodActualendDate = "";

								 }
						}				        				       
			          }
			        	headingFromTargetTenant = "Home_CNUM,Employee_ID,Compensation_Package_Name,Compensation_Grade_Name,Compensation_Grade_Profile_Name,"
			        			+ "Bonus_Plan_name,Bonus_Element_Name,Bonus_Default_Amount,Bonus_Amount,Bonus_Default_Percentage,Bonus_Percentage,Bonus_Guaranteed_Minimum,Bonus_Currency,Bonus_Frequency,Bonus_Percentage_Assigned,Bonus_Actual_End_Date,"
			        			+ "Allowance_Plan_Name,Allowance_Element_Name,Allowance_Amount,Allowance_Percentage,Allowance_Currency,Allowance_Frequency,Allowance_Actual_End_Date,Unit_Allowance_Plan_Name,"
			        			+ "Unit_Allowance_Element_Name,Unit_Allowance_Unit_Of_Measure_Name,Unit_Allowance_Per_Unit_Amount,Unit_Allowance_Currency,Unit_Allowance_No_Of_Unit,Unit_Allowance_Frequency,"
			        			+ "Unit_Allowance_Actual_End_Date,Period_Salary_Plan_Name,Period_Salary_Element_Name,Compensation_Period,Compensation_Period_Multiplier,Period_Salary_Currency,"
			        			+ "Period_Salary_Frequency,Period_Actual_End_Date";

			        	if(!customIdNumber.isEmpty())
						{
				        	headerStr = customIdNumber + "," + employeeId + 
							 		 "," + compPackageName + "," + compGradeName + "," + compProfileName + "," + bonusPlanNameArr + "," + bonusElementNameArr + "," + bonusDefaultAmountArr +
							 		 "," + bonusAmountArr + "," + bonusDefaultPercentageArr + "," + bonusPercentageArr + "," + bonusGuaranteedMinimumArr + "," + bonusCurrencyCodeArr + "," + bonusFrequencyNameArr + "," + bonusPercentageAssignedArr + "," + bonusActualEndDateArr +
							 		 "," + allowancePlanNameArr + "," + allowanceElementNameArr + "," + allowanceAmountArr + "," + allowancePercentageArr + "," + allowanceCurrencyArr + "," + allowanceFrequencyArr + "," + allowanceActualEndDateArr +
							 		 "," + unitAllowancePlanName + "," + unitAllowanceElementName + "," + unitAllowanceUnitOfMeasureName + "," + unitAllowancePerUnitAmount + "," + unitAllowanceCurrency + "," + unitAllowanceNoOfUnits +
							 		 "," + unitAllowanceFrequency + "," + unitAllowanceActualEndDate + "," + periodSalaryPlanName + "," + periodSalaryElementName + "," + compensationPeriod + "," + compensationPeriodMultiplier +
							 		 "," + periodSalaryCurrency + "," + periodSalaryFrequency + "," + periodActualendDate ;
				        	
			        	 targetTenantRowMap.put(customIdNumber, headerStr);
			        	 targetTenantColumnList.add(customIdNumber);
			        	 
						 if(finalStr.equals(""))
						 {
							 finalStr =  headingFromTargetTenant + "\n" + headerStr;
						 }
						 else
						 {
							 finalStr = finalStr + "\n" + headerStr;
						 }
					 }
				   }						 							 
			     }
				 System.out.println(finalStr);
				 targetContent = finalStr.getBytes();
				 wdCount = targetTenantColumnList.size();
		   }
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
	}
	
	private void createTemplateFromSourceTenantBrazil(Tenant tenant, InputStream is,
			SOAPConnection soapConnection, String loadCycle, String ruleName, String client, Long userId) {
		
		sourceCount = 0;
		headingFromSourceTenant = "";
		sourceTenantRowMap.clear();
		sourceTenantColumnList.clear();
		errorList.clear();
		String xmlReqFile = null;
		try 
		{			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 xmlReqFile = requestfile.getAbsolutePath();
				 String outputfile = addHireIdList(xmlReqFile, oldEmpList, ruleName, 0, oldEmpList.size(), "Employee_ID");
				 is = new FileInputStream(outputfile);
			     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
			     SOAPPart soapPart = soapMessage.getSOAPPart();
			     SOAPEnvelope envelope = soapPart.getEnvelope();
				 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
				 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
				 {
					  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
					  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
				 }
				 soapMessage.saveChanges();
			     ByteArrayOutputStream out = new ByteArrayOutputStream();
			     soapMessage.writeTo(out);
			     String strMsg = new String(out.toByteArray());	
			     
			     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
			     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
				 soapConnection = soapConnectionFactory.createConnection();
				 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
				 out = new ByteArrayOutputStream();
				 soapResponse.writeTo(out);
				 strMsg = new String(out.toByteArray(), "utf-8");

				 ReportElement soapResp = XmlParserManager.parseXml(strMsg);
				 
				 ReportElement pageData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Results");
				 
				 String totalNoOfPages = pageData.getChild("wd:Total_Pages").getValue().trim();
				 String totalResults = pageData.getChild("wd:Total_Results").getValue().trim();
				 int totalResult = Integer.parseInt(totalResults);
				 System.out.println("totalNoOfPages-"+totalNoOfPages);
				 System.out.println("totalResult-"+totalResult);						 
				 
				 String employeeId = "";
				 String WID = "";
				 String empTerminationDate = "";						 
				 String customIdNumber = "";
				 String startDate = "";
				 String endDate = "";
				 String reportURL = "";
				 
				 String finalStr = "";
				 String headerStr = "";
				 						 
				 Map<String,String> customTypeMap = null;
				 Map<String,String> widMap = null;
				 
				 int startIndex = 0;
				 int endIndex = 0;
				 
				 for (int j = 1; j <=Integer.parseInt(totalNoOfPages); j++) //
				 {
					 if(j == 1)
					 {
						startIndex = 0;
						if(999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = j*999;
						}
					 }
					 else
					 {
						startIndex = endIndex;
						if(j*999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = (j*999);
						}
					 }
					 outputfile = addHireIdList(xmlReqFile, oldEmpList, ruleName, startIndex, endIndex, "Employee_ID");
					 is = new FileInputStream(outputfile);
				     soapMessage = MessageFactory.newInstance().createMessage(null, is);
				     soapPart = soapMessage.getSOAPPart();
				     envelope = soapPart.getEnvelope();
					 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
					 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
					 {
							envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
					 }
					 soapMessage.saveChanges();
			         out = new ByteArrayOutputStream();
			         soapMessage.writeTo(out);
			         strMsg = new String(out.toByteArray());
			        
			         soapConnectionFactory = SOAPConnectionFactory.newInstance();
					 soapConnection = soapConnectionFactory.createConnection();
			         soapResponse = soapConnection.call(soapMessage, sourceUrl);
			         out = new ByteArrayOutputStream();
			         soapResponse.writeTo(out);
			         strMsg = new String(out.toByteArray(), "utf-8");
			        
			         soapResp = XmlParserManager.parseXml(strMsg);
			        
			        ReportElement responseData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Data");
			        
			        List<ReportElement> applicantData = responseData.getChildren("wd:Worker");
			        for(ReportElement reportElement : applicantData)
					{
			        	ReportElement terminationStatusData = reportElement.getChild("wd:Worker_Data")
					 			.getChild("wd:Employment_Data")
					 			.getChild("wd:Worker_Status_Data");
			        	
			        	empTerminationDate = terminationStatusData.getChild("wd:Termination_Date") != null?terminationStatusData.getChild("wd:Termination_Date").getValue().trim():"";					        	
			        	//if(!empTerminationDate.equalsIgnoreCase(""))
			        	{
			        		//Date termDate = convertWorkdayStringToDate(empTerminationDate);
			        		//if((termDate.equals(termFromDate) || termDate.after(termFromDate)) && (termDate.equals(termToDate) || termDate.before(termToDate)))
			        		{
					        	//System.out.println("empTerminationDate--"+ termDate);
				        		ReportElement element1 = reportElement.getChild("wd:Worker_Data");
				        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
				        		System.out.println("employeeId--"+ employeeId);
				        		
				        		ReportElement widRef = reportElement.getChild("wd:Worker_Reference");
								 if(widRef != null)
								 {
									 List<ReportElement> idList = widRef.getChildren("wd:ID");
									 for(ReportElement idElement:idList)
									 {
										 widMap = idElement.getAllAttributes();
										 if(widMap.get("wd:type").equals("WID"))
										 {
											 WID = idElement.getValue().trim();
										 }
									 }
								 }
								 else
								 {
									 WID = "";
								 }
								
								 /*if(tenant.getTenantName().equalsIgnoreCase("ibm6"))
								 {
									 reportURL = "https://" + tenant.getTenantUrl() + "customreport2/" + tenant.getTenantName() + "/ISU_Verify_Global/" + "CIPA_Brazil?Employee!WID=" + WID;
								 }
								 else if(tenant.getTenantName().equalsIgnoreCase("ibm10"))
								 {*/
									 reportURL = "https://" + tenant.getTenantUrl() + "customreport2/" + tenant.getTenantName() + "/ISU_Verify_Global/" + "CIPA_Brazil?Entry_Date_and_Time=2021-10-11T11:29:59.000-07:00&Employee!WID=" + WID;
								 //}
								 
								 JSONArray jArr = createCIPABrazilData(reportURL);
								 if(jArr != null && jArr.length() >0)
								 {
									 for(int i = 0; i<jArr.length(); i++) 
								     {
										JSONObject objects = jArr.getJSONObject(i);
										startDate = objects.isNull("startDate")?"":objects.getString("startDate");
										endDate = objects.isNull("endDate")?"":objects.getString("endDate");
								     }
								 }
								 else
								 {
									 startDate = "";
									 endDate = "";
								 }
								 																											 
								 ReportElement identificationData = reportElement.getChild("wd:Worker_Data")
								 			.getChild("wd:Personal_Data")
								 			.getChild("wd:Identification_Data");
								 
								 if(identificationData != null)
								 {												 
									 List<ReportElement> customIDList = identificationData.getChildren("wd:Custom_ID");
									 if(customIDList != null && customIDList.size() >0)
									 {
										 String expirationDate = "";
										 customIdNumber = "" ;
										 for(ReportElement customElement : customIDList)
										 {
											 ReportElement customIdData = customElement.getChild("wd:Custom_ID_Data");
											 if(customIdData != null)
											 {
												 expirationDate = customIdData.getChild("wd:Expiration_Date") != null?customIdData.getChild("wd:Expiration_Date").getValue().trim():"";
												 ReportElement customTypeRef = customIdData.getChild("wd:ID_Type_Reference");
												 if(customTypeRef != null)
												 {
													 List<ReportElement> customIdTypeData = customTypeRef.getChildren("wd:ID");								 
													 for(ReportElement idTypeElement:customIdTypeData)
													 {
														 customTypeMap = idTypeElement.getAllAttributes();
														 if(customTypeMap.get("wd:type").equals("Custom_ID_Type_ID"))
														 {
															 if(idTypeElement.getValue().trim().equalsIgnoreCase("Global_CNUM") && expirationDate.isEmpty())
															 {
																 customIdNumber = customIdData.getChild("wd:ID") != null?customIdData.getChild("wd:ID").getValue().trim():""; 
															 }
														 }
													 }
												 }												 												 
											 }
										 }
										 if(customIdNumber.isEmpty())
										 {
											 customIdNumber = "" ;
										 }
									 }
									 else
									 {
										 customIdNumber = "" ;
									 }
								 }
								 else
								 {
									 customIdNumber = "" ;											 
								 }								 															 
						}						        
			           }

			        	headingFromSourceTenant = "Home_CNUM,Employee_ID,CIPA_Start_Date,CIPA_End_Date";
			        	if(!customIdNumber.isEmpty())
						{
				        	headerStr = customIdNumber + "," + employeeId + "," + startDate + "," + endDate;
				        	
				        	sourceTenantRowMap.put(customIdNumber, headerStr);							        	
				        	sourceTenantColumnList.add(customIdNumber);
				        	
				        	if(finalStr.equals(""))
							{
								 finalStr =  headingFromSourceTenant + "\n" + headerStr;
							}
							else
							{
								 finalStr = finalStr + "\n" + headerStr;
							}
						}	
			     }						 							 
			   }
				 System.out.println(finalStr);
				 sourceContent = finalStr.getBytes();						 
				 sourceCount = sourceTenantColumnList.size();
		    }
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		
	}

	private void createTemplateFromTargetTenantBrazil(Tenant tenant, InputStream is, SOAPConnection soapConnection, String loadCycle, String ruleName, String client, Long userId) {

		wdCount = 0;
		headingFromTargetTenant = "";
		targetTenantRowMap.clear();
		targetTenantColumnList.clear();
		String xmlReqFile = null;
		try 
		{			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 xmlReqFile = requestfile.getAbsolutePath();
				 String outputfile = addHireIdList(xmlReqFile, newEmpList, ruleName, 0, newEmpList.size(), "Employee_ID");
				 is = new FileInputStream(outputfile);
			     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
			     SOAPPart soapPart = soapMessage.getSOAPPart();
			     SOAPEnvelope envelope = soapPart.getEnvelope();
				 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
				 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
				 {
					  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
					  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
				 }
				 soapMessage.saveChanges();
			     ByteArrayOutputStream out = new ByteArrayOutputStream();
			     soapMessage.writeTo(out);
			     String strMsg = new String(out.toByteArray());	
			     
			     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
			     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
				 soapConnection = soapConnectionFactory.createConnection();
				 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
				 out = new ByteArrayOutputStream();
				 soapResponse.writeTo(out);
				 strMsg = new String(out.toByteArray(), "utf-8");

				 ReportElement soapResp = XmlParserManager.parseXml(strMsg);
				 
				 ReportElement pageData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Results");
				 
				 String totalNoOfPages = pageData.getChild("wd:Total_Pages").getValue().trim();
				 String totalResults = pageData.getChild("wd:Total_Results").getValue().trim();
				 int totalResult = Integer.parseInt(totalResults);
				 System.out.println("totalNoOfPages-"+totalNoOfPages);
				 System.out.println("totalResult-"+totalResult);				 
				 
				 String employeeId = "";
				 String WID = "";
				 String employeeHireDate = "";
				 String customIdNumber = "";
				 String startDate = "";
				 String endDate = "";
				 String reportURL = "";
				 
				 String finalStr = "";
				 String headerStr = "";
				 						 
				 Map<String,String> customTypeMap = null;
				 Map<String,String> widMap = null;
				 
				 int startIndex = 0;
				 int endIndex = 0;
				 
				 for (int j = 1; j <=Integer.parseInt(totalNoOfPages); j++) //
				 {
					 if(j == 1)
					 {
						startIndex = 0;
						if(999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = j*999;
						}
					 }
					 else
					 {
						startIndex = endIndex;
						if(j*999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = (j*999);
						}
					 }
					 outputfile = addHireIdList(xmlReqFile, newEmpList, ruleName, startIndex, endIndex, "Employee_ID");
					 is = new FileInputStream(outputfile);
				     soapMessage = MessageFactory.newInstance().createMessage(null, is);
				     soapPart = soapMessage.getSOAPPart();
				     envelope = soapPart.getEnvelope();
					 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
					 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
					 {
							envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
					 }
					 soapMessage.saveChanges();
			         out = new ByteArrayOutputStream();
			         soapMessage.writeTo(out);
			         strMsg = new String(out.toByteArray());
			        
			         soapConnectionFactory = SOAPConnectionFactory.newInstance();
					 soapConnection = soapConnectionFactory.createConnection();
			         soapResponse = soapConnection.call(soapMessage, sourceUrl);
			         out = new ByteArrayOutputStream();
			         soapResponse.writeTo(out);
			         strMsg = new String(out.toByteArray(), "utf-8");
			        
			         soapResp = XmlParserManager.parseXml(strMsg);
			        
			        ReportElement responseData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Data");
			        
			        List<ReportElement> applicantData = responseData.getChildren("wd:Worker");
			        for(ReportElement reportElement : applicantData)
					{
			        	ReportElement hireStatusData = reportElement.getChild("wd:Worker_Data")
					 			.getChild("wd:Employment_Data")
					 			.getChild("wd:Worker_Status_Data");
			        	
			        	employeeHireDate = hireStatusData.getChild("wd:Hire_Date") != null?hireStatusData.getChild("wd:Hire_Date").getValue().trim():"";					        	
			        	if(!employeeHireDate.equalsIgnoreCase(""))
			        	{
			        		Date empHireDate = convertWorkdayStringToDate(employeeHireDate);
			        		//if((empHireDate.equals(hireFromDate) || empHireDate.after(hireFromDate)) && (empHireDate.equals(hireToDate) || empHireDate.before(hireToDate)))
			        		{
					        	System.out.println("empHireDate--"+ empHireDate);
				        		ReportElement element1 = reportElement.getChild("wd:Worker_Data");
				        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
				        		System.out.println("employeeId--"+ employeeId);
				        		
				        		ReportElement widRef = reportElement.getChild("wd:Worker_Reference");
								 if(widRef != null)
								 {
									 List<ReportElement> idList = widRef.getChildren("wd:ID");
									 for(ReportElement idElement:idList)
									 {
										 widMap = idElement.getAllAttributes();
										 if(widMap.get("wd:type").equals("WID"))
										 {
											 WID = idElement.getValue().trim();
										 }
									 }
								 }
								 else
								 {
									 WID = "";
								 }
								
								 /*if(tenant.getTenantName().equalsIgnoreCase("ibm6"))
								 {
									 reportURL = "https://" + tenant.getTenantUrl() + "customreport2/" + tenant.getTenantName() + "/ISU_Verify_Global/" + "CIPA_Brazil?Employee!WID=" + WID;
								 }
								 else if(tenant.getTenantName().equalsIgnoreCase("ibm10"))
								 {*/
									 reportURL = "https://" + tenant.getTenantUrl() + "customreport2/" + tenant.getTenantName() + "/ISU_Verify_Global/" + "CIPA_Brazil?Entry_Date_and_Time=2021-11-01T11:29:59.000-07:00&Employee!WID=" + WID;
								 //}
								 
								 JSONArray jArr = createCIPABrazilData(reportURL);
								 if(jArr != null && jArr.length() >0)
								 {
									 for(int i = 0; i<jArr.length(); i++) 
								     {
										JSONObject objects = jArr.getJSONObject(i);
										startDate = objects.isNull("startDate")?"":objects.getString("startDate");
										endDate = objects.isNull("endDate")?"":objects.getString("endDate");
								     }
								 }
								 else
								 {
									 startDate = "";
									 endDate = "";
								 }
				        						        										 
								 ReportElement identificationData = reportElement.getChild("wd:Worker_Data")
								 			.getChild("wd:Personal_Data")
								 			.getChild("wd:Identification_Data");
								 
								 if(identificationData != null)
								 {																		 
									 List<ReportElement> customIDList = identificationData.getChildren("wd:Custom_ID");
									 if(customIDList != null && customIDList.size() >0)
									 {
										 //String customIdOldDate = null;
										 customIdNumber = "" ;
										 for(ReportElement customElement : customIDList)
										 {
											 ReportElement customIdData = customElement.getChild("wd:Custom_ID_Data");
											 if(customIdData != null)
											 {
												 ReportElement customTypeRef = customIdData.getChild("wd:ID_Type_Reference");
												 if(customTypeRef != null)
												 {
													 List<ReportElement> customIdTypeData = customTypeRef.getChildren("wd:ID");								 
													 for(ReportElement idTypeElement:customIdTypeData)
													 {
														 customTypeMap = idTypeElement.getAllAttributes();
														 if(customTypeMap.get("wd:type").equals("Custom_ID_Type_ID"))
														 {
															 if(idTypeElement.getValue().trim().equalsIgnoreCase("Previous_IBM_CNUM"))
															 {
																 customIdNumber = customIdData.getChild("wd:ID") != null?customIdData.getChild("wd:ID").getValue().trim():"";
															 }
														 }
													 }
												 }
											 }
										 }
										 if(customIdNumber.isEmpty())
										 {
											 customIdNumber = "" ;
										 }
									 }
									 else
									 {
										 customIdNumber = "" ;
									 }
								 }
								 else
								 {
									 customIdNumber = "" ;
								 }
						}				        
			          }
			        	
			        	headingFromTargetTenant = "Home_CNUM,Employee_ID,CIPA_Start_Date,CIPA_End_Date";

				        	if(!customIdNumber.isEmpty())
							{
					        	headerStr = customIdNumber + "," + employeeId + "," + startDate + "," + endDate;
							        	
						        	 targetTenantRowMap.put(customIdNumber, headerStr);
						        	 targetTenantColumnList.add(customIdNumber);
						        	 
									 if(finalStr.equals(""))
									 {
										 finalStr =  headingFromTargetTenant + "\n" + headerStr;
									 }
									 else
									 {
										 finalStr = finalStr + "\n" + headerStr;
									 }
							}
				   }						 							 
			     }
				 System.out.println(finalStr);
				 targetContent = finalStr.getBytes();
				 wdCount = targetTenantColumnList.size();
		   }
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		
	}
	
	private JSONArray createCIPABrazilData(String reportURL) throws JSONException {

		JSONArray jArr = new JSONArray();
		DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilder dBuilder;
		XPath xPath = XPathFactory.newInstance().newXPath();
		HttpBasicAuthentication httpBasicAuthentication = new HttpBasicAuthentication();
		String output = httpBasicAuthentication.getWithBasicAuthentication(reportURL, tenant.getTenantUser(), tenant.getTenantUserPassword());
		Reader reader1 = new StringReader(output);
		Document doc;
		try 
		{
			dBuilder = dbFactory.newDocumentBuilder();
			doc = dBuilder.parse(new InputSource(reader1));
			doc.getDocumentElement().normalize();
			String expression = EMPLOYEE_APPLICANT_MAPPING_RESPONSE_EXPRESSION;
			NodeList nodeList = (NodeList) xPath.compile(expression).evaluate(doc, XPathConstants.NODESET);
			for (int i = 0; i < nodeList.getLength(); i++) 
			{
				try 
				{
					jArr = parseNodesForCIPABrazil(nodeList);
				} 
				catch (DOMException e)
				{
					e.printStackTrace();
				}
			}			
		} 
		catch (SAXException e) 
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (XPathExpressionException e) 
		{
			e.printStackTrace();
		} 
		catch (ParserConfigurationException e) 
		{
			e.printStackTrace();
		}
		return jArr;
	}
	
	private JSONArray parseNodesForCIPABrazil(NodeList nodeList) throws DOMException, JSONException {
		
		JSONArray details = new JSONArray();
		for (int i = 0; i < nodeList.getLength(); i++) 
		{
		    Node nNode = nodeList.item(i);
		    if (nNode.getNodeName().equals("wd:Report_Data")) 
		    {
				if (nNode.getNodeType() == Node.ELEMENT_NODE) 
				{
					Element eElement = (Element) nNode;
					if (eElement.hasChildNodes()) 
					{
						NodeList childNodes = eElement.getChildNodes();
						for (int j = 0; j < childNodes.getLength(); j++) 
						{
							Node aChildNode = childNodes.item(j);
							JSONObject obj = new JSONObject();
							if (aChildNode.getNodeName().equals("wd:Report_Entry")) 
							{
								Element eElementEntry = (Element) aChildNode;
								if (eElement.hasChildNodes()) 
								{
									NodeList childNodesEntry = eElementEntry.getChildNodes();
									for (int k = 0; k < childNodesEntry.getLength(); k++) 
									{										
										Node aChildNodeEntry = childNodesEntry.item(k);
										if(aChildNodeEntry.getNodeName().equals("wd:startDate"))
										{											
											obj.put("startDate", aChildNodeEntry.getTextContent());											
										}
										else if(aChildNodeEntry.getNodeName().equals("wd:endDate"))
										{
											obj.put("endDate", aChildNodeEntry.getTextContent());	
										}
									}
								}
							}
							details.put(obj);
						}
					}
				}
		    }
		}
		return details;
	}

	private void createTemplateFromSourceTenantTimeOff(Tenant tenant, InputStream is, SOAPConnection soapConnection, String loadCycle, String ruleName, String client, Long userId) {
		
		sourceCount = 0;
		headingFromSourceTenant = "";
		sourceTenantRowMap.clear();
		sourceTenantColumnList.clear();
		errorList.clear();
		String xmlReqFile = null;
		try 
		{			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 xmlReqFile = requestfile.getAbsolutePath();
				 String outputfile = addHireIdList(xmlReqFile, oldEmpList, ruleName, 0, oldEmpList.size(), "Employee_ID");
				 is = new FileInputStream(outputfile);
			     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
			     SOAPPart soapPart = soapMessage.getSOAPPart();
			     SOAPEnvelope envelope = soapPart.getEnvelope();
				 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
				 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
				 {
					  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
					  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
				 }
				 soapMessage.saveChanges();
			     ByteArrayOutputStream out = new ByteArrayOutputStream();
			     soapMessage.writeTo(out);
			     String strMsg = new String(out.toByteArray());	
			     
			     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
			     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
				 soapConnection = soapConnectionFactory.createConnection();
				 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
				 out = new ByteArrayOutputStream();
				 soapResponse.writeTo(out);
				 strMsg = new String(out.toByteArray(), "utf-8");

				 ReportElement soapResp = XmlParserManager.parseXml(strMsg);
				 
				 ReportElement pageData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Results");
				 
				 String totalNoOfPages = pageData.getChild("wd:Total_Pages").getValue().trim();
				 String totalResults = pageData.getChild("wd:Total_Results").getValue().trim();
				 int totalResult = Integer.parseInt(totalResults);
				 System.out.println("totalNoOfPages-"+totalNoOfPages);
				 System.out.println("totalResult-"+totalResult);						 
				 
				 String employeeId = "";
				 String WID = "";
				 String empTerminationDate = "";						 
				 String customIdNumber = "";
				 String leaveDateArr = "";
				 String leaveTypeArr = "";
				 String leaveUnitsArr = "";
				 String leaveDate = "";
				 String leaveType = "";
				 String leaveUnits = "";
				 
				 String finalStr = "";
				 String headerStr = "";
				 
				 int startIndex = 0;
				 int endIndex = 0;
				 String reportURL = "";
				 						 
				 Map<String,String> customTypeMap = null;
				 Map<String,String> widMap = null;
				 
				 for (int j = 1; j <=Integer.parseInt(totalNoOfPages); j++) //
				 {
					 if(j == 1)
					 {
						startIndex = 0;
						if(999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = j*999;
						}
					 }
					 else
					 {
						startIndex = endIndex;
						if(j*999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = (j*999);
						}
					 }
					 outputfile = addHireIdList(xmlReqFile, oldEmpList, ruleName, startIndex, endIndex, "Employee_ID");
					 is = new FileInputStream(outputfile);
				     soapMessage = MessageFactory.newInstance().createMessage(null, is);
				     soapPart = soapMessage.getSOAPPart();
				     envelope = soapPart.getEnvelope();
					 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
					 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
					 {
							envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
					 }
					 soapMessage.saveChanges();
			         out = new ByteArrayOutputStream();
			         soapMessage.writeTo(out);
			         strMsg = new String(out.toByteArray());
			        
			         soapConnectionFactory = SOAPConnectionFactory.newInstance();
					 soapConnection = soapConnectionFactory.createConnection();
			         soapResponse = soapConnection.call(soapMessage, sourceUrl);
			         out = new ByteArrayOutputStream();
			         soapResponse.writeTo(out);
			         strMsg = new String(out.toByteArray(), "utf-8");
			        
			         soapResp = XmlParserManager.parseXml(strMsg);
			        
			        ReportElement responseData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Data");
			        
			        List<ReportElement> applicantData = responseData.getChildren("wd:Worker");
			        for(ReportElement reportElement : applicantData)
					{
			        	ReportElement terminationStatusData = reportElement.getChild("wd:Worker_Data")
					 			.getChild("wd:Employment_Data")
					 			.getChild("wd:Worker_Status_Data");
			        	
			        	empTerminationDate = terminationStatusData.getChild("wd:Termination_Date") != null?terminationStatusData.getChild("wd:Termination_Date").getValue().trim():"";					        	
			        	if(!empTerminationDate.equalsIgnoreCase(""))
			        	{
			        		Date termDate = convertWorkdayStringToDate(empTerminationDate);
			        		//if((termDate.equals(termFromDate) || termDate.after(termFromDate)) && (termDate.equals(termToDate) || termDate.before(termToDate)))
			        		{
					        	System.out.println("empTerminationDate--"+ termDate);
				        		ReportElement element1 = reportElement.getChild("wd:Worker_Data");
				        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
				        		System.out.println("employeeId--"+ employeeId);
				        		
				        		ReportElement widRef = reportElement.getChild("wd:Worker_Reference");
								 if(widRef != null)
								 {
									 List<ReportElement> idList = widRef.getChildren("wd:ID");
									 for(ReportElement idElement:idList)
									 {
										 widMap = idElement.getAllAttributes();
										 if(widMap.get("wd:type").equals("WID"))
										 {
											 WID = idElement.getValue().trim();
										 }
									 }
								 }
								 else
								 {
									 WID = "";
								 }
								
								 /*if(tenant.getTenantName().equalsIgnoreCase("ibm6"))
								 {
									 reportURL = "https://" + tenant.getTenantUrl() + "customreport2/" + tenant.getTenantName() + "/ISU_Verify_Global/" + "Employee_Time_Off?Employee!WID=" + WID;
								 }
								 else if(tenant.getTenantName().equalsIgnoreCase("ibm10"))
								 {*/
									 reportURL = "https://" + tenant.getTenantUrl() + "customreport2/" + tenant.getTenantName() + "/ISU_Verify_Global/" + "Employee_Time_Off?Employee!WID=" + WID;
								 //}
								 
								 JSONArray jArr = createTimeOffData(reportURL);
								 if(jArr != null && jArr.length() >0)
								 {
									 leaveDateArr = "";
									 leaveTypeArr = "";
									 leaveUnitsArr = "";
									 for(int i = 0; i<jArr.length(); i++) 
									 {
										JSONObject objects = jArr.getJSONObject(i);
										leaveDate = objects.isNull("leaveDate")?"":objects.getString("leaveDate");
										if(leaveDateArr.equals(""))
										{
											leaveDateArr = leaveDate;
										}
										else
										{
											leaveDateArr = leaveDateArr + "~" + leaveDate;
										}
										leaveType = objects.isNull("leaveType")?"":objects.getString("leaveType");
										if(leaveTypeArr.equals(""))
										{
											leaveTypeArr = leaveType;
										}
										else
										{
											leaveTypeArr = leaveTypeArr + "~" + leaveType;
										}
										leaveUnits = objects.isNull("leaveUnits")?"":objects.getString("leaveUnits");
										if(leaveUnitsArr.equals(""))
										{
											leaveUnitsArr = leaveUnits;
										}
										else
										{
											leaveUnitsArr = leaveUnitsArr + "~" + leaveUnits;
										}
									 }
								 }
								 else
								 {
									 leaveDateArr = "";
									 leaveTypeArr = "";
									 leaveUnitsArr = "";
								 }
								 																											 
								 ReportElement identificationData = reportElement.getChild("wd:Worker_Data")
								 			.getChild("wd:Personal_Data")
								 			.getChild("wd:Identification_Data");
								 
								 if(identificationData != null)
								 {												 
									 List<ReportElement> customIDList = identificationData.getChildren("wd:Custom_ID");
									 if(customIDList != null && customIDList.size() >0)
									 {
										 String expirationDate = "";
										 customIdNumber = "" ;
										 for(ReportElement customElement : customIDList)
										 {
											 ReportElement customIdData = customElement.getChild("wd:Custom_ID_Data");
											 if(customIdData != null)
											 {
												 expirationDate = customIdData.getChild("wd:Expiration_Date") != null?customIdData.getChild("wd:Expiration_Date").getValue().trim():"";
												 ReportElement customTypeRef = customIdData.getChild("wd:ID_Type_Reference");
												 if(customTypeRef != null)
												 {
													 List<ReportElement> customIdTypeData = customTypeRef.getChildren("wd:ID");								 
													 for(ReportElement idTypeElement:customIdTypeData)
													 {
														 customTypeMap = idTypeElement.getAllAttributes();
														 if(customTypeMap.get("wd:type").equals("Custom_ID_Type_ID"))
														 {
															 if(idTypeElement.getValue().trim().equalsIgnoreCase("Global_CNUM") && expirationDate.isEmpty())
															 {
																 customIdNumber = customIdData.getChild("wd:ID") != null?customIdData.getChild("wd:ID").getValue().trim():""; 
															 }
														 }
													 }
												 }												 												 
											 }
										 }
										 if(customIdNumber.isEmpty())
										 {
											 customIdNumber = "" ;
										 }
									 }
									 else
									 {
										 customIdNumber = "" ;
									 }
								 }
								 else
								 {
									 customIdNumber = "" ;											 
								 }									 				
						}						        				        
			        }
					     headingFromSourceTenant = "Home_CNUM,Employee_ID,Time_Off_Date,Time_Off_Type,Time_Off_Units";

				        	if(!customIdNumber.isEmpty())
							{
					        	headerStr = customIdNumber + "," + employeeId + "," + leaveDateArr + "," + leaveTypeArr + "," + leaveUnitsArr;
					        	
					        	sourceTenantRowMap.put(customIdNumber, headerStr);							        	
					        	sourceTenantColumnList.add(customIdNumber);
					        	
					        	if(finalStr.equals(""))
								{
									 finalStr =  headingFromSourceTenant + "\n" + headerStr;
								}
								else
								{
									 finalStr = finalStr + "\n" + headerStr;
								}
							}
			        }						 							 
			      }
				 System.out.println(finalStr);
				 sourceContent = finalStr.toString().getBytes();
				 sourceCount = sourceTenantColumnList.size();
		    }
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		
	}

	private void createTemplateFromTargetTenantTimeOff(Tenant tenant, InputStream is, SOAPConnection soapConnection, String loadCycle, String ruleName, String client, Long userId) {
		
		wdCount = 0;
		headingFromTargetTenant = "";
		targetTenantRowMap.clear();
		targetTenantColumnList.clear();
		String xmlReqFile = null;

		try 
		{			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 xmlReqFile = requestfile.getAbsolutePath();
				 String outputfile = addHireIdList(xmlReqFile, newEmpList, ruleName, 0, newEmpList.size(), "Employee_ID");
				 is = new FileInputStream(outputfile);
			     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
			     SOAPPart soapPart = soapMessage.getSOAPPart();
			     SOAPEnvelope envelope = soapPart.getEnvelope();
				 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
				 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
				 {
					  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
					  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
				 }
				 soapMessage.saveChanges();
			     ByteArrayOutputStream out = new ByteArrayOutputStream();
			     soapMessage.writeTo(out);
			     String strMsg = new String(out.toByteArray());	
			     
			     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
			     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
				 soapConnection = soapConnectionFactory.createConnection();
				 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
				 out = new ByteArrayOutputStream();
				 soapResponse.writeTo(out);
				 strMsg = new String(out.toByteArray(), "utf-8");

				 ReportElement soapResp = XmlParserManager.parseXml(strMsg);
				 
				 ReportElement pageData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Results");
				 
				 String totalNoOfPages = pageData.getChild("wd:Total_Pages").getValue().trim();
				 String totalResults = pageData.getChild("wd:Total_Results").getValue().trim();
				 int totalResult = Integer.parseInt(totalResults);
				 System.out.println("totalNoOfPages-"+totalNoOfPages);
				 System.out.println("totalResult-"+totalResult);				 				 

				 String employeeHireDate = "";
				 String employeeId = "";
				 String WID = "";						 
				 String customIdNumber = "";
				 String leaveDateArr = "";
				 String leaveTypeArr = "";
				 String leaveUnitsArr = "";
				 String leaveDate = "";
				 String leaveType = "";
				 String leaveUnits = "";
				 
				 String finalStr = "";
				 String headerStr = "";
				 
				 int startIndex = 0;
				 int endIndex = 0;
				 String reportURL = "";
				 						 
				 Map<String,String> customTypeMap = null;
				 Map<String,String> widMap = null;
				 				 
				 for (int j = 1; j <=Integer.parseInt(totalNoOfPages); j++) //
				 {
					 if(j == 1)
					 {
						startIndex = 0;
						if(999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = j*999;
						}
					 }
					 else
					 {
						startIndex = endIndex;
						if(j*999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = (j*999);
						}
					 }
					 outputfile = addHireIdList(xmlReqFile, newEmpList, ruleName, startIndex, endIndex, "Employee_ID");
					 is = new FileInputStream(outputfile);
				     soapMessage = MessageFactory.newInstance().createMessage(null, is);
				     soapPart = soapMessage.getSOAPPart();
				     envelope = soapPart.getEnvelope();
					 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
					 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
					 {
							envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
					 }
					 soapMessage.saveChanges();
			         out = new ByteArrayOutputStream();
			         soapMessage.writeTo(out);
			         strMsg = new String(out.toByteArray());
			        
			         soapConnectionFactory = SOAPConnectionFactory.newInstance();
					 soapConnection = soapConnectionFactory.createConnection();
			         soapResponse = soapConnection.call(soapMessage, sourceUrl);
			         out = new ByteArrayOutputStream();
			         soapResponse.writeTo(out);
			         strMsg = new String(out.toByteArray(), "utf-8");
			        
			         soapResp = XmlParserManager.parseXml(strMsg);
			        
			        
			        ReportElement responseData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Data");
			        
			        List<ReportElement> applicantData = responseData.getChildren("wd:Worker");
			        for(ReportElement reportElement : applicantData)
					{
			        	ReportElement hireStatusData = reportElement.getChild("wd:Worker_Data")
					 			.getChild("wd:Employment_Data")
					 			.getChild("wd:Worker_Status_Data");
			        	
			        	employeeHireDate = hireStatusData.getChild("wd:Hire_Date") != null?hireStatusData.getChild("wd:Hire_Date").getValue().trim():"";					        	
			        	if(!employeeHireDate.equalsIgnoreCase(""))
			        	{
			        		Date empHireDate = convertWorkdayStringToDate(employeeHireDate);
			        		//if((empHireDate.equals(hireFromDate) || empHireDate.after(hireFromDate)) && (empHireDate.equals(hireToDate) || empHireDate.before(hireToDate)))
			        		{
					        	System.out.println("empHireDate--"+ empHireDate);
				        		ReportElement element1 = reportElement.getChild("wd:Worker_Data");
				        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
				        		System.out.println("employeeId--"+ employeeId);
				        		
				        		ReportElement widRef = reportElement.getChild("wd:Worker_Reference");
								 if(widRef != null)
								 {
									 List<ReportElement> idList = widRef.getChildren("wd:ID");
									 for(ReportElement idElement:idList)
									 {
										 widMap = idElement.getAllAttributes();
										 if(widMap.get("wd:type").equals("WID"))
										 {
											 WID = idElement.getValue().trim();
										 }
									 }
								 }
								 else
								 {
									 WID = "";
								 }
								
								 /*if(tenant.getTenantName().equalsIgnoreCase("ibm6"))
								 {
									 reportURL = "https://" + tenant.getTenantUrl() + "customreport2/" + tenant.getTenantName() + "/ISU_Verify_Global/" + "Employee_Time_Off?Employee!WID=" + WID;
								 }
								 else if(tenant.getTenantName().equalsIgnoreCase("ibm10"))
								 {*/
									 reportURL = "https://" + tenant.getTenantUrl() + "customreport2/" + tenant.getTenantName() + "/ISU_Verify_Global/" + "Employee_Time_Off?Employee!WID=" + WID;
								 //}
								 
								 JSONArray jArr = createTimeOffData(reportURL);
								 if(jArr != null && jArr.length() >0)
								 {
									 leaveDateArr = "";
									 leaveTypeArr = "";
									 leaveUnitsArr = "";
									 for(int i = 0; i<jArr.length(); i++) 
									 {
										JSONObject objects = jArr.getJSONObject(i);
										leaveDate = objects.isNull("leaveDate")?"":objects.getString("leaveDate");
										if(leaveDateArr.equals(""))
										{
											leaveDateArr = leaveDate;
										}
										else
										{
											leaveDateArr = leaveDateArr + "~" + leaveDate;
										}
										leaveType = objects.isNull("leaveType")?"":objects.getString("leaveType");
										if(leaveTypeArr.equals(""))
										{
											leaveTypeArr = leaveType;
										}
										else
										{
											leaveTypeArr = leaveTypeArr + "~" + leaveType;
										}
										leaveUnits = objects.isNull("leaveUnits")?"":objects.getString("leaveUnits");
										if(leaveUnitsArr.equals(""))
										{
											leaveUnitsArr = leaveUnits;
										}
										else
										{
											leaveUnitsArr = leaveUnitsArr + "~" + leaveUnits;
										}
									 }
								 }
								 else
								 {
									 leaveDateArr = "";
									 leaveTypeArr = "";
									 leaveUnitsArr = "";
								 }
				        						        										 
								 ReportElement identificationData = reportElement.getChild("wd:Worker_Data")
								 			.getChild("wd:Personal_Data")
								 			.getChild("wd:Identification_Data");
								 
								 if(identificationData != null)
								 {																		 
									 List<ReportElement> customIDList = identificationData.getChildren("wd:Custom_ID");
									 if(customIDList != null && customIDList.size() >0)
									 {
										 customIdNumber = "" ;
										 for(ReportElement customElement : customIDList)
										 {
											 ReportElement customIdData = customElement.getChild("wd:Custom_ID_Data");
											 if(customIdData != null)
											 {
												 ReportElement customTypeRef = customIdData.getChild("wd:ID_Type_Reference");
												 if(customTypeRef != null)
												 {
													 List<ReportElement> customIdTypeData = customTypeRef.getChildren("wd:ID");								 
													 for(ReportElement idTypeElement:customIdTypeData)
													 {
														 customTypeMap = idTypeElement.getAllAttributes();
														 if(customTypeMap.get("wd:type").equals("Custom_ID_Type_ID"))
														 {
															 if(idTypeElement.getValue().trim().equalsIgnoreCase("Previous_IBM_CNUM"))
															 {
																 customIdNumber = customIdData.getChild("wd:ID") != null?customIdData.getChild("wd:ID").getValue().trim():"";
															 }
														 }
													 }
												 }
											 }
										 }
										 if(customIdNumber.isEmpty())
										 {
											 customIdNumber = "" ;
										 }
									 }
									 else
									 {
										 customIdNumber = "" ;
									 }
								 }
								 else
								 {
									 customIdNumber = "" ;
								 }														 
						}				        
				        
			          }
			        	
			        	headingFromTargetTenant = "Home_CNUM,Employee_ID,Time_Off_Date,Time_Off_Type,Time_Off_Units";

			        	if(!customIdNumber.isEmpty())
						{
				        	headerStr = customIdNumber + "," + employeeId + "," + leaveDateArr + "," + leaveTypeArr + "," + leaveUnitsArr;
				        	
				        	targetTenantRowMap.put(customIdNumber, headerStr);							        	
				        	targetTenantColumnList.add(customIdNumber);
				        	
				        	if(finalStr.equals(""))
							{
								 finalStr =  headingFromTargetTenant + "\n" + headerStr;
							}
							else
							{
								 finalStr = finalStr + "\n" + headerStr;
							}
						}
				       }						 							 
			        }
				 
				 System.out.println(finalStr);
				 targetContent = finalStr.toString().getBytes();
				 wdCount = targetTenantColumnList.size();
		   }
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}		
	}
	
	private JSONArray createTimeOffData(String reportURL) throws JSONException {

		JSONArray jArr = new JSONArray();
		DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilder dBuilder;
		XPath xPath = XPathFactory.newInstance().newXPath();
		HttpBasicAuthentication httpBasicAuthentication = new HttpBasicAuthentication();
		String output = httpBasicAuthentication.getWithBasicAuthentication(reportURL, tenant.getTenantUser(), tenant.getTenantUserPassword());
		Reader reader1 = new StringReader(output);
		Document doc;
		try 
		{
			dBuilder = dbFactory.newDocumentBuilder();
			doc = dBuilder.parse(new InputSource(reader1));
			doc.getDocumentElement().normalize();
			String expression = EMPLOYEE_APPLICANT_MAPPING_RESPONSE_EXPRESSION;
			NodeList nodeList = (NodeList) xPath.compile(expression).evaluate(doc, XPathConstants.NODESET);
			for (int i = 0; i < nodeList.getLength(); i++) 
			{
				try 
				{
					jArr = parseNodesForTimeOff(nodeList);
				} 
				catch (DOMException e)
				{
					e.printStackTrace();
				}
			}			
		} 
		catch (SAXException e) 
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (XPathExpressionException e) 
		{
			e.printStackTrace();
		} 
		catch (ParserConfigurationException e) 
		{
			e.printStackTrace();
		}
		return jArr;
	}

	
	private JSONArray parseNodesForTimeOff(NodeList nodeList) throws DOMException, JSONException {

		JSONArray details = new JSONArray();
		for (int i = 0; i < nodeList.getLength(); i++) 
		{
		    Node nNode = nodeList.item(i);
		    if (nNode.getNodeName().equals("wd:Report_Data")) 
		    {
				if (nNode.getNodeType() == Node.ELEMENT_NODE) 
				{
					Element eElement = (Element) nNode;
					if (eElement.hasChildNodes()) 
					{
						NodeList childNodes = eElement.getChildNodes();
						for (int j = 0; j < childNodes.getLength(); j++) 
						{
							Node aChildNode = childNodes.item(j);
							if (aChildNode.getNodeName().equals("wd:Report_Entry")) 
							{
								Element eElementEntry = (Element) aChildNode;
								if (eElement.hasChildNodes()) 
								{
									NodeList childNodesEntry = eElementEntry.getChildNodes();
									for (int k = 0; k < childNodesEntry.getLength(); k++) 
									{										
										Node aChildNodeEntry = childNodesEntry.item(k);
										JSONObject obj = new JSONObject();
										if(aChildNodeEntry.getNodeName().equals("wd:Time_Off_Details_group"))
										{
											Element eElemEntry = (Element) aChildNodeEntry;
											if (eElementEntry.hasChildNodes()) 
											{												
												NodeList childNodesEnt = eElemEntry.getChildNodes();
												for (int l = 0; l < childNodesEnt.getLength(); l++) 
												{													
													Node nChildNodeEntry = childNodesEnt.item(l);
													if(nChildNodeEntry.getNodeName().equals("wd:date"))
													{											
														obj.put("leaveDate", nChildNodeEntry.getTextContent());											
													}
													else if(nChildNodeEntry.getNodeName().equals("wd:Time_Off_Type_for_Time_Off_Entry"))
													{
														String leaveTypVal = nChildNodeEntry.getAttributes().getNamedItem("wd:Descriptor").toString();
														String leaveTypeVal = leaveTypVal.replaceAll("\"", "");
														int pos = leaveTypeVal.trim().indexOf("=") + 1;
														String actualLeaveTypeVal = leaveTypeVal.substring(pos, leaveTypeVal.length());
														obj.put("leaveType", actualLeaveTypeVal);	
													}
													else if(nChildNodeEntry.getNodeName().equals("wd:units"))
													{
														obj.put("leaveUnits", nChildNodeEntry.getTextContent());	
													}
												}
											}
										}
										details.put(obj);
									}
								}
							}
						}
					}
				}
		    }
		}
		return details;
	}

	private JSONArray createPaymentElectionEnrollmentData(String reportURL) throws JSONException {

		JSONArray jArr = new JSONArray();
		DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilder dBuilder;
		XPath xPath = XPathFactory.newInstance().newXPath();
		HttpBasicAuthentication httpBasicAuthentication = new HttpBasicAuthentication();
		String output = httpBasicAuthentication.getWithBasicAuthentication(reportURL, tenant.getTenantUser(), tenant.getTenantUserPassword());
		Reader reader1 = new StringReader(output);
		Document doc;
		try 
		{
			dBuilder = dbFactory.newDocumentBuilder();
			doc = dBuilder.parse(new InputSource(reader1));
			doc.getDocumentElement().normalize();
			String expression = EMPLOYEE_APPLICANT_MAPPING_RESPONSE_EXPRESSION;
			NodeList nodeList = (NodeList) xPath.compile(expression).evaluate(doc, XPathConstants.NODESET);
			for (int i = 0; i < nodeList.getLength(); i++) 
			{
				try 
				{
					jArr = parseNodesForPaymentElectionEnrollment(nodeList);
				} 
				catch (DOMException e)
				{
					e.printStackTrace();
				}
			}			
		} 
		catch (SAXException e) 
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (XPathExpressionException e) 
		{
			e.printStackTrace();
		} 
		catch (ParserConfigurationException e) 
		{
			e.printStackTrace();
		}
		return jArr;
	}
	
	private JSONArray parseNodesForPaymentElectionEnrollment(NodeList nodeList) throws DOMException, JSONException {

		JSONArray details = new JSONArray();
		for (int i = 0; i < nodeList.getLength(); i++) 
		{
		    Node nNode = nodeList.item(i);
		    if (nNode.getNodeName().equals("wd:Report_Data")) 
		    {
				if (nNode.getNodeType() == Node.ELEMENT_NODE) 
				{
					Element eElement = (Element) nNode;
					if (eElement.hasChildNodes()) 
					{
						NodeList childNodes = eElement.getChildNodes();
						for (int j = 0; j < childNodes.getLength(); j++) 
						{
							Node aChildNode = childNodes.item(j);
							if (aChildNode.getNodeName().equals("wd:Report_Entry")) 
							{
								Element eElementEntry = (Element) aChildNode;
								if (eElement.hasChildNodes()) 
								{
									NodeList childNodesEntry = eElementEntry.getChildNodes();
									for (int k = 0; k < childNodesEntry.getLength(); k++) 
									{										
										Node aChildNodeEntry = childNodesEntry.item(k);
										JSONObject obj = new JSONObject();
										if(aChildNodeEntry.getNodeName().equals("wd:Payment_Elections_Current_group"))
										{
											Element eElemEntry = (Element) aChildNodeEntry;
											if (eElementEntry.hasChildNodes()) 
											{												
												NodeList childNodesEnt = eElemEntry.getChildNodes();
												for (int l = 0; l < childNodesEnt.getLength(); l++) 
												{													
													Node nChildNodeEntry = childNodesEnt.item(l);
													if(nChildNodeEntry.getNodeName().equals("wd:Account_Nickname"))
													{											
														obj.put("accountNickname", nChildNodeEntry.getTextContent());											
													}
													else if(nChildNodeEntry.getNodeName().equals("wd:Bank_Name"))
													{
														obj.put("bankName", nChildNodeEntry.getTextContent());	
													}
													else if(nChildNodeEntry.getNodeName().equals("wd:Bank_ID"))
													{
														obj.put("bankId", nChildNodeEntry.getTextContent());	
													}
													else if(nChildNodeEntry.getNodeName().equals("wd:Account_Number"))
													{
														obj.put("accountNumber", nChildNodeEntry.getTextContent());	
													}
													else if(nChildNodeEntry.getNodeName().equals("wd:IBAN"))
													{
														obj.put("IBAN", nChildNodeEntry.getTextContent());	
													}
													else if(nChildNodeEntry.getNodeName().equals("wd:Distribution"))
													{
														obj.put("distribution", nChildNodeEntry.getTextContent());													
													}
													else if(nChildNodeEntry.getNodeName().equals("wd:Account_Type"))
													{
														String actTypVal = nChildNodeEntry.getAttributes().getNamedItem("wd:Descriptor").toString();
														String accountTypeVal = actTypVal.replaceAll("\"", "");
														int pos = accountTypeVal.trim().indexOf("=") + 1;
														String actualAccountTypeVal = accountTypeVal.substring(pos, accountTypeVal.length());
														obj.put("accountType", actualAccountTypeVal);	
													}
													else if(nChildNodeEntry.getNodeName().equals("wd:Payment_Type"))
													{
														String payTypVal = nChildNodeEntry.getAttributes().getNamedItem("wd:Descriptor").toString();
														String paymentTypeVal = payTypVal.replaceAll("\"", "");
														int pos = paymentTypeVal.trim().indexOf("=") + 1;
														String actualPaymentTypeVal = paymentTypeVal.substring(pos, paymentTypeVal.length());
														obj.put("paymentType", actualPaymentTypeVal);	
													}
													else if(nChildNodeEntry.getNodeName().equals("wd:Country"))
													{
														String cntryVal = nChildNodeEntry.getAttributes().getNamedItem("wd:Descriptor").toString();
														String countryVal = cntryVal.replaceAll("\"", "");
														int pos = countryVal.trim().indexOf("=") + 1;
														String actualCountryVal = countryVal.substring(pos, countryVal.length());
														obj.put("country", actualCountryVal);	
													}
													else if(nChildNodeEntry.getNodeName().equals("wd:Currency"))
													{
														String currVal = nChildNodeEntry.getAttributes().getNamedItem("wd:Descriptor").toString();
														String currencyVal = currVal.replaceAll("\"", "");
														int pos = currencyVal.trim().indexOf("=") + 1;
														String actualCurrencyVal = currencyVal.substring(pos, currencyVal.length());
														obj.put("currency", actualCurrencyVal);	
													}
												}
											}
										}
										details.put(obj);
									}
								}
							}
						}
					}
				}
		    }
		}
		return details;
	}
	
	private void createTemplateFromSourceTenantCollectiveAgreement(Tenant tenant, InputStream is, SOAPConnection soapConnection, String loadCycle, String ruleName, String client, Long userId) {
		
		sourceCount = 0;
		headingFromSourceTenant = "";
		sourceTenantRowMap.clear();
		sourceTenantColumnList.clear();
		errorList.clear();
		String xmlReqFile = null;
		try 
		{			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 xmlReqFile = requestfile.getAbsolutePath();
				 String outputfile = addHireIdList(xmlReqFile, oldEmpList, ruleName, 0, oldEmpList.size(), "Employee_ID");
				 is = new FileInputStream(outputfile);
			     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
			     SOAPPart soapPart = soapMessage.getSOAPPart();
			     SOAPEnvelope envelope = soapPart.getEnvelope();
				 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
				 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
				 {
					  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
					  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
				 }
				 soapMessage.saveChanges();
			     ByteArrayOutputStream out = new ByteArrayOutputStream();
			     soapMessage.writeTo(out);
			     String strMsg = new String(out.toByteArray());	
			     
			     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
			     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
				 soapConnection = soapConnectionFactory.createConnection();
				 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
				 out = new ByteArrayOutputStream();
				 soapResponse.writeTo(out);
				 strMsg = new String(out.toByteArray(), "utf-8");

				 ReportElement soapResp = XmlParserManager.parseXml(strMsg);
				 
				 ReportElement pageData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Results");
				 
				 String totalNoOfPages = pageData.getChild("wd:Total_Pages").getValue().trim();
				 String totalResults = pageData.getChild("wd:Total_Results").getValue().trim();
				 int totalResult = Integer.parseInt(totalResults);
				 System.out.println("totalNoOfPages-"+totalNoOfPages);
				 System.out.println("totalResult-"+totalResult);						 
				 
				 String employeeId = "";
				 String empTerminationDate = "";						 
				 String customIdNumber = "";
				 //String customIdIssuedDate = "";
				 //String positionId = "";
				 String collectiveAgreementRef = "";
				 String collectiveAgreementFactor = "";
				 String collectiveAgreementFactorOption = "";
				 String collectiveAgreementFactorArr = "";
				 String collectiveAgreementFactorOptionArr = "";
				 
				 String finalStr = "";
				 String headerStr = "";
				 						 
				 Map<String,String> customTypeMap = null;
				 Map<String,String> collectiveAgreementMap = null;
				 Map<String,String> collectiveAgreementFactorMap = null;
				 Map<String,String> collectiveAgreementOptionMap = null;
				 
				 int startIndex = 0;
				 int endIndex = 0;
				 
				 for (int j = 1; j <=Integer.parseInt(totalNoOfPages); j++) //
				 {
					 if(j == 1)
					 {
						startIndex = 0;
						if(999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = j*999;
						}
					 }
					 else
					 {
						startIndex = endIndex;
						if(j*999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = (j*999);
						}
					 }
					 outputfile = addHireIdList(xmlReqFile, oldEmpList, ruleName, startIndex, endIndex, "Employee_ID");
					 is = new FileInputStream(outputfile);
				     soapMessage = MessageFactory.newInstance().createMessage(null, is);
				     soapPart = soapMessage.getSOAPPart();
				     envelope = soapPart.getEnvelope();
					 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
					 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
					 {
							envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
					 }
					 soapMessage.saveChanges();
			         out = new ByteArrayOutputStream();
			         soapMessage.writeTo(out);
			         strMsg = new String(out.toByteArray());
			        
			         soapConnectionFactory = SOAPConnectionFactory.newInstance();
					 soapConnection = soapConnectionFactory.createConnection();
			         soapResponse = soapConnection.call(soapMessage, sourceUrl);
			         out = new ByteArrayOutputStream();
			         soapResponse.writeTo(out);
			         strMsg = new String(out.toByteArray(), "utf-8");
			        
			         soapResp = XmlParserManager.parseXml(strMsg);
			        
			        ReportElement responseData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Data");
			        
			        List<ReportElement> applicantData = responseData.getChildren("wd:Worker");
			        for(ReportElement reportElement : applicantData)
					{
			        	ReportElement terminationStatusData = reportElement.getChild("wd:Worker_Data")
					 			.getChild("wd:Employment_Data")
					 			.getChild("wd:Worker_Status_Data");
			        	
			        	empTerminationDate = terminationStatusData.getChild("wd:Termination_Date") != null?terminationStatusData.getChild("wd:Termination_Date").getValue().trim():"";					        	
			        	//if(!empTerminationDate.equalsIgnoreCase(""))
			        	{
			        		//Date termDate = convertWorkdayStringToDate(empTerminationDate);
			        		//if((termDate.equals(termFromDate) || termDate.after(termFromDate)) && (termDate.equals(termToDate) || termDate.before(termToDate)))
			        		{
					        	//System.out.println("empTerminationDate--"+ termDate);
				        		ReportElement element1 = reportElement.getChild("wd:Worker_Data");
				        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
				        		System.out.println("employeeId--"+ employeeId);
				        		
				        		ReportElement workerJobData = reportElement.getChild("wd:Worker_Data")
			 							.getChild("wd:Employment_Data")
			 							.getChild("wd:Worker_Job_Data");
				        		
								 if(workerJobData != null)
								 {
									 ReportElement positionData = workerJobData.getChild("wd:Position_Data");
									 if(positionData != null)
									 {
										 //positionId = positionData.getChild("wd:Position_ID") != null?positionData.getChild("wd:Position_ID").getValue().trim():"";
										 ReportElement colAgreeSummData = positionData.getChild("wd:Collective_Agreement_Summary_Data");
										 if(colAgreeSummData != null)
										 {
											 ReportElement collectiveAgreementData = colAgreeSummData.getChild("wd:Collective_Agreement_Data");
											 if(collectiveAgreementData != null)
											 {
												 ReportElement collectiveAgreementData1 = collectiveAgreementData.getChild("wd:Collective_Agreement_Data");
												 if(collectiveAgreementData1 != null)
												 {
													 ReportElement collectiveRef = collectiveAgreementData1.getChild("wd:Collective_Agreement_Reference");
													 if(collectiveRef != null)
													 {
														 List<ReportElement> agreementData = collectiveRef.getChildren("wd:ID");					 
														 for(ReportElement agreementElement:agreementData)
														 {
															 collectiveAgreementMap = agreementElement.getAllAttributes();
															 if(collectiveAgreementMap.get("wd:type").equals("Collective_Agreement_ID"))
															 {
																 collectiveAgreementRef = agreementElement.getValue().trim();
															 }
														 }
													 }
													 List<ReportElement> agreementFactorList = collectiveAgreementData1.getChildren("wd:Collective_Agreement_Factor");
													 if(agreementFactorList != null && agreementFactorList.size() >0)
													 {
														 collectiveAgreementFactorArr = "";
														 collectiveAgreementFactorOptionArr = "";
														 for(ReportElement collectiveAgreementFactorElement : agreementFactorList)
														 {
															 ReportElement agreementFactorRef = collectiveAgreementFactorElement.getChild("wd:Collective_Agreement_Factor_Reference");
															 if(agreementFactorRef != null)
															 {
																 List<ReportElement> agreementFactorData = agreementFactorRef.getChildren("wd:ID");					 
																 for(ReportElement agreementFactorElement:agreementFactorData)
																 {
																	 collectiveAgreementFactorMap = agreementFactorElement.getAllAttributes();
																	 if(collectiveAgreementFactorMap.get("wd:type").equals("Collective_Agreement_Factor_ID"))
																	 {
																		 collectiveAgreementFactor = agreementFactorElement.getValue().trim();
																	 }
																 }
															 }
															 if(collectiveAgreementFactorArr.equals(""))
															 {
																 collectiveAgreementFactorArr = collectiveAgreementFactor;
															 }
															 else
															 {
																 collectiveAgreementFactorArr = collectiveAgreementFactorArr + "~" + collectiveAgreementFactor;
															 }
															 
															 ReportElement agreementOptionRef = collectiveAgreementFactorElement.getChild("wd:Collective_Agreement_Factor_Option_Reference");
															 if(agreementOptionRef != null)
															 {
																 List<ReportElement> agreementOptionData = agreementOptionRef.getChildren("wd:ID");					 
																 for(ReportElement agreementOptionElement:agreementOptionData)
																 {
																	 collectiveAgreementOptionMap = agreementOptionElement.getAllAttributes();
																	 if(collectiveAgreementOptionMap.get("wd:type").equals("Collective_Agreement_Factor_Option_ID"))
																	 {
																		 collectiveAgreementFactorOption = agreementOptionElement.getValue().trim();
																	 }
																 }
															 }
															 if(collectiveAgreementFactorOptionArr.equals(""))
															 {
																 collectiveAgreementFactorOptionArr = collectiveAgreementFactorOption;
															 }
															 else
															 {
																 collectiveAgreementFactorOptionArr = collectiveAgreementFactorOptionArr + "~" + collectiveAgreementFactorOption;
															 }
														 }														 
													 }
													 else
													 {
														 collectiveAgreementFactorArr = "";
														 collectiveAgreementFactorOptionArr = "";
													 }
												 }
											 }
										 }
									 }									 
								 }
								 																											 
								 ReportElement identificationData = reportElement.getChild("wd:Worker_Data")
								 			.getChild("wd:Personal_Data")
								 			.getChild("wd:Identification_Data");
								 
								 if(identificationData != null)
								 {												 
									 List<ReportElement> customIDList = identificationData.getChildren("wd:Custom_ID");
									 if(customIDList != null && customIDList.size() >0)
									 {
										 String expirationDate = "";
										 customIdNumber = "" ;
										 for(ReportElement customElement : customIDList)
										 {
											 ReportElement customIdData = customElement.getChild("wd:Custom_ID_Data");
											 if(customIdData != null)
											 {
												 expirationDate = customIdData.getChild("wd:Expiration_Date") != null?customIdData.getChild("wd:Expiration_Date").getValue().trim():"";
												 ReportElement customTypeRef = customIdData.getChild("wd:ID_Type_Reference");
												 if(customTypeRef != null)
												 {
													 List<ReportElement> customIdTypeData = customTypeRef.getChildren("wd:ID");								 
													 for(ReportElement idTypeElement:customIdTypeData)
													 {
														 customTypeMap = idTypeElement.getAllAttributes();
														 if(customTypeMap.get("wd:type").equals("Custom_ID_Type_ID"))
														 {
															 if(idTypeElement.getValue().trim().equalsIgnoreCase("Global_CNUM") && expirationDate.isEmpty())
															 {
																 customIdNumber = customIdData.getChild("wd:ID") != null?customIdData.getChild("wd:ID").getValue().trim():""; 
															 }
														 }
													 }
												 }
											 }
										 }
										 if(customIdNumber.isEmpty())
										 {
											 customIdNumber = "" ;
										 }
									 }
									 else
									 {
										 customIdNumber = "" ;
									 }
								 }
								 else
								 {
									 customIdNumber = "" ;											 
								 }								 															 
						}						        
			           }

			        	headingFromSourceTenant = "Home_CNUM,Employee_ID,Collective_Agreement,Collective_Agreement_Factor,Collective_Agreement_Factor_Option";
			        	if(!customIdNumber.isEmpty())
						{
				        	headerStr = customIdNumber + "," + employeeId + "," + collectiveAgreementRef + "," + collectiveAgreementFactorArr + "," + collectiveAgreementFactorOptionArr;
				        	
				        	sourceTenantRowMap.put(customIdNumber, headerStr);							        	
				        	sourceTenantColumnList.add(customIdNumber);
				        	
				        	if(finalStr.equals(""))
							{
								 finalStr =  headingFromSourceTenant + "\n" + headerStr;
							}
							else
							{
								 finalStr = finalStr + "\n" + headerStr;
							}
						}	
			     }						 							 
			   }
				 System.out.println(finalStr);
				 sourceContent = finalStr.getBytes();						 
				 sourceCount = sourceTenantColumnList.size();
		    }
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		
	}

	private void createTemplateFromTargetTenantCollectiveAgreement(Tenant tenant, InputStream is, SOAPConnection soapConnection, String loadCycle, String ruleName, String client, Long userId) {
		
		wdCount = 0;
		headingFromTargetTenant = "";
		targetTenantRowMap.clear();
		targetTenantColumnList.clear();
		String xmlReqFile = null;
		try 
		{			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 xmlReqFile = requestfile.getAbsolutePath();
				 String outputfile = addHireIdList(xmlReqFile, newEmpList, ruleName, 0, newEmpList.size(), "Employee_ID");
				 is = new FileInputStream(outputfile);
			     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
			     SOAPPart soapPart = soapMessage.getSOAPPart();
			     SOAPEnvelope envelope = soapPart.getEnvelope();
				 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
				 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
				 {
					  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
					  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
				 }
				 soapMessage.saveChanges();
			     ByteArrayOutputStream out = new ByteArrayOutputStream();
			     soapMessage.writeTo(out);
			     String strMsg = new String(out.toByteArray());	
			     
			     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
			     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
				 soapConnection = soapConnectionFactory.createConnection();
				 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
				 out = new ByteArrayOutputStream();
				 soapResponse.writeTo(out);
				 strMsg = new String(out.toByteArray(), "utf-8");

				 ReportElement soapResp = XmlParserManager.parseXml(strMsg);
				 
				 ReportElement pageData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Results");
				 
				 String totalNoOfPages = pageData.getChild("wd:Total_Pages").getValue().trim();
				 String totalResults = pageData.getChild("wd:Total_Results").getValue().trim();
				 int totalResult = Integer.parseInt(totalResults);
				 System.out.println("totalNoOfPages-"+totalNoOfPages);
				 System.out.println("totalResult-"+totalResult);				 
				 
				 String employeeId = "";
				 String employeeHireDate = "";
				 String customIdNumber = "";
				 //String positionId = "";
				 String collectiveAgreementRef = "";
				 String collectiveAgreementFactor = "";
				 String collectiveAgreementFactorOption = "";
				 String collectiveAgreementFactorArr = "";
				 String collectiveAgreementFactorOptionArr = "";
				 
				 String finalStr = "";
				 String headerStr = "";
				 						 
				 Map<String,String> customTypeMap = null;
				 Map<String,String> collectiveAgreementMap = null;
				 Map<String,String> collectiveAgreementFactorMap = null;
				 Map<String,String> collectiveAgreementOptionMap = null;
				 
				 int startIndex = 0;
				 int endIndex = 0;
				 
				 for (int j = 1; j <=Integer.parseInt(totalNoOfPages); j++) //
				 {
					 if(j == 1)
					 {
						startIndex = 0;
						if(999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = j*999;
						}
					 }
					 else
					 {
						startIndex = endIndex;
						if(j*999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = (j*999);
						}
					 }
					 outputfile = addHireIdList(xmlReqFile, newEmpList, ruleName, startIndex, endIndex, "Employee_ID");
					 is = new FileInputStream(outputfile);
				     soapMessage = MessageFactory.newInstance().createMessage(null, is);
				     soapPart = soapMessage.getSOAPPart();
				     envelope = soapPart.getEnvelope();
					 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
					 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
					 {
							envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
					 }
					 soapMessage.saveChanges();
			         out = new ByteArrayOutputStream();
			         soapMessage.writeTo(out);
			         strMsg = new String(out.toByteArray());
			        
			         soapConnectionFactory = SOAPConnectionFactory.newInstance();
					 soapConnection = soapConnectionFactory.createConnection();
			         soapResponse = soapConnection.call(soapMessage, sourceUrl);
			         out = new ByteArrayOutputStream();
			         soapResponse.writeTo(out);
			         strMsg = new String(out.toByteArray(), "utf-8");
			        
			         soapResp = XmlParserManager.parseXml(strMsg);
			        
			        ReportElement responseData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Data");
			        
			        List<ReportElement> applicantData = responseData.getChildren("wd:Worker");
			        for(ReportElement reportElement : applicantData)
					{
			        	ReportElement hireStatusData = reportElement.getChild("wd:Worker_Data")
					 			.getChild("wd:Employment_Data")
					 			.getChild("wd:Worker_Status_Data");
			        	
			        	employeeHireDate = hireStatusData.getChild("wd:Hire_Date") != null?hireStatusData.getChild("wd:Hire_Date").getValue().trim():"";					        	
			        	if(!employeeHireDate.equalsIgnoreCase(""))
			        	{
			        		Date empHireDate = convertWorkdayStringToDate(employeeHireDate);
			        		//if((empHireDate.equals(hireFromDate) || empHireDate.after(hireFromDate)) && (empHireDate.equals(hireToDate) || empHireDate.before(hireToDate)))
			        		{
					        	System.out.println("empHireDate--"+ empHireDate);
				        		ReportElement element1 = reportElement.getChild("wd:Worker_Data");
				        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
				        		System.out.println("employeeId--"+ employeeId);	
				        		
				        		ReportElement workerJobData = reportElement.getChild("wd:Worker_Data")
			 							.getChild("wd:Employment_Data")
			 							.getChild("wd:Worker_Job_Data");
				        		
								 if(workerJobData != null)
								 {
									 ReportElement positionData = workerJobData.getChild("wd:Position_Data");
									 if(positionData != null)
									 {
										 //positionId = positionData.getChild("wd:Position_ID") != null?positionData.getChild("wd:Position_ID").getValue().trim():"";
										 ReportElement colAgreeSummData = positionData.getChild("wd:Collective_Agreement_Summary_Data");
										 if(colAgreeSummData != null)
										 {
											 ReportElement collectiveAgreementData = colAgreeSummData.getChild("wd:Collective_Agreement_Data");
											 if(collectiveAgreementData != null)
											 {
												 ReportElement collectiveAgreementData1 = collectiveAgreementData.getChild("wd:Collective_Agreement_Data");
												 if(collectiveAgreementData1 != null)
												 {
													 ReportElement collectiveRef = collectiveAgreementData1.getChild("wd:Collective_Agreement_Reference");
													 if(collectiveRef != null)
													 {
														 List<ReportElement> agreementData = collectiveRef.getChildren("wd:ID");					 
														 for(ReportElement agreementElement:agreementData)
														 {
															 collectiveAgreementMap = agreementElement.getAllAttributes();
															 if(collectiveAgreementMap.get("wd:type").equals("Collective_Agreement_ID"))
															 {
																 collectiveAgreementRef = agreementElement.getValue().trim();
															 }
														 }
													 }
													 List<ReportElement> agreementFactorList = collectiveAgreementData1.getChildren("wd:Collective_Agreement_Factor");
													 if(agreementFactorList != null && agreementFactorList.size() >0)
													 {
														 collectiveAgreementFactorArr = "";
														 collectiveAgreementFactorOptionArr = "";
														 for(ReportElement collectiveAgreementFactorElement : agreementFactorList)
														 {
															 ReportElement agreementFactorRef = collectiveAgreementFactorElement.getChild("wd:Collective_Agreement_Factor_Reference");
															 if(agreementFactorRef != null)
															 {
																 List<ReportElement> agreementFactorData = agreementFactorRef.getChildren("wd:ID");					 
																 for(ReportElement agreementFactorElement:agreementFactorData)
																 {
																	 collectiveAgreementFactorMap = agreementFactorElement.getAllAttributes();
																	 if(collectiveAgreementFactorMap.get("wd:type").equals("Collective_Agreement_Factor_ID"))
																	 {
																		 collectiveAgreementFactor = agreementFactorElement.getValue().trim();
																	 }
																 }
															 }
															 if(collectiveAgreementFactorArr.equals(""))
															 {
																 collectiveAgreementFactorArr = collectiveAgreementFactor;
															 }
															 else
															 {
																 collectiveAgreementFactorArr = collectiveAgreementFactorArr + "~" + collectiveAgreementFactor;
															 }
															 
															 ReportElement agreementOptionRef = collectiveAgreementFactorElement.getChild("wd:Collective_Agreement_Factor_Option_Reference");
															 if(agreementOptionRef != null)
															 {
																 List<ReportElement> agreementOptionData = agreementOptionRef.getChildren("wd:ID");					 
																 for(ReportElement agreementOptionElement:agreementOptionData)
																 {
																	 collectiveAgreementOptionMap = agreementOptionElement.getAllAttributes();
																	 if(collectiveAgreementOptionMap.get("wd:type").equals("Collective_Agreement_Factor_Option_ID"))
																	 {
																		 collectiveAgreementFactorOption = agreementOptionElement.getValue().trim();
																	 }
																 }
															 }
															 if(collectiveAgreementFactorOptionArr.equals(""))
															 {
																 collectiveAgreementFactorOptionArr = collectiveAgreementFactorOption;
															 }
															 else
															 {
																 collectiveAgreementFactorOptionArr = collectiveAgreementFactorOptionArr + "~" + collectiveAgreementFactorOption;
															 }
														 }														 
													 }
													 else
													 {
														 collectiveAgreementFactorArr = "";
														 collectiveAgreementFactorOptionArr = "";
													 }
												 }
											 }
										 }
									 }									 
								 }
				        						        										 
								 ReportElement identificationData = reportElement.getChild("wd:Worker_Data")
								 			.getChild("wd:Personal_Data")
								 			.getChild("wd:Identification_Data");
								 
								 if(identificationData != null)
								 {																		 
									 List<ReportElement> customIDList = identificationData.getChildren("wd:Custom_ID");
									 if(customIDList != null && customIDList.size() >0)
									 {
										 for(ReportElement customElement : customIDList)
										 {
											 ReportElement customIdData = customElement.getChild("wd:Custom_ID_Data");
											 if(customIdData != null)
											 {
												 ReportElement customTypeRef = customIdData.getChild("wd:ID_Type_Reference");
												 if(customTypeRef != null)
												 {
													 List<ReportElement> customIdTypeData = customTypeRef.getChildren("wd:ID");								 
													 for(ReportElement idTypeElement:customIdTypeData)
													 {
														 customTypeMap = idTypeElement.getAllAttributes();
														 if(customTypeMap.get("wd:type").equals("Custom_ID_Type_ID"))
														 {
															 if(idTypeElement.getValue().trim().equalsIgnoreCase("Previous_IBM_CNUM"))
															 {
																 customIdNumber = customIdData.getChild("wd:ID") != null?customIdData.getChild("wd:ID").getValue().trim():"";
															 }
														 }
													 }
												 }
											 }
										 }
										 if(customIdNumber.isEmpty())
										 {
											 customIdNumber = "" ;
										 }
									 }
									 else
									 {
										 customIdNumber = "" ;
									 }
								 }
								 else
								 {
									 customIdNumber = "" ;
								 }
						}				        
			          }
			        	
			        	headingFromTargetTenant = "Home_CNUM,Employee_ID,Collective_Agreement,Collective_Agreement_Factor,Collective_Agreement_Factor_Option";
			        	if(!customIdNumber.isEmpty())
						{
				        	headerStr = customIdNumber + "," + employeeId + "," + collectiveAgreementRef + "," + collectiveAgreementFactorArr + "," + collectiveAgreementFactorOptionArr;
				        	
				        	targetTenantRowMap.put(customIdNumber, headerStr);							        	
				        	targetTenantColumnList.add(customIdNumber);
				        	
				        	if(finalStr.equals(""))
							{
								 finalStr =  headingFromTargetTenant + "\n" + headerStr;
							}
							else
							{
								 finalStr = finalStr + "\n" + headerStr;
							}
						}	
				   }						 							 
			     }
				 System.out.println(finalStr);
				 targetContent = finalStr.getBytes();
				 wdCount = targetTenantColumnList.size();
		   }
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		
	}
	
	private void createTemplateFromSourceTenantWorkSchedule(Tenant tenant, InputStream is, SOAPConnection soapConnection, String loadCycle, String ruleName, String client, Long userId) {
		
		sourceCount = 0;
		headingFromSourceTenant = "";
		sourceTenantRowMap.clear();
		sourceTenantColumnList.clear();
		errorList.clear();
		String xmlReqFile = null;
		try 
		{			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 xmlReqFile = requestfile.getAbsolutePath();
				 String outputfile = addHireIdList(xmlReqFile, oldEmpList, ruleName, 0, oldEmpList.size(), "Employee_ID");
				 is = new FileInputStream(outputfile);
			     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
			     SOAPPart soapPart = soapMessage.getSOAPPart();
			     SOAPEnvelope envelope = soapPart.getEnvelope();
				 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
				 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
				 {
					  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
					  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
				 }
				 soapMessage.saveChanges();
			     ByteArrayOutputStream out = new ByteArrayOutputStream();
			     soapMessage.writeTo(out);
			     String strMsg = new String(out.toByteArray());	
			     
			     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
			     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
				 soapConnection = soapConnectionFactory.createConnection();
				 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
				 out = new ByteArrayOutputStream();
				 soapResponse.writeTo(out);
				 strMsg = new String(out.toByteArray(), "utf-8");

				 ReportElement soapResp = XmlParserManager.parseXml(strMsg);
				 
				 ReportElement pageData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Results");
				 
				 String totalNoOfPages = pageData.getChild("wd:Total_Pages").getValue().trim();
				 String totalResults = pageData.getChild("wd:Total_Results").getValue().trim();
				 int totalResult = Integer.parseInt(totalResults);
				 System.out.println("totalNoOfPages-"+totalNoOfPages);
				 System.out.println("totalResult-"+totalResult);						 
				 
				 String employeeId = "";
				 String WID = "";
				 String empTerminationDate = "";						 
				 String customIdNumber = "";
				 String startDate = "";
				 String endDate = "";
				 String workScheduleCalendar = "";
				 String reportURL = "";
				 
				 String finalStr = "";
				 String headerStr = "";
				 						 
				 Map<String,String> customTypeMap = null;
				 Map<String,String> widMap = null;
				 
				 int startIndex = 0;
				 int endIndex = 0;
				 
				 for (int j = 1; j <=Integer.parseInt(totalNoOfPages); j++) //
				 {
					 if(j == 1)
					 {
						startIndex = 0;
						if(999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = j*999;
						}
					 }
					 else
					 {
						startIndex = endIndex;
						if(j*999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = (j*999);
						}
					 }
					 outputfile = addHireIdList(xmlReqFile, oldEmpList, ruleName, startIndex, endIndex, "Employee_ID");
					 is = new FileInputStream(outputfile);
				     soapMessage = MessageFactory.newInstance().createMessage(null, is);
				     soapPart = soapMessage.getSOAPPart();
				     envelope = soapPart.getEnvelope();
					 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
					 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
					 {
							envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
					 }
					 soapMessage.saveChanges();
			         out = new ByteArrayOutputStream();
			         soapMessage.writeTo(out);
			         strMsg = new String(out.toByteArray());
			        
			         soapConnectionFactory = SOAPConnectionFactory.newInstance();
					 soapConnection = soapConnectionFactory.createConnection();
			         soapResponse = soapConnection.call(soapMessage, sourceUrl);
			         out = new ByteArrayOutputStream();
			         soapResponse.writeTo(out);
			         strMsg = new String(out.toByteArray(), "utf-8");
			        
			         soapResp = XmlParserManager.parseXml(strMsg);
			        
			        ReportElement responseData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Data");
			        
			        List<ReportElement> applicantData = responseData.getChildren("wd:Worker");
			        for(ReportElement reportElement : applicantData)
					{
			        	ReportElement terminationStatusData = reportElement.getChild("wd:Worker_Data")
					 			.getChild("wd:Employment_Data")
					 			.getChild("wd:Worker_Status_Data");
			        	
			        	empTerminationDate = terminationStatusData.getChild("wd:Termination_Date") != null?terminationStatusData.getChild("wd:Termination_Date").getValue().trim():"";					        	
			        	//if(!empTerminationDate.equalsIgnoreCase(""))
			        	{
			        		//Date termDate = convertWorkdayStringToDate(empTerminationDate);
			        		//if((termDate.equals(termFromDate) || termDate.after(termFromDate)) && (termDate.equals(termToDate) || termDate.before(termToDate)))
			        		{
					        	//System.out.println("empTerminationDate--"+ termDate);
				        		ReportElement element1 = reportElement.getChild("wd:Worker_Data");
				        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
				        		System.out.println("employeeId--"+ employeeId);
				        		
				        		ReportElement widRef = reportElement.getChild("wd:Worker_Reference");
								 if(widRef != null)
								 {
									 List<ReportElement> idList = widRef.getChildren("wd:ID");
									 for(ReportElement idElement:idList)
									 {
										 widMap = idElement.getAllAttributes();
										 if(widMap.get("wd:type").equals("WID"))
										 {
											 WID = idElement.getValue().trim();
										 }
									 }
								 }
								 else
								 {
									 WID = "";
								 }
								
								 /*if(tenant.getTenantName().equalsIgnoreCase("ibm6"))
								 {
									 reportURL = "https://" + tenant.getTenantUrl() + "customreport2/" + tenant.getTenantName() + "/ISU_Verify_Global/" + "Work_Schedule?Effective_as_of_Date=2021-09-01-07:00&Employee!WID=" + WID;
								 }
								 else if(tenant.getTenantName().equalsIgnoreCase("ibm10"))
								 {*/
									 reportURL = "https://" + tenant.getTenantUrl() + "customreport2/" + tenant.getTenantName() + "/ISU_Verify_Global/" + "Work_Schedule?Entry_Date_and_Time=2021-10-11T11:29:59.000-07:00&Employee!WID=" + WID;
								 //}
								 
								 JSONArray jArr = createWorkScheduleData(reportURL);
								 if(jArr != null && jArr.length() >0)
								 {
									 for(int i = 0; i<jArr.length(); i++) 
								     {
										JSONObject objects = jArr.getJSONObject(i);
										startDate = objects.isNull("startDate")?"":objects.getString("startDate");
										endDate = objects.isNull("endDate")?"":objects.getString("endDate");
										workScheduleCalendar = objects.isNull("workSchedule")?"":objects.getString("workSchedule");
								     }
								 }
								 else
								 {
									 startDate = "";
									 endDate = "";
									 workScheduleCalendar = "";
								 }
								 																											 
								 ReportElement identificationData = reportElement.getChild("wd:Worker_Data")
								 			.getChild("wd:Personal_Data")
								 			.getChild("wd:Identification_Data");
								 
								 if(identificationData != null)
								 {												 
									 List<ReportElement> customIDList = identificationData.getChildren("wd:Custom_ID");
									 if(customIDList != null && customIDList.size() >0)
									 {
										 String expirationDate = "";
										 customIdNumber = "" ;
										 for(ReportElement customElement : customIDList)
										 {
											 ReportElement customIdData = customElement.getChild("wd:Custom_ID_Data");
											 expirationDate = customIdData.getChild("wd:Expiration_Date") != null?customIdData.getChild("wd:Expiration_Date").getValue().trim():""; 
											 if(customIdData != null)
											 {
												 ReportElement customTypeRef = customIdData.getChild("wd:ID_Type_Reference");
												 if(customTypeRef != null)
												 {
													 List<ReportElement> customIdTypeData = customTypeRef.getChildren("wd:ID");								 
													 for(ReportElement idTypeElement:customIdTypeData)
													 {
														 customTypeMap = idTypeElement.getAllAttributes();
														 if(customTypeMap.get("wd:type").equals("Custom_ID_Type_ID"))
														 {
															 if(idTypeElement.getValue().trim().equalsIgnoreCase("Global_CNUM") && expirationDate.isEmpty())
															 {
																 customIdNumber = customIdData.getChild("wd:ID") != null?customIdData.getChild("wd:ID").getValue().trim():""; 
															 }
														 }
													 }
												 }
											 }
										 }
										 if(customIdNumber.isEmpty())
										 {
											 customIdNumber = "" ;
										 }
									 }
									 else
									 {
										 customIdNumber = "" ;
									 }
								 }
								 else
								 {
									 customIdNumber = "" ;										 
								 }								 															 
						}						        
			           }

			        	headingFromSourceTenant = "Home_CNUM,Employee_ID,Work_Schedule_Start_Date,Work_Schedule_End_Date,Work_Schedule_Calendar";
			        	if(!customIdNumber.isEmpty())
						{
				        	headerStr = customIdNumber + "," + employeeId + "," + startDate + "," + endDate + "," + workScheduleCalendar;
				        	
				        	sourceTenantRowMap.put(customIdNumber, headerStr);							        	
				        	sourceTenantColumnList.add(customIdNumber);
				        	
				        	if(finalStr.equals(""))
							{
								 finalStr =  headingFromSourceTenant + "\n" + headerStr;
							}
							else
							{
								 finalStr = finalStr + "\n" + headerStr;
							}
						}	
			     }						 							 
			   }
				 System.out.println(finalStr);
				 sourceContent = finalStr.getBytes();						 
				 sourceCount = sourceTenantColumnList.size();
		    }
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		
	}

	private void createTemplateFromTargetTenantWorkSchedule(Tenant tenant, InputStream is, SOAPConnection soapConnection, String loadCycle, String ruleName, String client, Long userId) {
		
		wdCount = 0;
		headingFromTargetTenant = "";
		targetTenantRowMap.clear();
		targetTenantColumnList.clear();
		String xmlReqFile = null;
		try 
		{			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 xmlReqFile = requestfile.getAbsolutePath();
				 String outputfile = addHireIdList(xmlReqFile, newEmpList, ruleName, 0, newEmpList.size(), "Employee_ID");
				 is = new FileInputStream(outputfile);
			     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
			     SOAPPart soapPart = soapMessage.getSOAPPart();
			     SOAPEnvelope envelope = soapPart.getEnvelope();
				 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
				 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
				 {
					  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
					  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
				 }
				 soapMessage.saveChanges();
			     ByteArrayOutputStream out = new ByteArrayOutputStream();
			     soapMessage.writeTo(out);
			     String strMsg = new String(out.toByteArray());	
			     
			     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
			     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
				 soapConnection = soapConnectionFactory.createConnection();
				 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
				 out = new ByteArrayOutputStream();
				 soapResponse.writeTo(out);
				 strMsg = new String(out.toByteArray(), "utf-8");

				 ReportElement soapResp = XmlParserManager.parseXml(strMsg);
				 
				 ReportElement pageData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Results");
				 
				 String totalNoOfPages = pageData.getChild("wd:Total_Pages").getValue().trim();
				 String totalResults = pageData.getChild("wd:Total_Results").getValue().trim();
				 int totalResult = Integer.parseInt(totalResults);
				 System.out.println("totalNoOfPages-"+totalNoOfPages);
				 System.out.println("totalResult-"+totalResult);				 
				 
				 String employeeId = "";
				 String WID = "";
				 String employeeHireDate = "";
				 String customIdNumber = "";
				 String startDate = "";
				 String endDate = "";
				 String workScheduleCalendar = "";
				 String reportURL = "";
				 
				 String finalStr = "";
				 String headerStr = "";
				 						 
				 Map<String,String> customTypeMap = null;
				 Map<String,String> widMap = null;
				 
				 int startIndex = 0;
				 int endIndex = 0;
				 
				 for (int j = 1; j <=Integer.parseInt(totalNoOfPages); j++) //
				 {
					 if(j == 1)
					 {
						startIndex = 0;
						if(999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = j*999;
						}
					 }
					 else
					 {
						startIndex = endIndex;
						if(j*999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = (j*999);
						}
					 }
					 outputfile = addHireIdList(xmlReqFile, newEmpList, ruleName, startIndex, endIndex, "Employee_ID");
					 is = new FileInputStream(outputfile);
				     soapMessage = MessageFactory.newInstance().createMessage(null, is);
				     soapPart = soapMessage.getSOAPPart();
				     envelope = soapPart.getEnvelope();
					 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
					 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
					 {
							envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
					 }
					 soapMessage.saveChanges();
			         out = new ByteArrayOutputStream();
			         soapMessage.writeTo(out);
			         strMsg = new String(out.toByteArray());
			        
			         soapConnectionFactory = SOAPConnectionFactory.newInstance();
					 soapConnection = soapConnectionFactory.createConnection();
			         soapResponse = soapConnection.call(soapMessage, sourceUrl);
			         out = new ByteArrayOutputStream();
			         soapResponse.writeTo(out);
			         strMsg = new String(out.toByteArray(), "utf-8");
			        
			         soapResp = XmlParserManager.parseXml(strMsg);
			        
			        ReportElement responseData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Data");
			        
			        List<ReportElement> applicantData = responseData.getChildren("wd:Worker");
			        for(ReportElement reportElement : applicantData)
					{
			        	ReportElement hireStatusData = reportElement.getChild("wd:Worker_Data")
					 			.getChild("wd:Employment_Data")
					 			.getChild("wd:Worker_Status_Data");
			        	
			        	employeeHireDate = hireStatusData.getChild("wd:Hire_Date") != null?hireStatusData.getChild("wd:Hire_Date").getValue().trim():"";					        	
			        	if(!employeeHireDate.equalsIgnoreCase(""))
			        	{
			        		Date empHireDate = convertWorkdayStringToDate(employeeHireDate);
			        		//if((empHireDate.equals(hireFromDate) || empHireDate.after(hireFromDate)) && (empHireDate.equals(hireToDate) || empHireDate.before(hireToDate)))
			        		{
					        	System.out.println("empHireDate--"+ empHireDate);
				        		ReportElement element1 = reportElement.getChild("wd:Worker_Data");
				        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
				        		System.out.println("employeeId--"+ employeeId);
				        		
				        		ReportElement widRef = reportElement.getChild("wd:Worker_Reference");
								 if(widRef != null)
								 {
									 List<ReportElement> idList = widRef.getChildren("wd:ID");
									 for(ReportElement idElement:idList)
									 {
										 widMap = idElement.getAllAttributes();
										 if(widMap.get("wd:type").equals("WID"))
										 {
											 WID = idElement.getValue().trim();
										 }
									 }
								 }
								 else
								 {
									 WID = "";
								 }
								
								 /*if(tenant.getTenantName().equalsIgnoreCase("ibm6"))
								 {
									 reportURL = "https://" + tenant.getTenantUrl() + "customreport2/" + tenant.getTenantName() + "/ISU_Verify_Global/" + "Work_Schedule?Effective_as_of_Date=2021-09-01-07:00&Employee!WID=" + WID;
								 }
								 else if(tenant.getTenantName().equalsIgnoreCase("ibm10"))
								 {*/
									 reportURL = "https://" + tenant.getTenantUrl() + "customreport2/" + tenant.getTenantName() + "/ISU_Verify_Global/" + "Work_Schedule?Entry_Date_and_Time=2021-11-01T11:29:59.000-07:00&Employee!WID=" + WID;
								 //}
								 
								 JSONArray jArr = createWorkScheduleData(reportURL);
								 if(jArr != null && jArr.length() >0)
								 {
									 for(int i = 0; i<jArr.length(); i++) 
								     {
										JSONObject objects = jArr.getJSONObject(i);
										startDate = objects.isNull("startDate")?"":objects.getString("startDate");
										endDate = objects.isNull("endDate")?"":objects.getString("endDate");
										workScheduleCalendar = objects.isNull("workSchedule")?"":objects.getString("workSchedule");
								     }
								 }
								 else
								 {
									 startDate = "";
									 endDate = "";
									 workScheduleCalendar = "";
								 }
				        						        										 
								 ReportElement identificationData = reportElement.getChild("wd:Worker_Data")
								 			.getChild("wd:Personal_Data")
								 			.getChild("wd:Identification_Data");
								 
								 if(identificationData != null)
								 {																		 
									 List<ReportElement> customIDList = identificationData.getChildren("wd:Custom_ID");
									 if(customIDList != null && customIDList.size() >0)
									 {
										 customIdNumber = "" ;
										 for(ReportElement customElement : customIDList)
										 {
											 ReportElement customIdData = customElement.getChild("wd:Custom_ID_Data");
											 if(customIdData != null)
											 {
												 ReportElement customTypeRef = customIdData.getChild("wd:ID_Type_Reference");
												 if(customTypeRef != null)
												 {
													 List<ReportElement> customIdTypeData = customTypeRef.getChildren("wd:ID");								 
													 for(ReportElement idTypeElement:customIdTypeData)
													 {
														 customTypeMap = idTypeElement.getAllAttributes();
														 if(customTypeMap.get("wd:type").equals("Custom_ID_Type_ID"))
														 {
															 if(idTypeElement.getValue().trim().equalsIgnoreCase("Previous_IBM_CNUM"))
															 {
																 customIdNumber = customIdData.getChild("wd:ID") != null?customIdData.getChild("wd:ID").getValue().trim():"";
															 }
														 }
													 }
												 }
											 }
										 }
										 if(customIdNumber.isEmpty())
										 {
											 customIdNumber = "" ;
										 }
									 }
									 else
									 {
										 customIdNumber = "" ;
									 }
								 }
								 else
								 {
									 customIdNumber = "" ;
								 }
						}				        
			          }
			        	
			        	headingFromTargetTenant = "Home_CNUM,Employee_ID,Work_Schedule_Start_Date,Work_Schedule_End_Date,Work_Schedule_Calendar";

				        	if(!customIdNumber.isEmpty())
							{
					        	headerStr = customIdNumber + "," + employeeId + "," + startDate + "," + endDate + "," + workScheduleCalendar;
							        	
						        	 targetTenantRowMap.put(customIdNumber, headerStr);
						        	 targetTenantColumnList.add(customIdNumber);
						        	 
									 if(finalStr.equals(""))
									 {
										 finalStr =  headingFromTargetTenant + "\n" + headerStr;
									 }
									 else
									 {
										 finalStr = finalStr + "\n" + headerStr;
									 }
							}
				   }						 							 
			     }
				 System.out.println(finalStr);
				 targetContent = finalStr.getBytes();
				 wdCount = targetTenantColumnList.size();
		   }
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		
	}
	
	private JSONArray createWorkScheduleData(String reportURL) throws JSONException {

		JSONArray jArr = new JSONArray();
		DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilder dBuilder;
		XPath xPath = XPathFactory.newInstance().newXPath();
		HttpBasicAuthentication httpBasicAuthentication = new HttpBasicAuthentication();
		String output = httpBasicAuthentication.getWithBasicAuthentication(reportURL, tenant.getTenantUser(), tenant.getTenantUserPassword());
		Reader reader1 = new StringReader(output);
		Document doc;
		try 
		{
			dBuilder = dbFactory.newDocumentBuilder();
			doc = dBuilder.parse(new InputSource(reader1));
			doc.getDocumentElement().normalize();
			String expression = EMPLOYEE_APPLICANT_MAPPING_RESPONSE_EXPRESSION;
			NodeList nodeList = (NodeList) xPath.compile(expression).evaluate(doc, XPathConstants.NODESET);
			for (int i = 0; i < nodeList.getLength(); i++) 
			{
				try 
				{
					jArr = parseNodesForWorkSchedule(nodeList);
				} 
				catch (DOMException e)
				{
					e.printStackTrace();
				}
			}			
		} 
		catch (SAXException e) 
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (XPathExpressionException e) 
		{
			e.printStackTrace();
		} 
		catch (ParserConfigurationException e) 
		{
			e.printStackTrace();
		}
		return jArr;
	}
	
	private JSONArray parseNodesForWorkSchedule(NodeList nodeList) throws DOMException, JSONException {
		
		JSONArray details = new JSONArray();
		for (int i = 0; i < nodeList.getLength(); i++) 
		{
		    Node nNode = nodeList.item(i);
		    if (nNode.getNodeName().equals("wd:Report_Data")) 
		    {
				if (nNode.getNodeType() == Node.ELEMENT_NODE) 
				{
					Element eElement = (Element) nNode;
					if (eElement.hasChildNodes()) 
					{
						NodeList childNodes = eElement.getChildNodes();
						for (int j = 0; j < childNodes.getLength(); j++) 
						{
							Node aChildNode = childNodes.item(j);
							JSONObject obj = new JSONObject();
							if (aChildNode.getNodeName().equals("wd:Report_Entry")) 
							{
								Element eElementEntry = (Element) aChildNode;
								if (eElement.hasChildNodes()) 
								{
									NodeList childNodesEntry = eElementEntry.getChildNodes();
									for (int k = 0; k < childNodesEntry.getLength(); k++) 
									{										
										Node aChildNodeEntry = childNodesEntry.item(k);
										if(aChildNodeEntry.getNodeName().equals("wd:CF_LRV_Start_Date_Time_from_Work_Schedule_Event"))
										{											
											obj.put("startDate", aChildNodeEntry.getTextContent());											
										}
										else if(aChildNodeEntry.getNodeName().equals("wd:CF_LRV_End_Date_Time_from_Work_Schedule_Event"))
										{
											obj.put("endDate", aChildNodeEntry.getTextContent());	
										}
										else if(aChildNodeEntry.getNodeName().equals("wd:Work_Schedule_Calendars"))
										{
											String workSchVal = aChildNodeEntry.getAttributes().getNamedItem("wd:Descriptor").toString();
											String workScheduleVal = workSchVal.replaceAll("\"", "");
											int pos = workScheduleVal.trim().indexOf("=") + 1;
											String actualWorkSchVal = workScheduleVal.substring(pos, workScheduleVal.length());
											obj.put("workSchedule", actualWorkSchVal);	
										}
									}
								}
							}
							details.put(obj);
						}
					}
				}
		    }
		}
		return details;
	}

	public JSONArray selectColumnMappingTenantBased(String loadCycle, String ruleName, String identifier) {
		
		JSONArray headingSource = new JSONArray();
		JSONArray headingTarget = new JSONArray();
		String heading = "";
		
		try 
		{
			String[] headingFromTargetArr = headingFromTargetTenant.split(",");
			for(int i = 0;i<headingFromTargetArr.length; i++)
			{
				JSONObject objWd = new JSONObject();
				objWd.put("headingWD", headingFromTargetArr[i]);
				headingTarget.put(objWd);
			}
			
			String[] headingFromSourceArr = headingFromSourceTenant.split(",");
			for(int j = 0;j<headingFromSourceArr.length; j++)
			{
				JSONObject objSrc = new JSONObject();
				heading = findHeadingName(headingFromSourceArr[j], headingTarget);
				if(heading.equalsIgnoreCase(identifier))
				{
					objSrc.put("isChecked", true);
				}
				else
				{
					objSrc.put("isChecked", false);
				}
				objSrc.put("headingSource", headingFromSourceArr[j]);
				objSrc.put("headingAllWD", headingTarget);
				objSrc.put("heading", heading);
				objSrc.put("isSelect", false);
				headingSource.put(objSrc);
			}
		} 
		catch (JSONException e)
		{
			e.printStackTrace();
		}
		return headingSource;
	}

	private String findHeadingName(String sourceHeader, JSONArray headingWd) {
	
		String headingWD = "";
		String headingWDWOU = "";
		String retStr = "";
		for (int i = 0; i < headingWd.length(); i++) 
		{            
			try 
			{
				headingWD = headingWd.getJSONObject(i).getString("headingWD");
				headingWDWOU = headingWD.replaceAll("_", " ");
				if(headingWDWOU.equalsIgnoreCase(sourceHeader.replaceAll("_", " ")))
				{
					retStr = headingWD;
					break;
				}
			} 
			catch (JSONException e) 
			{
				e.printStackTrace();
			}
	        //System.out.println(headingWD);
	    }
		return retStr;
	}
	
	private String convertFileToString(String outputfile) {
		
		String xmlStr = null;
		try 
		{
			InputStream is = new FileInputStream(outputfile);
			BufferedReader bufReader = new BufferedReader(new InputStreamReader(is)); 
		    StringBuilder out = new StringBuilder();
	        String line;
	        while ((line = bufReader.readLine()) != null) {
	            out.append(line);
	        }
	        xmlStr = out.toString();
	        bufReader.close();
		} 
		catch (FileNotFoundException e) 
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		}
		return xmlStr;
		
	}
	
	/*private String addDateRangeInXML(String xmlReqFile, String ruleName, String terminationFromDt, String terminationToDt) {

		File updatedRequestfile = null;
		try  
		{  
			File file = new File(xmlReqFile);     
			FileReader fr = new FileReader(file);   
			BufferedReader br = new BufferedReader(fr);   
			StringBuffer sb = new StringBuffer();     
			String line;
			boolean executed = true;
			while((line=br.readLine())!=null)  
			{  
				sb.append(line);  
				sb.append("\n");
				if(line.contains("bsvc:Request_Criteria") && executed)
				{			
					executed = false;
					sb.append("<bsvc:Transaction_Log_Criteria_Data>"); 
					sb.append("\n");
					sb.append("<bsvc:Transaction_Date_Range_Data>");
					sb.append("\n");
					sb.append("<bsvc:Effective_From>" + terminationFromDt + "T00:00:00" + "</bsvc:Effective_From>");
					sb.append("\n");
					sb.append("<bsvc:Effective_Through>" + terminationToDt + "T15:15:04+00:00" + "</bsvc:Effective_Through>");
					sb.append("\n");
					sb.append("</bsvc:Transaction_Date_Range_Data>");
					sb.append("\n");
					sb.append("</bsvc:Transaction_Log_Criteria_Data>");
					sb.append("\n");
				}
			}  
			fr.close();
			br.close();	
			
			updatedRequestfile = File.createTempFile(ruleName + "_Term" , ".xml");
			PrintWriter writer = new PrintWriter(updatedRequestfile);
		    writer.write(sb.toString());
			writer.flush();
			writer.close();
		}  
		catch(IOException e)  
		{  
			e.printStackTrace();  
		}
		return updatedRequestfile.getAbsolutePath(); 
	}*/
	
	/*private String addDateRangeInXMLForHire(String xmlReqFile, String ruleName, String hireFromDt, String hireToDt) {

		File updatedRequestfile = null;
		try  
		{  
			File file = new File(xmlReqFile);     
			FileReader fr = new FileReader(file);   
			BufferedReader br = new BufferedReader(fr);   
			StringBuffer sb = new StringBuffer();     
			String line;
			boolean executed = true;
			while((line=br.readLine())!=null)  
			{ 
				if(line.trim().equalsIgnoreCase("<bsvc:Exclude_Inactive_Workers>false</bsvc:Exclude_Inactive_Workers>"))
				{
					line = line.replace("false", "true");
					sb.append(line);  
					sb.append("\n");
				}
				else
				{
					sb.append(line);  
					sb.append("\n");
				}
				if(line.contains("bsvc:Request_Criteria") && executed)
				{			
					executed = false;
					sb.append("<bsvc:Transaction_Log_Criteria_Data>"); 
					sb.append("\n");
					sb.append("<bsvc:Transaction_Date_Range_Data>");
					sb.append("\n");
					sb.append("<bsvc:Effective_From>" + hireFromDt + "T00:00:00" + "</bsvc:Effective_From>");
					sb.append("\n");
					sb.append("<bsvc:Effective_Through>" + hireToDt + "T15:15:04+00:00" + "</bsvc:Effective_Through>");
					sb.append("\n");
					sb.append("</bsvc:Transaction_Date_Range_Data>");
					sb.append("\n");
					sb.append("</bsvc:Transaction_Log_Criteria_Data>");
					sb.append("\n");
				}
			}  
			fr.close();
			br.close();	
			
			updatedRequestfile = File.createTempFile(ruleName + "_Hire" , ".xml");
			PrintWriter writer = new PrintWriter(updatedRequestfile);
		    writer.write(sb.toString());
			writer.flush();
			writer.close();
		}  
		catch(IOException e)  
		{  
			e.printStackTrace();  
		}
		return updatedRequestfile.getAbsolutePath(); 
	}*/
	
	private String updatePageIndex(String xmlStr, int pageNum, String ruleName) {
		
		String pageNumber = "";
		String xml2String = null;
		File updatedRequestfile = null;
		File newUpdatedRequestfile = null;
		String filePath = null;
		Document doc = convertStringToXMLDocument(xmlStr);        
		doc.getDocumentElement().normalize();
		System.out.println("Root element :" + doc.getDocumentElement().getNodeName());
		NodeList nList = doc.getElementsByTagName("bsvc:Response_Filter");
		for (int i = 0; i < nList.getLength(); i++) 
		{
			Node aChildNode = nList.item(i);
			if (aChildNode.getNodeType() == Node.ELEMENT_NODE) 
			{
				Element ele = (Element) aChildNode;
				if (ele.hasChildNodes()) 
				{
					NodeList childNodeList = ele.getChildNodes();
					for (int j = 0; j < childNodeList.getLength(); j++) 
					{
						Node nNode = childNodeList.item(j);
						if (nNode.getNodeName().contains("bsvc:Page")) 
						{
							pageNumber = nNode.getFirstChild().getNodeValue();
							System.out.println("Page Number :" + pageNumber);
							nNode.setTextContent(String.valueOf(pageNum));
							pageNumber = nNode.getFirstChild().getNodeValue();
							System.out.println("Page Number Updated:" + pageNumber);
							break;
						}
					}
				}
			}
		}
		
        try 
        {
    		Transformer tf = TransformerFactory.newInstance().newTransformer();
            tf.setOutputProperty(OutputKeys.INDENT, "yes");
            tf.setOutputProperty(OutputKeys.METHOD, "xml");
            tf.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "4");

            DOMSource domSource = new DOMSource(doc);
            updatedRequestfile = File.createTempFile(ruleName , ".xml");
            filePath = updatedRequestfile.getAbsolutePath();            
            StreamResult sr = new StreamResult(new File(filePath));
			tf.transform(domSource, sr);
			
			File xmlFile = new File(filePath);			
			Reader fileReader = new FileReader(xmlFile);
			BufferedReader bufReader = new BufferedReader(fileReader); 
			StringBuilder sb = new StringBuilder(); 
			String line = bufReader.readLine(); 
			while( line != null){ 
					sb.append(line).append("\n"); 
					line = bufReader.readLine(); 
			}
			xml2String = sb.toString();
			bufReader.close();
			
			newUpdatedRequestfile = File.createTempFile(ruleName, ".xml");
			PrintWriter writer = new PrintWriter(newUpdatedRequestfile);
		    writer.write(xml2String);
			writer.flush();
			writer.close();
				
		} 
        catch (TransformerException e) 
        {
			e.printStackTrace();
		} 
        catch (FileNotFoundException e) 
        {
			e.printStackTrace();
		} 
        catch (IOException e) 
        {
			e.printStackTrace();
		}
		return newUpdatedRequestfile.getAbsolutePath();
		
	}

	private Document convertStringToXMLDocument(String xmlString) 
	{
	    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
	    DocumentBuilder builder = null;
	    try
	    {
	        builder = factory.newDocumentBuilder();
	        Document doc = builder.parse(new InputSource(new StringReader(xmlString)));
	        return doc;
	    } 
	    catch (Exception e) 
	    {
	        e.printStackTrace();
	    }
	    return null;
	}

	/*private String convertDate(String strDate) {

		SimpleDateFormat inputFormatter=new SimpleDateFormat("E MMM dd yyyy HH:mm:ss");  
	    Date da = null;
		try 
		{
			da = (Date)inputFormatter.parse(strDate);
		} 
		catch (ParseException e) 
		{
			e.printStackTrace();
		}

	    DateFormat outputFormatter = new SimpleDateFormat("yyyy-MM-dd");
	    String strDateTime = outputFormatter.format(da);
		return strDateTime;
	}
	
	private Date convertStringToDate(String strDate) {

		SimpleDateFormat inputFormatter=new SimpleDateFormat("yyyy-MM-dd");  
	    Date date = null;
		try 
		{
			date = (Date)inputFormatter.parse(strDate);
		} 
		catch (ParseException e) 
		{
			e.printStackTrace();
		}
		return date;
	}*/
	
	private Date convertWorkdayStringToDate(String strDate) {

		SimpleDateFormat inputFormatter=new SimpleDateFormat("yyyy-MM-dd-hh:mm");  
		DateFormat outputFormatter = new SimpleDateFormat("yyyy-MM-dd");
	    Date date = null;
	    Date newDate = null;
		try 
		{
			date = (Date)inputFormatter.parse(strDate);			
			String strDateTime = outputFormatter.format(date);
			newDate = (Date)outputFormatter.parse(strDateTime);
		} 
		catch (ParseException e) 
		{
			e.printStackTrace();
		}
		return newDate;
	}
	
	@RequestMapping(value = "/performComparisonTenantBased/{primaryKey}/{colValues}/{loadCycle}/{ruleName}", 
	        method = RequestMethod.GET, headers = "Accept=application/json")
	public void performComparisonTenantBased(@PathVariable("primaryKey") String primaryKey,  @PathVariable("colValues") String colValues, @PathVariable("loadCycle") String loadCycle,  
			@PathVariable("ruleName") String ruleName, HttpServletResponse response, HttpSession httpSession) {
		
		System.out.println("primaryKey-"+primaryKey);
		System.out.println("colValues-"+colValues);
		
		Page page = pageService.getPage(Long.parseLong(loadCycle));
		loadCycle = page.getPageName();
		
		Long userId = (Long) httpSession.getAttribute(SESSION_USER_ID);
		User user = userService.getUser(userId);
		
		String rowValues = headingFromSourceTenant;
		
		generateXMLFilesTenantBased(loadCycle, ruleName, user.getClient());
		//PostLoad postLoad = postLoadService.getPostLoadByLoadRuleClient(loadCycle, ruleName, user.getClient());
		
		String commonCol = primaryKey;
		
		//byte[] wdXMLFileContent = postLoad.getWdXMLFileContent();
		//byte[] srcXMLFileContent = postLoad.getSrcXMLFileContent();
		byte[] wdXMLFileContent = targetXMLContent;
		byte[] srcXMLFileContent = sourceXMLContent;
		File wdXMLfile = null;
		File srcXMLfile = null;
		try 
		{
			wdXMLfile = File.createTempFile("Target_" + ruleName, ".xml");
			FileUtils.writeByteArrayToFile(wdXMLfile, wdXMLFileContent);
			
			srcXMLfile = File.createTempFile("Source_" + ruleName, ".xml");
			FileUtils.writeByteArrayToFile(srcXMLfile, srcXMLFileContent);
		} 
		catch (IOException e1) 
		{
			e1.printStackTrace();
		}
		
		String xmlFile1 = wdXMLfile.getAbsolutePath();
		String xmlFile2 = srcXMLfile.getAbsolutePath();
		
		MultiValuedMap<String, List<String>> firstXML = null;
		MultiValuedMap<String, List<String>> secondXML = null;
		try 
		{
			firstXML =  extractXMLFile(xmlFile1, commonCol);			
			secondXML = extractXMLFile(xmlFile2, commonCol);
			
			String [] fields = colValues.split(",");
			compareXML(firstXML, secondXML, fields, response, commonCol, ruleName, rowValues, "Tenant");
		} 
		catch (FileNotFoundException e) 
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (XMLStreamException e) 
		{
			e.printStackTrace();
		}
	}
	
	private void compareXML(MultiValuedMap<String, List<String>> firstXML, MultiValuedMap<String, List<String>> secondXML, String[] fields, HttpServletResponse response, String commonCol, 
			String ruleName, String rowValues, String type) throws IOException {
	
		sbFinal = new StringBuffer();
		StringBuffer sbTemp = new StringBuffer();
		boolean matchFound = false;
		ArrayList<String> valList1 = null;
		ArrayList<String> valList2 = null;
		/*Iterator it = firstXML.entrySet().iterator();
	    while (it.hasNext()) 
	    {
	        Map.Entry keyFirst = (Map.Entry)it.next();
	        if(secondXML.get(keyFirst.getKey()) != null)
	        {
	        	String id = keyFirst.getKey().toString();
	        	//if(id.equals("00239600"))
	        	//{
		        	ArrayList<String> valList1 = (ArrayList<String>) keyFirst.getValue();
		        	ArrayList<String> valList2 = (ArrayList<String>) secondXML.get(keyFirst.getKey());
		        	compareXMLDifference(id, valList1, valList2, fields, response, commonCol); 
	        	//}
	        }
	    }*/
		
		Iterator<String> it = firstXML.keySet().iterator();
		while (it.hasNext()) 
	    {
			matchFound = false;
			String id = (String)it.next();
			//if(id.equals("ZZ036J668"))
			if(secondXML.get(id) != null)
	        {
				Collection<List<String>> colList1 =  firstXML.get(id);
				if(colList1.size() == 1)
				{
					Iterator<List<String>> col1 = colList1.iterator();
					while(col1.hasNext()) 
					{
						valList1 = (ArrayList<String>)col1.next();
					}
		        	Collection<List<String>> colList2 =  secondXML.get(id);
		        	if(colList2 != null && colList2.size() > 0)
		        	{
			        	Iterator<List<String>> col2 = colList2.iterator();
						while(col2.hasNext()) 
						{
							valList2 = (ArrayList<String>)col2.next();
						}
		        	}
		        	else
		        	{
		        		valList2 = null;
		        	}
		        	compareXMLDifference(id, valList1, valList2, fields, response, commonCol, type); 
				}
				else if(colList1.size() >1)
				{
					Iterator<List<String>> col1 = colList1.iterator();
					while(col1.hasNext()) 
					{
						valList1 = (ArrayList<String>)col1.next();
						Collection<List<String>> colList2 =  secondXML.get(id);
			        	Iterator<List<String>> col2 = colList2.iterator();
						while(col2.hasNext()) 
						{
							sbTemp = new StringBuffer();
							valList2 = (ArrayList<String>)col2.next();
							String fieldVal = compareXMLDifferenceMultipleRow(id, valList1, valList2, fields, response, commonCol);
				        	if(fieldVal.equals(""))
				        	{
				        		matchFound = true;
				        		break;
				        	}
				        	else
				        	{
				        		sbTemp.append(fieldVal);
				        		sbTemp.append("\n");
				        	}				        	
						}
						if(matchFound)
						{
							//sbTemp = new StringBuffer();
							break;
						}
					}
					if(!matchFound)
					{
						sbFinal.append(sbTemp);
					}
				}
				
	        }
	    }
	
		System.out.println(sbFinal.toString());		
		createComparisonMatrix(commonCol, ruleName, response, rowValues);
	}
	
	private void createComparisonMatrix(String commonCol, String ruleName, HttpServletResponse response, String rowValues) throws IOException {
		
		String primaryKey = "";
		String oldKey = "";
		String fieldName = "";
		String sourceVal = "";
		String wdVal = "";
		String headerName = "";
		String secondaryName = "";
		Row row = null;
		Row rowWD = null;
		String[] headingArr = rowValues.split(",");
		Map<String, Integer> columnMap = new HashMap<>();
		
		Workbook workbook = new XSSFWorkbook(); 
        Sheet sheet = workbook.createSheet(ruleName);
        File file = File.createTempFile(ruleName, ".xlsx");
        
        if(sbFinal.toString().length() > 0)
		{
        	mismatchCount = getMismatchCount(sbFinal.toString());
	        Font headerFont = workbook.createFont();
			headerFont.setBold(true);
			
	        CellStyle headerStyle = workbook.createCellStyle();
	        headerStyle.setAlignment(HorizontalAlignment.CENTER);
	        headerStyle.setFont(headerFont);
	        headerStyle.setBorderBottom(BorderStyle.THICK);
	        
	        CellStyle descStyle = workbook.createCellStyle();
	        descStyle.setAlignment(HorizontalAlignment.LEFT);
	        descStyle.setFont(headerFont);
	        
	        Row firstRow = sheet.createRow(0);
	        Cell firstCell = firstRow.createCell(0);
	        firstCell.setCellValue("Total Number of records in Source:");
	        firstCell.setCellStyle(descStyle);	        
	        firstCell = firstRow.createCell(3);
	        firstCell.setCellValue(sourceCount);
	        firstCell.setCellStyle(descStyle);	
	        sheet.addMergedRegion(new CellRangeAddress(0, 0, 0, 2 ));
	        
	        Row secondRow = sheet.createRow(1);
	        Cell secondCell = secondRow.createCell(0);
	        secondCell.setCellValue("Total Number of records fetched:");
	        secondCell.setCellStyle(descStyle);
	        secondCell = secondRow.createCell(3);
	        secondCell.setCellValue(wdCount);
	        secondCell.setCellStyle(descStyle);	
	        sheet.addMergedRegion(new CellRangeAddress(1, 1, 0, 2 ));
	        
	        Row thirdRow = sheet.createRow(2);
	        Cell thirdCell = thirdRow.createCell(0);
	        thirdCell.setCellValue("Total Number of record where mismatch found:");
	        thirdCell.setCellStyle(descStyle);
	        thirdCell = thirdRow.createCell(3);
	        thirdCell.setCellValue(mismatchCount);
	        thirdCell.setCellStyle(descStyle);
	        sheet.addMergedRegion(new CellRangeAddress(2, 2, 0, 2 ));
	        
	        Row headerRow = sheet.createRow(4);
	        Cell cell = headerRow.createCell(0);
	        if(commonCol.contains(":"))
	        {
	        	for(int i = 0; i<headingArr.length; i++)
		        {
		        	if(commonCol.substring(0, commonCol.indexOf(":")).equalsIgnoreCase(headingArr[i]))
		        	{
		    	        cell.setCellValue(headingArr[i]);
		    	        cell.setCellStyle(headerStyle);
		    	        break;
		        	}
		        }
	        }
	        else
	        {
	        	for(int i = 0; i<headingArr.length; i++)
		        {
		        	if(commonCol.equalsIgnoreCase(headingArr[i]))
		        	{
		    	        cell.setCellValue(headingArr[i]);
		    	        cell.setCellStyle(headerStyle);
		    	        break;
		        	}
		        }
	        }
	        cell = headerRow.createCell(1);
	        cell.setCellValue("");
	        cell.setCellStyle(headerStyle);
	        for(int i = 1; i<headingArr.length; i++)
	        {
	        	cell = headerRow.createCell(i + 1);
	        	cell.setCellValue(headingArr[i]);
    	        cell.setCellStyle(headerStyle);
    	        columnMap.put(headingArr[i], i + 1);	        	
	        }
	        System.out.println("columnMap--"+columnMap);
	        
			BufferedReader bufReader = new BufferedReader(new StringReader(sbFinal.toString().trim()));				    
		    String line = null;
		    int rowNum = 3;
		    int rowNumWD = 4;
			while( (line=bufReader.readLine()) != null )
			{
				String[] outputArr = line.split(",");
				if(outputArr.length >1)
				{
					if(outputArr.length == 4)
					{
						primaryKey = outputArr[0];
						fieldName = outputArr[1];
						sourceVal = outputArr[2];
						if(sourceVal.contains("?"))
                        {
							sourceVal = sourceVal.replace("?", ",");
                        }
						wdVal = outputArr[3];
						if(wdVal.contains("?"))
                        {
							wdVal = wdVal.replace("?", ",");
                        }
					}
					else
					{
						primaryKey = outputArr[0];
						fieldName = outputArr[1];
						sourceVal = outputArr[2];
						if(sourceVal.contains("?"))
                        {
							sourceVal = sourceVal.replace("?", ",");
                        }
						wdVal = "";
					}
					if(primaryKey.equalsIgnoreCase(oldKey))
					{
						for(int i = 0; i<headingArr.length; i++)
				        {
				        	if(fieldName.equalsIgnoreCase(headingArr[i]))
				        	{
				    	        headerName = headingArr[i];
				    	        break;
				        	}
				        }
						//row.createCell(1).setCellValue(fieldName);
						row.createCell(columnMap.get(headerName)).setCellValue(sourceVal);
						rowWD.createCell(columnMap.get(headerName)).setCellValue(wdVal);
					}
					else
					{
						rowNum = rowNum + 2;
						rowNumWD = rowNumWD + 2;
						row = sheet.createRow(rowNum);
						rowWD = sheet.createRow(rowNumWD);
						for(int i = 0; i<headingArr.length; i++)
				        {
				        	if(fieldName.equalsIgnoreCase(headingArr[i]))
				        	{
				    	        headerName = headingArr[i];
				    	        break;
				        	}
				        }
						if(primaryKey.contains(":"))
						{
							row.createCell(0).setCellValue(primaryKey.substring(0, primaryKey.indexOf(":")));
							row.createCell(1).setCellValue("Source");
							rowWD.createCell(1).setCellValue("Workday");
							for(int i = 0; i<headingArr.length; i++)
					        {
					        	if(commonCol.substring(commonCol.indexOf(":")+1, commonCol.length()).equalsIgnoreCase(headingArr[i]))
					        	{
					        		secondaryName = headingArr[i];
					    	        break;
					        	}
					        }
							row.createCell(columnMap.get(secondaryName)).setCellValue(primaryKey.substring(primaryKey.indexOf(":")+1, primaryKey.length()));
							rowWD.createCell(columnMap.get(secondaryName)).setCellValue(primaryKey.substring(primaryKey.indexOf(":")+1, primaryKey.length()));
						}
						else
						{
							row.createCell(0).setCellValue(primaryKey);
							row.createCell(1).setCellValue("Source");
							rowWD.createCell(1).setCellValue("Workday");
						}
						//row.createCell(1).setCellValue(fieldName);
						row.createCell(columnMap.get(headerName)).setCellValue(sourceVal);
						rowWD.createCell(columnMap.get(headerName)).setCellValue(wdVal);
					}
					oldKey = primaryKey;
				}
			}
			
			if(errorList.size() >0)
			{
		        int lastRowNum = sheet.getLastRowNum();
				Row notLoadedRow = sheet.createRow(lastRowNum+3);
		        Cell notLoadedCell = notLoadedRow.createCell(0);
		        notLoadedCell.setCellValue("Total Number of records not fetched:");
		        notLoadedCell.setCellStyle(descStyle);	        
		        notLoadedCell = notLoadedRow.createCell(3);
		        notLoadedCell.setCellValue(errorList.size());
		        notLoadedCell.setCellStyle(descStyle);
		        //sheet.addMergedRegion(new CellRangeAddress(lastRowNum, lastRowNum, 0, 2 ));
		        
		        Row notLoadedDetailsRow = null;
		        Cell notLoadedDetailsCell = null;
		        String notLoadedStr = null;
		        String[] notLoadedStrArr = null;
		        int iVal = 4;
		        int iCnt = 1;
		        for (Map.Entry<String,String> entry : sourceEntryMap.entrySet())
		        {
		        	iCnt = 1;
		        	iVal++;
		        	notLoadedDetailsRow = sheet.createRow(lastRowNum+iVal);
		        	notLoadedDetailsCell = notLoadedDetailsRow.createCell(0);
		        	notLoadedDetailsCell.setCellValue(entry.getKey());
		        	notLoadedDetailsCell = notLoadedDetailsRow.createCell(1);
		        	notLoadedDetailsCell.setCellValue("Source");
		        	
		        	notLoadedStr = entry.getValue();
		        	notLoadedStrArr = notLoadedStr.split(",");
		        	for(int c=0;c<notLoadedStrArr.length;c++)
		        	{
		        		iCnt++;
		        		notLoadedDetailsCell = notLoadedDetailsRow.createCell(iCnt);
		        		notLoadedDetailsCell.setCellValue(notLoadedStrArr[c]);
		        	}
		        }
			}		         
		    			
		    for(int i = 0; i < columnMap.size() + 2; i++) {
	            sheet.autoSizeColumn(i);
	        }
		}
        else
        {
        	mismatchCount = 0;
	        Font headerFont = workbook.createFont();
			headerFont.setBold(true);
			
	        CellStyle headerStyle = workbook.createCellStyle();
	        headerStyle.setAlignment(HorizontalAlignment.CENTER);
	        headerStyle.setFont(headerFont);
	        headerStyle.setBorderBottom(BorderStyle.THICK);
	        
	        CellStyle descStyle = workbook.createCellStyle();
	        descStyle.setAlignment(HorizontalAlignment.LEFT);
	        descStyle.setFont(headerFont);
	        
	        Row firstRow = sheet.createRow(0);
	        Cell firstCell = firstRow.createCell(0);
	        firstCell.setCellValue("Total Number of records in Source:");
	        firstCell.setCellStyle(descStyle);	        
	        firstCell = firstRow.createCell(3);
	        firstCell.setCellValue(sourceCount);
	        firstCell.setCellStyle(descStyle);
	        sheet.addMergedRegion(new CellRangeAddress(0, 0, 0, 2 ));
	        
	        Row secondRow = sheet.createRow(1);
	        Cell secondCell = secondRow.createCell(0);
	        secondCell.setCellValue("Total Number of records fetched:");
	        secondCell.setCellStyle(descStyle);
	        secondCell = secondRow.createCell(3);
	        secondCell.setCellValue(wdCount);
	        secondCell.setCellStyle(descStyle);
	        sheet.addMergedRegion(new CellRangeAddress(1, 1, 0, 2 ));
	        
	        Row thirdRow = sheet.createRow(2);
	        Cell thirdCell = thirdRow.createCell(0);
	        thirdCell.setCellValue("Total Number of record where mismatch found:");
	        thirdCell.setCellStyle(descStyle);
	        thirdCell = thirdRow.createCell(3);
	        thirdCell.setCellValue(mismatchCount);
	        thirdCell.setCellStyle(descStyle);
	        sheet.addMergedRegion(new CellRangeAddress(2, 2, 0, 2 ));
	        
	        Row notLoadedRow = sheet.createRow(3);
	        Cell notLoadedCell = notLoadedRow.createCell(0);
	        notLoadedCell.setCellValue("Total Number of records not fetched:");
	        notLoadedCell.setCellStyle(descStyle);	        
	        notLoadedCell = notLoadedRow.createCell(3);
	        notLoadedCell.setCellValue(errorList.size());
	        notLoadedCell.setCellStyle(descStyle);
	        sheet.addMergedRegion(new CellRangeAddress(3, 3, 0, 2 ));
	        
			if(errorList.size() >0)
			{
		        Row headerRow = sheet.createRow(5);
		        Cell cell = headerRow.createCell(0);
		        if(commonCol.contains(":"))
		        {
		        	for(int i = 0; i<headingArr.length; i++)
			        {
			        	if(commonCol.substring(0, commonCol.indexOf(":")).equalsIgnoreCase(headingArr[i]))
			        	{
			    	        cell.setCellValue(headingArr[i]);
			    	        cell.setCellStyle(headerStyle);
			    	        break;
			        	}
			        }
		        }
		        else
		        {
		        	for(int i = 0; i<headingArr.length; i++)
			        {
			        	if(commonCol.equalsIgnoreCase(headingArr[i]))
			        	{
			    	        cell.setCellValue(headingArr[i]);
			    	        cell.setCellStyle(headerStyle);
			    	        break;
			        	}
			        }
		        }
		        cell = headerRow.createCell(1);
		        cell.setCellValue("");
		        cell.setCellStyle(headerStyle);
		        for(int i = 1; i<headingArr.length; i++)
		        {
		        	cell = headerRow.createCell(i + 1);
		        	cell.setCellValue(headingArr[i]);
	    	        cell.setCellStyle(headerStyle);
	    	        columnMap.put(headingArr[i], i + 1);	
		        }
		        
		        int lastRowNum = 5;				
		        
		        Row notLoadedDetailsRow = null;
		        Cell notLoadedDetailsCell = null;
		        String notLoadedStr = null;
		        String[] notLoadedStrArr = null;
		        int iVal = 1;
		        int iCnt = 1;
		        for (Map.Entry<String,String> entry : sourceEntryMap.entrySet())
		        {
		        	iCnt = 1;
		        	iVal++;
		        	notLoadedDetailsRow = sheet.createRow(lastRowNum+iVal);
		        	notLoadedDetailsCell = notLoadedDetailsRow.createCell(0);
		        	notLoadedDetailsCell.setCellValue(entry.getKey());
		        	notLoadedDetailsCell = notLoadedDetailsRow.createCell(1);
		        	notLoadedDetailsCell.setCellValue("Source");
		        	
		        	notLoadedStr = entry.getValue();
		        	notLoadedStrArr = notLoadedStr.split(",");
		        	for(int c=0;c<notLoadedStrArr.length;c++)
		        	{
		        		iCnt++;
		        		notLoadedDetailsCell = notLoadedDetailsRow.createCell(iCnt);
		        		notLoadedDetailsCell.setCellValue(notLoadedStrArr[c]);
		        	}
		        }
			}
			
		    for(int i = 0; i < columnMap.size() + 2; i++) {
	            sheet.autoSizeColumn(i);
	        }
        }
        
        FileOutputStream fileOut = new FileOutputStream(file);
        workbook.write(fileOut);
        
		FileInputStream fis = null;
		response.setHeader("Content-Disposition", "attachment;filename=" + ruleName + ".xlsx" + "");
		response.setContentType("application/vnd.ms-excel");
		try
		{
			fis = new FileInputStream(file);
			IOUtils.copy(fis, response.getOutputStream());
		}
		catch (IOException e) 
		{
			e.printStackTrace();
		}
		fis.close();		
		workbook.close();
		sbFinal = null;
		file.delete();

	}

	private int getMismatchCount(String string) throws IOException {
		
		String primaryKey = "";
		String oldKey = "";
		BufferedReader bufReader = new BufferedReader(new StringReader(sbFinal.toString()));		
	    String line = null;
	    int count = 0;
		while( (line=bufReader.readLine()) != null )
		{
			String[] outputArr = line.split(",");
			if(outputArr.length >1)
			{
				primaryKey = outputArr[0];
				if(!primaryKey.equalsIgnoreCase(oldKey))
				{
					count++;
				}
			}
			oldKey = primaryKey;				
		}
		return count;
	}

	private void compareXMLDifference(String key, ArrayList<String> valList1, ArrayList<String> valList2, String[] fields, HttpServletResponse response, 
			String commonCol, String type) throws IOException {

		String fieldVal1 = null;
		String fieldVal2 = null;
		for(int i = 0; i<fields.length; i++)
		{
			fieldVal1 = "";
			fieldVal2 = "";
			
			if(valList1 != null && valList1.size() > 0)
			{
				for(int j = 0; j<valList1.size(); j++)
				{
					if(valList1.get(j).substring(0, valList1.get(j).indexOf("=")).equalsIgnoreCase(fields[i]))
					{
						String[] valArr = valList1.get(j).split("=");
						fieldVal1 = valArr[1];
						if(fieldVal1.contains("~"))
						{
							fieldVal1 = fieldVal1.replace("~", "|");
						}
						break;
					}
				}
			}
	
			if(valList2 != null && valList2.size() > 0)
			{
				for(int k = 0; k<valList2.size(); k++)
				{
					if(valList2.get(k).substring(0, valList2.get(k).indexOf("=")).equalsIgnoreCase(fields[i]))
					{
						String[] valArr = valList2.get(k).split("=");
						fieldVal2 = valArr[1];
						if(fieldVal2.contains("~"))
						{
							fieldVal2 = fieldVal2.replace("~", "|");
						}
						break;
					}
				}
			}
			
			if(valList1 != null && valList1.size() > 0 && valList2 != null && valList2.size() > 0)
			{
				if(!fieldVal1.equalsIgnoreCase(fieldVal2))
				{
					if(type.equalsIgnoreCase("File"))
					{
						if(!fieldVal1.contains(fieldVal2))
						{
							sbFinal.append(key + "," + fields[i] + "," + fieldVal2 + "," + fieldVal1);
							sbFinal.append("\n");
						}
					}
					else
					{
						boolean isSame = checkOrderOfEntry(fieldVal1,fieldVal2);
						if(isSame)
						{
							sbFinal.append(key + "," + fields[i] + "," + fieldVal2 + "," + fieldVal1);
							sbFinal.append("\n");
						}
					}
				}
			}
		}		
	}
	
	private boolean checkOrderOfEntry(String fieldVal1, String fieldVal2) {

		boolean isSame = false;
		if(fieldVal1.contains("|"))
		{
			fieldVal1 = fieldVal1.replace("|", "~");
		}
		if(fieldVal2.contains("|"))
		{
			fieldVal2 = fieldVal2.replace("|", "~");
		}
		if(fieldVal1.length() != fieldVal2.length())
		{
			isSame = true;
		}
		else if(fieldVal1.length() == fieldVal2.length())
		{
			String[] fieldVal = fieldVal1.split("~");
			for(int i = 0;i<fieldVal.length; i++)
			{
				if(!fieldVal2.contains(fieldVal[i]))
				{
					isSame = true;
					break;
				}
			}
		}
		return isSame;
	}

	private String compareXMLDifferenceMultipleRow(String key, ArrayList<String> valList1, ArrayList<String> valList2, String[] fields, HttpServletResponse response, 
			String commonCol) throws IOException {

		String fieldVal1 = null;
		String fieldVal2 = null;
		StringBuffer sbTemp = new StringBuffer();
		for(int i = 0; i<fields.length; i++)
		{
			fieldVal1 = "";
			fieldVal2 = "";
			for(int j = 0; j<valList1.size(); j++)
			{
				if(valList1.get(j).substring(0, valList1.get(j).indexOf("=")).equalsIgnoreCase(fields[i]))
				{
					String[] valArr = valList1.get(j).split("=");
					fieldVal1 = valArr[1];
					break;
				}
			}
	
			for(int k = 0; k<valList2.size(); k++)
			{
				if(valList2.get(k).substring(0, valList2.get(k).indexOf("=")).equalsIgnoreCase(fields[i]))
				{
					String[] valArr = valList2.get(k).split("=");
					fieldVal2 = valArr[1];
					break;
				}
			}
			
			if(!fieldVal1.equalsIgnoreCase(fieldVal2))
			{
				sbTemp.append(key + "," + fields[i] + "," + fieldVal2 + "," + fieldVal1);
				sbTemp.append("\n");
			}			 
		}
		return sbTemp.toString();		
	}
	
	private static MultiValuedMap<String, List<String>> extractXMLFile(String xmlFile, String commonCol) throws FileNotFoundException, IOException, XMLStreamException {
		
		//Map<String, List<String>> xmlMap = new HashMap<String, List<String>>();
		MultiValuedMap<String, List<String>> xmlMap = new ArrayListValuedHashMap<String, List<String>>();
		//Multimap<Integer, String> multimap = ArrayListMultimap.create();
		List<String> valueList = new ArrayList<String>();
		
		try (InputStream stream = new FileInputStream(xmlFile)) 
		{
		    XMLInputFactory inputFactory = XMLInputFactory.newFactory();
		    inputFactory.setProperty(XMLInputFactory.IS_COALESCING, true);

		    XMLStreamReader reader = inputFactory.createXMLStreamReader(stream);
		    String attributeName = null;
		    String value = null;
		    String keyName = null;
		    String endElement = null;

		    while (reader.hasNext()) {
		        switch (reader.next()) {
		            case XMLStreamConstants.START_ELEMENT:
		                attributeName = reader.getName().toString();
		                break;
		            case XMLStreamConstants.END_ELEMENT:
		            	endElement = reader.getName().toString();
		                //System.out.println("End " + reader.getName());
		                break;
		            case XMLStreamConstants.CHARACTERS:
		            case XMLStreamConstants.SPACE:
		            	value = reader.getText();
		                if(attributeName != null && attributeName.trim().length() > 0 && value != null && value.trim().length() >0 && attributeName.equalsIgnoreCase(commonCol))
		                {
		                	keyName = value;
		                }
				        if(attributeName != null && attributeName.trim().length() > 0 && value != null && value.trim().length() >0 && !attributeName.equalsIgnoreCase(commonCol))
				        {
				        	//System.out.println(attributeName +  ":" + value);
				        	if(valueList == null || valueList.size() == 0)
				        	{
				        		valueList = new ArrayList<String>();
				        	}
				        	valueList.add(attributeName +  "=" + value);
				        }
		                break;
		        }
		        if(endElement != null && endElement.trim().length() > 0 && endElement.equals("details"))
		        {
		        	List<String> newList = new ArrayList<String>();
		        	if(valueList.size() >0)
		        	{
			        	for(int i = 0;i<valueList.size();i++)
			        	{
			        		newList.add(valueList.get(i));
			        	}
			        	xmlMap.put(keyName, newList);		        					    
					    valueList.clear();
		        	}
		        }
		    }
		}
		return xmlMap;
		
	}
	
	public void generateXMLFilesTenantBased(String loadCycle, String ruleName, String client) {
		
		    //PostLoad postLoad = postLoadService.getPostLoadByLoadRuleClient(loadCycle, ruleName, client);

			//byte[] wdCSVFileContent = postLoad.getWdCSVFileContent();
			//byte[] srcCSVFileContent = postLoad.getSrcCSVFileContent();
			
			byte[] wdCSVFileContent = targetContent;
			byte[] srcCSVFileContent = sourceContent;
			
			File wdXMLFile = null;
			File srcXMLFile = null;
			
			File wdCSVfile = null;
			File srcCSVfile = null;
			try 
			{
				wdCSVfile = File.createTempFile("Target_" + ruleName, ".csv");
				FileUtils.writeByteArrayToFile(wdCSVfile, wdCSVFileContent);
				
				srcCSVfile = File.createTempFile("Source_" + ruleName, ".csv");
				FileUtils.writeByteArrayToFile(srcCSVfile, srcCSVFileContent);
			} 
			catch (IOException e1) 
			{
				e1.printStackTrace();
			}
			
			File wdFile = new File(wdCSVfile.getAbsolutePath());
			File srcFile = new File(srcCSVfile.getAbsolutePath());
			
			try 
			{
				wdXMLFile = File.createTempFile("Target", ".xml");
				srcXMLFile = File.createTempFile("Source", ".xml");
			} 
			catch (IOException e) 
			{
				e.printStackTrace();
			}
			
			String wdXML = wdXMLFile.getAbsolutePath();
			String srcXML = srcXMLFile.getAbsolutePath();
			
			convertCSVToXML(wdFile, wdXML, loadCycle, ruleName, 1, client);
			convertCSVToXML(srcFile, srcXML, loadCycle, ruleName, 2, client);		
	}
	
	private void convertCSVToXML(File file, String filename, String loadCycle, String ruleName, int i, String client) {

		ArrayList<String> info = new ArrayList<String>(7);

	    BufferedReader readFile = null;
	    try 
	    {
	        DocumentBuilderFactory df = DocumentBuilderFactory.newInstance();
	        DocumentBuilder db = df.newDocumentBuilder();

	        Document document = db.newDocument();

	        Element rootElement = document.createElement("Root");

	        document.appendChild(rootElement);
	        readFile = new BufferedReader(new FileReader(file));
	        int line = 0;

	        String information = null;
	        while ((information = readFile.readLine()) != null) 
	        {
	            String[] rowValues = information.split(",");
	            if (line == 0) 
	            {
	                for (String columnInfo : rowValues) 
	                {
	                	info.add(columnInfo);
	                }
	            } 
	            else 
	            {
	                Element childElement = document.createElement("details");
	                rootElement.appendChild(childElement);
	                for (int columnInfo = 0; columnInfo < info.size(); columnInfo++) 
	                {
	                    String header = info.get(columnInfo);
	                    String value = null;

	                    if (columnInfo < rowValues.length) 
	                    {
	                        value = rowValues[columnInfo];
	                        if(value.contains("|"))
	                        {
	                        	value = value.replace("|", "?");
	                        }
	                    } 
	                    else 
	                    {
	                        value = " ";
	                    }
	                    Element current = document.createElement(header);
	                    current.appendChild(document.createTextNode(value));
	                    childElement.appendChild(current);
	                    System.out.println(value);
	                }
	            }
	            line++;
	        }
			Transformer tf = TransformerFactory.newInstance().newTransformer();
			tf.setOutputProperty(OutputKeys.ENCODING, "UTF-8");
			tf.setOutputProperty(OutputKeys.INDENT, "yes");
			Writer output = new StringWriter();
			tf.transform(new DOMSource(document), new StreamResult(output));
			
			//PostLoad postLoad = postLoadService.getPostLoadByLoadRuleClient(loadCycle, ruleName, client);
			if(i == 1)
			{
				targetXMLContent = output.toString().getBytes();
				//postLoad.setWdXMLFileName(ruleName + "_" + "WD.xml");
				//postLoad.setWdXMLFileContent(output.toString().getBytes());
			}
			else
			{
				sourceXMLContent = output.toString().getBytes();
				//postLoad.setSrcXMLFileName(ruleName + "_" + "SRC.xml");
				//postLoad.setSrcXMLFileContent(output.toString().getBytes());
			}
			//postLoadService.updatePostLoad(postLoad);
			
		    /*FileWriter fw = new FileWriter(filename,true);
		    fw.write(output.toString() + "\n");
		    fw.close();*/
		} 
	    catch (Exception e) 
	    {

	    }
	}
	
	private void createSOAPHeader(SOAPHeader soapHeader, String sourceTenantName, String sourceTenantUser, String sourceTenantPwd) throws SOAPException {
		
		QName security = soapHeader.createQName("Security", HEADER_SECURITY_NS_PREFIX);
		SOAPHeaderElement headerElement = soapHeader.addHeaderElement(security);
		SOAPElement usernameToken = headerElement.addChildElement("UsernameToken", HEADER_SECURITY_NS_PREFIX);
		SOAPElement username = usernameToken.addChildElement("Username",HEADER_SECURITY_NS_PREFIX);
		username.addTextNode(sourceTenantUser + "@"	+ sourceTenantName);
		SOAPElement password = usernameToken.addChildElement("Password",HEADER_SECURITY_NS_PREFIX);
		password.addTextNode(sourceTenantPwd);
		password.addAttribute(new QName("Type"), PASSWORD_TYPE_ATTR_VALUE);
	}
	
	private String convertExcelToCSV(Sheet sheet, String fileName) {
		
		StringBuilder data = new StringBuilder();
        String[] nextRecord = null;
		String cellValue = "";
		String csvValue = "";
		//String updatedVal = "";
        try 
        {
    		File sourceCsvFile = File.createTempFile(fileName.substring(0, fileName.indexOf(".")), ".csv");
    		int maxNumOfCells = sheet.getRow(0).getLastCellNum();//change made=0
            Iterator<Row> rowIterator = sheet.iterator();
            while (rowIterator.hasNext()) 
            {
            	Row row = rowIterator.next();
            	if(row.getRowNum() >0)//change made
            	{
	                for( int cellCounter = 0 ; cellCounter < maxNumOfCells; cellCounter ++)//change made=0
	                {
	                	Cell cell = null;
	                    if( row.getCell(cellCounter) == null)
	                    {
	                    	data.append(",");
	                    } 
	                    else 
	                    {
	                        cell = row.getCell(cellCounter);
	                        if(cell.getCellType().toString().equals("STRING"))
	                        {
	                        	if(cell.getStringCellValue().contains(","))
	                        	{
	                        		data.append(cell.getStringCellValue().replace(",", "|"));
	                        	}
	                        	else
	                        	{
	                        		data.append(cell.getStringCellValue());
	                        	}
	                        }
	                        else if(cell.getCellType().toString().equals("NUMERIC"))
	                        {
	                        	if(String.valueOf(cell.getNumericCellValue()).contains("E"))
	                        	{
	                        		Object obj = cell.getNumericCellValue();
		                        	data.append(new BigDecimal(obj.toString()).toPlainString());
	                        	}
	                        	else if(String.valueOf(cell.getNumericCellValue()).contains(".0") && !String.valueOf(cell.getNumericCellValue()).contains("E"))
	                        	{
	                        		data.append(String.valueOf(cell.getNumericCellValue()).substring(0, String.valueOf(cell.getNumericCellValue()).indexOf(".")));
	                        	}
	                        	else
	                        	{
	                        		data.append(String.valueOf(cell.getNumericCellValue()));
	                        	}
	                        }
	                        else if(cell.getCellType().toString().equals("BOOLEAN"))
	                        {
	                        	data.append(cell.getBooleanCellValue());
	                        }
	                        data.append(",");
	                    }                    
	                }
	                data.append('\n');
            	}
            }

            Files.write(Paths.get(sourceCsvFile.getAbsolutePath()), data.toString().getBytes("UTF-8"));
            
			FileReader filereader = new FileReader(sourceCsvFile.getAbsolutePath());
			CSVReader csvReader = new CSVReader(filereader); 
            while ((nextRecord = csvReader.readNext()) != null) 
            {
            	cellValue = "";
                for (String cell : nextRecord) 
                {
                	if(cellValue.equals(""))
                	{
                		cellValue = cell;
                	}
                	else
                	{
                		cellValue = cellValue + "," + cell;
                	}	                	 
                }	                
            	if(csvValue.equals(""))
            	{
            		csvValue = cellValue;           		
            	}
            	else
            	{
            		csvValue = csvValue + "\n" + cellValue; 
            	}
            }
            csvReader.close();
        } 
        catch (FileNotFoundException e) 
        {
            e.printStackTrace();	
        } 
        catch (IOException e) 
        {
            e.printStackTrace();
        }
		return csvValue;
		
	}

	private String addHireIdList(String GET_HIRE_REQUEST_FILE, List<String> columnList, String ruleName, int startIndex, int endIndex, String id) {
	
		File updatedRequestfile = null;
		try  
		{  
			File file = new File(GET_HIRE_REQUEST_FILE);     
			FileReader fr = new FileReader(file);   
			BufferedReader br = new BufferedReader(fr);   
			StringBuffer sb = new StringBuffer();     
			String line;
			boolean executed = true;
			while((line=br.readLine())!=null)  
			{  
				sb.append(line);  
				sb.append("\n");
				if(line.contains("bsvc:Get_Workers_Request") && executed)
				{
					executed = false;
					sb.append(" <bsvc:Request_References>"); 
					sb.append("\n");
					for(int i = startIndex;i<endIndex;i++)
					{
						//System.out.println("GET--"+ i + "--" + columnList.get(i));
						sb.append("  <bsvc:Worker_Reference bsvc:Descriptor=" + "\"" + id + "\"" + ">");
						sb.append("\n");
						sb.append("   <bsvc:ID bsvc:type=" + "\"" + id + "\"" + ">" + columnList.get(i) + "</bsvc:ID>");
						sb.append("\n");
						sb.append("  </bsvc:Worker_Reference>");
						sb.append("\n");
					}
					sb.append(" </bsvc:Request_References>");
					sb.append("\n");
				}
			}  
			fr.close();
			br.close();	
			
			updatedRequestfile = File.createTempFile(ruleName + "_" + startIndex , ".xml");
			PrintWriter writer = new PrintWriter(updatedRequestfile);
		    writer.write(sb.toString());
			writer.flush();
			writer.close();
		}  
		catch(IOException e)  
		{  
			e.printStackTrace();  
		}
		return updatedRequestfile.getAbsolutePath(); 
	}
	
	/*private String getWorkerRequest()
	{
		String requestXML = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>"
		+ "<soapenv:Envelope xmlns:bsvc=\"urn:com.workday/bsvc\" xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\">"
		   + "<soapenv:Header>"	      
		   + "</soapenv:Header>"
		   + "<soapenv:Body>"
		      + "<bsvc:Get_Workers_Request bsvc:version=\"v28.2\">"
		         + "<bsvc:Request_Criteria>"
		           + "<bsvc:Exclude_Inactive_Workers>false</bsvc:Exclude_Inactive_Workers>"
		            + "<bsvc:Exclude_Employees>false</bsvc:Exclude_Employees>"
		            + "<bsvc:Exclude_Contingent_Workers>true</bsvc:Exclude_Contingent_Workers>"
		         + "</bsvc:Request_Criteria>"
		         + "<bsvc:Response_Filter>"
		            + "<bsvc:Page>1</bsvc:Page>"
		            + "<bsvc:Count>999</bsvc:Count>"
					+ "<bsvc:As_Of_Effective_Date>2021-07-03</bsvc:As_Of_Effective_Date>"
		         + "</bsvc:Response_Filter>"
		         + "<bsvc:Response_Group>"
					+ "<bsvc:Include_Reference>true</bsvc:Include_Reference>"           
		            + "<bsvc:Include_Personal_Information>true</bsvc:Include_Personal_Information>"           	
		         + "</bsvc:Response_Group>"
		      + "</bsvc:Get_Workers_Request>"
		   + "</soapenv:Body>"
		+ "</soapenv:Envelope>";
		
		return requestXML;
	}*/
	
	private String getHomeCNUMForPayroll(String empid, String ruleName, String client, String cnumType)
	{
		 String homeCNUM = "";
		 InputStream is = null;
		 SOAPConnection soapConnection = null;
		 Map<String,String> customTypeMap = null;
		 byte[] requestFileContent = null;
		 
		 GetRequest getRequest = getRequestService.getRequestByReqClient("Worker Data", client);
		 if(getRequest != null)
		 {
			 requestFileContent = getRequest.getRequestXMLContent();
		 }

		 File requestfile = null;
		 try 
		 {
			 requestfile = File.createTempFile("Get_Worker", ".xml");
			 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
		 } 
		 catch (IOException e1) 
		 {
		     e1.printStackTrace();
		 }
		 String reqXMLFile = requestfile.getAbsolutePath();
		 
		 String checkFile = addWorkerIdListToFindError(reqXMLFile, empid, ruleName, "Employee_ID");
		 try 
		 {
			 is = new FileInputStream(checkFile);
			 SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
		     SOAPPart soapPart = soapMessage.getSOAPPart();
		     SOAPEnvelope envelope = soapPart.getEnvelope();
			 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
			 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
			 {
				  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
				  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
			 }
			 soapMessage.saveChanges();
		     ByteArrayOutputStream out = new ByteArrayOutputStream();
		     soapMessage.writeTo(out);
		     String strMsgChk = new String(out.toByteArray());	
		     
		     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
		     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
			 soapConnection = soapConnectionFactory.createConnection();
			 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
			 out = new ByteArrayOutputStream();
			 soapResponse.writeTo(out);
			 strMsgChk = new String(out.toByteArray(), "utf-8");
			 ReportElement soapResp = XmlParserManager.parseXml(strMsgChk);
			 
		     ReportElement responseData = soapResp.getChild("env:Body")
						.getChild("wd:Get_Workers_Response")
						.getChild("wd:Response_Data");
		        
		     List<ReportElement> workerData = responseData.getChildren("wd:Worker");
		     for(ReportElement reportElement : workerData)
			 {
				 ReportElement identificationData = reportElement.getChild("wd:Worker_Data")
				 			.getChild("wd:Personal_Data")
				 			.getChild("wd:Identification_Data");
				 
				 if(identificationData != null)
				 {												 
					 List<ReportElement> customIDList = identificationData.getChildren("wd:Custom_ID");
					 if(customIDList != null && customIDList.size() >0)
					 {
						 String expirationDate = "";
						 homeCNUM = "" ;
						 for(ReportElement customElement : customIDList)
						 {
							 ReportElement customIdData = customElement.getChild("wd:Custom_ID_Data");
							 if(customIdData != null)
							 {
								 expirationDate = customIdData.getChild("wd:Expiration_Date") != null?customIdData.getChild("wd:Expiration_Date").getValue().trim():"";
								 ReportElement customTypeRef = customIdData.getChild("wd:ID_Type_Reference");
								 if(customTypeRef != null)
								 {
									 List<ReportElement> customIdTypeData = customTypeRef.getChildren("wd:ID");								 
									 for(ReportElement idTypeElement:customIdTypeData)
									 {
										 customTypeMap = idTypeElement.getAllAttributes();
										 if(customTypeMap.get("wd:type").equals("Custom_ID_Type_ID"))
										 {
											 if(idTypeElement.getValue().trim().equalsIgnoreCase(cnumType) && expirationDate.isEmpty())
											 {
												 homeCNUM = customIdData.getChild("wd:ID") != null?customIdData.getChild("wd:ID").getValue().trim():""; 
											 }
										 }
									 }
								 }												 												 
							 }
						 }
					 }
				 }
			 }								
		 } 
		 catch (FileNotFoundException e) 
		 {
			e.printStackTrace();
		 } 
		 catch (IOException e) 
		 {
			e.printStackTrace();
		 } 
		 catch (SOAPException e) 
		 {
			e.printStackTrace();
		 } 
		 catch (Exception e) 
		 {
			e.printStackTrace();
		}
	     
		 return homeCNUM;
	}
	
	private String addWorkerIdListToFindError(String xmlFile, String columnVal, String ruleName, String idVal) {
		
		File updatedRequestfile = null;
		try  
		{  
			File file = new File(xmlFile);     
			FileReader fr = new FileReader(file);   
			BufferedReader br = new BufferedReader(fr);   
			StringBuffer sb = new StringBuffer();     
			String line;
			boolean executed = true;
			while((line=br.readLine())!=null)  
			{  
				sb.append(line);  
				sb.append("\n");
				if(line.contains("bsvc:Get_Workers_Request") && executed)
				{
					executed = false;
					sb.append(" <bsvc:Request_References>"); 
					sb.append("\n");
						sb.append("  <bsvc:Worker_Reference bsvc:Descriptor=" + "\"" + idVal + "\"" + ">");
						sb.append("\n");
						sb.append("   <bsvc:ID bsvc:type=" + "\"" + idVal + "\"" + ">" + columnVal + "</bsvc:ID>");
						sb.append("\n");
						sb.append("  </bsvc:Worker_Reference>");
						sb.append("\n");
					
					sb.append(" </bsvc:Request_References>");
					sb.append("\n");
				}
			}
			fr.close();
			br.close();	
			
			updatedRequestfile = File.createTempFile(ruleName + "_" + columnVal , ".xml");
			PrintWriter writer = new PrintWriter(updatedRequestfile);
		    writer.write(sb.toString());
			writer.flush();
			writer.close();
		}  
		catch(IOException e)  
		{  
			e.printStackTrace();  
		}
		return updatedRequestfile.getAbsolutePath(); 
	}
	
	private void createTemplateFromSourceTenantPayrollPayeeTD1X(Tenant tenant, InputStream is, SOAPConnection soapConnection, String loadCycle, String ruleName, String client, Long userId) {
		
		sourceCount = 0;
		headingFromSourceTenant = "";
		sourceTenantRowMap.clear();
		sourceTenantColumnList.clear();
		errorList.clear();
		String xmlReqFile = null;
		try 
		{			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 xmlReqFile = requestfile.getAbsolutePath();
				 is = new FileInputStream(xmlReqFile);
			     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
			     SOAPPart soapPart = soapMessage.getSOAPPart();
			     SOAPEnvelope envelope = soapPart.getEnvelope();
				 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
				 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
				 {
					  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
					  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
				 }
				 soapMessage.saveChanges();
			     ByteArrayOutputStream out = new ByteArrayOutputStream();
			     soapMessage.writeTo(out);
			     String strMsg = new String(out.toByteArray());	
			     
			     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Payroll_CAN";
			     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
				 soapConnection = soapConnectionFactory.createConnection();
				 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
				 out = new ByteArrayOutputStream();
				 soapResponse.writeTo(out);
				 strMsg = new String(out.toByteArray(), "utf-8");

				 ReportElement soapResp = XmlParserManager.parseXml(strMsg);
				 
				 ReportElement pageData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Payroll_Payee_TD1X__Response")
							.getChild("wd:Response_Results");
				 
				 String totalNoOfPages = pageData.getChild("wd:Total_Pages").getValue().trim();
				 String totalResults = pageData.getChild("wd:Total_Results").getValue().trim();
				 int totalResult = Integer.parseInt(totalResults);
				 System.out.println("totalNoOfPages-"+totalNoOfPages);
				 System.out.println("totalResult-"+totalResult);						 
				 
				 String employeeId = "";
				 String company = "";						 
				 String customIdNumber = "";
				 String effectiveDate = "";
				 String inactive = "";
				 String commission = "";
				 String salaryorWages = "";
				 String totalRemuneration = "";
				 String commissionExpenses = "";
				 String estimatedAnnualNetCommissionIncome = "";
				 String estimatedAnnualPensionRetirementDeduction = "";
				 
				 String finalStr = "";
				 String headerStr = "";
				 						 
				 Map<String,String> workerMap = null;
				 Map<String,String> companyMap = null;
				 
				 for (int j = 1; j <=Integer.parseInt(totalNoOfPages); j++) //
				 {
					 String xmlStr = convertFileToString(xmlReqFile);
					 String outputfile = updatePageIndex(xmlStr, j, ruleName);
					 is = new FileInputStream(outputfile);
				     soapMessage = MessageFactory.newInstance().createMessage(null, is);
				     soapPart = soapMessage.getSOAPPart();
				     envelope = soapPart.getEnvelope();
					 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
					 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
					 {
							envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
					 }
					 soapMessage.saveChanges();
			         out = new ByteArrayOutputStream();
			         soapMessage.writeTo(out);
			         strMsg = new String(out.toByteArray());
			        
			         soapConnectionFactory = SOAPConnectionFactory.newInstance();
					 soapConnection = soapConnectionFactory.createConnection();
			         soapResponse = soapConnection.call(soapMessage, sourceUrl);
			         out = new ByteArrayOutputStream();
			         soapResponse.writeTo(out);
			         strMsg = new String(out.toByteArray(), "utf-8");
			        
			         soapResp = XmlParserManager.parseXml(strMsg);
			        
			        ReportElement responseData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Payroll_Payee_TD1X__Response")
							.getChild("wd:Response_Data");
			        
			        List<ReportElement> payrollData = responseData.getChildren("wd:Payroll_Payee_TD1X");
			        for(ReportElement reportElement : payrollData)
					{
			        	customIdNumber = "";
			        	ReportElement payrollPayeeTD1XData = reportElement.getChild("wd:Payroll_Payee_TD1X_Data");			        	
			        	if(payrollPayeeTD1XData != null)
			        	{
							 ReportElement workerRef = payrollPayeeTD1XData.getChild("wd:Worker_Reference");
							 if(workerRef != null)
							 {
								 List<ReportElement> workerData = workerRef.getChildren("wd:ID");					 
								 for(ReportElement workerElement:workerData)
								 {
									 workerMap = workerElement.getAllAttributes();
									 if(workerMap.get("wd:type").equals("Employee_ID"))
									 {
										 employeeId = workerElement.getValue().trim();
									 }
								 }
							 }
							 
							 if(oldEmpList.contains(employeeId))
					         {
								 customIdNumber = getHomeCNUMForPayroll(employeeId, ruleName, client, "Global_CNUM");
								 ReportElement companyRef = payrollPayeeTD1XData.getChild("wd:Company_Reference");
								 if(companyRef != null)
								 {
									 List<ReportElement> companyData = companyRef.getChildren("wd:ID");					 
									 for(ReportElement companyElement:companyData)
									 {
										 companyMap = companyElement.getAllAttributes();
										 if(companyMap.get("wd:type").equals("Organization_Reference_ID"))
										 {
											 company = companyElement.getValue().trim();
										 }
									 }
								 }
								 effectiveDate = payrollPayeeTD1XData.getChild("wd:Effective_As_Of") != null?payrollPayeeTD1XData.getChild("wd:Effective_As_Of").getValue().trim():"";
								 inactive = payrollPayeeTD1XData.getChild("wd:Inactive") != null?payrollPayeeTD1XData.getChild("wd:Inactive").getValue().trim():"";
								 if(inactive.equalsIgnoreCase("0"))
								 {
									 inactive = "n";
								 }
								 else
								 {
									 inactive = "y";
								 }
								 commission = payrollPayeeTD1XData.getChild("wd:Commission") != null?payrollPayeeTD1XData.getChild("wd:Commission").getValue().trim():"";
								 salaryorWages = payrollPayeeTD1XData.getChild("wd:Salary_or_Wages") != null?payrollPayeeTD1XData.getChild("wd:Salary_or_Wages").getValue().trim():"";
								 totalRemuneration = payrollPayeeTD1XData.getChild("wd:Total_Remuneration") != null?payrollPayeeTD1XData.getChild("wd:Total_Remuneration").getValue().trim():"";
								 commissionExpenses = payrollPayeeTD1XData.getChild("wd:Commission_Expenses") != null?payrollPayeeTD1XData.getChild("wd:Commission_Expenses").getValue().trim():"";
								 estimatedAnnualNetCommissionIncome = payrollPayeeTD1XData.getChild("wd:Estimated_Annual_Net_Commission_Income") != null?payrollPayeeTD1XData.getChild("wd:Estimated_Annual_Net_Commission_Income").getValue().trim():"";
								 estimatedAnnualPensionRetirementDeduction = payrollPayeeTD1XData.getChild("wd:Estimated_Annual_Pension_Retirement_Deduction") != null?payrollPayeeTD1XData.getChild("wd:Estimated_Annual_Pension_Retirement_Deduction").getValue().trim():"";
					         }
						 }
			        	
			        		headingFromSourceTenant = "Home_CNUM,Employee_ID,Company,Effective_As_Of,Inactive,Commission,Salary_or_Wages,Total_Remuneration,Commission_Expenses,"
			        				+ "Estimated_Annual_Net_Commission_Income,Estimated_Annual_Pension_Retirement_Deduction";
				        	if(!customIdNumber.isEmpty())
							{
					        	headerStr = customIdNumber + "," + employeeId + "," + company + "," + effectiveDate + "," + inactive + "," + commission + "," + salaryorWages + "," + totalRemuneration
					        			+ "," + commissionExpenses + "," + estimatedAnnualNetCommissionIncome + "," + estimatedAnnualPensionRetirementDeduction;
					        	
					        	sourceTenantRowMap.put(customIdNumber, headerStr);							        	
					        	sourceTenantColumnList.add(customIdNumber);
					        	
					        	if(finalStr.equals(""))
								{
									 finalStr =  headingFromSourceTenant + "\n" + headerStr;
								}
								else
								{
									 finalStr = finalStr + "\n" + headerStr;
								}
							}				        				        				        	
			         }			        	
			     }
				 System.out.println(finalStr);
				 sourceContent = finalStr.getBytes();						 
				 sourceCount = sourceTenantColumnList.size();
			   }
		}		
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		
	}

	private void createTemplateFromTargetTenantPayrollPayeeTD1X(Tenant tenant, InputStream is,SOAPConnection soapConnection, String loadCycle, String ruleName, String client, Long userId) {
		
		wdCount = 0;
		headingFromTargetTenant = "";
		targetTenantRowMap.clear();
		targetTenantColumnList.clear();
		errorList.clear();
		String xmlReqFile = null;
		try 
		{			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 xmlReqFile = requestfile.getAbsolutePath();
				 is = new FileInputStream(xmlReqFile);
			     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
			     SOAPPart soapPart = soapMessage.getSOAPPart();
			     SOAPEnvelope envelope = soapPart.getEnvelope();
				 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
				 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
				 {
					  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
					  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
				 }
				 soapMessage.saveChanges();
			     ByteArrayOutputStream out = new ByteArrayOutputStream();
			     soapMessage.writeTo(out);
			     String strMsg = new String(out.toByteArray());	
			     
			     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Payroll_CAN";
			     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
				 soapConnection = soapConnectionFactory.createConnection();
				 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
				 out = new ByteArrayOutputStream();
				 soapResponse.writeTo(out);
				 strMsg = new String(out.toByteArray(), "utf-8");

				 ReportElement soapResp = XmlParserManager.parseXml(strMsg);
				 
				 ReportElement pageData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Payroll_Payee_TD1X__Response")
							.getChild("wd:Response_Results");
				 
				 String totalNoOfPages = pageData.getChild("wd:Total_Pages").getValue().trim();
				 String totalResults = pageData.getChild("wd:Total_Results").getValue().trim();
				 int totalResult = Integer.parseInt(totalResults);
				 System.out.println("totalNoOfPages-"+totalNoOfPages);
				 System.out.println("totalResult-"+totalResult);						 
				 
				 String employeeId = "";
				 String company = "";						 
				 String customIdNumber = "";
				 String effectiveDate = "";
				 String inactive = "";
				 String commission = "";
				 String salaryorWages = "";
				 String totalRemuneration = "";
				 String commissionExpenses = "";
				 String estimatedAnnualNetCommissionIncome = "";
				 String estimatedAnnualPensionRetirementDeduction = "";
				 
				 String finalStr = "";
				 String headerStr = "";
				 						 
				 Map<String,String> workerMap = null;
				 Map<String,String> companyMap = null;
				 
				 for (int j = 1; j <=Integer.parseInt(totalNoOfPages); j++) //
				 {
					 String xmlStr = convertFileToString(xmlReqFile);
					 String outputfile = updatePageIndex(xmlStr, j, ruleName);
					 is = new FileInputStream(outputfile);
				     soapMessage = MessageFactory.newInstance().createMessage(null, is);
				     soapPart = soapMessage.getSOAPPart();
				     envelope = soapPart.getEnvelope();
					 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
					 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
					 {
							envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
					 }
					 soapMessage.saveChanges();
			         out = new ByteArrayOutputStream();
			         soapMessage.writeTo(out);
			         strMsg = new String(out.toByteArray());
			        
			         soapConnectionFactory = SOAPConnectionFactory.newInstance();
					 soapConnection = soapConnectionFactory.createConnection();
			         soapResponse = soapConnection.call(soapMessage, sourceUrl);
			         out = new ByteArrayOutputStream();
			         soapResponse.writeTo(out);
			         strMsg = new String(out.toByteArray(), "utf-8");
			        
			         soapResp = XmlParserManager.parseXml(strMsg);
			        
			        ReportElement responseData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Payroll_Payee_TD1X__Response")
							.getChild("wd:Response_Data");
			        
			        List<ReportElement> payrollData = responseData.getChildren("wd:Payroll_Payee_TD1X");
			        for(ReportElement reportElement : payrollData)
					{
			        	customIdNumber = "";
			        	ReportElement payrollPayeeTD1XData = reportElement.getChild("wd:Payroll_Payee_TD1X_Data");			        	
			        	if(payrollPayeeTD1XData != null)
			        	{
							 ReportElement workerRef = payrollPayeeTD1XData.getChild("wd:Worker_Reference");
							 if(workerRef != null)
							 {
								 List<ReportElement> workerData = workerRef.getChildren("wd:ID");					 
								 for(ReportElement workerElement:workerData)
								 {
									 workerMap = workerElement.getAllAttributes();
									 if(workerMap.get("wd:type").equals("Employee_ID"))
									 {
										 employeeId = workerElement.getValue().trim();
									 }
								 }
							 }
							 
							 if(newEmpList.contains(employeeId))
					         {
								 customIdNumber = getHomeCNUMForPayroll(employeeId, ruleName, client, "Previous_IBM_CNUM");
								 ReportElement companyRef = payrollPayeeTD1XData.getChild("wd:Company_Reference");
								 if(companyRef != null)
								 {
									 List<ReportElement> companyData = companyRef.getChildren("wd:ID");					 
									 for(ReportElement companyElement:companyData)
									 {
										 companyMap = companyElement.getAllAttributes();
										 if(companyMap.get("wd:type").equals("Organization_Reference_ID"))
										 {
											 company = companyElement.getValue().trim();
										 }
									 }
								 }
								 effectiveDate = payrollPayeeTD1XData.getChild("wd:Effective_As_Of") != null?payrollPayeeTD1XData.getChild("wd:Effective_As_Of").getValue().trim():"";
								 inactive = payrollPayeeTD1XData.getChild("wd:Inactive") != null?payrollPayeeTD1XData.getChild("wd:Inactive").getValue().trim():"";
								 if(inactive.equalsIgnoreCase("0"))
								 {
									 inactive = "n";
								 }
								 else
								 {
									 inactive = "y";
								 }
								 commission = payrollPayeeTD1XData.getChild("wd:Commission") != null?payrollPayeeTD1XData.getChild("wd:Commission").getValue().trim():"";
								 salaryorWages = payrollPayeeTD1XData.getChild("wd:Salary_or_Wages") != null?payrollPayeeTD1XData.getChild("wd:Salary_or_Wages").getValue().trim():"";
								 totalRemuneration = payrollPayeeTD1XData.getChild("wd:Total_Remuneration") != null?payrollPayeeTD1XData.getChild("wd:Total_Remuneration").getValue().trim():"";
								 commissionExpenses = payrollPayeeTD1XData.getChild("wd:Commission_Expenses") != null?payrollPayeeTD1XData.getChild("wd:Commission_Expenses").getValue().trim():"";
								 estimatedAnnualNetCommissionIncome = payrollPayeeTD1XData.getChild("wd:Estimated_Annual_Net_Commission_Income") != null?payrollPayeeTD1XData.getChild("wd:Estimated_Annual_Net_Commission_Income").getValue().trim():"";
								 estimatedAnnualPensionRetirementDeduction = payrollPayeeTD1XData.getChild("wd:Estimated_Annual_Pension_Retirement_Deduction") != null?payrollPayeeTD1XData.getChild("wd:Estimated_Annual_Pension_Retirement_Deduction").getValue().trim():"";
					         }
						 }
			        	
			        		headingFromTargetTenant = "Home_CNUM,Employee_ID,Company,Effective_As_Of,Inactive,Commission,Salary_or_Wages,Total_Remuneration,Commission_Expenses,"
			        				+ "Estimated_Annual_Net_Commission_Income,Estimated_Annual_Pension_Retirement_Deduction";
				        	if(!customIdNumber.isEmpty())
							{
					        	headerStr = customIdNumber + "," + employeeId + "," + company + "," + effectiveDate + "," + inactive + "," + commission + "," + salaryorWages + "," + totalRemuneration
					        			+ "," + commissionExpenses + "," + estimatedAnnualNetCommissionIncome + "," + estimatedAnnualPensionRetirementDeduction;
					        	
					        	targetTenantRowMap.put(customIdNumber, headerStr);							        	
					        	targetTenantColumnList.add(customIdNumber);
					        	
					        	if(finalStr.equals(""))
								{
									 finalStr =  headingFromTargetTenant + "\n" + headerStr;
								}
								else
								{
									 finalStr = finalStr + "\n" + headerStr;
								}
							}				        				        				        	
			         }			        	
			     }
				 System.out.println(finalStr);
				 targetContent = finalStr.getBytes();						 
				 wdCount = targetTenantColumnList.size();
			   }
		}		
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		
	}
	
	private void createTemplateFromSourceTenantFederalAnnualElection(Tenant tenant, InputStream is, SOAPConnection soapConnection, String loadCycle, String ruleName, String client, Long userId) {
		
		sourceCount = 0;
		headingFromSourceTenant = "";
		sourceTenantRowMap.clear();
		sourceTenantColumnList.clear();
		errorList.clear();
		String xmlReqFile = null;
		try 
		{			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 xmlReqFile = requestfile.getAbsolutePath();
				 is = new FileInputStream(xmlReqFile);
			     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
			     SOAPPart soapPart = soapMessage.getSOAPPart();
			     SOAPEnvelope envelope = soapPart.getEnvelope();
				 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
				 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
				 {
					  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
					  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
				 }
				 soapMessage.saveChanges();
			     ByteArrayOutputStream out = new ByteArrayOutputStream();
			     soapMessage.writeTo(out);
			     String strMsg = new String(out.toByteArray());	
			     
			     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Payroll_CAN";
			     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
				 soapConnection = soapConnectionFactory.createConnection();
				 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
				 out = new ByteArrayOutputStream();
				 soapResponse.writeTo(out);
				 strMsg = new String(out.toByteArray(), "utf-8");

				 ReportElement soapResp = XmlParserManager.parseXml(strMsg);
				 
				 ReportElement pageData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Federal_Annual_Elections_Response")
							.getChild("wd:Response_Results");
				 
				 String totalNoOfPages = pageData.getChild("wd:Total_Pages").getValue().trim();
				 String totalResults = pageData.getChild("wd:Total_Results").getValue().trim();
				 int totalResult = Integer.parseInt(totalResults);
				 System.out.println("totalNoOfPages-"+totalNoOfPages);
				 System.out.println("totalResult-"+totalResult);						 
				 
				 String employeeId = "";
				 String company = "";						 
				 String customIdNumber = "";
				 String currency = "";
				 String effectiveDate = "";
				 String annualDeductions = "";
				 String annualTaxCredits = "";
				 String labourSponsoredFunds = "";
				 
				 String finalStr = "";
				 String headerStr = "";
				 						 
				 Map<String,String> workerMap = null;
				 Map<String,String> companyMap = null;
				 Map<String,String> currencyMap = null;
				 
				 for (int j = 1; j <=Integer.parseInt(totalNoOfPages); j++) //
				 {
					 String xmlStr = convertFileToString(xmlReqFile);
					 String outputfile = updatePageIndex(xmlStr, j, ruleName);
					 is = new FileInputStream(outputfile);
				     soapMessage = MessageFactory.newInstance().createMessage(null, is);
				     soapPart = soapMessage.getSOAPPart();
				     envelope = soapPart.getEnvelope();
					 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
					 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
					 {
							envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
					 }
					 soapMessage.saveChanges();
			         out = new ByteArrayOutputStream();
			         soapMessage.writeTo(out);
			         strMsg = new String(out.toByteArray());
			        
			         soapConnectionFactory = SOAPConnectionFactory.newInstance();
					 soapConnection = soapConnectionFactory.createConnection();
			         soapResponse = soapConnection.call(soapMessage, sourceUrl);
			         out = new ByteArrayOutputStream();
			         soapResponse.writeTo(out);
			         strMsg = new String(out.toByteArray(), "utf-8");
			        
			         soapResp = XmlParserManager.parseXml(strMsg);
			        
			        ReportElement responseData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Federal_Annual_Elections_Response")
							.getChild("wd:Response_Data");
			        
			        List<ReportElement> payrollData = responseData.getChildren("wd:Federal_Annual_Election");
			        for(ReportElement reportElement : payrollData)
					{
			        	customIdNumber = "";
			        	ReportElement federalAnnualElectionData = reportElement.getChild("wd:Federal_Annual_Election_Data");			        	
			        	if(federalAnnualElectionData != null)
			        	{
							 ReportElement workerRef = federalAnnualElectionData.getChild("wd:Worker_Reference");
							 if(workerRef != null)
							 {
								 List<ReportElement> workerData = workerRef.getChildren("wd:ID");					 
								 for(ReportElement workerElement:workerData)
								 {
									 workerMap = workerElement.getAllAttributes();
									 if(workerMap.get("wd:type").equals("Employee_ID"))
									 {
										 employeeId = workerElement.getValue().trim();
									 }
								 }
							 }
							 
							 if(oldEmpList.contains(employeeId))
					         {
								 customIdNumber = getHomeCNUMForPayroll(employeeId, ruleName, client, "Global_CNUM");
								 ReportElement companyRef = federalAnnualElectionData.getChild("wd:Company_Reference");
								 if(companyRef != null)
								 {
									 List<ReportElement> companyData = companyRef.getChildren("wd:ID");					 
									 for(ReportElement companyElement:companyData)
									 {
										 companyMap = companyElement.getAllAttributes();
										 if(companyMap.get("wd:type").equals("Organization_Reference_ID"))
										 {
											 company = companyElement.getValue().trim();
										 }
									 }
								 }
								 effectiveDate = federalAnnualElectionData.getChild("wd:Effective_As_Of") != null?federalAnnualElectionData.getChild("wd:Effective_As_Of").getValue().trim():"";
								 annualDeductions = federalAnnualElectionData.getChild("wd:Annual_Deductions") != null?federalAnnualElectionData.getChild("wd:Annual_Deductions").getValue().trim():"";
								 annualTaxCredits = federalAnnualElectionData.getChild("wd:Annual_Tax_Credits") != null?federalAnnualElectionData.getChild("wd:Annual_Tax_Credits").getValue().trim():"";
								 labourSponsoredFunds = federalAnnualElectionData.getChild("wd:Labour-Sponsored_Funds") != null?federalAnnualElectionData.getChild("wd:Labour-Sponsored_Funds").getValue().trim():"";
								 
								 ReportElement currencyRef = federalAnnualElectionData.getChild("wd:Currency_Reference");
								 if(currencyRef != null)
								 {
									 List<ReportElement> currencyData = currencyRef.getChildren("wd:ID");					 
									 for(ReportElement currencyElement:currencyData)
									 {
										 currencyMap = currencyElement.getAllAttributes();
										 if(currencyMap.get("wd:type").equals("Currency_ID"))
										 {
											 currency = currencyElement.getValue().trim();
										 }
									 }
								 }
					         }
						 }
			        	
			        		headingFromSourceTenant = "Home_CNUM,Employee_ID,Company,Effective_As_Of,Annual_Deductions,Annual_Tax_Credits,Salary_or_Wages,Labour-Sponsored_Funds,Currency";
				        	if(!customIdNumber.isEmpty())
							{
					        	headerStr = customIdNumber + "," + employeeId + "," + company + "," + effectiveDate + "," + annualDeductions + "," + annualTaxCredits + "," + 
							                labourSponsoredFunds + "," + currency;
					        	
					        	sourceTenantRowMap.put(customIdNumber, headerStr);							        	
					        	sourceTenantColumnList.add(customIdNumber);
					        	
					        	if(finalStr.equals(""))
								{
									 finalStr =  headingFromSourceTenant + "\n" + headerStr;
								}
								else
								{
									 finalStr = finalStr + "\n" + headerStr;
								}
							}				        				        				        	
			         }			        	
			     }
				 System.out.println(finalStr);
				 sourceContent = finalStr.getBytes();						 
				 sourceCount = sourceTenantColumnList.size();
			   }
		}		
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		
	}

	private void createTemplateFromTargetTenantFederalAnnualElection(Tenant tenant, InputStream is, SOAPConnection soapConnection, String loadCycle, String ruleName, String client, Long userId) {
		
		wdCount = 0;
		headingFromTargetTenant = "";
		targetTenantRowMap.clear();
		targetTenantColumnList.clear();
		errorList.clear();
		String xmlReqFile = null;
		try 
		{			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 xmlReqFile = requestfile.getAbsolutePath();
				 is = new FileInputStream(xmlReqFile);
			     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
			     SOAPPart soapPart = soapMessage.getSOAPPart();
			     SOAPEnvelope envelope = soapPart.getEnvelope();
				 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
				 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
				 {
					  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
					  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
				 }
				 soapMessage.saveChanges();
			     ByteArrayOutputStream out = new ByteArrayOutputStream();
			     soapMessage.writeTo(out);
			     String strMsg = new String(out.toByteArray());	
			     
			     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Payroll_CAN";
			     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
				 soapConnection = soapConnectionFactory.createConnection();
				 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
				 out = new ByteArrayOutputStream();
				 soapResponse.writeTo(out);
				 strMsg = new String(out.toByteArray(), "utf-8");

				 ReportElement soapResp = XmlParserManager.parseXml(strMsg);
				 
				 ReportElement pageData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Federal_Annual_Elections_Response")
							.getChild("wd:Response_Results");
				 
				 String totalNoOfPages = pageData.getChild("wd:Total_Pages").getValue().trim();
				 String totalResults = pageData.getChild("wd:Total_Results").getValue().trim();
				 int totalResult = Integer.parseInt(totalResults);
				 System.out.println("totalNoOfPages-"+totalNoOfPages);
				 System.out.println("totalResult-"+totalResult);						 
				 
				 String employeeId = "";
				 String company = "";						 
				 String customIdNumber = "";
				 String currency = "";
				 String effectiveDate = "";
				 String annualDeductions = "";
				 String annualTaxCredits = "";
				 String labourSponsoredFunds = "";
				 
				 String finalStr = "";
				 String headerStr = "";
				 						 
				 Map<String,String> workerMap = null;
				 Map<String,String> companyMap = null;
				 Map<String,String> currencyMap = null;
				 
				 for (int j = 1; j <=Integer.parseInt(totalNoOfPages); j++) //
				 {
					 String xmlStr = convertFileToString(xmlReqFile);
					 String outputfile = updatePageIndex(xmlStr, j, ruleName);
					 is = new FileInputStream(outputfile);
				     soapMessage = MessageFactory.newInstance().createMessage(null, is);
				     soapPart = soapMessage.getSOAPPart();
				     envelope = soapPart.getEnvelope();
					 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
					 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
					 {
							envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
					 }
					 soapMessage.saveChanges();
			         out = new ByteArrayOutputStream();
			         soapMessage.writeTo(out);
			         strMsg = new String(out.toByteArray());
			        
			         soapConnectionFactory = SOAPConnectionFactory.newInstance();
					 soapConnection = soapConnectionFactory.createConnection();
			         soapResponse = soapConnection.call(soapMessage, sourceUrl);
			         out = new ByteArrayOutputStream();
			         soapResponse.writeTo(out);
			         strMsg = new String(out.toByteArray(), "utf-8");
			        
			         soapResp = XmlParserManager.parseXml(strMsg);
			        
			        ReportElement responseData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Federal_Annual_Elections_Response")
							.getChild("wd:Response_Data");
			        
			        List<ReportElement> payrollData = responseData.getChildren("wd:Federal_Annual_Election");
			        for(ReportElement reportElement : payrollData)
					{
			        	customIdNumber = "";
			        	ReportElement federalAnnualElectionData = reportElement.getChild("wd:Federal_Annual_Election_Data");			        	
			        	if(federalAnnualElectionData != null)
			        	{
							 ReportElement workerRef = federalAnnualElectionData.getChild("wd:Worker_Reference");
							 if(workerRef != null)
							 {
								 List<ReportElement> workerData = workerRef.getChildren("wd:ID");					 
								 for(ReportElement workerElement:workerData)
								 {
									 workerMap = workerElement.getAllAttributes();
									 if(workerMap.get("wd:type").equals("Employee_ID"))
									 {
										 employeeId = workerElement.getValue().trim();
									 }
								 }
							 }
							 
							 if(newEmpList.contains(employeeId))
					         {
								 customIdNumber = getHomeCNUMForPayroll(employeeId, ruleName, client, "Previous_IBM_CNUM");
								 ReportElement companyRef = federalAnnualElectionData.getChild("wd:Company_Reference");
								 if(companyRef != null)
								 {
									 List<ReportElement> companyData = companyRef.getChildren("wd:ID");					 
									 for(ReportElement companyElement:companyData)
									 {
										 companyMap = companyElement.getAllAttributes();
										 if(companyMap.get("wd:type").equals("Organization_Reference_ID"))
										 {
											 company = companyElement.getValue().trim();
										 }
									 }
								 }
								 effectiveDate = federalAnnualElectionData.getChild("wd:Effective_As_Of") != null?federalAnnualElectionData.getChild("wd:Effective_As_Of").getValue().trim():"";
								 annualDeductions = federalAnnualElectionData.getChild("wd:Annual_Deductions") != null?federalAnnualElectionData.getChild("wd:Annual_Deductions").getValue().trim():"";
								 annualTaxCredits = federalAnnualElectionData.getChild("wd:Annual_Tax_Credits") != null?federalAnnualElectionData.getChild("wd:Annual_Tax_Credits").getValue().trim():"";
								 labourSponsoredFunds = federalAnnualElectionData.getChild("wd:Labour-Sponsored_Funds") != null?federalAnnualElectionData.getChild("wd:Labour-Sponsored_Funds").getValue().trim():"";
								 
								 ReportElement currencyRef = federalAnnualElectionData.getChild("wd:Currency_Reference");
								 if(currencyRef != null)
								 {
									 List<ReportElement> currencyData = currencyRef.getChildren("wd:ID");					 
									 for(ReportElement currencyElement:currencyData)
									 {
										 currencyMap = currencyElement.getAllAttributes();
										 if(currencyMap.get("wd:type").equals("Currency_ID"))
										 {
											 currency = currencyElement.getValue().trim();
										 }
									 }
								 }
					         }
						 }
			        	
			        		headingFromTargetTenant = "Home_CNUM,Employee_ID,Company,Effective_As_Of,Annual_Deductions,Annual_Tax_Credits,Salary_or_Wages,Labour-Sponsored_Funds,Currency";
				        	if(!customIdNumber.isEmpty())
							{
					        	headerStr = customIdNumber + "," + employeeId + "," + company + "," + effectiveDate + "," + annualDeductions + "," + annualTaxCredits + "," + 
							                labourSponsoredFunds + "," + currency;
					        	
					        	targetTenantRowMap.put(customIdNumber, headerStr);							        	
					        	targetTenantColumnList.add(customIdNumber);
					        	
					        	if(finalStr.equals(""))
								{
									 finalStr =  headingFromTargetTenant + "\n" + headerStr;
								}
								else
								{
									 finalStr = finalStr + "\n" + headerStr;
								}
							}				        				        				        	
			         }			        	
			     }
				 System.out.println(finalStr);
				 targetContent = finalStr.getBytes();						 
				 wdCount = targetTenantColumnList.size();
			   }
		}		
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		
	}
	
	private void createTemplateFromSourceTenantPayrollPayeeCPP(Tenant tenant, InputStream is, SOAPConnection soapConnection, String loadCycle, String ruleName, String client, Long userId) {
		
		sourceCount = 0;
		headingFromSourceTenant = "";
		sourceTenantRowMap.clear();
		sourceTenantColumnList.clear();
		errorList.clear();
		String xmlReqFile = null;
		try 
		{			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 xmlReqFile = requestfile.getAbsolutePath();
				 is = new FileInputStream(xmlReqFile);
			     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
			     SOAPPart soapPart = soapMessage.getSOAPPart();
			     SOAPEnvelope envelope = soapPart.getEnvelope();
				 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
				 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
				 {
					  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
					  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
				 }
				 soapMessage.saveChanges();
			     ByteArrayOutputStream out = new ByteArrayOutputStream();
			     soapMessage.writeTo(out);
			     String strMsg = new String(out.toByteArray());	
			     
			     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Payroll_CAN";
			     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
				 soapConnection = soapConnectionFactory.createConnection();
				 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
				 out = new ByteArrayOutputStream();
				 soapResponse.writeTo(out);
				 strMsg = new String(out.toByteArray(), "utf-8");

				 ReportElement soapResp = XmlParserManager.parseXml(strMsg);
				 
				 ReportElement pageData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Payroll_Payee_CPPs_Response")
							.getChild("wd:Response_Results");
				 
				 String totalNoOfPages = pageData.getChild("wd:Total_Pages").getValue().trim();
				 String totalResults = pageData.getChild("wd:Total_Results").getValue().trim();
				 int totalResult = Integer.parseInt(totalResults);
				 System.out.println("totalNoOfPages-"+totalNoOfPages);
				 System.out.println("totalResult-"+totalResult);						 
				 
				 String employeeId = "";
				 String company = "";						 
				 String customIdNumber = "";
				 String effectiveDate = "";
				 String exempt = "";
				 String exemptType = "";
				 
				 String finalStr = "";
				 String headerStr = "";
				 						 
				 Map<String,String> workerMap = null;
				 Map<String,String> companyMap = null;
				 Map<String,String> exemptTypeMap = null;
				 
				 for (int j = 1; j <=Integer.parseInt(totalNoOfPages); j++) //
				 {
					 String xmlStr = convertFileToString(xmlReqFile);
					 String outputfile = updatePageIndex(xmlStr, j, ruleName);
					 is = new FileInputStream(outputfile);
				     soapMessage = MessageFactory.newInstance().createMessage(null, is);
				     soapPart = soapMessage.getSOAPPart();
				     envelope = soapPart.getEnvelope();
					 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
					 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
					 {
							envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
					 }
					 soapMessage.saveChanges();
			         out = new ByteArrayOutputStream();
			         soapMessage.writeTo(out);
			         strMsg = new String(out.toByteArray());
			        
			         soapConnectionFactory = SOAPConnectionFactory.newInstance();
					 soapConnection = soapConnectionFactory.createConnection();
			         soapResponse = soapConnection.call(soapMessage, sourceUrl);
			         out = new ByteArrayOutputStream();
			         soapResponse.writeTo(out);
			         strMsg = new String(out.toByteArray(), "utf-8");
			        
			         soapResp = XmlParserManager.parseXml(strMsg);
			        
			        ReportElement responseData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Payroll_Payee_CPPs_Response")
							.getChild("wd:Response_Data");
			        
			        List<ReportElement> payrollData = responseData.getChildren("wd:Payroll_Payee_CPP");
			        for(ReportElement reportElement : payrollData)
					{
			        	customIdNumber = "";
			        	ReportElement payrollPayeeCPPData = reportElement.getChild("wd:Payroll_Payee_CPP_Data");			        	
			        	if(payrollPayeeCPPData != null)
			        	{
							 ReportElement workerRef = payrollPayeeCPPData.getChild("wd:Worker_Reference");
							 if(workerRef != null)
							 {
								 List<ReportElement> workerData = workerRef.getChildren("wd:ID");					 
								 for(ReportElement workerElement:workerData)
								 {
									 workerMap = workerElement.getAllAttributes();
									 if(workerMap.get("wd:type").equals("Employee_ID"))
									 {
										 employeeId = workerElement.getValue().trim();
									 }
								 }
							 }
							 
							 if(oldEmpList.contains(employeeId))
					         {
								 customIdNumber = getHomeCNUMForPayroll(employeeId, ruleName, client, "Global_CNUM");
								 ReportElement companyRef = payrollPayeeCPPData.getChild("wd:Company_Reference");
								 if(companyRef != null)
								 {
									 List<ReportElement> companyData = companyRef.getChildren("wd:ID");					 
									 for(ReportElement companyElement:companyData)
									 {
										 companyMap = companyElement.getAllAttributes();
										 if(companyMap.get("wd:type").equals("Organization_Reference_ID"))
										 {
											 company = companyElement.getValue().trim();
										 }
									 }
								 }
								 effectiveDate = payrollPayeeCPPData.getChild("wd:Effective_As_Of") != null?payrollPayeeCPPData.getChild("wd:Effective_As_Of").getValue().trim():"";
								 exempt = payrollPayeeCPPData.getChild("wd:Exempt") != null?payrollPayeeCPPData.getChild("wd:Exempt").getValue().trim():"";
								 ReportElement exemptTypeRef = payrollPayeeCPPData.getChild("wd:Payroll_CPP_Exempt_Type_Reference");
								 if(exemptTypeRef != null)
								 {
									 List<ReportElement> exemptTypeData = exemptTypeRef.getChildren("wd:ID");					 
									 for(ReportElement exemptTypeElement:exemptTypeData)
									 {
										 exemptTypeMap = exemptTypeElement.getAllAttributes();
										 if(exemptTypeMap.get("wd:type").equals("Payroll_Constant_Text_ID"))
										 {
											 exemptType = exemptTypeElement.getValue().trim();
										 }
									 }
								 }
					         }
						 }
			        	
			        		headingFromSourceTenant = "Home_CNUM,Employee_ID,Company,Effective_As_Of,Exempt,Exempt_Type";
				        	if(!customIdNumber.isEmpty())
							{
					        	headerStr = customIdNumber + "," + employeeId + "," + company + "," + effectiveDate + "," + exempt + "," + exemptType;
					        	
					        	sourceTenantRowMap.put(customIdNumber, headerStr);							        	
					        	sourceTenantColumnList.add(customIdNumber);
					        	
					        	if(finalStr.equals(""))
								{
									 finalStr =  headingFromSourceTenant + "\n" + headerStr;
								}
								else
								{
									 finalStr = finalStr + "\n" + headerStr;
								}
							}				        				        				        	
			         }			        	
			     }
				 System.out.println(finalStr);
				 sourceContent = finalStr.getBytes();						 
				 sourceCount = sourceTenantColumnList.size();
			   }
		}		
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		
	}

	private void createTemplateFromTargetTenantPayrollPayeeCPP(Tenant tenant, InputStream is, SOAPConnection soapConnection, String loadCycle, String ruleName, String client, Long userId) {
		
		wdCount = 0;
		headingFromTargetTenant = "";
		targetTenantRowMap.clear();
		targetTenantColumnList.clear();
		errorList.clear();
		String xmlReqFile = null;
		try 
		{			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 xmlReqFile = requestfile.getAbsolutePath();
				 is = new FileInputStream(xmlReqFile);
			     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
			     SOAPPart soapPart = soapMessage.getSOAPPart();
			     SOAPEnvelope envelope = soapPart.getEnvelope();
				 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
				 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
				 {
					  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
					  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
				 }
				 soapMessage.saveChanges();
			     ByteArrayOutputStream out = new ByteArrayOutputStream();
			     soapMessage.writeTo(out);
			     String strMsg = new String(out.toByteArray());	
			     
			     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Payroll_CAN";
			     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
				 soapConnection = soapConnectionFactory.createConnection();
				 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
				 out = new ByteArrayOutputStream();
				 soapResponse.writeTo(out);
				 strMsg = new String(out.toByteArray(), "utf-8");

				 ReportElement soapResp = XmlParserManager.parseXml(strMsg);
				 
				 ReportElement pageData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Payroll_Payee_CPPs_Response")
							.getChild("wd:Response_Results");
				 
				 String totalNoOfPages = pageData.getChild("wd:Total_Pages").getValue().trim();
				 String totalResults = pageData.getChild("wd:Total_Results").getValue().trim();
				 int totalResult = Integer.parseInt(totalResults);
				 System.out.println("totalNoOfPages-"+totalNoOfPages);
				 System.out.println("totalResult-"+totalResult);						 
				 
				 String employeeId = "";
				 String company = "";						 
				 String customIdNumber = "";
				 String effectiveDate = "";
				 String exempt = "";
				 String exemptType = "";
				 
				 String finalStr = "";
				 String headerStr = "";
				 						 
				 Map<String,String> workerMap = null;
				 Map<String,String> companyMap = null;
				 Map<String,String> exemptTypeMap = null;
				 
				 for (int j = 1; j <=Integer.parseInt(totalNoOfPages); j++) //
				 {
					 String xmlStr = convertFileToString(xmlReqFile);
					 String outputfile = updatePageIndex(xmlStr, j, ruleName);
					 is = new FileInputStream(outputfile);
				     soapMessage = MessageFactory.newInstance().createMessage(null, is);
				     soapPart = soapMessage.getSOAPPart();
				     envelope = soapPart.getEnvelope();
					 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
					 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
					 {
							envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
					 }
					 soapMessage.saveChanges();
			         out = new ByteArrayOutputStream();
			         soapMessage.writeTo(out);
			         strMsg = new String(out.toByteArray());
			        
			         soapConnectionFactory = SOAPConnectionFactory.newInstance();
					 soapConnection = soapConnectionFactory.createConnection();
			         soapResponse = soapConnection.call(soapMessage, sourceUrl);
			         out = new ByteArrayOutputStream();
			         soapResponse.writeTo(out);
			         strMsg = new String(out.toByteArray(), "utf-8");
			        
			         soapResp = XmlParserManager.parseXml(strMsg);
			        
			        ReportElement responseData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Payroll_Payee_CPPs_Response")
							.getChild("wd:Response_Data");
			        
			        List<ReportElement> payrollData = responseData.getChildren("wd:Payroll_Payee_CPP");
			        for(ReportElement reportElement : payrollData)
					{
			        	customIdNumber = "";
			        	ReportElement payrollPayeeCPPData = reportElement.getChild("wd:Payroll_Payee_CPP_Data");			        	
			        	if(payrollPayeeCPPData != null)
			        	{
							 ReportElement workerRef = payrollPayeeCPPData.getChild("wd:Worker_Reference");
							 if(workerRef != null)
							 {
								 List<ReportElement> workerData = workerRef.getChildren("wd:ID");					 
								 for(ReportElement workerElement:workerData)
								 {
									 workerMap = workerElement.getAllAttributes();
									 if(workerMap.get("wd:type").equals("Employee_ID"))
									 {
										 employeeId = workerElement.getValue().trim();
									 }
								 }
							 }
							 
							 if(newEmpList.contains(employeeId))
					         {
								 customIdNumber = getHomeCNUMForPayroll(employeeId, ruleName, client, "Previous_IBM_CNUM");
								 ReportElement companyRef = payrollPayeeCPPData.getChild("wd:Company_Reference");
								 if(companyRef != null)
								 {
									 List<ReportElement> companyData = companyRef.getChildren("wd:ID");					 
									 for(ReportElement companyElement:companyData)
									 {
										 companyMap = companyElement.getAllAttributes();
										 if(companyMap.get("wd:type").equals("Organization_Reference_ID"))
										 {
											 company = companyElement.getValue().trim();
										 }
									 }
								 }
								 effectiveDate = payrollPayeeCPPData.getChild("wd:Effective_As_Of") != null?payrollPayeeCPPData.getChild("wd:Effective_As_Of").getValue().trim():"";
								 exempt = payrollPayeeCPPData.getChild("wd:Exempt") != null?payrollPayeeCPPData.getChild("wd:Exempt").getValue().trim():"";
								 ReportElement exemptTypeRef = payrollPayeeCPPData.getChild("wd:Payroll_CPP_Exempt_Type_Reference");
								 if(exemptTypeRef != null)
								 {
									 List<ReportElement> exemptTypeData = exemptTypeRef.getChildren("wd:ID");					 
									 for(ReportElement exemptTypeElement:exemptTypeData)
									 {
										 exemptTypeMap = exemptTypeElement.getAllAttributes();
										 if(exemptTypeMap.get("wd:type").equals("Payroll_Constant_Text_ID"))
										 {
											 exemptType = exemptTypeElement.getValue().trim();
										 }
									 }
								 }
					         }
						 }
			        	
				          headingFromTargetTenant = "Home_CNUM,Employee_ID,Company,Effective_As_Of,Exempt,Exempt_Type";
				        	if(!customIdNumber.isEmpty())
						    {
				        		headerStr = customIdNumber + "," + employeeId + "," + company + "," + effectiveDate + "," + exempt + "," + exemptType;
					        	
					        	targetTenantRowMap.put(customIdNumber, headerStr);							        	
					        	targetTenantColumnList.add(customIdNumber);
					        	
					        	if(finalStr.equals(""))
								{
									 finalStr =  headingFromTargetTenant + "\n" + headerStr;
								}
								else
								{
									 finalStr = finalStr + "\n" + headerStr;
								}
							}				        				        				        	
			         }			        	
			     }
				 System.out.println(finalStr);
				 targetContent = finalStr.getBytes();						 
				 wdCount = targetTenantColumnList.size();
			   }
		}		
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		
	}
	
	private void createTemplateFromSourceTenantPayrollPayeeEI(Tenant tenant, InputStream is, SOAPConnection soapConnection, String loadCycle, String ruleName, String client, Long userId) {
		
		sourceCount = 0;
		headingFromSourceTenant = "";
		sourceTenantRowMap.clear();
		sourceTenantColumnList.clear();
		errorList.clear();
		String xmlReqFile = null;
		try 
		{			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 xmlReqFile = requestfile.getAbsolutePath();
				 is = new FileInputStream(xmlReqFile);
			     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
			     SOAPPart soapPart = soapMessage.getSOAPPart();
			     SOAPEnvelope envelope = soapPart.getEnvelope();
				 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
				 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
				 {
					  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
					  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
				 }
				 soapMessage.saveChanges();
			     ByteArrayOutputStream out = new ByteArrayOutputStream();
			     soapMessage.writeTo(out);
			     String strMsg = new String(out.toByteArray());	
			     
			     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Payroll_CAN";
			     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
				 soapConnection = soapConnectionFactory.createConnection();
				 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
				 out = new ByteArrayOutputStream();
				 soapResponse.writeTo(out);
				 strMsg = new String(out.toByteArray(), "utf-8");

				 ReportElement soapResp = XmlParserManager.parseXml(strMsg);
				 
				 ReportElement pageData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Payroll_Payee_EIs_Response")
							.getChild("wd:Response_Results");
				 
				 String totalNoOfPages = pageData.getChild("wd:Total_Pages").getValue().trim();
				 String totalResults = pageData.getChild("wd:Total_Results").getValue().trim();
				 int totalResult = Integer.parseInt(totalResults);
				 System.out.println("totalNoOfPages-"+totalNoOfPages);
				 System.out.println("totalResult-"+totalResult);						 
				 
				 String employeeId = "";
				 String company = "";						 
				 String customIdNumber = "";
				 String effectiveDate = "";
				 String exempt = "";
				 String lastUpdated = "";
				 
				 String finalStr = "";
				 String headerStr = "";
				 						 
				 Map<String,String> workerMap = null;
				 Map<String,String> companyMap = null;
				 
				 for (int j = 1; j <=Integer.parseInt(totalNoOfPages); j++) //
				 {
					 String xmlStr = convertFileToString(xmlReqFile);
					 String outputfile = updatePageIndex(xmlStr, j, ruleName);
					 is = new FileInputStream(outputfile);
				     soapMessage = MessageFactory.newInstance().createMessage(null, is);
				     soapPart = soapMessage.getSOAPPart();
				     envelope = soapPart.getEnvelope();
					 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
					 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
					 {
							envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
					 }
					 soapMessage.saveChanges();
			         out = new ByteArrayOutputStream();
			         soapMessage.writeTo(out);
			         strMsg = new String(out.toByteArray());
			        
			         soapConnectionFactory = SOAPConnectionFactory.newInstance();
					 soapConnection = soapConnectionFactory.createConnection();
			         soapResponse = soapConnection.call(soapMessage, sourceUrl);
			         out = new ByteArrayOutputStream();
			         soapResponse.writeTo(out);
			         strMsg = new String(out.toByteArray(), "utf-8");
			        
			         soapResp = XmlParserManager.parseXml(strMsg);
			        
			        ReportElement responseData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Payroll_Payee_EIs_Response")
							.getChild("wd:Response_Data");
			        
			        List<ReportElement> payrollData = responseData.getChildren("wd:Payroll_Payee_EI");
			        for(ReportElement reportElement : payrollData)
					{
			        	customIdNumber = "";
			        	ReportElement payrollPayeeEIData = reportElement.getChild("wd:Payroll_Payee_EI_Data");			        	
			        	if(payrollPayeeEIData != null)
			        	{
							 ReportElement workerRef = payrollPayeeEIData.getChild("wd:Worker_Reference");
							 if(workerRef != null)
							 {
								 List<ReportElement> workerData = workerRef.getChildren("wd:ID");					 
								 for(ReportElement workerElement:workerData)
								 {
									 workerMap = workerElement.getAllAttributes();
									 if(workerMap.get("wd:type").equals("Employee_ID"))
									 {
										 employeeId = workerElement.getValue().trim();
									 }
								 }
							 }
							 
							 if(oldEmpList.contains(employeeId))
					         {
								 customIdNumber = getHomeCNUMForPayroll(employeeId, ruleName, client, "Global_CNUM");
								 ReportElement companyRef = payrollPayeeEIData.getChild("wd:Company_Reference");
								 if(companyRef != null)
								 {
									 List<ReportElement> companyData = companyRef.getChildren("wd:ID");					 
									 for(ReportElement companyElement:companyData)
									 {
										 companyMap = companyElement.getAllAttributes();
										 if(companyMap.get("wd:type").equals("Organization_Reference_ID"))
										 {
											 company = companyElement.getValue().trim();
										 }
									 }
								 }
								 effectiveDate = payrollPayeeEIData.getChild("wd:Effective_As_Of") != null?payrollPayeeEIData.getChild("wd:Effective_As_Of").getValue().trim():"";
								 exempt = payrollPayeeEIData.getChild("wd:Exempt") != null?payrollPayeeEIData.getChild("wd:Exempt").getValue().trim():"";
								 lastUpdated = payrollPayeeEIData.getChild("wd:Last_Updated") != null?payrollPayeeEIData.getChild("wd:Last_Updated").getValue().trim():"";
					         }
						 }
			        	
			        		headingFromSourceTenant = "Home_CNUM,Employee_ID,Company,Effective_As_Of,Exempt,Last_Updated";
				        	if(!customIdNumber.isEmpty())
							{
					        	headerStr = customIdNumber + "," + employeeId + "," + company + "," + effectiveDate + "," + exempt + "," + lastUpdated;
					        	
					        	sourceTenantRowMap.put(customIdNumber, headerStr);							        	
					        	sourceTenantColumnList.add(customIdNumber);
					        	
					        	if(finalStr.equals(""))
								{
									 finalStr =  headingFromSourceTenant + "\n" + headerStr;
								}
								else
								{
									 finalStr = finalStr + "\n" + headerStr;
								}
							}				        				        				        	
			         }			        	
			     }
				 System.out.println(finalStr);
				 sourceContent = finalStr.getBytes();						 
				 sourceCount = sourceTenantColumnList.size();
			   }
		}		
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		
	}

	private void createTemplateFromTargetTenantPayrollPayeeEI(Tenant tenant, InputStream is, SOAPConnection soapConnection, String loadCycle, String ruleName, String client, Long userId) {
		
		wdCount = 0;
		headingFromTargetTenant = "";
		targetTenantRowMap.clear();
		targetTenantColumnList.clear();
		errorList.clear();
		String xmlReqFile = null;
		try 
		{			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 xmlReqFile = requestfile.getAbsolutePath();
				 is = new FileInputStream(xmlReqFile);
			     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
			     SOAPPart soapPart = soapMessage.getSOAPPart();
			     SOAPEnvelope envelope = soapPart.getEnvelope();
				 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
				 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
				 {
					  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
					  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
				 }
				 soapMessage.saveChanges();
			     ByteArrayOutputStream out = new ByteArrayOutputStream();
			     soapMessage.writeTo(out);
			     String strMsg = new String(out.toByteArray());	
			     
			     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Payroll_CAN";
			     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
				 soapConnection = soapConnectionFactory.createConnection();
				 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
				 out = new ByteArrayOutputStream();
				 soapResponse.writeTo(out);
				 strMsg = new String(out.toByteArray(), "utf-8");

				 ReportElement soapResp = XmlParserManager.parseXml(strMsg);
				 
				 ReportElement pageData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Payroll_Payee_EIs_Response")
							.getChild("wd:Response_Results");
				 
				 String totalNoOfPages = pageData.getChild("wd:Total_Pages").getValue().trim();
				 String totalResults = pageData.getChild("wd:Total_Results").getValue().trim();
				 int totalResult = Integer.parseInt(totalResults);
				 System.out.println("totalNoOfPages-"+totalNoOfPages);
				 System.out.println("totalResult-"+totalResult);						 
				 
				 String employeeId = "";
				 String company = "";						 
				 String customIdNumber = "";
				 String effectiveDate = "";
				 String exempt = "";
				 String lastUpdated = "";
				 
				 String finalStr = "";
				 String headerStr = "";
				 						 
				 Map<String,String> workerMap = null;
				 Map<String,String> companyMap = null;
				 
				 for (int j = 1; j <=Integer.parseInt(totalNoOfPages); j++) //
				 {
					 String xmlStr = convertFileToString(xmlReqFile);
					 String outputfile = updatePageIndex(xmlStr, j, ruleName);
					 is = new FileInputStream(outputfile);
				     soapMessage = MessageFactory.newInstance().createMessage(null, is);
				     soapPart = soapMessage.getSOAPPart();
				     envelope = soapPart.getEnvelope();
					 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
					 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
					 {
							envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
					 }
					 soapMessage.saveChanges();
			         out = new ByteArrayOutputStream();
			         soapMessage.writeTo(out);
			         strMsg = new String(out.toByteArray());
			        
			         soapConnectionFactory = SOAPConnectionFactory.newInstance();
					 soapConnection = soapConnectionFactory.createConnection();
			         soapResponse = soapConnection.call(soapMessage, sourceUrl);
			         out = new ByteArrayOutputStream();
			         soapResponse.writeTo(out);
			         strMsg = new String(out.toByteArray(), "utf-8");
			        
			         soapResp = XmlParserManager.parseXml(strMsg);
			        
			        ReportElement responseData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Payroll_Payee_EIs_Response")
							.getChild("wd:Response_Data");
			        
			        List<ReportElement> payrollData = responseData.getChildren("wd:Payroll_Payee_EI");
			        for(ReportElement reportElement : payrollData)
					{
			        	customIdNumber = "";
			        	ReportElement payrollPayeeEIData = reportElement.getChild("wd:Payroll_Payee_EI_Data");			        	
			        	if(payrollPayeeEIData != null)
			        	{
							 ReportElement workerRef = payrollPayeeEIData.getChild("wd:Worker_Reference");
							 if(workerRef != null)
							 {
								 List<ReportElement> workerData = workerRef.getChildren("wd:ID");					 
								 for(ReportElement workerElement:workerData)
								 {
									 workerMap = workerElement.getAllAttributes();
									 if(workerMap.get("wd:type").equals("Employee_ID"))
									 {
										 employeeId = workerElement.getValue().trim();
									 }
								 }
							 }
							 
							 if(newEmpList.contains(employeeId))
					         {
								 customIdNumber = getHomeCNUMForPayroll(employeeId, ruleName, client, "Previous_IBM_CNUM");
								 ReportElement companyRef = payrollPayeeEIData.getChild("wd:Company_Reference");
								 if(companyRef != null)
								 {
									 List<ReportElement> companyData = companyRef.getChildren("wd:ID");					 
									 for(ReportElement companyElement:companyData)
									 {
										 companyMap = companyElement.getAllAttributes();
										 if(companyMap.get("wd:type").equals("Organization_Reference_ID"))
										 {
											 company = companyElement.getValue().trim();
										 }
									 }
								 }
								 effectiveDate = payrollPayeeEIData.getChild("wd:Effective_As_Of") != null?payrollPayeeEIData.getChild("wd:Effective_As_Of").getValue().trim():"";
								 exempt = payrollPayeeEIData.getChild("wd:Exempt") != null?payrollPayeeEIData.getChild("wd:Exempt").getValue().trim():"";
								 lastUpdated = payrollPayeeEIData.getChild("wd:Last_Updated") != null?payrollPayeeEIData.getChild("wd:Last_Updated").getValue().trim():"";
					         }
						 }
			        	
				          headingFromTargetTenant = "Home_CNUM,Employee_ID,Company,Effective_As_Of,Exempt,Last_Updated";
				        	if(!customIdNumber.isEmpty())
						    {
				        		headerStr = customIdNumber + "," + employeeId + "," + company + "," + effectiveDate + "," + exempt + "," + lastUpdated;
					        	
					        	targetTenantRowMap.put(customIdNumber, headerStr);							        	
					        	targetTenantColumnList.add(customIdNumber);
					        	
					        	if(finalStr.equals(""))
								{
									 finalStr =  headingFromTargetTenant + "\n" + headerStr;
								}
								else
								{
									 finalStr = finalStr + "\n" + headerStr;
								}
							}				        				        				        	
			         }			        	
			     }
				 System.out.println(finalStr);
				 targetContent = finalStr.getBytes();						 
				 wdCount = targetTenantColumnList.size();
			   }
		}		
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		
	}
	
	private void createTemplateFromSourceTenantPayrollPayeePTD1X(Tenant tenant, InputStream is, SOAPConnection soapConnection, String loadCycle, String ruleName, String client, Long userId) {
		
		sourceCount = 0;
		headingFromSourceTenant = "";
		sourceTenantRowMap.clear();
		sourceTenantColumnList.clear();
		errorList.clear();
		String xmlReqFile = null;
		try 
		{			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 xmlReqFile = requestfile.getAbsolutePath();
				 is = new FileInputStream(xmlReqFile);
			     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
			     SOAPPart soapPart = soapMessage.getSOAPPart();
			     SOAPEnvelope envelope = soapPart.getEnvelope();
				 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
				 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
				 {
					  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
					  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
				 }
				 soapMessage.saveChanges();
			     ByteArrayOutputStream out = new ByteArrayOutputStream();
			     soapMessage.writeTo(out);
			     String strMsg = new String(out.toByteArray());	
			     
			     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Payroll_CAN";
			     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
				 soapConnection = soapConnectionFactory.createConnection();
				 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
				 out = new ByteArrayOutputStream();
				 soapResponse.writeTo(out);
				 strMsg = new String(out.toByteArray(), "utf-8");

				 ReportElement soapResp = XmlParserManager.parseXml(strMsg);
				 
				 ReportElement pageData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Payroll_Payee_PTD1X_Response")
							.getChild("wd:Response_Results");
				 
				 String totalNoOfPages = pageData.getChild("wd:Total_Pages").getValue().trim();
				 String totalResults = pageData.getChild("wd:Total_Results").getValue().trim();
				 int totalResult = Integer.parseInt(totalResults);
				 System.out.println("totalNoOfPages-"+totalNoOfPages);
				 System.out.println("totalResult-"+totalResult);						 
				 
				 String employeeId = "";
				 String company = "";						 
				 String customIdNumber = "";
				 String effectiveDate = "";
				 String inactive = "";
				 String annualWages = "";
				 String grossCommissions = "";
				 String expensesRelatedToCommissions = "";
				 String estimatedAnnualNetCommissionIncome = "";
				 String percentageOfCommissions = "";
				 
				 String finalStr = "";
				 String headerStr = "";
				 						 
				 Map<String,String> workerMap = null;
				 Map<String,String> companyMap = null;
				 Map<String,String> annualWagesMap = null;
				 
				 for (int j = 1; j <=Integer.parseInt(totalNoOfPages); j++) //
				 {
					 String xmlStr = convertFileToString(xmlReqFile);
					 String outputfile = updatePageIndex(xmlStr, j, ruleName);
					 is = new FileInputStream(outputfile);
				     soapMessage = MessageFactory.newInstance().createMessage(null, is);
				     soapPart = soapMessage.getSOAPPart();
				     envelope = soapPart.getEnvelope();
					 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
					 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
					 {
							envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
					 }
					 soapMessage.saveChanges();
			         out = new ByteArrayOutputStream();
			         soapMessage.writeTo(out);
			         strMsg = new String(out.toByteArray());
			        
			         soapConnectionFactory = SOAPConnectionFactory.newInstance();
					 soapConnection = soapConnectionFactory.createConnection();
			         soapResponse = soapConnection.call(soapMessage, sourceUrl);
			         out = new ByteArrayOutputStream();
			         soapResponse.writeTo(out);
			         strMsg = new String(out.toByteArray(), "utf-8");
			        
			         soapResp = XmlParserManager.parseXml(strMsg);
			        
			        ReportElement responseData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Payroll_Payee_PTD1X_Response")
							.getChild("wd:Response_Data");
			        
			        List<ReportElement> payrollData = responseData.getChildren("wd:Payroll_Payee_PTD1X");
			        for(ReportElement reportElement : payrollData)
					{
			        	customIdNumber = "";
			        	ReportElement payrollPayeePTD1XData = reportElement.getChild("wd:Payroll_Payee_PTD1X_Data");			        	
			        	if(payrollPayeePTD1XData != null)
			        	{
							 ReportElement workerRef = payrollPayeePTD1XData.getChild("wd:Worker_Reference");
							 if(workerRef != null)
							 {
								 List<ReportElement> workerData = workerRef.getChildren("wd:ID");					 
								 for(ReportElement workerElement:workerData)
								 {
									 workerMap = workerElement.getAllAttributes();
									 if(workerMap.get("wd:type").equals("Employee_ID"))
									 {
										 employeeId = workerElement.getValue().trim();
									 }
								 }
							 }
							 
							 if(oldEmpList.contains(employeeId))
					         {
								 customIdNumber = getHomeCNUMForPayroll(employeeId, ruleName, client, "Global_CNUM");
								 ReportElement companyRef = payrollPayeePTD1XData.getChild("wd:Company_Reference");
								 if(companyRef != null)
								 {
									 List<ReportElement> companyData = companyRef.getChildren("wd:ID");					 
									 for(ReportElement companyElement:companyData)
									 {
										 companyMap = companyElement.getAllAttributes();
										 if(companyMap.get("wd:type").equals("Organization_Reference_ID"))
										 {
											 company = companyElement.getValue().trim();
										 }
									 }
								 }
								 effectiveDate = payrollPayeePTD1XData.getChild("wd:Effective_As_Of") != null?payrollPayeePTD1XData.getChild("wd:Effective_As_Of").getValue().trim():"";
								 inactive = payrollPayeePTD1XData.getChild("wd:Inactive") != null?payrollPayeePTD1XData.getChild("wd:Inactive").getValue().trim():"";
								 ReportElement annualWagesRef = payrollPayeePTD1XData.getChild("wd:Annual_Wages_Reference");
								 if(annualWagesRef != null)
								 {
									 List<ReportElement> annualWagesData = annualWagesRef.getChildren("wd:ID");					 
									 for(ReportElement annualWagesElement:annualWagesData)
									 {
										 annualWagesMap = annualWagesElement.getAllAttributes();
										 if(annualWagesMap.get("wd:type").equals("Payroll_Constant_Text_ID"))
										 {
											 annualWages = annualWagesElement.getValue().trim();
										 }
									 }
								 }
								 grossCommissions = payrollPayeePTD1XData.getChild("wd:Gross_Commissions") != null?payrollPayeePTD1XData.getChild("wd:Gross_Commissions").getValue().trim():"";
								 expensesRelatedToCommissions = payrollPayeePTD1XData.getChild("wd:Expenses_Related_to_Commissions") != null?payrollPayeePTD1XData.getChild("wd:Expenses_Related_to_Commissions").getValue().trim():"";
								 estimatedAnnualNetCommissionIncome = payrollPayeePTD1XData.getChild("wd:Estimated_Annual_Net_Commission_Income") != null?payrollPayeePTD1XData.getChild("wd:Estimated_Annual_Net_Commission_Income").getValue().trim():"";
								 percentageOfCommissions = payrollPayeePTD1XData.getChild("wd:Percentage_of_Commissions") != null?payrollPayeePTD1XData.getChild("wd:Percentage_of_Commissions").getValue().trim():"";
					         }
						 }
			        	
			        		headingFromSourceTenant = "Home_CNUM,Employee_ID,Company,Effective_As_Of,Inactive,Annual_Wages,Gross_Commissions,Expenses_Related_To_Commissions,"
			        				+ "Estimated_Annual_Net_Commission_Income,Percentage_Of_Commissions";
				        	if(!customIdNumber.isEmpty())
							{
					        	headerStr = customIdNumber + "," + employeeId + "," + company + "," + effectiveDate + "," + inactive + "," + annualWages + "," + grossCommissions + "," +
					        				expensesRelatedToCommissions + "," + estimatedAnnualNetCommissionIncome + "," + percentageOfCommissions;
					        	
					        	sourceTenantRowMap.put(customIdNumber, headerStr);							        	
					        	sourceTenantColumnList.add(customIdNumber);
					        	
					        	if(finalStr.equals(""))
								{
									 finalStr =  headingFromSourceTenant + "\n" + headerStr;
								}
								else
								{
									 finalStr = finalStr + "\n" + headerStr;
								}
							}				        				        				        	
			         }			        	
			     }
				 System.out.println(finalStr);
				 sourceContent = finalStr.getBytes();						 
				 sourceCount = sourceTenantColumnList.size();
			   }
		}		
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		
	}

	private void createTemplateFromTargetTenantPayrollPayeePTD1X(Tenant tenant, InputStream is, SOAPConnection soapConnection, String loadCycle, String ruleName, String client, Long userId) {

		wdCount = 0;
		headingFromTargetTenant = "";
		targetTenantRowMap.clear();
		targetTenantColumnList.clear();
		errorList.clear();
		String xmlReqFile = null;
		try 
		{			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 xmlReqFile = requestfile.getAbsolutePath();
				 is = new FileInputStream(xmlReqFile);
			     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
			     SOAPPart soapPart = soapMessage.getSOAPPart();
			     SOAPEnvelope envelope = soapPart.getEnvelope();
				 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
				 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
				 {
					  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
					  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
				 }
				 soapMessage.saveChanges();
			     ByteArrayOutputStream out = new ByteArrayOutputStream();
			     soapMessage.writeTo(out);
			     String strMsg = new String(out.toByteArray());	
			     
			     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Payroll_CAN";
			     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
				 soapConnection = soapConnectionFactory.createConnection();
				 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
				 out = new ByteArrayOutputStream();
				 soapResponse.writeTo(out);
				 strMsg = new String(out.toByteArray(), "utf-8");

				 ReportElement soapResp = XmlParserManager.parseXml(strMsg);
				 
				 ReportElement pageData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Payroll_Payee_PTD1X_Response")
							.getChild("wd:Response_Results");
				 
				 String totalNoOfPages = pageData.getChild("wd:Total_Pages").getValue().trim();
				 String totalResults = pageData.getChild("wd:Total_Results").getValue().trim();
				 int totalResult = Integer.parseInt(totalResults);
				 System.out.println("totalNoOfPages-"+totalNoOfPages);
				 System.out.println("totalResult-"+totalResult);						 
				 
				 String employeeId = "";
				 String company = "";						 
				 String customIdNumber = "";
				 String effectiveDate = "";
				 String inactive = "";
				 String annualWages = "";
				 String grossCommissions = "";
				 String expensesRelatedToCommissions = "";
				 String estimatedAnnualNetCommissionIncome = "";
				 String percentageOfCommissions = "";
				 
				 String finalStr = "";
				 String headerStr = "";
				 						 
				 Map<String,String> workerMap = null;
				 Map<String,String> companyMap = null;
				 Map<String,String> annualWagesMap = null;
				 
				 for (int j = 1; j <=Integer.parseInt(totalNoOfPages); j++) //
				 {
					 String xmlStr = convertFileToString(xmlReqFile);
					 String outputfile = updatePageIndex(xmlStr, j, ruleName);
					 is = new FileInputStream(outputfile);
				     soapMessage = MessageFactory.newInstance().createMessage(null, is);
				     soapPart = soapMessage.getSOAPPart();
				     envelope = soapPart.getEnvelope();
					 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
					 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
					 {
							envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
					 }
					 soapMessage.saveChanges();
			         out = new ByteArrayOutputStream();
			         soapMessage.writeTo(out);
			         strMsg = new String(out.toByteArray());
			        
			         soapConnectionFactory = SOAPConnectionFactory.newInstance();
					 soapConnection = soapConnectionFactory.createConnection();
			         soapResponse = soapConnection.call(soapMessage, sourceUrl);
			         out = new ByteArrayOutputStream();
			         soapResponse.writeTo(out);
			         strMsg = new String(out.toByteArray(), "utf-8");
			        
			         soapResp = XmlParserManager.parseXml(strMsg);
			        
			        ReportElement responseData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Payroll_Payee_PTD1X_Response")
							.getChild("wd:Response_Data");
			        
			        List<ReportElement> payrollData = responseData.getChildren("wd:Payroll_Payee_PTD1X");
			        for(ReportElement reportElement : payrollData)
					{
			        	customIdNumber = "";
			        	ReportElement payrollPayeePTD1XData = reportElement.getChild("wd:Payroll_Payee_PTD1X_Data");			        	
			        	if(payrollPayeePTD1XData != null)
			        	{
							 ReportElement workerRef = payrollPayeePTD1XData.getChild("wd:Worker_Reference");
							 if(workerRef != null)
							 {
								 List<ReportElement> workerData = workerRef.getChildren("wd:ID");					 
								 for(ReportElement workerElement:workerData)
								 {
									 workerMap = workerElement.getAllAttributes();
									 if(workerMap.get("wd:type").equals("Employee_ID"))
									 {
										 employeeId = workerElement.getValue().trim();
									 }
								 }
							 }
							 
							 if(newEmpList.contains(employeeId))
					         {
								 customIdNumber = getHomeCNUMForPayroll(employeeId, ruleName, client, "Previous_IBM_CNUM");
								 ReportElement companyRef = payrollPayeePTD1XData.getChild("wd:Company_Reference");
								 if(companyRef != null)
								 {
									 List<ReportElement> companyData = companyRef.getChildren("wd:ID");					 
									 for(ReportElement companyElement:companyData)
									 {
										 companyMap = companyElement.getAllAttributes();
										 if(companyMap.get("wd:type").equals("Organization_Reference_ID"))
										 {
											 company = companyElement.getValue().trim();
										 }
									 }
								 }
								 effectiveDate = payrollPayeePTD1XData.getChild("wd:Effective_As_Of") != null?payrollPayeePTD1XData.getChild("wd:Effective_As_Of").getValue().trim():"";
								 inactive = payrollPayeePTD1XData.getChild("wd:Inactive") != null?payrollPayeePTD1XData.getChild("wd:Inactive").getValue().trim():"";
								 ReportElement annualWagesRef = payrollPayeePTD1XData.getChild("wd:Annual_Wages_Reference");
								 if(annualWagesRef != null)
								 {
									 List<ReportElement> annualWagesData = annualWagesRef.getChildren("wd:ID");					 
									 for(ReportElement annualWagesElement:annualWagesData)
									 {
										 annualWagesMap = annualWagesElement.getAllAttributes();
										 if(annualWagesMap.get("wd:type").equals("Payroll_Constant_Text_ID"))
										 {
											 annualWages = annualWagesElement.getValue().trim();
										 }
									 }
								 }
								 grossCommissions = payrollPayeePTD1XData.getChild("wd:Gross_Commissions") != null?payrollPayeePTD1XData.getChild("wd:Gross_Commissions").getValue().trim():"";
								 expensesRelatedToCommissions = payrollPayeePTD1XData.getChild("wd:Expenses_Related_to_Commissions") != null?payrollPayeePTD1XData.getChild("wd:Expenses_Related_to_Commissions").getValue().trim():"";
								 estimatedAnnualNetCommissionIncome = payrollPayeePTD1XData.getChild("wd:Estimated_Annual_Net_Commission_Income") != null?payrollPayeePTD1XData.getChild("wd:Estimated_Annual_Net_Commission_Income").getValue().trim():"";
								 percentageOfCommissions = payrollPayeePTD1XData.getChild("wd:Percentage_of_Commissions") != null?payrollPayeePTD1XData.getChild("wd:Percentage_of_Commissions").getValue().trim():"";
					         }
						 }
			        	
			        		headingFromTargetTenant = "Home_CNUM,Employee_ID,Company,Effective_As_Of,Inactive,Annual_Wages,Gross_Commissions,Expenses_Related_To_Commissions,"
			        				+ "Estimated_Annual_Net_Commission_Income,Percentage_Of_Commissions";
				        	if(!customIdNumber.isEmpty())
							{
					        	headerStr = customIdNumber + "," + employeeId + "," + company + "," + effectiveDate + "," + inactive + "," + annualWages + "," + grossCommissions + "," +
					        				expensesRelatedToCommissions + "," + estimatedAnnualNetCommissionIncome + "," + percentageOfCommissions;
					        	
					        	targetTenantRowMap.put(customIdNumber, headerStr);							        	
					        	targetTenantColumnList.add(customIdNumber);
					        	
					        	if(finalStr.equals(""))
								{
									 finalStr =  headingFromTargetTenant + "\n" + headerStr;
								}
								else
								{
									 finalStr = finalStr + "\n" + headerStr;
								}
							}				        				        				        	
			         }			        	
			     }
				 System.out.println(finalStr);
				 targetContent = finalStr.getBytes();						 
				 wdCount = targetTenantColumnList.size();
			   }
		}		
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		
	}
	
	private void createTemplateFromSourceTenantPayrollPayeeTD1(Tenant tenant, InputStream is, SOAPConnection soapConnection, String loadCycle, String ruleName, String client, Long userId) {
		
		sourceCount = 0;
		headingFromSourceTenant = "";
		sourceTenantRowMap.clear();
		sourceTenantColumnList.clear();
		errorList.clear();
		String xmlReqFile = null;
		try 
		{			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 xmlReqFile = requestfile.getAbsolutePath();
				 is = new FileInputStream(xmlReqFile);
			     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
			     SOAPPart soapPart = soapMessage.getSOAPPart();
			     SOAPEnvelope envelope = soapPart.getEnvelope();
				 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
				 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
				 {
					  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
					  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
				 }
				 soapMessage.saveChanges();
			     ByteArrayOutputStream out = new ByteArrayOutputStream();
			     soapMessage.writeTo(out);
			     String strMsg = new String(out.toByteArray());	
			     
			     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Payroll";
			     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
				 soapConnection = soapConnectionFactory.createConnection();
				 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
				 out = new ByteArrayOutputStream();
				 soapResponse.writeTo(out);
				 strMsg = new String(out.toByteArray(), "utf-8");

				 ReportElement soapResp = XmlParserManager.parseXml(strMsg);
				 
				 ReportElement pageData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Payroll_Payee_TD1s_Response")
							.getChild("wd:Response_Results");
				 
				 String totalNoOfPages = pageData.getChild("wd:Total_Pages").getValue().trim();
				 String totalResults = pageData.getChild("wd:Total_Results").getValue().trim();
				 int totalResult = Integer.parseInt(totalResults);
				 System.out.println("totalNoOfPages-"+totalNoOfPages);
				 System.out.println("totalResult-"+totalResult);						 
				 
				 String employeeId = "";
				 String company = "";						 
				 String customIdNumber = "";
				 String effectiveDate = "";
				 String basicPersonalAmount = "";
				 String childAmount = "";
				 String ageAmount = "";
				 String pensionIncomeamount = "";
				 String tuitionEducationAndTextbookAmounts = "";
				 String disabilityAmount = "";
				 String spouseOrCommonLawPartnerAmount = "";
				 String amountForAnEligibleDependant = "";
				 String caregiverAmount = "";
				 String amountForInfirmDependants = "";
				 String amountsTransferredFromYourSpouse = "";
				 String amountsTransferredFromDependant = "";
				 String totalIncomeLessThanTotalClaimAmount = "";
				 String moreThanOneEmployerOrPayerAtTheSameTime = "";
				 String deductionForLivingInPrescribedZone = "";
				 String additionalAmount = "";
				 String nonResident = "";
				 String ESSElectronicSignatureConfirmation = "";
				 String currency = "";
				 
				 String finalStr = "";
				 String headerStr = "";
				 						 
				 Map<String,String> workerMap = null;
				 Map<String,String> companyMap = null;
				 Map<String,String> currencyMap = null;
				 
				 for (int j = 1; j <=Integer.parseInt(totalNoOfPages); j++) //
				 {
					 String xmlStr = convertFileToString(xmlReqFile);
					 String outputfile = updatePageIndex(xmlStr, j, ruleName);
					 is = new FileInputStream(outputfile);
				     soapMessage = MessageFactory.newInstance().createMessage(null, is);
				     soapPart = soapMessage.getSOAPPart();
				     envelope = soapPart.getEnvelope();
					 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
					 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
					 {
							envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
					 }
					 soapMessage.saveChanges();
			         out = new ByteArrayOutputStream();
			         soapMessage.writeTo(out);
			         strMsg = new String(out.toByteArray());
			        
			         soapConnectionFactory = SOAPConnectionFactory.newInstance();
					 soapConnection = soapConnectionFactory.createConnection();
			         soapResponse = soapConnection.call(soapMessage, sourceUrl);
			         out = new ByteArrayOutputStream();
			         soapResponse.writeTo(out);
			         strMsg = new String(out.toByteArray(), "utf-8");
			        
			         soapResp = XmlParserManager.parseXml(strMsg);
			        
			        ReportElement responseData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Payroll_Payee_TD1s_Response")
							.getChild("wd:Response_Data");
			        
			        List<ReportElement> payrollData = responseData.getChildren("wd:Payroll_Payee_TD1");
			        for(ReportElement reportElement : payrollData)
					{
			        	customIdNumber = "";
			        	ReportElement payrollPayeeTD1Data = reportElement.getChild("wd:Payroll_Payee_TD1_Data");			        	
			        	if(payrollPayeeTD1Data != null)
			        	{
							 ReportElement workerRef = payrollPayeeTD1Data.getChild("wd:Worker_Reference");
							 if(workerRef != null)
							 {
								 List<ReportElement> workerData = workerRef.getChildren("wd:ID");					 
								 for(ReportElement workerElement:workerData)
								 {
									 workerMap = workerElement.getAllAttributes();
									 if(workerMap.get("wd:type").equals("Employee_ID"))
									 {
										 employeeId = workerElement.getValue().trim();
									 }
								 }
							 }
							 
							 if(oldEmpList.contains(employeeId))
					         {
								 customIdNumber = getHomeCNUMForPayroll(employeeId, ruleName, client, "Global_CNUM");
								 ReportElement companyRef = payrollPayeeTD1Data.getChild("wd:Company_Reference");
								 if(companyRef != null)
								 {
									 List<ReportElement> companyData = companyRef.getChildren("wd:ID");					 
									 for(ReportElement companyElement:companyData)
									 {
										 companyMap = companyElement.getAllAttributes();
										 if(companyMap.get("wd:type").equals("Organization_Reference_ID"))
										 {
											 company = companyElement.getValue().trim();
										 }
									 }
								 }
								 effectiveDate = payrollPayeeTD1Data.getChild("wd:Effective_As_Of") != null?payrollPayeeTD1Data.getChild("wd:Effective_As_Of").getValue().trim():"";
								 basicPersonalAmount = payrollPayeeTD1Data.getChild("wd:Basic_Personal_Amount") != null?payrollPayeeTD1Data.getChild("wd:Basic_Personal_Amount").getValue().trim():"";
								 childAmount = payrollPayeeTD1Data.getChild("wd:Child_Amount") != null?payrollPayeeTD1Data.getChild("wd:Child_Amount").getValue().trim():"";
								 ageAmount = payrollPayeeTD1Data.getChild("wd:Age_Amount") != null?payrollPayeeTD1Data.getChild("wd:Age_Amount").getValue().trim():"";
								 pensionIncomeamount = payrollPayeeTD1Data.getChild("wd:Pension_Income_Amount") != null?payrollPayeeTD1Data.getChild("wd:Pension_Income_Amount").getValue().trim():"";
								 tuitionEducationAndTextbookAmounts = payrollPayeeTD1Data.getChild("wd:Tuition__Education_and_Textbook_Amounts") != null?payrollPayeeTD1Data.getChild("wd:Tuition__Education_and_Textbook_Amounts").getValue().trim():"";
								 disabilityAmount = payrollPayeeTD1Data.getChild("wd:Disability_Amount") != null?payrollPayeeTD1Data.getChild("wd:Disability_Amount").getValue().trim():"";
								 spouseOrCommonLawPartnerAmount = payrollPayeeTD1Data.getChild("wd:Spouse_or_Common-law_Partner_Amount") != null?payrollPayeeTD1Data.getChild("wd:Spouse_or_Common-law_Partner_Amount").getValue().trim():"";
								 amountForAnEligibleDependant = payrollPayeeTD1Data.getChild("wd:Amount_for_an_Eligible_Dependant") != null?payrollPayeeTD1Data.getChild("wd:Amount_for_an_Eligible_Dependant").getValue().trim():"";
								 caregiverAmount = payrollPayeeTD1Data.getChild("wd:Caregiver_Amount") != null?payrollPayeeTD1Data.getChild("wd:Caregiver_Amount").getValue().trim():"";
								 amountForInfirmDependants = payrollPayeeTD1Data.getChild("wd:Amount_for_Infirm_Dependants_Age_18_or_Older") != null?payrollPayeeTD1Data.getChild("wd:Amount_for_Infirm_Dependants_Age_18_or_Older").getValue().trim():"";
								 amountsTransferredFromYourSpouse = payrollPayeeTD1Data.getChild("wd:Amounts_Transferred_from_your_Spouse_or_Common-law_Partner") != null?payrollPayeeTD1Data.getChild("wd:Amounts_Transferred_from_your_Spouse_or_Common-law_Partner").getValue().trim():"";
								 amountsTransferredFromDependant = payrollPayeeTD1Data.getChild("wd:Amounts_Transferred_from_a_Dependant") != null?payrollPayeeTD1Data.getChild("wd:Amounts_Transferred_from_a_Dependant").getValue().trim():"";
								 totalIncomeLessThanTotalClaimAmount = payrollPayeeTD1Data.getChild("wd:Total_Income_less_than_Total_Claim_Amount") != null?payrollPayeeTD1Data.getChild("wd:Total_Income_less_than_Total_Claim_Amount").getValue().trim():"";
								 if(totalIncomeLessThanTotalClaimAmount.equalsIgnoreCase("0"))
								 {
									 totalIncomeLessThanTotalClaimAmount = "n";
								 }
								 else
								 {
									 totalIncomeLessThanTotalClaimAmount = "y";
								 }
								 moreThanOneEmployerOrPayerAtTheSameTime = payrollPayeeTD1Data.getChild("wd:More_than_One_Employer_or_Payer_at_the_Same_Time") != null?payrollPayeeTD1Data.getChild("wd:More_than_One_Employer_or_Payer_at_the_Same_Time").getValue().trim():"";
								 if(moreThanOneEmployerOrPayerAtTheSameTime.equalsIgnoreCase("0"))
								 {
									 moreThanOneEmployerOrPayerAtTheSameTime = "n";
								 }
								 else
								 {
									 moreThanOneEmployerOrPayerAtTheSameTime = "y";
								 }
								 deductionForLivingInPrescribedZone = payrollPayeeTD1Data.getChild("wd:Deduction_for_Living_in_a_Prescribed_Zone") != null?payrollPayeeTD1Data.getChild("wd:Deduction_for_Living_in_a_Prescribed_Zone").getValue().trim():"";
								 additionalAmount = payrollPayeeTD1Data.getChild("wd:Additional_Amount") != null?payrollPayeeTD1Data.getChild("wd:Additional_Amount").getValue().trim():"";
								 nonResident = payrollPayeeTD1Data.getChild("wd:Non_Resident") != null?payrollPayeeTD1Data.getChild("wd:Non_Resident").getValue().trim():"";
								 if(nonResident.equalsIgnoreCase("0"))
								 {
									 nonResident = "n";
								 }
								 else
								 {
									 nonResident = "y";
								 }
								 ESSElectronicSignatureConfirmation = payrollPayeeTD1Data.getChild("wd:ESS_Electronic_Signature_Confirmation") != null?payrollPayeeTD1Data.getChild("wd:ESS_Electronic_Signature_Confirmation").getValue().trim():"";
								 
								 ReportElement currencyRef = payrollPayeeTD1Data.getChild("wd:Currency_Reference");
								 if(currencyRef != null)
								 {
									 List<ReportElement> currencyData = currencyRef.getChildren("wd:ID");					 
									 for(ReportElement currencyElement:currencyData)
									 {
										 currencyMap = currencyElement.getAllAttributes();
										 if(currencyMap.get("wd:type").equals("Currency_ID"))
										 {
											 currency = currencyElement.getValue().trim();
										 }
									 }
								 }
					         }
						 }
			        	
			        		headingFromSourceTenant = "Home_CNUM,Employee_ID,Company,Effective_As_Of,Basic_Personal_Amount,Child_Amount,Age_Amount,Pension_Income_Amount,Tuition_Education_and_Textbook_Amounts,"
			        				+ "Disability_Amount,Spouse_or_Common-law_Partner_Amount,Amount_for_an_Eligible_Dependant,Caregiver_Amount,Amount_for_Infirm_Dependants_Age_18_or_Older,"
			        				+ "Amounts_Transferred_from_your_Spouse_or_Common-law_Partner,Amounts_Transferred_from_a_Dependant,Total_Income_less_than_Total_Claim_Amount,"
			        				+ "More_than_One_Employer_or_Payer_at_the_Same_Time,Deduction_for_Living_in_a_Prescribed_Zone,Additional_Amount,Non_Resident,"
			        				+ "ESS_Electronic_Signature_Confirmation,Currency";
				        	if(!customIdNumber.isEmpty())
							{
					        	headerStr = customIdNumber + "," + employeeId + "," + company + "," + effectiveDate + "," + basicPersonalAmount + "," + childAmount + "," + ageAmount + "," +
					        				pensionIncomeamount + "," + tuitionEducationAndTextbookAmounts + "," + disabilityAmount + "," + spouseOrCommonLawPartnerAmount + "," +
					        			    amountForAnEligibleDependant + "," + caregiverAmount + "," + amountForInfirmDependants + "," + amountsTransferredFromYourSpouse + "," +
					        				amountsTransferredFromDependant + "," + totalIncomeLessThanTotalClaimAmount + "," + moreThanOneEmployerOrPayerAtTheSameTime + "," +
					        			    deductionForLivingInPrescribedZone + "," + additionalAmount + "," + nonResident + "," + ESSElectronicSignatureConfirmation + "," + currency;
					        	
					        	sourceTenantRowMap.put(customIdNumber, headerStr);							        	
					        	sourceTenantColumnList.add(customIdNumber);
					        	
					        	if(finalStr.equals(""))
								{
									 finalStr =  headingFromSourceTenant + "\n" + headerStr;
								}
								else
								{
									 finalStr = finalStr + "\n" + headerStr;
								}
							}				        				        				        	
			         }			        	
			     }
				 System.out.println(finalStr);
				 sourceContent = finalStr.getBytes();						 
				 sourceCount = sourceTenantColumnList.size();
			   }
		}		
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		
	}

	private void createTemplateFromTargetTenantPayrollPayeeTD1(Tenant tenant, InputStream is, SOAPConnection soapConnection, String loadCycle, String ruleName, String client, Long userId) {

		wdCount = 0;
		headingFromTargetTenant = "";
		targetTenantRowMap.clear();
		targetTenantColumnList.clear();
		errorList.clear();
		String xmlReqFile = null;
		try 
		{			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 xmlReqFile = requestfile.getAbsolutePath();
				 is = new FileInputStream(xmlReqFile);
			     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
			     SOAPPart soapPart = soapMessage.getSOAPPart();
			     SOAPEnvelope envelope = soapPart.getEnvelope();
				 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
				 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
				 {
					  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
					  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
				 }
				 soapMessage.saveChanges();
			     ByteArrayOutputStream out = new ByteArrayOutputStream();
			     soapMessage.writeTo(out);
			     String strMsg = new String(out.toByteArray());	
			     
			     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Payroll";
			     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
				 soapConnection = soapConnectionFactory.createConnection();
				 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
				 out = new ByteArrayOutputStream();
				 soapResponse.writeTo(out);
				 strMsg = new String(out.toByteArray(), "utf-8");

				 ReportElement soapResp = XmlParserManager.parseXml(strMsg);
				 
				 ReportElement pageData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Payroll_Payee_TD1s_Response")
							.getChild("wd:Response_Results");
				 
				 String totalNoOfPages = pageData.getChild("wd:Total_Pages").getValue().trim();
				 String totalResults = pageData.getChild("wd:Total_Results").getValue().trim();
				 int totalResult = Integer.parseInt(totalResults);
				 System.out.println("totalNoOfPages-"+totalNoOfPages);
				 System.out.println("totalResult-"+totalResult);						 
				 
				 String employeeId = "";
				 String company = "";						 
				 String customIdNumber = "";
				 String effectiveDate = "";
				 String basicPersonalAmount = "";
				 String childAmount = "";
				 String ageAmount = "";
				 String pensionIncomeamount = "";
				 String tuitionEducationAndTextbookAmounts = "";
				 String disabilityAmount = "";
				 String spouseOrCommonLawPartnerAmount = "";
				 String amountForAnEligibleDependant = "";
				 String caregiverAmount = "";
				 String amountForInfirmDependants = "";
				 String amountsTransferredFromYourSpouse = "";
				 String amountsTransferredFromDependant = "";
				 String totalIncomeLessThanTotalClaimAmount = "";
				 String moreThanOneEmployerOrPayerAtTheSameTime = "";
				 String deductionForLivingInPrescribedZone = "";
				 String additionalAmount = "";
				 String nonResident = "";
				 String ESSElectronicSignatureConfirmation = "";
				 String currency = "";
				 
				 String finalStr = "";
				 String headerStr = "";
				 						 
				 Map<String,String> workerMap = null;
				 Map<String,String> companyMap = null;
				 Map<String,String> currencyMap = null;
				 
				 for (int j = 1; j <=Integer.parseInt(totalNoOfPages); j++) //
				 {
					 String xmlStr = convertFileToString(xmlReqFile);
					 String outputfile = updatePageIndex(xmlStr, j, ruleName);
					 is = new FileInputStream(outputfile);
				     soapMessage = MessageFactory.newInstance().createMessage(null, is);
				     soapPart = soapMessage.getSOAPPart();
				     envelope = soapPart.getEnvelope();
					 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
					 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
					 {
							envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
					 }
					 soapMessage.saveChanges();
			         out = new ByteArrayOutputStream();
			         soapMessage.writeTo(out);
			         strMsg = new String(out.toByteArray());
			        
			         soapConnectionFactory = SOAPConnectionFactory.newInstance();
					 soapConnection = soapConnectionFactory.createConnection();
			         soapResponse = soapConnection.call(soapMessage, sourceUrl);
			         out = new ByteArrayOutputStream();
			         soapResponse.writeTo(out);
			         strMsg = new String(out.toByteArray(), "utf-8");
			        
			         soapResp = XmlParserManager.parseXml(strMsg);
			        
			        ReportElement responseData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Payroll_Payee_TD1s_Response")
							.getChild("wd:Response_Data");
			        
			        List<ReportElement> payrollData = responseData.getChildren("wd:Payroll_Payee_TD1");
			        for(ReportElement reportElement : payrollData)
					{
			        	customIdNumber = "";
			        	ReportElement payrollPayeeTD1Data = reportElement.getChild("wd:Payroll_Payee_TD1_Data");			        	
			        	if(payrollPayeeTD1Data != null)
			        	{
							 ReportElement workerRef = payrollPayeeTD1Data.getChild("wd:Worker_Reference");
							 if(workerRef != null)
							 {
								 List<ReportElement> workerData = workerRef.getChildren("wd:ID");					 
								 for(ReportElement workerElement:workerData)
								 {
									 workerMap = workerElement.getAllAttributes();
									 if(workerMap.get("wd:type").equals("Employee_ID"))
									 {
										 employeeId = workerElement.getValue().trim();
									 }
								 }
							 }
							 
							 if(newEmpList.contains(employeeId))
					         {
								 customIdNumber = getHomeCNUMForPayroll(employeeId, ruleName, client, "Previous_IBM_CNUM");
								 ReportElement companyRef = payrollPayeeTD1Data.getChild("wd:Company_Reference");
								 if(companyRef != null)
								 {
									 List<ReportElement> companyData = companyRef.getChildren("wd:ID");					 
									 for(ReportElement companyElement:companyData)
									 {
										 companyMap = companyElement.getAllAttributes();
										 if(companyMap.get("wd:type").equals("Organization_Reference_ID"))
										 {
											 company = companyElement.getValue().trim();
										 }
									 }
								 }
								 effectiveDate = payrollPayeeTD1Data.getChild("wd:Effective_As_Of") != null?payrollPayeeTD1Data.getChild("wd:Effective_As_Of").getValue().trim():"";
								 basicPersonalAmount = payrollPayeeTD1Data.getChild("wd:Basic_Personal_Amount") != null?payrollPayeeTD1Data.getChild("wd:Basic_Personal_Amount").getValue().trim():"";
								 childAmount = payrollPayeeTD1Data.getChild("wd:Child_Amount") != null?payrollPayeeTD1Data.getChild("wd:Child_Amount").getValue().trim():"";
								 ageAmount = payrollPayeeTD1Data.getChild("wd:Age_Amount") != null?payrollPayeeTD1Data.getChild("wd:Age_Amount").getValue().trim():"";
								 pensionIncomeamount = payrollPayeeTD1Data.getChild("wd:Pension_Income_Amount") != null?payrollPayeeTD1Data.getChild("wd:Pension_Income_Amount").getValue().trim():"";
								 tuitionEducationAndTextbookAmounts = payrollPayeeTD1Data.getChild("wd:Tuition__Education_and_Textbook_Amounts") != null?payrollPayeeTD1Data.getChild("wd:Tuition__Education_and_Textbook_Amounts").getValue().trim():"";
								 disabilityAmount = payrollPayeeTD1Data.getChild("wd:Disability_Amount") != null?payrollPayeeTD1Data.getChild("wd:Disability_Amount").getValue().trim():"";
								 spouseOrCommonLawPartnerAmount = payrollPayeeTD1Data.getChild("wd:Spouse_or_Common-law_Partner_Amount") != null?payrollPayeeTD1Data.getChild("wd:Spouse_or_Common-law_Partner_Amount").getValue().trim():"";
								 amountForAnEligibleDependant = payrollPayeeTD1Data.getChild("wd:Amount_for_an_Eligible_Dependant") != null?payrollPayeeTD1Data.getChild("wd:Amount_for_an_Eligible_Dependant").getValue().trim():"";
								 caregiverAmount = payrollPayeeTD1Data.getChild("wd:Caregiver_Amount") != null?payrollPayeeTD1Data.getChild("wd:Caregiver_Amount").getValue().trim():"";
								 amountForInfirmDependants = payrollPayeeTD1Data.getChild("wd:Amount_for_Infirm_Dependants_Age_18_or_Older") != null?payrollPayeeTD1Data.getChild("wd:Amount_for_Infirm_Dependants_Age_18_or_Older").getValue().trim():"";
								 amountsTransferredFromYourSpouse = payrollPayeeTD1Data.getChild("wd:Amounts_Transferred_from_your_Spouse_or_Common-law_Partner") != null?payrollPayeeTD1Data.getChild("wd:Amounts_Transferred_from_your_Spouse_or_Common-law_Partner").getValue().trim():"";
								 amountsTransferredFromDependant = payrollPayeeTD1Data.getChild("wd:Amounts_Transferred_from_a_Dependant") != null?payrollPayeeTD1Data.getChild("wd:Amounts_Transferred_from_a_Dependant").getValue().trim():"";
								 totalIncomeLessThanTotalClaimAmount = payrollPayeeTD1Data.getChild("wd:Total_Income_less_than_Total_Claim_Amount") != null?payrollPayeeTD1Data.getChild("wd:Total_Income_less_than_Total_Claim_Amount").getValue().trim():"";
								 if(totalIncomeLessThanTotalClaimAmount.equalsIgnoreCase("0"))
								 {
									 totalIncomeLessThanTotalClaimAmount = "n";
								 }
								 else
								 {
									 totalIncomeLessThanTotalClaimAmount = "y";
								 }
								 moreThanOneEmployerOrPayerAtTheSameTime = payrollPayeeTD1Data.getChild("wd:More_than_One_Employer_or_Payer_at_the_Same_Time") != null?payrollPayeeTD1Data.getChild("wd:More_than_One_Employer_or_Payer_at_the_Same_Time").getValue().trim():"";
								 if(moreThanOneEmployerOrPayerAtTheSameTime.equalsIgnoreCase("0"))
								 {
									 moreThanOneEmployerOrPayerAtTheSameTime = "n";
								 }
								 else
								 {
									 moreThanOneEmployerOrPayerAtTheSameTime = "y";
								 }
								 deductionForLivingInPrescribedZone = payrollPayeeTD1Data.getChild("wd:Deduction_for_Living_in_a_Prescribed_Zone") != null?payrollPayeeTD1Data.getChild("wd:Deduction_for_Living_in_a_Prescribed_Zone").getValue().trim():"";
								 additionalAmount = payrollPayeeTD1Data.getChild("wd:Additional_Amount") != null?payrollPayeeTD1Data.getChild("wd:Additional_Amount").getValue().trim():"";
								 nonResident = payrollPayeeTD1Data.getChild("wd:Non_Resident") != null?payrollPayeeTD1Data.getChild("wd:Non_Resident").getValue().trim():"";
								 if(nonResident.equalsIgnoreCase("0"))
								 {
									 nonResident = "n";
								 }
								 else
								 {
									 nonResident = "y";
								 }
								 ESSElectronicSignatureConfirmation = payrollPayeeTD1Data.getChild("wd:ESS_Electronic_Signature_Confirmation") != null?payrollPayeeTD1Data.getChild("wd:ESS_Electronic_Signature_Confirmation").getValue().trim():"";
								 
								 ReportElement currencyRef = payrollPayeeTD1Data.getChild("wd:Currency_Reference");
								 if(currencyRef != null)
								 {
									 List<ReportElement> currencyData = currencyRef.getChildren("wd:ID");					 
									 for(ReportElement currencyElement:currencyData)
									 {
										 currencyMap = currencyElement.getAllAttributes();
										 if(currencyMap.get("wd:type").equals("Currency_ID"))
										 {
											 currency = currencyElement.getValue().trim();
										 }
									 }
								 }
					         }
						 }
			        	
			        		headingFromTargetTenant = "Home_CNUM,Employee_ID,Company,Effective_As_Of,Basic_Personal_Amount,Child_Amount,Age_Amount,Pension_Income_Amount,Tuition_Education_and_Textbook_Amounts,"
			        				+ "Disability_Amount,Spouse_or_Common-law_Partner_Amount,Amount_for_an_Eligible_Dependant,Caregiver_Amount,Amount_for_Infirm_Dependants_Age_18_or_Older,"
			        				+ "Amounts_Transferred_from_your_Spouse_or_Common-law_Partner,Amounts_Transferred_from_a_Dependant,Total_Income_less_than_Total_Claim_Amount,"
			        				+ "More_than_One_Employer_or_Payer_at_the_Same_Time,Deduction_for_Living_in_a_Prescribed_Zone,Additional_Amount,Non_Resident,"
			        				+ "ESS_Electronic_Signature_Confirmation,Currency";
				        	if(!customIdNumber.isEmpty())
							{
					        	headerStr = customIdNumber + "," + employeeId + "," + company + "," + effectiveDate + "," + basicPersonalAmount + "," + childAmount + "," + ageAmount + "," +
					        				pensionIncomeamount + "," + tuitionEducationAndTextbookAmounts + "," + disabilityAmount + "," + spouseOrCommonLawPartnerAmount + "," +
					        			    amountForAnEligibleDependant + "," + caregiverAmount + "," + amountForInfirmDependants + "," + amountsTransferredFromYourSpouse + "," +
					        				amountsTransferredFromDependant + "," + totalIncomeLessThanTotalClaimAmount + "," + moreThanOneEmployerOrPayerAtTheSameTime + "," +
					        			    deductionForLivingInPrescribedZone + "," + additionalAmount + "," + nonResident + "," + ESSElectronicSignatureConfirmation + "," + currency;
					        	
					        	targetTenantRowMap.put(customIdNumber, headerStr);							        	
					        	targetTenantColumnList.add(customIdNumber);
					        	
					        	if(finalStr.equals(""))
								{
									 finalStr =  headingFromTargetTenant + "\n" + headerStr;
								}
								else
								{
									 finalStr = finalStr + "\n" + headerStr;
								}
							}				        				        				        	
			         }			        	
			     }
				 System.out.println(finalStr);
				 targetContent = finalStr.getBytes();						 
				 wdCount = targetTenantColumnList.size();
			   }
		}		
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		
	}
	
	private void createTemplateFromSourceTenantPayrollPayeeStudentLoans(Tenant tenant, InputStream is, SOAPConnection soapConnection, String loadCycle, String ruleName, String client, Long userId) {
		
		sourceCount = 0;
		headingFromSourceTenant = "";
		sourceTenantRowMap.clear();
		sourceTenantColumnList.clear();
		errorList.clear();
		String xmlReqFile = null;
		try 
		{			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 xmlReqFile = requestfile.getAbsolutePath();
				 is = new FileInputStream(xmlReqFile);
			     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
			     SOAPPart soapPart = soapMessage.getSOAPPart();
			     SOAPEnvelope envelope = soapPart.getEnvelope();
				 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
				 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
				 {
					  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
					  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
				 }
				 soapMessage.saveChanges();
			     ByteArrayOutputStream out = new ByteArrayOutputStream();
			     soapMessage.writeTo(out);
			     String strMsg = new String(out.toByteArray());	
			     
			     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Payroll_GBR";
			     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
				 soapConnection = soapConnectionFactory.createConnection();
				 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
				 out = new ByteArrayOutputStream();
				 soapResponse.writeTo(out);
				 strMsg = new String(out.toByteArray(), "utf-8");

				 ReportElement soapResp = XmlParserManager.parseXml(strMsg);
				 
				 ReportElement pageData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Payroll_Payee_Student_Loans_Response")
							.getChild("wd:Response_Results");
				 
				 String totalNoOfPages = pageData.getChild("wd:Total_Pages").getValue().trim();
				 String totalResults = pageData.getChild("wd:Total_Results").getValue().trim();
				 int totalResult = Integer.parseInt(totalResults);
				 System.out.println("totalNoOfPages-"+totalNoOfPages);
				 System.out.println("totalResult-"+totalResult);						 
				 
				 String employeeId = "";
				 String company = "";						 
				 String customIdNumber = "";
				 String effectiveDate = "";
				 String startnotificationType = "";
				 String repaymentPlan = "";
				 String stopwithoutSL2 = "";
				 
				 String finalStr = "";
				 String headerStr = "";
				 						 
				 Map<String,String> workerMap = null;
				 Map<String,String> companyMap = null;
				 Map<String,String> notificationMap = null;
				 Map<String,String> repaymentMap = null;
				 
				 for (int j = 1; j <=Integer.parseInt(totalNoOfPages); j++) //
				 {
					 String xmlStr = convertFileToString(xmlReqFile);
					 String outputfile = updatePageIndex(xmlStr, j, ruleName);
					 is = new FileInputStream(outputfile);
				     soapMessage = MessageFactory.newInstance().createMessage(null, is);
				     soapPart = soapMessage.getSOAPPart();
				     envelope = soapPart.getEnvelope();
					 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
					 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
					 {
							envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
					 }
					 soapMessage.saveChanges();
			         out = new ByteArrayOutputStream();
			         soapMessage.writeTo(out);
			         strMsg = new String(out.toByteArray());
			        
			         soapConnectionFactory = SOAPConnectionFactory.newInstance();
					 soapConnection = soapConnectionFactory.createConnection();
			         soapResponse = soapConnection.call(soapMessage, sourceUrl);
			         out = new ByteArrayOutputStream();
			         soapResponse.writeTo(out);
			         strMsg = new String(out.toByteArray(), "utf-8");
			        
			         soapResp = XmlParserManager.parseXml(strMsg);
			        
			        ReportElement responseData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Payroll_Payee_Student_Loans_Response")
							.getChild("wd:Response_Data");
			        
			        List<ReportElement> payrollData = responseData.getChildren("wd:Payroll_Payee_Student_Loans");
			        for(ReportElement reportElement : payrollData)
					{
			        	customIdNumber = "";
			        	ReportElement payrollPayeeStudentLoansData = reportElement.getChild("wd:Payroll_Payee_Student_Loans_Data");			        	
			        	if(payrollPayeeStudentLoansData != null)
			        	{
							 ReportElement workerRef = payrollPayeeStudentLoansData.getChild("wd:Worker_Reference");
							 if(workerRef != null)
							 {
								 List<ReportElement> workerData = workerRef.getChildren("wd:ID");					 
								 for(ReportElement workerElement:workerData)
								 {
									 workerMap = workerElement.getAllAttributes();
									 if(workerMap.get("wd:type").equals("Employee_ID"))
									 {
										 employeeId = workerElement.getValue().trim();
									 }
								 }
							 }
							 
							 if(oldEmpList.contains(employeeId))
					         {
								 customIdNumber = getHomeCNUMForPayroll(employeeId, ruleName, client, "Global_CNUM");
								 ReportElement companyRef = payrollPayeeStudentLoansData.getChild("wd:Company_Reference");
								 if(companyRef != null)
								 {
									 List<ReportElement> companyData = companyRef.getChildren("wd:ID");					 
									 for(ReportElement companyElement:companyData)
									 {
										 companyMap = companyElement.getAllAttributes();
										 if(companyMap.get("wd:type").equals("Organization_Reference_ID"))
										 {
											 company = companyElement.getValue().trim();
										 }
									 }
								 }
								 
								 effectiveDate = payrollPayeeStudentLoansData.getChild("wd:Effective_As_Of") != null?payrollPayeeStudentLoansData.getChild("wd:Effective_As_Of").getValue().trim():"";
								 
								 ReportElement startNotificationTypeRef = payrollPayeeStudentLoansData.getChild("wd:Start_Notification_Type_Reference");
								 if(startNotificationTypeRef != null)
								 {
									 List<ReportElement> startNotificationTypeData = startNotificationTypeRef.getChildren("wd:ID");					 
									 for(ReportElement startNotificationTypeElement:startNotificationTypeData)
									 {
										 notificationMap = startNotificationTypeElement.getAllAttributes();
										 if(notificationMap.get("wd:type").equals("Payroll_Constant_Text_ID"))
										 {
											 startnotificationType = startNotificationTypeElement.getValue().trim();
										 }
									 }
								 }
								 
								 ReportElement repaymentPlanRef = payrollPayeeStudentLoansData.getChild("wd:Repayment_Plan_Reference");
								 if(repaymentPlanRef != null)
								 {
									 List<ReportElement> repaymentPlanData = repaymentPlanRef.getChildren("wd:ID");					 
									 for(ReportElement repaymentPlanElement:repaymentPlanData)
									 {
										 repaymentMap = repaymentPlanElement.getAllAttributes();
										 if(repaymentMap.get("wd:type").equals("Payroll_Constant_Text_ID"))
										 {
											 repaymentPlan = repaymentPlanElement.getValue().trim();
										 }
									 }
								 }
								 
								 stopwithoutSL2 = payrollPayeeStudentLoansData.getChild("wd:Stopped_Without_SL2") != null?payrollPayeeStudentLoansData.getChild("wd:Stopped_Without_SL2").getValue().trim():"";	
								 if(stopwithoutSL2.equalsIgnoreCase("0"))
								 {
									 stopwithoutSL2 = "n";								 
								 }
								 else
								 {
									 stopwithoutSL2 = "y";	
								 }
					         }
						 }
			        	
			        		headingFromSourceTenant = "Home_CNUM,Employee_ID,Company,Effective_As_Of,Start_Notification_Type,Repayment_Plan,Stopped_Without_SL2";
				        	if(!customIdNumber.isEmpty())
							{
					        	headerStr = customIdNumber + "," + employeeId + "," + company + "," + effectiveDate + "," + startnotificationType + "," + repaymentPlan + "," + stopwithoutSL2;
					        	
					        	sourceTenantRowMap.put(customIdNumber, headerStr);							        	
					        	sourceTenantColumnList.add(customIdNumber);
					        	
					        	if(finalStr.equals(""))
								{
									 finalStr =  headingFromSourceTenant + "\n" + headerStr;
								}
								else
								{
									 finalStr = finalStr + "\n" + headerStr;
								}
							}				        				        				        	
			         }			        	
			     }
				 System.out.println(finalStr);
				 sourceContent = finalStr.getBytes();						 
				 sourceCount = sourceTenantColumnList.size();
			   }
		}		
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		
	}

	private void createTemplateFromTargetTenantPayrollPayeeStudentLoans(Tenant tenant, InputStream is, SOAPConnection soapConnection, String loadCycle, String ruleName, String client, Long userId) {

		wdCount = 0;
		headingFromTargetTenant = "";
		targetTenantRowMap.clear();
		targetTenantColumnList.clear();
		errorList.clear();
		String xmlReqFile = null;
		try 
		{			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 xmlReqFile = requestfile.getAbsolutePath();
				 is = new FileInputStream(xmlReqFile);
			     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
			     SOAPPart soapPart = soapMessage.getSOAPPart();
			     SOAPEnvelope envelope = soapPart.getEnvelope();
				 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
				 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
				 {
					  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
					  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
				 }
				 soapMessage.saveChanges();
			     ByteArrayOutputStream out = new ByteArrayOutputStream();
			     soapMessage.writeTo(out);
			     String strMsg = new String(out.toByteArray());	
			     
			     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Payroll_GBR";
			     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
				 soapConnection = soapConnectionFactory.createConnection();
				 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
				 out = new ByteArrayOutputStream();
				 soapResponse.writeTo(out);
				 strMsg = new String(out.toByteArray(), "utf-8");

				 ReportElement soapResp = XmlParserManager.parseXml(strMsg);
				 
				 ReportElement pageData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Payroll_Payee_Student_Loans_Response")
							.getChild("wd:Response_Results");
				 
				 String totalNoOfPages = pageData.getChild("wd:Total_Pages").getValue().trim();
				 String totalResults = pageData.getChild("wd:Total_Results").getValue().trim();
				 int totalResult = Integer.parseInt(totalResults);
				 System.out.println("totalNoOfPages-"+totalNoOfPages);
				 System.out.println("totalResult-"+totalResult);						 
				 
				 String employeeId = "";
				 String company = "";						 
				 String customIdNumber = "";
				 String effectiveDate = "";
				 String startnotificationType = "";
				 String repaymentPlan = "";
				 String stopwithoutSL2 = "";
				 
				 String finalStr = "";
				 String headerStr = "";
				 						 
				 Map<String,String> workerMap = null;
				 Map<String,String> companyMap = null;
				 Map<String,String> notificationMap = null;
				 Map<String,String> repaymentMap = null;
				 
				 for (int j = 1; j <=Integer.parseInt(totalNoOfPages); j++) //
				 {
					 String xmlStr = convertFileToString(xmlReqFile);
					 String outputfile = updatePageIndex(xmlStr, j, ruleName);
					 is = new FileInputStream(outputfile);
				     soapMessage = MessageFactory.newInstance().createMessage(null, is);
				     soapPart = soapMessage.getSOAPPart();
				     envelope = soapPart.getEnvelope();
					 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
					 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
					 {
							envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
					 }
					 soapMessage.saveChanges();
			         out = new ByteArrayOutputStream();
			         soapMessage.writeTo(out);
			         strMsg = new String(out.toByteArray());
			        
			         soapConnectionFactory = SOAPConnectionFactory.newInstance();
					 soapConnection = soapConnectionFactory.createConnection();
			         soapResponse = soapConnection.call(soapMessage, sourceUrl);
			         out = new ByteArrayOutputStream();
			         soapResponse.writeTo(out);
			         strMsg = new String(out.toByteArray(), "utf-8");
			        
			         soapResp = XmlParserManager.parseXml(strMsg);
			        
			        ReportElement responseData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Payroll_Payee_Student_Loans_Response")
							.getChild("wd:Response_Data");
			        
			        List<ReportElement> payrollData = responseData.getChildren("wd:Payroll_Payee_Student_Loans");
			        for(ReportElement reportElement : payrollData)
					{
			        	customIdNumber = "";
			        	ReportElement payrollPayeeStudentLoansData = reportElement.getChild("wd:Payroll_Payee_Student_Loans_Data");			        	
			        	if(payrollPayeeStudentLoansData != null)
			        	{
							 ReportElement workerRef = payrollPayeeStudentLoansData.getChild("wd:Worker_Reference");
							 if(workerRef != null)
							 {
								 List<ReportElement> workerData = workerRef.getChildren("wd:ID");					 
								 for(ReportElement workerElement:workerData)
								 {
									 workerMap = workerElement.getAllAttributes();
									 if(workerMap.get("wd:type").equals("Employee_ID"))
									 {
										 employeeId = workerElement.getValue().trim();
									 }
								 }
							 }
							 
							 if(newEmpList.contains(employeeId))
					         {
								 customIdNumber = getHomeCNUMForPayroll(employeeId, ruleName, client, "Previous_IBM_CNUM");
								 ReportElement companyRef = payrollPayeeStudentLoansData.getChild("wd:Company_Reference");
								 if(companyRef != null)
								 {
									 List<ReportElement> companyData = companyRef.getChildren("wd:ID");					 
									 for(ReportElement companyElement:companyData)
									 {
										 companyMap = companyElement.getAllAttributes();
										 if(companyMap.get("wd:type").equals("Organization_Reference_ID"))
										 {
											 company = companyElement.getValue().trim();
										 }
									 }
								 }
								 
								 effectiveDate = payrollPayeeStudentLoansData.getChild("wd:Effective_As_Of") != null?payrollPayeeStudentLoansData.getChild("wd:Effective_As_Of").getValue().trim():"";
								 
								 ReportElement startNotificationTypeRef = payrollPayeeStudentLoansData.getChild("wd:Start_Notification_Type_Reference");
								 if(startNotificationTypeRef != null)
								 {
									 List<ReportElement> startNotificationTypeData = startNotificationTypeRef.getChildren("wd:ID");					 
									 for(ReportElement startNotificationTypeElement:startNotificationTypeData)
									 {
										 notificationMap = startNotificationTypeElement.getAllAttributes();
										 if(notificationMap.get("wd:type").equals("Payroll_Constant_Text_ID"))
										 {
											 startnotificationType = startNotificationTypeElement.getValue().trim();
										 }
									 }
								 }
								 
								 ReportElement repaymentPlanRef = payrollPayeeStudentLoansData.getChild("wd:Repayment_Plan_Reference");
								 if(repaymentPlanRef != null)
								 {
									 List<ReportElement> repaymentPlanData = repaymentPlanRef.getChildren("wd:ID");					 
									 for(ReportElement repaymentPlanElement:repaymentPlanData)
									 {
										 repaymentMap = repaymentPlanElement.getAllAttributes();
										 if(repaymentMap.get("wd:type").equals("Payroll_Constant_Text_ID"))
										 {
											 repaymentPlan = repaymentPlanElement.getValue().trim();
										 }
									 }
								 }
								 
								 stopwithoutSL2 = payrollPayeeStudentLoansData.getChild("wd:Stopped_Without_SL2") != null?payrollPayeeStudentLoansData.getChild("wd:Stopped_Without_SL2").getValue().trim():"";	
								 if(stopwithoutSL2.equalsIgnoreCase("0"))
								 {
									 stopwithoutSL2 = "n";								 
								 }
								 else
								 {
									 stopwithoutSL2 = "y";	
								 }
					         }
						 }
			        	
			        		headingFromTargetTenant = "Home_CNUM,Employee_ID,Company,Effective_As_Of,Start_Notification_Type,Repayment_Plan,Stopped_Without_SL2";
				        	if(!customIdNumber.isEmpty())
							{
					        	headerStr = customIdNumber + "," + employeeId + "," + company + "," + effectiveDate + "," + startnotificationType + "," + repaymentPlan + "," + stopwithoutSL2;
					        	
					        	targetTenantRowMap.put(customIdNumber, headerStr);							        	
					        	targetTenantColumnList.add(customIdNumber);
					        	
					        	if(finalStr.equals(""))
								{
									 finalStr =  headingFromTargetTenant + "\n" + headerStr;
								}
								else
								{
									 finalStr = finalStr + "\n" + headerStr;
								}
							}				        				        				        	
			         }			        	
			     }
				 System.out.println(finalStr);
				 targetContent = finalStr.getBytes();						 
				 wdCount = targetTenantColumnList.size();
			   }
		}		
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		
	}
	
	private void createTemplateFromSourceTenantAdditionalName(Tenant tenant, InputStream is, SOAPConnection soapConnection, String loadCycle, String ruleName, String client, Long userId) {
		
		sourceCount = 0;
		headingFromSourceTenant = "";
		sourceTenantRowMap.clear();
		sourceTenantColumnList.clear();
		errorList.clear();
		String xmlReqFile = null;
		try 
		{			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 xmlReqFile = requestfile.getAbsolutePath();
				 String outputfile = addHireIdList(xmlReqFile, oldEmpList, ruleName, 0, oldEmpList.size(), "Employee_ID");
				 is = new FileInputStream(outputfile);
			     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
			     SOAPPart soapPart = soapMessage.getSOAPPart();
			     SOAPEnvelope envelope = soapPart.getEnvelope();
				 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
				 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
				 {
					  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
					  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
				 }
				 soapMessage.saveChanges();
			     ByteArrayOutputStream out = new ByteArrayOutputStream();
			     soapMessage.writeTo(out);
			     String strMsg = new String(out.toByteArray());	
			     
			     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
			     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
				 soapConnection = soapConnectionFactory.createConnection();
				 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
				 out = new ByteArrayOutputStream();
				 soapResponse.writeTo(out);
				 strMsg = new String(out.toByteArray(), "utf-8");

				 ReportElement soapResp = XmlParserManager.parseXml(strMsg);
				 
				 ReportElement pageData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Results");
				 
				 String totalNoOfPages = pageData.getChild("wd:Total_Pages").getValue().trim();
				 String totalResults = pageData.getChild("wd:Total_Results").getValue().trim();
				 int totalResult = Integer.parseInt(totalResults);
				 System.out.println("totalNoOfPages-"+totalNoOfPages);
				 System.out.println("totalResult-"+totalResult);						 
				 
				 String employeeId = "";
				 String WID = "";
				 String empTerminationDate = "";						 
				 String customIdNumber = "";
				 String firstName = "";
				 String middleName = "";
				 String lastName = "";
				 String countryCode = "";
				 String addnNameType = "";
				 String reportURL = "";
				 
				 String finalStr = "";
				 String headerStr = "";
				 						 
				 Map<String,String> customTypeMap = null;
				 Map<String,String> widMap = null;
				 
				 int startIndex = 0;
				 int endIndex = 0;
				 
				 for (int j = 1; j <=Integer.parseInt(totalNoOfPages); j++) //
				 {
					 if(j == 1)
					 {
						startIndex = 0;
						if(999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = j*999;
						}
					 }
					 else
					 {
						startIndex = endIndex;
						if(j*999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = (j*999);
						}
					 }
					 outputfile = addHireIdList(xmlReqFile, oldEmpList, ruleName, startIndex, endIndex, "Employee_ID");
					 is = new FileInputStream(outputfile);
				     soapMessage = MessageFactory.newInstance().createMessage(null, is);
				     soapPart = soapMessage.getSOAPPart();
				     envelope = soapPart.getEnvelope();
					 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
					 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
					 {
							envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
					 }
					 soapMessage.saveChanges();
			         out = new ByteArrayOutputStream();
			         soapMessage.writeTo(out);
			         strMsg = new String(out.toByteArray());
			        
			         soapConnectionFactory = SOAPConnectionFactory.newInstance();
					 soapConnection = soapConnectionFactory.createConnection();
			         soapResponse = soapConnection.call(soapMessage, sourceUrl);
			         out = new ByteArrayOutputStream();
			         soapResponse.writeTo(out);
			         strMsg = new String(out.toByteArray(), "utf-8");
			        
			         soapResp = XmlParserManager.parseXml(strMsg);
			        
			        ReportElement responseData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Data");
			        
			        List<ReportElement> applicantData = responseData.getChildren("wd:Worker");
			        for(ReportElement reportElement : applicantData)
					{
			        	ReportElement terminationStatusData = reportElement.getChild("wd:Worker_Data")
					 			.getChild("wd:Employment_Data")
					 			.getChild("wd:Worker_Status_Data");
			        	
			        	empTerminationDate = terminationStatusData.getChild("wd:Termination_Date") != null?terminationStatusData.getChild("wd:Termination_Date").getValue().trim():"";					        	
			        	//if(!empTerminationDate.equalsIgnoreCase(""))
			        	{
			        		//Date termDate = convertWorkdayStringToDate(empTerminationDate);
			        		//if((termDate.equals(termFromDate) || termDate.after(termFromDate)) && (termDate.equals(termToDate) || termDate.before(termToDate)))
			        		{
					        	//System.out.println("empTerminationDate--"+ termDate);
				        		ReportElement element1 = reportElement.getChild("wd:Worker_Data");
				        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
				        		System.out.println("employeeId--"+ employeeId);
				        		
				        		ReportElement widRef = reportElement.getChild("wd:Worker_Reference");
								 if(widRef != null)
								 {
									 List<ReportElement> idList = widRef.getChildren("wd:ID");
									 for(ReportElement idElement:idList)
									 {
										 widMap = idElement.getAllAttributes();
										 if(widMap.get("wd:type").equals("WID"))
										 {
											 WID = idElement.getValue().trim();
										 }
									 }
								 }
								 else
								 {
									 WID = "";
								 }
								
								 /*if(tenant.getTenantName().equalsIgnoreCase("ibm6"))
								 {
									 reportURL = "https://" + tenant.getTenantUrl() + "customreport2/" + tenant.getTenantName() + "/ISU_Verify_Global/" + "Additional_Name?Employee!WID=" + WID;
								 }
								 else if(tenant.getTenantName().equalsIgnoreCase("ibm10"))
								 {*/
									 reportURL = "https://" + tenant.getTenantUrl() + "customreport2/" + tenant.getTenantName() + "/ISU_Verify_Global/" + "Additional_Name?Effective_as_of_Date=2021-10-11-07:00&Employee!WID=" + WID;
								 //}
								 
								 JSONArray jArr = createAdditionalNameData(reportURL);
								 if(jArr != null && jArr.length() >0)
								 {
									 firstName = "";
									 middleName = "";
									 lastName = "";
									 countryCode = "";
									 addnNameType = "";
									 for(int i = 0; i<jArr.length(); i++) 
								     {
										JSONObject objects = jArr.getJSONObject(i);
										firstName = objects.isNull("firstName")?"":objects.getString("firstName");
										middleName = objects.isNull("middleName")?"":objects.getString("middleName");
										lastName = objects.isNull("lastName")?"":objects.getString("lastName");
										countryCode = objects.isNull("countryCode")?"":objects.getString("countryCode");
										addnNameType = objects.isNull("addnNameType")?"":objects.getString("addnNameType");
								     }
								 }
								 else
								 {
									 firstName = "";
									 middleName = "";
									 lastName = "";
									 countryCode = "";
									 addnNameType = "";
								 }
								 																											 
								 ReportElement identificationData = reportElement.getChild("wd:Worker_Data")
								 			.getChild("wd:Personal_Data")
								 			.getChild("wd:Identification_Data");
								 
								 if(identificationData != null)
								 {												 
									 List<ReportElement> customIDList = identificationData.getChildren("wd:Custom_ID");
									 if(customIDList != null && customIDList.size() >0)
									 {
										 String expirationDate = "";
										 customIdNumber = "" ;
										 for(ReportElement customElement : customIDList)
										 {
											 ReportElement customIdData = customElement.getChild("wd:Custom_ID_Data");
											 if(customIdData != null)
											 {
												 expirationDate = customIdData.getChild("wd:Expiration_Date") != null?customIdData.getChild("wd:Expiration_Date").getValue().trim():"";
												 ReportElement customTypeRef = customIdData.getChild("wd:ID_Type_Reference");
												 if(customTypeRef != null)
												 {
													 List<ReportElement> customIdTypeData = customTypeRef.getChildren("wd:ID");								 
													 for(ReportElement idTypeElement:customIdTypeData)
													 {
														 customTypeMap = idTypeElement.getAllAttributes();
														 if(customTypeMap.get("wd:type").equals("Custom_ID_Type_ID"))
														 {
															 if(idTypeElement.getValue().trim().equalsIgnoreCase("Global_CNUM") && expirationDate.isEmpty())
															 {
																 customIdNumber = customIdData.getChild("wd:ID") != null?customIdData.getChild("wd:ID").getValue().trim():""; 
															 }
														 }
													 }
												 }												 												 
											 }
										 }
										 if(customIdNumber.isEmpty())
										 {
											 customIdNumber = "" ;
										 }
									 }
									 else
									 {
										 customIdNumber = "" ;
									 }
								 }
								 else
								 {
									 customIdNumber = "" ;											 
								 }								 															 
						}						        
			           }

			        	headingFromSourceTenant = "Home_CNUM,Employee_ID,Additional_First_Name,Additional_Middle_Name,Additional_Last_Name,Country_ISO_Code,Additional_Name_Type";
			        	if(!customIdNumber.isEmpty())
						{
				        	headerStr = customIdNumber + "," + employeeId + "," + firstName + "," + middleName + "," + lastName + "," + countryCode + "," + addnNameType;
				        	
				        	sourceTenantRowMap.put(customIdNumber, headerStr);							        	
				        	sourceTenantColumnList.add(customIdNumber);
				        	
				        	if(finalStr.equals(""))
							{
								 finalStr =  headingFromSourceTenant + "\n" + headerStr;
							}
							else
							{
								 finalStr = finalStr + "\n" + headerStr;
							}
						}	
			     }						 							 
			   }
				 System.out.println(finalStr);
				 sourceContent = finalStr.getBytes();						 
				 sourceCount = sourceTenantColumnList.size();
		    }
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		
	}

	private void createTemplateFromTargetTenantAdditionalName(Tenant tenant, InputStream is, SOAPConnection soapConnection, String loadCycle, String ruleName, String client, Long userId) {
		
		wdCount = 0;
		headingFromTargetTenant = "";
		targetTenantRowMap.clear();
		targetTenantColumnList.clear();
		errorList.clear();
		String xmlReqFile = null;
		try 
		{			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 xmlReqFile = requestfile.getAbsolutePath();
				 String outputfile = addHireIdList(xmlReqFile, newEmpList, ruleName, 0, newEmpList.size(), "Employee_ID");
				 is = new FileInputStream(outputfile);
			     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
			     SOAPPart soapPart = soapMessage.getSOAPPart();
			     SOAPEnvelope envelope = soapPart.getEnvelope();
				 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
				 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
				 {
					  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
					  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
				 }
				 soapMessage.saveChanges();
			     ByteArrayOutputStream out = new ByteArrayOutputStream();
			     soapMessage.writeTo(out);
			     String strMsg = new String(out.toByteArray());	
			     
			     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
			     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
				 soapConnection = soapConnectionFactory.createConnection();
				 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
				 out = new ByteArrayOutputStream();
				 soapResponse.writeTo(out);
				 strMsg = new String(out.toByteArray(), "utf-8");

				 ReportElement soapResp = XmlParserManager.parseXml(strMsg);
				 
				 ReportElement pageData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Results");
				 
				 String totalNoOfPages = pageData.getChild("wd:Total_Pages").getValue().trim();
				 String totalResults = pageData.getChild("wd:Total_Results").getValue().trim();
				 int totalResult = Integer.parseInt(totalResults);
				 System.out.println("totalNoOfPages-"+totalNoOfPages);
				 System.out.println("totalResult-"+totalResult);						 
				 
				 String employeeId = "";
				 String WID = "";
				 String employeeHireDate = "";						 
				 String customIdNumber = "";
				 String firstName = "";
				 String middleName = "";
				 String lastName = "";
				 String countryCode = "";
				 String addnNameType = "";
				 String reportURL = "";
				 
				 String finalStr = "";
				 String headerStr = "";
				 						 
				 Map<String,String> customTypeMap = null;
				 Map<String,String> widMap = null;
				 
				 int startIndex = 0;
				 int endIndex = 0;
				 
				 for (int j = 1; j <=Integer.parseInt(totalNoOfPages); j++) //
				 {
					 if(j == 1)
					 {
						startIndex = 0;
						if(999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = j*999;
						}
					 }
					 else
					 {
						startIndex = endIndex;
						if(j*999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = (j*999);
						}
					 }
					 outputfile = addHireIdList(xmlReqFile, newEmpList, ruleName, startIndex, endIndex, "Employee_ID");
					 is = new FileInputStream(outputfile);
				     soapMessage = MessageFactory.newInstance().createMessage(null, is);
				     soapPart = soapMessage.getSOAPPart();
				     envelope = soapPart.getEnvelope();
					 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
					 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
					 {
							envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
					 }
					 soapMessage.saveChanges();
			         out = new ByteArrayOutputStream();
			         soapMessage.writeTo(out);
			         strMsg = new String(out.toByteArray());
			        
			         soapConnectionFactory = SOAPConnectionFactory.newInstance();
					 soapConnection = soapConnectionFactory.createConnection();
			         soapResponse = soapConnection.call(soapMessage, sourceUrl);
			         out = new ByteArrayOutputStream();
			         soapResponse.writeTo(out);
			         strMsg = new String(out.toByteArray(), "utf-8");
			        
			         soapResp = XmlParserManager.parseXml(strMsg);
			        
			        ReportElement responseData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Data");
			        
			        List<ReportElement> applicantData = responseData.getChildren("wd:Worker");
			        for(ReportElement reportElement : applicantData)
					{
			        	ReportElement hireStatusData = reportElement.getChild("wd:Worker_Data")
					 			.getChild("wd:Employment_Data")
					 			.getChild("wd:Worker_Status_Data");
			        	
			        	employeeHireDate = hireStatusData.getChild("wd:Hire_Date") != null?hireStatusData.getChild("wd:Hire_Date").getValue().trim():"";					        	
			        	if(!employeeHireDate.equalsIgnoreCase(""))
			        	{
			        		Date empHireDate = convertWorkdayStringToDate(employeeHireDate);
			        		//if((termDate.equals(termFromDate) || termDate.after(termFromDate)) && (termDate.equals(termToDate) || termDate.before(termToDate)))
			        		{
					        	System.out.println("empHireDate--"+ empHireDate);
				        		ReportElement element1 = reportElement.getChild("wd:Worker_Data");
				        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
				        		System.out.println("employeeId--"+ employeeId);
				        		
				        		ReportElement widRef = reportElement.getChild("wd:Worker_Reference");
								 if(widRef != null)
								 {
									 List<ReportElement> idList = widRef.getChildren("wd:ID");
									 for(ReportElement idElement:idList)
									 {
										 widMap = idElement.getAllAttributes();
										 if(widMap.get("wd:type").equals("WID"))
										 {
											 WID = idElement.getValue().trim();
										 }
									 }
								 }
								 else
								 {
									 WID = "";
								 }
								
								 /*if(tenant.getTenantName().equalsIgnoreCase("ibm6"))
								 {
									 reportURL = "https://" + tenant.getTenantUrl() + "customreport2/" + tenant.getTenantName() + "/ISU_Verify_Global/" + "Additional_Name?Employee!WID=" + WID;
								 }
								 else if(tenant.getTenantName().equalsIgnoreCase("ibm10"))
								 {*/
									 reportURL = "https://" + tenant.getTenantUrl() + "customreport2/" + tenant.getTenantName() + "/ISU_Verify_Global/" + "Additional_Name?Effective_as_of_Date=2021-11-01-07:00&Employee!WID=" + WID;
								 //}
								 
								 JSONArray jArr = createAdditionalNameData(reportURL);
								 if(jArr != null && jArr.length() >0)
								 {
									 firstName = "";
									 middleName = "";
									 lastName = "";
									 countryCode = "";
									 addnNameType = "";
									 for(int i = 0; i<jArr.length(); i++) 
								     {
										JSONObject objects = jArr.getJSONObject(i);
										firstName = objects.isNull("firstName")?"":objects.getString("firstName");
										middleName = objects.isNull("middleName")?"":objects.getString("middleName");
										lastName = objects.isNull("lastName")?"":objects.getString("lastName");
										countryCode = objects.isNull("countryCode")?"":objects.getString("countryCode");
										addnNameType = objects.isNull("addnNameType")?"":objects.getString("addnNameType");
								     }
								 }
								 else
								 {
									 firstName = "";
									 middleName = "";
									 lastName = "";
									 countryCode = "";
									 addnNameType = "";
								 }
								 																											 
								 ReportElement identificationData = reportElement.getChild("wd:Worker_Data")
								 			.getChild("wd:Personal_Data")
								 			.getChild("wd:Identification_Data");
								 
								 if(identificationData != null)
								 {												 
									 List<ReportElement> customIDList = identificationData.getChildren("wd:Custom_ID");
									 if(customIDList != null && customIDList.size() >0)
									 {
										 customIdNumber = "" ;
										 for(ReportElement customElement : customIDList)
										 {
											 ReportElement customIdData = customElement.getChild("wd:Custom_ID_Data");
											 if(customIdData != null)
											 {
												 ReportElement customTypeRef = customIdData.getChild("wd:ID_Type_Reference");
												 if(customTypeRef != null)
												 {
													 List<ReportElement> customIdTypeData = customTypeRef.getChildren("wd:ID");								 
													 for(ReportElement idTypeElement:customIdTypeData)
													 {
														 customTypeMap = idTypeElement.getAllAttributes();
														 if(customTypeMap.get("wd:type").equals("Custom_ID_Type_ID"))
														 {
															 if(idTypeElement.getValue().trim().equalsIgnoreCase("Previous_IBM_CNUM"))
															 {
																 customIdNumber = customIdData.getChild("wd:ID") != null?customIdData.getChild("wd:ID").getValue().trim():""; 
															 }
														 }
													 }
												 }												 												 
											 }
										 }
										 if(customIdNumber.isEmpty())
										 {
											 customIdNumber = "" ;
										 }
									 }
									 else
									 {
										 customIdNumber = "" ;
									 }
								 }
								 else
								 {
									 customIdNumber = "" ;											 
								 }								 															 
						}						        
			           }

			        	headingFromTargetTenant = "Home_CNUM,Employee_ID,Additional_First_Name,Additional_Middle_Name,Additional_Last_Name,Country_ISO_Code,Additional_Name_Type";
			        	if(!customIdNumber.isEmpty())
						{
				        	headerStr = customIdNumber + "," + employeeId + "," + firstName + "," + middleName + "," + lastName + "," + countryCode + "," + addnNameType;
				        	
				        	targetTenantRowMap.put(customIdNumber, headerStr);							        	
				        	targetTenantColumnList.add(customIdNumber);
				        	
				        	if(finalStr.equals(""))
							{
								 finalStr =  headingFromTargetTenant + "\n" + headerStr;
							}
							else
							{
								 finalStr = finalStr + "\n" + headerStr;
							}
						}	
			     }						 							 
			   }
				 System.out.println(finalStr);
				 targetContent = finalStr.getBytes();						 
				 wdCount = targetTenantColumnList.size();
		    }
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		
	}
	
	private JSONArray createAdditionalNameData(String reportURL) throws JSONException {
		
		JSONArray jArr = new JSONArray();
		DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilder dBuilder;
		XPath xPath = XPathFactory.newInstance().newXPath();
		HttpBasicAuthentication httpBasicAuthentication = new HttpBasicAuthentication();
		String output = httpBasicAuthentication.getWithBasicAuthentication(reportURL, tenant.getTenantUser(), tenant.getTenantUserPassword());
		Reader reader1 = new StringReader(output);
		Document doc;
		try 
		{
			dBuilder = dbFactory.newDocumentBuilder();
			doc = dBuilder.parse(new InputSource(reader1));
			doc.getDocumentElement().normalize();
			String expression = EMPLOYEE_APPLICANT_MAPPING_RESPONSE_EXPRESSION;
			NodeList nodeList = (NodeList) xPath.compile(expression).evaluate(doc, XPathConstants.NODESET);
			for (int i = 0; i < nodeList.getLength(); i++) 
			{
				try 
				{
					jArr = parseNodesForAdditionalName(nodeList);
				} 
				catch (DOMException e)
				{
					e.printStackTrace();
				}
			}			
		} 
		catch (SAXException e) 
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (XPathExpressionException e) 
		{
			e.printStackTrace();
		} 
		catch (ParserConfigurationException e) 
		{
			e.printStackTrace();
		}
		return jArr;
	}

	private JSONArray parseNodesForAdditionalName(NodeList nodeList) throws DOMException, JSONException {

		JSONArray details = new JSONArray();
		for (int i = 0; i < nodeList.getLength(); i++) 
		{
		    Node nNode = nodeList.item(i);
		    if (nNode.getNodeName().equals("wd:Report_Data")) 
		    {
				if (nNode.getNodeType() == Node.ELEMENT_NODE) 
				{
					Element eElement = (Element) nNode;
					if (eElement.hasChildNodes()) 
					{
						NodeList childNodes = eElement.getChildNodes();
						for (int j = 0; j < childNodes.getLength(); j++) 
						{
							Node aChildNode = childNodes.item(j);
							if (aChildNode.getNodeName().equals("wd:Report_Entry")) 
							{
								Element eElementEntry = (Element) aChildNode;
								if (eElement.hasChildNodes()) 
								{
									NodeList childNodesEntry = eElementEntry.getChildNodes();
									for (int k = 0; k < childNodesEntry.getLength(); k++) 
									{										
										Node aChildNodeEntry = childNodesEntry.item(k);
										JSONObject obj = new JSONObject();
										if(aChildNodeEntry.getNodeName().equals("wd:Additional_Names_group"))
										{
											Element eElemEntry = (Element) aChildNodeEntry;
											if (eElementEntry.hasChildNodes()) 
											{												
												NodeList childNodesEnt = eElemEntry.getChildNodes();
												for (int l = 0; l < childNodesEnt.getLength(); l++) 
												{													
													Node nChildNodeEntry = childNodesEnt.item(l);
													if(nChildNodeEntry.getNodeName().equals("wd:firstName"))
													{											
														obj.put("firstName", nChildNodeEntry.getTextContent());											
													}
													else if(nChildNodeEntry.getNodeName().equals("wd:middleName"))
													{
														obj.put("middleName", nChildNodeEntry.getTextContent());	
													}
													else if(nChildNodeEntry.getNodeName().equals("wd:lastName"))
													{
														obj.put("lastName", nChildNodeEntry.getTextContent());	
													}
													else if(nChildNodeEntry.getNodeName().equals("wd:CF_LRV_Country_-_Alpha_3_Code"))
													{
														obj.put("countryCode", nChildNodeEntry.getTextContent());	
													}
													else if(nChildNodeEntry.getNodeName().equals("wd:Additional_Name_Type"))
													{
														obj.put("addnNameType", nChildNodeEntry.getTextContent());	
													}
												}
											}
										}
										details.put(obj);
									}
								}
							}
						}
					}
				}
		    }
		}
		return details;
	}
	
	private void createTemplateFromSourceTenantBenefitAnnualRate(Tenant tenant2, InputStream is, SOAPConnection soapConnection, String loadCycle, String ruleName, String client, Long userId) {
		
		sourceCount = 0;
		headingFromSourceTenant = "";
		sourceTenantRowMap.clear();
		sourceTenantColumnList.clear();
		errorList.clear();
		String xmlReqFile = null;
		try 
		{			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 xmlReqFile = requestfile.getAbsolutePath();
				 /*String outputfile = addBenefitAnnualRateList(xmlReqFile, oldEmpList, ruleName, 0, oldEmpList.size(), "Employee_ID");
				 is = new FileInputStream(outputfile);
			     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
			     SOAPPart soapPart = soapMessage.getSOAPPart();
			     SOAPEnvelope envelope = soapPart.getEnvelope();
				 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
				 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
				 {
					  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
					  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
				 }
				 soapMessage.saveChanges();
			     ByteArrayOutputStream out = new ByteArrayOutputStream();
			     soapMessage.writeTo(out);
			     String strMsg = new String(out.toByteArray());	
			     
			     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Benefits_Administration";
			     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
				 soapConnection = soapConnectionFactory.createConnection();
				 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
				 out = new ByteArrayOutputStream();
				 soapResponse.writeTo(out);
				 strMsg = new String(out.toByteArray(), "utf-8");

				 ReportElement soapResp = XmlParserManager.parseXml(strMsg);
				 
				 ReportElement pageData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Benefit_Annual_Rates_Response")
							.getChild("wd:Response_Results");
				 
				 String totalNoOfPages = pageData.getChild("wd:Total_Pages").getValue().trim();
				 String totalResults = pageData.getChild("wd:Total_Results").getValue().trim();
				 int totalResult = Integer.parseInt(totalResults);
				 System.out.println("totalNoOfPages-"+totalNoOfPages);
				 System.out.println("totalResult-"+totalResult);*/						 
				 
				 String employeeId = "";						 
				 String customIdNumber = "";
				 String effectiveDate = "";
				 String currency = "";
				 String benefitAnnualRate = "";
				 String benefitAnnualRateType = "";
				 String effectiveDateArr = "";
				 String currencyArr = "";
				 String benefitAnnualRateArr = "";
				 String benefitAnnualRateTypeArr = "";
				 
				 String finalStr = "";
				 String headerStr = "";

				 Map<String,String> workerMap = null;
				 Map<String,String> currencyMap = null;
				 Map<String,String> rateTypeMap = null;
				 
				 //int startIndex = 0;
				 //int endIndex = 0;
				 
				 for (int j = 0; j <oldEmpList.size(); j++) //
				 {
					 /*if(j == 1)
					 {
						startIndex = 0;
						if(999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = j*999;
						}
					 }
					 else
					 {
						startIndex = endIndex;
						if(j*999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = (j*999);
						}
					 }*/
					 String outputfile = addBenefitAnnualRateList(xmlReqFile, oldEmpList.get(j), ruleName, "Employee_ID");
					 is = new FileInputStream(outputfile);
					 SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
					 SOAPPart soapPart = soapMessage.getSOAPPart();
					 SOAPEnvelope envelope = soapPart.getEnvelope();
					 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
					 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
					 {
							envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
					 }
					 soapMessage.saveChanges();
					 ByteArrayOutputStream out = new ByteArrayOutputStream();
			         out = new ByteArrayOutputStream();
			         soapMessage.writeTo(out);
			         String strMsg = new String(out.toByteArray());
			        
			         String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Benefits_Administration";
				     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
					 soapConnection = soapConnectionFactory.createConnection();
					 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
					 out = new ByteArrayOutputStream();
					 soapResponse.writeTo(out);
					 strMsg = new String(out.toByteArray(), "utf-8");
			        
					 ReportElement soapResp = XmlParserManager.parseXml(strMsg);
			        
			        ReportElement responseData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Benefit_Annual_Rates_Response")
							.getChild("wd:Response_Data");
			        
			        List<ReportElement> benefitRateData = responseData.getChildren("wd:Benefit_Annual_Rate");
			        if(benefitRateData != null)
			        {
			        	customIdNumber = "";
						effectiveDateArr = "";
						currencyArr = "";
						benefitAnnualRateArr = "";
						benefitAnnualRateTypeArr = "";
				        for(ReportElement reportElement : benefitRateData)
						{			        			        		
				        	ReportElement benefitAnnualRateData = reportElement.getChild("wd:Benefit_Annual_Rate_Data");			        	
				        	if(benefitAnnualRateData != null)
				        	{
								 ReportElement workerRef = benefitAnnualRateData.getChild("wd:Worker_Reference");
								 if(workerRef != null)
								 {
									 List<ReportElement> workerData = workerRef.getChildren("wd:ID");					 
									 for(ReportElement workerElement:workerData)
									 {
										 workerMap = workerElement.getAllAttributes();
										 if(workerMap.get("wd:type").equals("Employee_ID"))
										 {
											 employeeId = workerElement.getValue().trim();
										 }
									 }
								 }
								 
								 if(oldEmpList.contains(employeeId))
						         {
									 customIdNumber = getHomeCNUMForPayroll(employeeId, ruleName, client, "Global_CNUM");
									 effectiveDate = benefitAnnualRateData.getChild("wd:Effective_Date") != null?benefitAnnualRateData.getChild("wd:Effective_Date").getValue().trim():"";
									 if(effectiveDateArr.equals(""))
									 {
										 effectiveDateArr = effectiveDate;
									 }
									 else
									 {
										 effectiveDateArr = effectiveDateArr + "~" + effectiveDate;
									 }
									 benefitAnnualRate = benefitAnnualRateData.getChild("wd:Benefit_Annual_Rate") != null?benefitAnnualRateData.getChild("wd:Benefit_Annual_Rate").getValue().trim():"";
									 if(benefitAnnualRateArr.equals(""))
									 {
										 benefitAnnualRateArr = benefitAnnualRate;
									 }
									 else
									 {
										 benefitAnnualRateArr = benefitAnnualRateArr + "~" + benefitAnnualRate;
									 }
									 
									 ReportElement currencyRef = benefitAnnualRateData.getChild("wd:Currency_Reference");
									 if(currencyRef != null)
									 {
										 List<ReportElement> currencyData = currencyRef.getChildren("wd:ID");					 
										 for(ReportElement currencyElement:currencyData)
										 {
											 currencyMap = currencyElement.getAllAttributes();
											 if(currencyMap.get("wd:type").equals("Currency_ID"))
											 {
												 currency = currencyElement.getValue().trim();
												 if(currencyArr.equals(""))
												 {
													 currencyArr = currency;
												 }
												 else
												 {
													 currencyArr = currencyArr + "~" + currency;
												 }
											 }
										 }
									 }
									 
									 ReportElement rateTypeRef = benefitAnnualRateData.getChild("wd:Benefit_Annual_Rate_Type_Reference");
									 if(rateTypeRef != null)
									 {
										 List<ReportElement> rateTypeData = rateTypeRef.getChildren("wd:ID");					 
										 for(ReportElement rateTypeElement:rateTypeData)
										 {
											 rateTypeMap = rateTypeElement.getAllAttributes();
											 if(rateTypeMap.get("wd:type").equals("Benefit_Annual_Rate_Type_ID"))
											 {
												 benefitAnnualRateType = rateTypeElement.getValue().trim();
												 if(benefitAnnualRateTypeArr.equals(""))
												 {
													 benefitAnnualRateTypeArr = benefitAnnualRateType;
												 }
												 else
												 {
													 benefitAnnualRateTypeArr = benefitAnnualRateTypeArr + "~" + benefitAnnualRateType;
												 }
											 }
										 }
									 }
						         }
					         }
			        	}        			           	
			       }
			        
		        	headingFromSourceTenant = "Home_CNUM,Employee_ID,Effective_Date,Benefit_Annual_Rate,Currency,Benefit_Annual_Rate_Type";
		        	if(!customIdNumber.isEmpty())
					{
			        	headerStr = customIdNumber + "," + employeeId + "," + effectiveDateArr + "," + benefitAnnualRateArr + "," + currencyArr + "," + benefitAnnualRateTypeArr;
			        	
			        	sourceTenantRowMap.put(customIdNumber, headerStr);							        	
			        	sourceTenantColumnList.add(customIdNumber);
			        	
			        	if(finalStr.equals(""))
						{
							 finalStr =  headingFromSourceTenant + "\n" + headerStr;
						}
						else
						{
							 finalStr = finalStr + "\n" + headerStr;
						}
					} 
			   }
				 System.out.println(finalStr);
				 sourceContent = finalStr.getBytes();						 
				 sourceCount = sourceTenantColumnList.size();
		    }
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		
	}

	private void createTemplateFromTargetTenantBenefitAnnualRate(Tenant tenant2, InputStream is, SOAPConnection soapConnection, String loadCycle, String ruleName, String client, Long userId) {

		wdCount = 0;
		headingFromTargetTenant = "";
		targetTenantRowMap.clear();
		targetTenantColumnList.clear();
		errorList.clear();
		String xmlReqFile = null;
		try 
		{			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 xmlReqFile = requestfile.getAbsolutePath();
				 /*String outputfile = addBenefitAnnualRateList(xmlReqFile, newEmpList, ruleName, 0, newEmpList.size(), "Employee_ID");
				 is = new FileInputStream(outputfile);
			     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
			     SOAPPart soapPart = soapMessage.getSOAPPart();
			     SOAPEnvelope envelope = soapPart.getEnvelope();
				 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
				 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
				 {
					  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
					  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
				 }
				 soapMessage.saveChanges();
			     ByteArrayOutputStream out = new ByteArrayOutputStream();
			     soapMessage.writeTo(out);
			     String strMsg = new String(out.toByteArray());	
			     
			     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Benefits_Administration";
			     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
				 soapConnection = soapConnectionFactory.createConnection();
				 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
				 out = new ByteArrayOutputStream();
				 soapResponse.writeTo(out);
				 strMsg = new String(out.toByteArray(), "utf-8");

				 ReportElement soapResp = XmlParserManager.parseXml(strMsg);
				 
				 ReportElement pageData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Benefit_Annual_Rates_Response")
							.getChild("wd:Response_Results");
				 
				 String totalNoOfPages = pageData.getChild("wd:Total_Pages").getValue().trim();
				 String totalResults = pageData.getChild("wd:Total_Results").getValue().trim();
				 int totalResult = Integer.parseInt(totalResults);
				 System.out.println("totalNoOfPages-"+totalNoOfPages);
				 System.out.println("totalResult-"+totalResult);*/						 
				 
				 String employeeId = "";						 
				 String customIdNumber = "";
				 String effectiveDate = "";
				 String currency = "";
				 String benefitAnnualRate = "";
				 String benefitAnnualRateType = "";
				 String effectiveDateArr = "";
				 String currencyArr = "";
				 String benefitAnnualRateArr = "";
				 String benefitAnnualRateTypeArr = "";
				 
				 String finalStr = "";
				 String headerStr = "";

				 Map<String,String> workerMap = null;
				 Map<String,String> currencyMap = null;
				 Map<String,String> rateTypeMap = null;
				 
				 //int startIndex = 0;
				 //int endIndex = 0;
				 
				 for (int j = 0; j <newEmpList.size(); j++) //
				 {
					 /*if(j == 1)
					 {
						startIndex = 0;
						if(999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = j*999;
						}
					 }
					 else
					 {
						startIndex = endIndex;
						if(j*999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = (j*999);
						}
					 }*/
					 String outputfile = addBenefitAnnualRateList(xmlReqFile, newEmpList.get(j), ruleName, "Employee_ID");
					 is = new FileInputStream(outputfile);
					 SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
					 SOAPPart soapPart = soapMessage.getSOAPPart();
					 SOAPEnvelope envelope = soapPart.getEnvelope();
					 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
					 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
					 {
							envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
					 }
					 soapMessage.saveChanges();
					 ByteArrayOutputStream out = new ByteArrayOutputStream();
			         out = new ByteArrayOutputStream();
			         soapMessage.writeTo(out);
			         String strMsg = new String(out.toByteArray());
			        
			         String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Benefits_Administration";
				     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
					 soapConnection = soapConnectionFactory.createConnection();
					 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
					 out = new ByteArrayOutputStream();
					 soapResponse.writeTo(out);
					 strMsg = new String(out.toByteArray(), "utf-8");
			        
					 ReportElement soapResp = XmlParserManager.parseXml(strMsg);
			        
			        ReportElement responseData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Benefit_Annual_Rates_Response")
							.getChild("wd:Response_Data");
			        
			        List<ReportElement> benefitRateData = responseData.getChildren("wd:Benefit_Annual_Rate");
			        if(benefitRateData != null)
			        {
			        	customIdNumber = "";
						effectiveDateArr = "";
						currencyArr = "";
						benefitAnnualRateArr = "";
						benefitAnnualRateTypeArr = "";
				        for(ReportElement reportElement : benefitRateData)
						{			        			        		
				        	ReportElement benefitAnnualRateData = reportElement.getChild("wd:Benefit_Annual_Rate_Data");			        	
				        	if(benefitAnnualRateData != null)
				        	{
									 ReportElement workerRef = benefitAnnualRateData.getChild("wd:Worker_Reference");
									 if(workerRef != null)
									 {
										 List<ReportElement> workerData = workerRef.getChildren("wd:ID");					 
										 for(ReportElement workerElement:workerData)
										 {
											 workerMap = workerElement.getAllAttributes();
											 if(workerMap.get("wd:type").equals("Employee_ID"))
											 {
												 employeeId = workerElement.getValue().trim();
											 }
										 }
									 }
									 
									 if(newEmpList.contains(employeeId))
							         {
										 customIdNumber = getHomeCNUMForPayroll(employeeId, ruleName, client, "Previous_IBM_CNUM");
										 effectiveDate = benefitAnnualRateData.getChild("wd:Effective_Date") != null?benefitAnnualRateData.getChild("wd:Effective_Date").getValue().trim():"";
										 if(effectiveDateArr.equals(""))
										 {
											 effectiveDateArr = effectiveDate;
										 }
										 else
										 {
											 effectiveDateArr = effectiveDateArr + "~" + effectiveDate;
										 }
										 benefitAnnualRate = benefitAnnualRateData.getChild("wd:Benefit_Annual_Rate") != null?benefitAnnualRateData.getChild("wd:Benefit_Annual_Rate").getValue().trim():"";
										 if(benefitAnnualRateArr.equals(""))
										 {
											 benefitAnnualRateArr = benefitAnnualRate;
										 }
										 else
										 {
											 benefitAnnualRateArr = benefitAnnualRateArr + "~" + benefitAnnualRate;
										 }
										 
										 ReportElement currencyRef = benefitAnnualRateData.getChild("wd:Currency_Reference");
										 if(currencyRef != null)
										 {
											 List<ReportElement> currencyData = currencyRef.getChildren("wd:ID");					 
											 for(ReportElement currencyElement:currencyData)
											 {
												 currencyMap = currencyElement.getAllAttributes();
												 if(currencyMap.get("wd:type").equals("Currency_ID"))
												 {
													 currency = currencyElement.getValue().trim();
													 if(currencyArr.equals(""))
													 {
														 currencyArr = currency;
													 }
													 else
													 {
														 currencyArr = currencyArr + "~" + currency;
													 }
												 }
											 }
										 }
										 
										 ReportElement rateTypeRef = benefitAnnualRateData.getChild("wd:Benefit_Annual_Rate_Type_Reference");
										 if(rateTypeRef != null)
										 {
											 List<ReportElement> rateTypeData = rateTypeRef.getChildren("wd:ID");					 
											 for(ReportElement rateTypeElement:rateTypeData)
											 {
												 rateTypeMap = rateTypeElement.getAllAttributes();
												 if(rateTypeMap.get("wd:type").equals("Benefit_Annual_Rate_Type_ID"))
												 {
													 benefitAnnualRateType = rateTypeElement.getValue().trim();
													 if(benefitAnnualRateTypeArr.equals(""))
													 {
														 benefitAnnualRateTypeArr = benefitAnnualRateType;
													 }
													 else
													 {
														 benefitAnnualRateTypeArr = benefitAnnualRateTypeArr + "~" + benefitAnnualRateType;
													 }
												 }
											 }
										 }
							         }
						         }							 
				        	}        			           
			       }
		        	headingFromTargetTenant = "Home_CNUM,Employee_ID,Effective_Date,Benefit_Annual_Rate,Currency,Benefit_Annual_Rate_Type";
		        	if(!customIdNumber.isEmpty())
					{
			        	headerStr = customIdNumber + "," + employeeId + "," + effectiveDateArr + "," + benefitAnnualRateArr + "," +currencyArr + "," + benefitAnnualRateTypeArr;
			        	
			        	targetTenantRowMap.put(customIdNumber, headerStr);							        	
			        	targetTenantColumnList.add(customIdNumber);
			        	
			        	if(finalStr.equals(""))
						{
							 finalStr =  headingFromTargetTenant + "\n" + headerStr;
						}
						else
						{
							 finalStr = finalStr + "\n" + headerStr;
						}
					}	 
			        
			   }
				 System.out.println(finalStr);
				 targetContent = finalStr.getBytes();						 
				 wdCount = targetTenantColumnList.size();
		    }
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		
	}
	
	private String addBenefitAnnualRateList(String xmlfile, String columnVal, String ruleName, String idVal) {
		
		File updatedRequestfile = null;
		try  
		{  
			File file = new File(xmlfile);     
			FileReader fr = new FileReader(file);   
			BufferedReader br = new BufferedReader(fr);   
			StringBuffer sb = new StringBuffer();     
			String line;
			boolean executed = true;
			while((line=br.readLine())!=null)  
			{  
				sb.append(line);  
				sb.append("\n");
				if(line.contains("bsvc:Get_Benefit_Annual_Rates_Request") && executed)
				{
					executed = false;
					sb.append(" <bsvc:Request_Criteria>"); 
					sb.append("\n");
						sb.append("  <bsvc:Worker_Reference bsvc:Descriptor=" + "\"" + idVal + "\"" + ">");
						sb.append("\n");
						sb.append("   <bsvc:ID bsvc:type=" + "\"" + idVal + "\"" + ">" + columnVal + "</bsvc:ID>");
						sb.append("\n");
						sb.append("  </bsvc:Worker_Reference>");
						sb.append("\n");					
					sb.append(" </bsvc:Request_Criteria>");
					sb.append("\n");
				}
			}  
			fr.close();
			br.close();	
			
			updatedRequestfile = File.createTempFile(ruleName + "_" + columnVal , ".xml");
			PrintWriter writer = new PrintWriter(updatedRequestfile);
		    writer.write(sb.toString());
			writer.flush();
			writer.close();
		}  
		catch(IOException e)  
		{  
			e.printStackTrace();  
		}
		return updatedRequestfile.getAbsolutePath(); 
	}
	
	private void createTemplateFromSourceTenantLicense(Tenant tenant, InputStream is, SOAPConnection soapConnection, String loadCycle, String ruleName, String client, Long userId) {
		
		sourceCount = 0;
		headingFromSourceTenant = "";
		sourceTenantRowMap.clear();
		sourceTenantColumnList.clear();
		errorList.clear();
		String xmlReqFile = null;
		try 
		{			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 xmlReqFile = requestfile.getAbsolutePath();
				 String outputfile = addHireIdList(xmlReqFile, oldEmpList, ruleName, 0, oldEmpList.size(), "Employee_ID");
				 is = new FileInputStream(outputfile);
			     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
			     SOAPPart soapPart = soapMessage.getSOAPPart();
			     SOAPEnvelope envelope = soapPart.getEnvelope();
				 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
				 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
				 {
					  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
					  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
				 }
				 soapMessage.saveChanges();
			     ByteArrayOutputStream out = new ByteArrayOutputStream();
			     soapMessage.writeTo(out);
			     String strMsg = new String(out.toByteArray());	
			     
			     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
			     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
				 soapConnection = soapConnectionFactory.createConnection();
				 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
				 out = new ByteArrayOutputStream();
				 soapResponse.writeTo(out);
				 strMsg = new String(out.toByteArray(), "utf-8");

				 ReportElement soapResp = XmlParserManager.parseXml(strMsg);
				 
				 ReportElement pageData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Results");
				 
				 String totalNoOfPages = pageData.getChild("wd:Total_Pages").getValue().trim();
				 String totalResults = pageData.getChild("wd:Total_Results").getValue().trim();
				 int totalResult = Integer.parseInt(totalResults);
				 System.out.println("totalNoOfPages-"+totalNoOfPages);
				 System.out.println("totalResult-"+totalResult);						 
				 
				 String employeeId = "";
				 String empTerminationDate = "";
				 String licenseNumber = "";
				 String licenseType = "";
				 String licenseClass = "";
				 String licenseClassArr = "";
				 String licenseAuthority = "";
				 String licenseAuthorityArr = "";
				 String licenseCountry = "";
				 String licenseCountryArr = "";
				 String licenseCountryRegion = "";
				 String licenseCountryRegionArr = "";
				 String licenseIssuedDate = "";
				 String licenseExpirationDate = "";
				 String licenseVerificationDate = "";
				 String licenseNumberArr = "";
				 String licenseTypeArr = "";
				 String licenseIssuedDateArr = "";
				 String licenseExpirationDateArr = "";
				 String licenseVerificationDateArr = "";
				 String customIdNumber = "";						 
				 String finalStr = "";
				 String headerStr = "";
				 
				 Map<String,String> licenseTypeMap = null;
				 Map<String,String> licenseAuthMap = null;
				 Map<String,String> licenseCountryMap = null;
				 Map<String,String> licenseCountryRegionMap = null;
				 Map<String,String> customTypeMap = null;
				 
				 int startIndex = 0;
				 int endIndex = 0;
				 
				 for (int j = 1; j <=Integer.parseInt(totalNoOfPages); j++) //
				 {
					 if(j == 1)
					 {
						startIndex = 0;
						if(999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = j*999;
						}
					 }
					 else
					 {
						startIndex = endIndex;
						if(j*999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = (j*999);
						}
					 }
					 outputfile = addHireIdList(xmlReqFile, oldEmpList, ruleName, startIndex, endIndex, "Employee_ID");
					 is = new FileInputStream(outputfile);
				     soapMessage = MessageFactory.newInstance().createMessage(null, is);
				     soapPart = soapMessage.getSOAPPart();
				     envelope = soapPart.getEnvelope();
					 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
					 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
					 {
							envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
					 }
					 soapMessage.saveChanges();
			         out = new ByteArrayOutputStream();
			         soapMessage.writeTo(out);
			         strMsg = new String(out.toByteArray());
			        
			         soapConnectionFactory = SOAPConnectionFactory.newInstance();
					 soapConnection = soapConnectionFactory.createConnection();
			         soapResponse = soapConnection.call(soapMessage, sourceUrl);
			         out = new ByteArrayOutputStream();
			         soapResponse.writeTo(out);
			         strMsg = new String(out.toByteArray(), "utf-8");
			        
			         soapResp = XmlParserManager.parseXml(strMsg);
				 
			        
			        ReportElement responseData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Data");
			        
			        List<ReportElement> applicantData = responseData.getChildren("wd:Worker");
			        for(ReportElement reportElement : applicantData)
					{
			        	ReportElement terminationStatusData = reportElement.getChild("wd:Worker_Data")
					 			.getChild("wd:Employment_Data")
					 			.getChild("wd:Worker_Status_Data");
			        	
			        	empTerminationDate = terminationStatusData.getChild("wd:Termination_Date") != null?terminationStatusData.getChild("wd:Termination_Date").getValue().trim():"";					        	
			        	//if(!empTerminationDate.equalsIgnoreCase(""))
			        	{
			        		//Date termDate = convertWorkdayStringToDate(empTerminationDate);
			        		//if((termDate.equals(termFromDate) || termDate.after(termFromDate)) && (termDate.equals(termToDate) || termDate.before(termToDate)))
			        		{
					        	//System.out.println("empTerminationDate--"+ termDate);
				        		ReportElement element1 = reportElement.getChild("wd:Worker_Data");
				        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
				        		System.out.println("employeeId--"+ employeeId);
				        		
				        		
								 
								 ReportElement identificationData = reportElement.getChild("wd:Worker_Data")
								 			.getChild("wd:Personal_Data")
								 			.getChild("wd:Identification_Data");
								 
								 if(identificationData != null)
								 {										 
									 List<ReportElement> licenseIDList = identificationData.getChildren("wd:License_ID");
									 if(licenseIDList != null && licenseIDList.size() >0)
									 {
										 licenseNumberArr = "";
										 licenseTypeArr = "";
										 licenseClassArr = "";
										 licenseAuthorityArr = "";
										 licenseCountryArr = "";
										 licenseCountryRegionArr = "";
										 licenseIssuedDateArr = "";
										 licenseExpirationDateArr = "";
										 licenseVerificationDateArr = "";
										 
										 for(ReportElement licenseElement : licenseIDList)
										 {
											 ReportElement licenseIdData = licenseElement.getChild("wd:License_ID_Data");
											 if(licenseIdData != null)
											 {
												 licenseNumber = licenseIdData.getChild("wd:ID") != null?licenseIdData.getChild("wd:ID").getValue().trim():""; 
												 if(licenseNumberArr.equals(""))
												 {
													 licenseNumberArr = licenseNumber;
												 }
												 else
												 {
													 licenseNumberArr = licenseNumberArr + "~" + licenseNumber;
												 }
												 licenseIssuedDate = licenseIdData.getChild("wd:Issued_Date") != null?licenseIdData.getChild("wd:Issued_Date").getValue().trim():"";
												 if(licenseIssuedDateArr.equals(""))
												 {
													 licenseIssuedDateArr = licenseIssuedDate;
												 }
												 else
												 {
													 if(!licenseIssuedDate.isEmpty())
													 {
														 licenseIssuedDateArr = licenseIssuedDateArr + "~" + licenseIssuedDate;
													 }
												 }
												 licenseExpirationDate = licenseIdData.getChild("wd:Expiration_Date") != null?licenseIdData.getChild("wd:Expiration_Date").getValue().trim():"";
												 if(licenseExpirationDateArr.equals(""))
												 {
													 licenseExpirationDateArr = licenseExpirationDate;
												 }
												 else
												 {
													 if(!licenseExpirationDate.isEmpty())
													 {
														 licenseExpirationDateArr = licenseExpirationDateArr + "~" + licenseExpirationDate;
													 }
												 }
												 licenseVerificationDate = licenseIdData.getChild("wd:Verification_Date") != null?licenseIdData.getChild("wd:Verification_Date").getValue().trim():""; 
												 if(licenseVerificationDateArr.equals(""))
												 {
													 licenseVerificationDateArr = licenseVerificationDate;
												 }
												 else
												 {
													 if(!licenseVerificationDate.isEmpty())
													 {
														 licenseVerificationDateArr = licenseVerificationDateArr + "~" + licenseVerificationDate;
													 }
												 }
												 licenseClass = licenseIdData.getChild("wd:License_Class") != null?licenseIdData.getChild("wd:License_Class").getValue().trim():"";
												 if(licenseClass.contains(","))
												 {
													 licenseClass = licenseClass.replaceAll(",", "|");
												 }
												 if(licenseClassArr.equals(""))
												 {
													 licenseClassArr = licenseClass;
												 }
												 else
												 {
													 if(!licenseClass.isEmpty())
													 {
														 licenseClassArr = licenseClassArr + "~" + licenseClass;
													 }
												 }
												 
												 ReportElement licenseTypeRef = licenseIdData.getChild("wd:ID_Type_Reference");
												 if(licenseTypeRef != null)
												 {
													 List<ReportElement> licenseIdTypeData = licenseTypeRef.getChildren("wd:ID");								 
													 for(ReportElement idTypeElement:licenseIdTypeData)
													 {
														 licenseTypeMap = idTypeElement.getAllAttributes();
														 if(licenseTypeMap.get("wd:type").equals("License_ID_Type_ID"))
														 {
															 licenseType = idTypeElement.getValue().trim();
															 if(licenseTypeArr.equals(""))
															 {
																 licenseTypeArr = licenseType;
															 }
															 else
															 {
																 licenseTypeArr = licenseTypeArr + "~" + licenseType;
															 }
														 }
													 }
												 }
												 
												 ReportElement licenseAuthorityRef = licenseIdData.getChild("wd:Authority_Reference");
												 if(licenseAuthorityRef != null)
												 {
													 List<ReportElement> licenseAuthorityData = licenseAuthorityRef.getChildren("wd:ID");								 
													 for(ReportElement licenseAuthElement:licenseAuthorityData)
													 {
														 licenseAuthMap = licenseAuthElement.getAllAttributes();
														 if(licenseAuthMap.get("wd:type").equals("Authority_ID"))
														 {
															 licenseAuthority = licenseAuthElement.getValue().trim();
															 if(licenseAuthorityArr.equals(""))
															 {
																 licenseAuthorityArr = licenseAuthority;
															 }
															 else
															 {
																 if(!licenseAuthority.isEmpty())
																 {
																	 licenseAuthorityArr = licenseAuthorityArr + "~" + licenseAuthority;
																 }
															 }
														 }
													 }
												 }												 
												 
												 ReportElement licenseCountryReference = licenseIdData.getChild("wd:Country_Reference");
												 if(licenseCountryReference != null)
												 {
													 List<ReportElement> licenseCountryData = licenseCountryReference.getChildren("wd:ID");								 
													 for(ReportElement countryElement:licenseCountryData)
													 {
														 licenseCountryMap = countryElement.getAllAttributes();
														 if(licenseCountryMap.get("wd:type").equals("ISO_3166-1_Alpha-3_Code"))
														 {
															 licenseCountry = countryElement.getValue().trim();
															 if(licenseCountryArr.equals(""))
															 {
																 licenseCountryArr = licenseCountry;
															 }
															 else
															 {
																 licenseCountryArr = licenseCountryArr + "~" + licenseCountry;
															 }
														 }
													 }
												 }
												 
												 ReportElement licenseCountryRegionReference = licenseIdData.getChild("wd:Country_Region_Reference");
												 if(licenseCountryRegionReference != null)
												 {
													 List<ReportElement> licenseCountryRegionData = licenseCountryRegionReference.getChildren("wd:ID");								 
													 for(ReportElement countryRegionElement:licenseCountryRegionData)
													 {
														 licenseCountryRegionMap = countryRegionElement.getAllAttributes();
														 if(licenseCountryRegionMap.get("wd:type").equals("Country_Region_ID"))
														 {
															 licenseCountryRegion = countryRegionElement.getValue().trim();
															 if(licenseCountryRegionArr.equals(""))
															 {
																 licenseCountryRegionArr = licenseCountryRegion;
															 }
															 else
															 {
																 licenseCountryRegionArr = licenseCountryRegionArr + "~" + licenseCountryRegion;
															 }
														 }
													 }
												 }
											 }
										 }
									 }
									 else
									 {
										 licenseNumberArr = "";
										 licenseTypeArr = "";
										 licenseClassArr = "";
										 licenseAuthorityArr = "";
										 licenseCountryArr = "";
										 licenseCountryRegionArr = "";
										 licenseIssuedDateArr = "";
										 licenseExpirationDateArr = "";
										 licenseVerificationDateArr = "";
									 }
									 
									 List<ReportElement> customIDList = identificationData.getChildren("wd:Custom_ID");
									 if(customIDList != null && customIDList.size() >0)
									 {
										 String expirationDate = "";
										 customIdNumber = "" ;
										 for(ReportElement customElement : customIDList)
										 {
											 ReportElement customIdData = customElement.getChild("wd:Custom_ID_Data");
											 if(customIdData != null)
											 {
												 expirationDate = customIdData.getChild("wd:Expiration_Date") != null?customIdData.getChild("wd:Expiration_Date").getValue().trim():"";
												 ReportElement customTypeRef = customIdData.getChild("wd:ID_Type_Reference");
												 if(customTypeRef != null)
												 {
													 List<ReportElement> customIdTypeData = customTypeRef.getChildren("wd:ID");								 
													 for(ReportElement idTypeElement:customIdTypeData)
													 {
														 customTypeMap = idTypeElement.getAllAttributes();
														 if(customTypeMap.get("wd:type").equals("Custom_ID_Type_ID"))
														 {
															 if(idTypeElement.getValue().trim().equalsIgnoreCase("Global_CNUM") && expirationDate.isEmpty())
															 {
																 customIdNumber = customIdData.getChild("wd:ID") != null?customIdData.getChild("wd:ID").getValue().trim():""; 
															 }
														 }
													 }
												 }
											 }
										 }
										 if(customIdNumber.isEmpty())
										 {
											 customIdNumber = "" ;
										 }
									 }
									 else
									 {
										 customIdNumber = "" ;
									 }
								 }
								 else
								 {
									 customIdNumber = "" ;
									 licenseNumberArr = "";
									 licenseTypeArr = "";
									 licenseClassArr = "";
									 licenseAuthorityArr = "";
									 licenseCountryArr = "";
									 licenseCountryRegionArr = "";
									 licenseIssuedDateArr = "";
									 licenseExpirationDateArr = "";
									 licenseVerificationDateArr = "";
								 }										 							        	
						}						        
				        
			        }
			        	
			     headingFromSourceTenant = "Home_CNUM,Employee_ID,License_Number,License_type,License_Class,License_Authority,License_Country,License_Country_Region,License_Issued_Date,"
			    		 + "License_Expiration_Date,License_Verification_Date";
		        			
		        	if(!customIdNumber.isEmpty())
					{
			        	headerStr = customIdNumber + "," + employeeId + "," + licenseNumberArr + "," + licenseTypeArr + "," + licenseClassArr + "," + licenseAuthorityArr + "," + 
					                licenseCountryArr + "," + licenseCountryRegionArr + "," + licenseIssuedDateArr + "," + licenseExpirationDateArr + "," + licenseVerificationDateArr;
			        	
			        	sourceTenantRowMap.put(customIdNumber, headerStr);							        	
			        	sourceTenantColumnList.add(customIdNumber);
			        	
			        	if(finalStr.equals(""))
						{
							 finalStr =  headingFromSourceTenant + "\n" + headerStr;
						}
						else
						{
							 finalStr = finalStr + "\n" + headerStr;
						}
					 }
			     }						 							 
			   }
				 
				 System.out.println(finalStr);
				 sourceContent = finalStr.getBytes();
				 sourceCount = sourceTenantColumnList.size();
		    }
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		
	}

	private void createTemplateFromTargetTenantLicense(Tenant tenant, InputStream is, SOAPConnection soapConnection, String loadCycle, String ruleName, String client, Long userId) {
		
		wdCount = 0;
		headingFromTargetTenant = "";
		targetTenantRowMap.clear();
		targetTenantColumnList.clear();
		String xmlReqFile = null;
		try 
		{			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 xmlReqFile = requestfile.getAbsolutePath();
				 String outputfile = addHireIdList(xmlReqFile, newEmpList, ruleName, 0, newEmpList.size(), "Employee_ID");
				 is = new FileInputStream(outputfile);
			     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
			     SOAPPart soapPart = soapMessage.getSOAPPart();
			     SOAPEnvelope envelope = soapPart.getEnvelope();
				 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
				 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
				 {
					  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
					  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
				 }
				 soapMessage.saveChanges();
			     ByteArrayOutputStream out = new ByteArrayOutputStream();
			     soapMessage.writeTo(out);
			     String strMsg = new String(out.toByteArray());	
			     
			     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
			     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
				 soapConnection = soapConnectionFactory.createConnection();
				 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
				 out = new ByteArrayOutputStream();
				 soapResponse.writeTo(out);
				 strMsg = new String(out.toByteArray(), "utf-8");

				 ReportElement soapResp = XmlParserManager.parseXml(strMsg);
				 
				 ReportElement pageData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Results");
				 
				 String totalNoOfPages = pageData.getChild("wd:Total_Pages").getValue().trim();
				 String totalResults = pageData.getChild("wd:Total_Results").getValue().trim();
				 int totalResult = Integer.parseInt(totalResults);
				 System.out.println("totalNoOfPages-"+totalNoOfPages);
				 System.out.println("totalResult-"+totalResult);				 
				 
				 String employeeId = "";
				 String employeeHireDate = "";				 
				 String licenseNumber = "";
				 String licenseType = "";
				 String licenseClass = "";
				 String licenseClassArr = "";
				 String licenseAuthority = "";
				 String licenseAuthorityArr = "";
				 String licenseCountry = "";
				 String licenseCountryArr = "";
				 String licenseCountryRegion = "";
				 String licenseCountryRegionArr = "";
				 String licenseIssuedDate = "";
				 String licenseExpirationDate = "";
				 String licenseVerificationDate = "";
				 String licenseNumberArr = "";
				 String licenseTypeArr = "";
				 String licenseIssuedDateArr = "";
				 String licenseExpirationDateArr = "";
				 String licenseVerificationDateArr = "";
				 String customIdNumber = "";
				 String finalStr = "";
				 String headerStr = "";
				 
				 Map<String,String> licenseTypeMap = null;
				 Map<String,String> licenseAuthMap = null;
				 Map<String,String> licenseCountryMap = null;
				 Map<String,String> licenseCountryRegionMap = null;
				 Map<String,String> customTypeMap = null;
				 
				 int startIndex = 0;
				 int endIndex = 0;
				 
				 for (int j = 1; j <=Integer.parseInt(totalNoOfPages); j++) //
				 {
					 if(j == 1)
					 {
						startIndex = 0;
						if(999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = j*999;
						}
					 }
					 else
					 {
						startIndex = endIndex;
						if(j*999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = (j*999);
						}
					 }
					 outputfile = addHireIdList(xmlReqFile, newEmpList, ruleName, startIndex, endIndex, "Employee_ID");
					 is = new FileInputStream(outputfile);
				     soapMessage = MessageFactory.newInstance().createMessage(null, is);
				     soapPart = soapMessage.getSOAPPart();
				     envelope = soapPart.getEnvelope();
					 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
					 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
					 {
							envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
					 }
					 soapMessage.saveChanges();
			         out = new ByteArrayOutputStream();
			         soapMessage.writeTo(out);
			         strMsg = new String(out.toByteArray());
			        
			         soapConnectionFactory = SOAPConnectionFactory.newInstance();
					 soapConnection = soapConnectionFactory.createConnection();
			         soapResponse = soapConnection.call(soapMessage, sourceUrl);
			         out = new ByteArrayOutputStream();
			         soapResponse.writeTo(out);
			         strMsg = new String(out.toByteArray(), "utf-8");
			        
			         soapResp = XmlParserManager.parseXml(strMsg);
			        
			        ReportElement responseData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Data");
			        
			        List<ReportElement> applicantData = responseData.getChildren("wd:Worker");
			        for(ReportElement reportElement : applicantData)
					{
			        	ReportElement hireStatusData = reportElement.getChild("wd:Worker_Data")
					 			.getChild("wd:Employment_Data")
					 			.getChild("wd:Worker_Status_Data");
			        	
			        	employeeHireDate = hireStatusData.getChild("wd:Hire_Date") != null?hireStatusData.getChild("wd:Hire_Date").getValue().trim():"";					        	
			        	if(!employeeHireDate.equalsIgnoreCase(""))
			        	{
			        		Date empHireDate = convertWorkdayStringToDate(employeeHireDate);
			        		//if((empHireDate.equals(hireFromDate) || empHireDate.after(hireFromDate)) && (empHireDate.equals(hireToDate) || empHireDate.before(hireToDate)))
			        		{
					        	System.out.println("empHireDate--"+ empHireDate);
				        		ReportElement element1 = reportElement.getChild("wd:Worker_Data");
				        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
				        		System.out.println("employeeId--"+ employeeId);
				        										 
								 ReportElement identificationData = reportElement.getChild("wd:Worker_Data")
								 			.getChild("wd:Personal_Data")
								 			.getChild("wd:Identification_Data");
								 
								 if(identificationData != null)
								 {										 
									 List<ReportElement> licenseIDList = identificationData.getChildren("wd:License_ID");
									 if(licenseIDList != null && licenseIDList.size() >0)
									 {
										 licenseNumberArr = "";
										 licenseTypeArr = "";
										 licenseIssuedDateArr = "";
										 licenseExpirationDateArr = "";
										 licenseVerificationDateArr = "";
										 licenseClassArr = "";
										 licenseAuthorityArr = "";
										 licenseCountryArr = "";
										 licenseCountryRegionArr = "";
										 for(ReportElement licenseElement : licenseIDList)
										 {
											 ReportElement licenseIdData = licenseElement.getChild("wd:License_ID_Data");
											 if(licenseIdData != null)
											 {
												 licenseNumber = licenseIdData.getChild("wd:ID") != null?licenseIdData.getChild("wd:ID").getValue().trim():""; 
												 if(licenseNumberArr.equals(""))
												 {
													 licenseNumberArr = licenseNumber;
												 }
												 else
												 {
													 licenseNumberArr = licenseNumberArr + "~" + licenseNumber;
												 }
												 licenseIssuedDate = licenseIdData.getChild("wd:Issued_Date") != null?licenseIdData.getChild("wd:Issued_Date").getValue().trim():"";
												 if(licenseIssuedDateArr.equals(""))
												 {
													 licenseIssuedDateArr = licenseIssuedDate;
												 }
												 else
												 {
													 if(!licenseIssuedDate.isEmpty())
													 {
														 licenseIssuedDateArr = licenseIssuedDateArr + "~" + licenseIssuedDate;
													 }
												 }
												 licenseExpirationDate = licenseIdData.getChild("wd:Expiration_Date") != null?licenseIdData.getChild("wd:Expiration_Date").getValue().trim():"";
												 if(licenseExpirationDateArr.equals(""))
												 {
													 licenseExpirationDateArr = licenseExpirationDate;
												 }
												 else
												 {
													 if(!licenseExpirationDate.isEmpty())
													 {
														 licenseExpirationDateArr = licenseExpirationDateArr + "~" + licenseExpirationDate;
													 }
												 }
												 licenseVerificationDate = licenseIdData.getChild("wd:Verification_Date") != null?licenseIdData.getChild("wd:Verification_Date").getValue().trim():""; 
												 if(licenseVerificationDateArr.equals(""))
												 {
													 licenseVerificationDateArr = licenseVerificationDate;
												 }
												 else
												 {
													 if(!licenseVerificationDate.isEmpty())
													 {
														 licenseVerificationDateArr = licenseVerificationDateArr + "~" + licenseVerificationDate;
													 }
												 }
												 
												 licenseClass = licenseIdData.getChild("wd:License_Class") != null?licenseIdData.getChild("wd:License_Class").getValue().trim():"";
												 if(licenseClass.contains(","))
												 {
													 licenseClass = licenseClass.replaceAll(",", "|");
												 }
												 if(licenseClassArr.equals(""))
												 {
													 licenseClassArr = licenseClass;
												 }
												 else
												 {
													 if(!licenseClass.isEmpty())
													 {
														 licenseClassArr = licenseClassArr + "~" + licenseClass;
													 }
												 }
												 
												 ReportElement licenseTypeRef = licenseIdData.getChild("wd:ID_Type_Reference");
												 if(licenseTypeRef != null)
												 {
													 List<ReportElement> licenseIdTypeData = licenseTypeRef.getChildren("wd:ID");								 
													 for(ReportElement idTypeElement:licenseIdTypeData)
													 {
														 licenseTypeMap = idTypeElement.getAllAttributes();
														 if(licenseTypeMap.get("wd:type").equals("License_ID_Type_ID"))
														 {
															 licenseType = idTypeElement.getValue().trim();
															 if(licenseTypeArr.equals(""))
															 {
																 licenseTypeArr = licenseType;
															 }
															 else
															 {
																 licenseTypeArr = licenseTypeArr + "~" + licenseType;
															 }
														 }
													 }
												 }
												 
												 ReportElement licenseAuthorityRef = licenseIdData.getChild("wd:Authority_Reference");
												 if(licenseAuthorityRef != null)
												 {
													 List<ReportElement> licenseAuthorityData = licenseAuthorityRef.getChildren("wd:ID");								 
													 for(ReportElement licenseAuthElement:licenseAuthorityData)
													 {
														 licenseAuthMap = licenseAuthElement.getAllAttributes();
														 if(licenseAuthMap.get("wd:type").equals("Authority_ID"))
														 {
															 licenseAuthority = licenseAuthElement.getValue().trim();
															 if(licenseAuthorityArr.equals(""))
															 {
																 licenseAuthorityArr = licenseAuthority;
															 }
															 else
															 {
																 if(!licenseAuthority.isEmpty())
																 {
																	 licenseAuthorityArr = licenseAuthorityArr + "~" + licenseAuthority;
																 }
															 }
														 }
													 }
												 }												 
												 
												 ReportElement licenseCountryReference = licenseIdData.getChild("wd:Country_Reference");
												 if(licenseCountryReference != null)
												 {
													 List<ReportElement> licenseCountryData = licenseCountryReference.getChildren("wd:ID");								 
													 for(ReportElement countryElement:licenseCountryData)
													 {
														 licenseCountryMap = countryElement.getAllAttributes();
														 if(licenseCountryMap.get("wd:type").equals("ISO_3166-1_Alpha-3_Code"))
														 {
															 licenseCountry = countryElement.getValue().trim();
															 if(licenseCountryArr.equals(""))
															 {
																 licenseCountryArr = licenseCountry;
															 }
															 else
															 {
																 licenseCountryArr = licenseCountryArr + "~" + licenseCountry;
															 }
														 }
													 }
												 }
												 
												 ReportElement licenseCountryRegionReference = licenseIdData.getChild("wd:Country_Region_Reference");
												 if(licenseCountryRegionReference != null)
												 {
													 List<ReportElement> licenseCountryRegionData = licenseCountryRegionReference.getChildren("wd:ID");								 
													 for(ReportElement countryRegionElement:licenseCountryRegionData)
													 {
														 licenseCountryRegionMap = countryRegionElement.getAllAttributes();
														 if(licenseCountryRegionMap.get("wd:type").equals("Country_Region_ID"))
														 {
															 licenseCountryRegion = countryRegionElement.getValue().trim();
															 if(licenseCountryRegionArr.equals(""))
															 {
																 licenseCountryRegionArr = licenseCountryRegion;
															 }
															 else
															 {
																 licenseCountryRegionArr = licenseCountryRegionArr + "~" + licenseCountryRegion;
															 }	
														 }
													 }
												 }												 										 
											 }
										 }
									 }
									 else
									 {
										 licenseNumberArr = "";
										 licenseTypeArr = "";
										 licenseIssuedDateArr = "";
										 licenseExpirationDateArr = "";
										 licenseVerificationDateArr = "";
										 licenseClassArr = "";
										 licenseAuthorityArr = "";
										 licenseCountryArr = "";
										 licenseCountryRegionArr = "";
									 }
									 
									 List<ReportElement> customIDList = identificationData.getChildren("wd:Custom_ID");
									 if(customIDList != null && customIDList.size() >0)
									 {
										 customIdNumber = "" ;
										 for(ReportElement customElement : customIDList)
										 {
											 ReportElement customIdData = customElement.getChild("wd:Custom_ID_Data");
											 if(customIdData != null)
											 {
												 ReportElement customTypeRef = customIdData.getChild("wd:ID_Type_Reference");
												 if(customTypeRef != null)
												 {
													 List<ReportElement> customIdTypeData = customTypeRef.getChildren("wd:ID");								 
													 for(ReportElement idTypeElement:customIdTypeData)
													 {
														 customTypeMap = idTypeElement.getAllAttributes();
														 if(customTypeMap.get("wd:type").equals("Custom_ID_Type_ID"))
														 {
															 if(idTypeElement.getValue().trim().equalsIgnoreCase("Previous_IBM_CNUM"))
															 {
																 customIdNumber = customIdData.getChild("wd:ID") != null?customIdData.getChild("wd:ID").getValue().trim():"";
															 }
														 }
													 }
												 }
											 }
										 }
										 if(customIdNumber.isEmpty())
										 {
											 customIdNumber = "" ;
										 }
									 }
									 else
									 {
										 customIdNumber = "" ;
									 }
								 }
								 else
								 {
									 customIdNumber = "" ;
									 licenseNumberArr = "";
									 licenseTypeArr = "";
									 licenseIssuedDateArr = "";
									 licenseExpirationDateArr = "";
									 licenseVerificationDateArr = "";
									 licenseClassArr = "";
									 licenseAuthorityArr = "";
									 licenseCountryArr = "";
									 licenseCountryRegionArr = "";
								 }								 								 													        	
						}				        				        
			          }
			        	headingFromTargetTenant = "Home_CNUM,Employee_ID,License_Number,License_type,"
			        			+ "License_Class,License_Authority,License_Country,License_Country_Region,License_Issued_Date,License_Expiration_Date,License_Verification_Date,";
			        			

			        	if(!customIdNumber.isEmpty())
						{
				        	headerStr = customIdNumber + "," + employeeId + "," +  licenseNumberArr + "," + licenseTypeArr + "," + licenseClassArr + "," + licenseAuthorityArr + "," + 
						                licenseCountryArr + "," + licenseCountryRegionArr + "," + licenseIssuedDateArr + "," + licenseExpirationDateArr + "," + licenseVerificationDateArr;
				        	
				        	
				        	 targetTenantRowMap.put(customIdNumber, headerStr);
				        	 targetTenantColumnList.add(customIdNumber);
				        	 
							 if(finalStr.equals(""))
							 {
								 finalStr =  headingFromTargetTenant + "\n" + headerStr;
							 }
							 else
							 {
								 finalStr = finalStr + "\n" + headerStr;
							 }
						}
				   }						 							 
			     }
				 System.out.println(finalStr);
				 targetContent = finalStr.getBytes();
				 wdCount = targetTenantColumnList.size();
		   }
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		
	}
	
	private void createTemplateFromSourceTenantPassportVisa(Tenant tenant2, InputStream is, SOAPConnection soapConnection, String loadCycle, String ruleName, String client, Long userId) {

		sourceCount = 0;
		headingFromSourceTenant = "";
		sourceTenantRowMap.clear();
		sourceTenantColumnList.clear();
		errorList.clear();
		String xmlReqFile = null;
		try 
		{			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 xmlReqFile = requestfile.getAbsolutePath();
				 String outputfile = addHireIdList(xmlReqFile, oldEmpList, ruleName, 0, oldEmpList.size(), "Employee_ID");
				 is = new FileInputStream(outputfile);
			     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
			     SOAPPart soapPart = soapMessage.getSOAPPart();
			     SOAPEnvelope envelope = soapPart.getEnvelope();
				 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
				 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
				 {
					  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
					  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
				 }
				 soapMessage.saveChanges();
			     ByteArrayOutputStream out = new ByteArrayOutputStream();
			     soapMessage.writeTo(out);
			     String strMsg = new String(out.toByteArray());	
			     
			     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
			     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
				 soapConnection = soapConnectionFactory.createConnection();
				 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
				 out = new ByteArrayOutputStream();
				 soapResponse.writeTo(out);
				 strMsg = new String(out.toByteArray(), "utf-8");

				 ReportElement soapResp = XmlParserManager.parseXml(strMsg);
				 
				 ReportElement pageData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Results");
				 
				 String totalNoOfPages = pageData.getChild("wd:Total_Pages").getValue().trim();
				 String totalResults = pageData.getChild("wd:Total_Results").getValue().trim();
				 int totalResult = Integer.parseInt(totalResults);
				 System.out.println("totalNoOfPages-"+totalNoOfPages);
				 System.out.println("totalResult-"+totalResult);						 
				 
				 String employeeId = "";
				 String empTerminationDate = "";
				 String passportNumber = "";
				 String passportType = "";
				 String passportCountry = "";
				 String passportIssuedDate = "";
				 String passportExpirationDate = "";
				 String passportVerificationDate = "";
				 String passportNumberArr = "";
				 String passportTypeArr = "";
				 String passportCountryArr = "";
				 String passportIssuedDateArr = "";
				 String passportExpirationDateArr = "";
				 String passportVerificationDateArr = "";
				 String visaId = "";
				 String visaType = "";
				 String visaCountry = "";
				 String visaIssuedDate = "";
				 String visaExpirationDate = "";
				 String visaVerificationDate = "";
				 String visaVerifiedBy = "";
				 String visaIdArr = "";
				 String visaTypeArr = "";
				 String visaCountryArr = "";
				 String visaIssuedDateArr = "";
				 String visaExpirationDateArr = "";
				 String visaVerificationDateArr = "";
				 String visaVerifiedByArr = "";
				 String customIdNumber = "";						 
				 String finalStr = "";
				 String headerStr = "";
				 
				 Map<String,String> passportTypeMap = null;
				 Map<String,String> passportCountryMap = null;
				 Map<String,String> visaIdTypeMap = null;
				 Map<String,String> visaCountryMap = null;
				 Map<String,String> visaVerifiedByMap = null;
				 Map<String,String> customTypeMap = null;
				 
				 int startIndex = 0;
				 int endIndex = 0;
				 
				 for (int j = 1; j <=Integer.parseInt(totalNoOfPages); j++) //
				 {
					 if(j == 1)
					 {
						startIndex = 0;
						if(999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = j*999;
						}
					 }
					 else
					 {
						startIndex = endIndex;
						if(j*999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = (j*999);
						}
					 }
					 outputfile = addHireIdList(xmlReqFile, oldEmpList, ruleName, startIndex, endIndex, "Employee_ID");
					 is = new FileInputStream(outputfile);
				     soapMessage = MessageFactory.newInstance().createMessage(null, is);
				     soapPart = soapMessage.getSOAPPart();
				     envelope = soapPart.getEnvelope();
					 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
					 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
					 {
							envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
					 }
					 soapMessage.saveChanges();
			         out = new ByteArrayOutputStream();
			         soapMessage.writeTo(out);
			         strMsg = new String(out.toByteArray());
			        
			         soapConnectionFactory = SOAPConnectionFactory.newInstance();
					 soapConnection = soapConnectionFactory.createConnection();
			         soapResponse = soapConnection.call(soapMessage, sourceUrl);
			         out = new ByteArrayOutputStream();
			         soapResponse.writeTo(out);
			         strMsg = new String(out.toByteArray(), "utf-8");
			        
			         soapResp = XmlParserManager.parseXml(strMsg);
				 
			        
			        ReportElement responseData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Data");
			        
			        List<ReportElement> applicantData = responseData.getChildren("wd:Worker");
			        for(ReportElement reportElement : applicantData)
					{
			        	ReportElement terminationStatusData = reportElement.getChild("wd:Worker_Data")
					 			.getChild("wd:Employment_Data")
					 			.getChild("wd:Worker_Status_Data");
			        	
			        	empTerminationDate = terminationStatusData.getChild("wd:Termination_Date") != null?terminationStatusData.getChild("wd:Termination_Date").getValue().trim():"";					        	
			        	//if(!empTerminationDate.equalsIgnoreCase(""))
			        	{
			        		Date termDate = convertWorkdayStringToDate(empTerminationDate);
			        		//if((termDate.equals(termFromDate) || termDate.after(termFromDate)) && (termDate.equals(termToDate) || termDate.before(termToDate)))
			        		{
					        	System.out.println("empTerminationDate--"+ termDate);
				        		ReportElement element1 = reportElement.getChild("wd:Worker_Data");
				        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
				        		System.out.println("employeeId--"+ employeeId);
				        										 
								 ReportElement identificationData = reportElement.getChild("wd:Worker_Data")
								 			.getChild("wd:Personal_Data")
								 			.getChild("wd:Identification_Data");
								 
								 if(identificationData != null)
								 {										 									 
									 List<ReportElement> passportIDList = identificationData.getChildren("wd:Passport_ID");
									 if(passportIDList != null && passportIDList.size() >0)
									 {
										 passportNumberArr = "";
										 passportTypeArr = "";
										 passportCountryArr = "";
										 passportIssuedDateArr = "";
										 passportExpirationDateArr = "";
										 passportVerificationDateArr = "";
										 
										 for(ReportElement passportElement : passportIDList)
										 {
											 ReportElement passportIdData = passportElement.getChild("wd:Passport_ID_Data");
											 if(passportIdData != null)
											 {
												 passportNumber = passportIdData.getChild("wd:ID") != null?passportIdData.getChild("wd:ID").getValue().trim():""; 
												 if(passportNumberArr.equals(""))
												 {
													 passportNumberArr = passportNumber;
												 }
												 else
												 {
													 passportNumberArr = passportNumberArr + "~" + passportNumber;
												 }
												 passportIssuedDate = passportIdData.getChild("wd:Issued_Date") != null?passportIdData.getChild("wd:Issued_Date").getValue().trim():"";
												 if(passportIssuedDateArr.equals(""))
												 {
													 passportIssuedDateArr = passportIssuedDate;
												 }
												 else
												 {
													 if(!passportIssuedDate.isEmpty())
													 {
														 passportIssuedDateArr = passportIssuedDateArr + "~" + passportIssuedDate;
													 }
												 }
												 passportExpirationDate = passportIdData.getChild("wd:Expiration_Date") != null?passportIdData.getChild("wd:Expiration_Date").getValue().trim():"";
												 if(passportExpirationDateArr.equals(""))
												 {
													 passportExpirationDateArr = passportExpirationDate;
												 }
												 else
												 {
													 if(!passportExpirationDate.isEmpty())
													 {
														 passportExpirationDateArr = passportExpirationDateArr + "~" + passportExpirationDate;
													 }
												 }
												 passportVerificationDate = passportIdData.getChild("wd:Verification_Date") != null?passportIdData.getChild("wd:Verification_Date").getValue().trim():""; 
												 if(passportVerificationDateArr.equals(""))
												 {
													 passportVerificationDateArr = passportVerificationDate;
												 }
												 else
												 {
													 if(!passportVerificationDate.isEmpty())
													 {
														 passportVerificationDateArr = passportVerificationDateArr + "~" + passportVerificationDate;
													 }
												 }
												 
												 ReportElement passportTypeRef = passportIdData.getChild("wd:ID_Type_Reference");
												 if(passportTypeRef != null)
												 {
													 List<ReportElement> passportIdTypeData = passportTypeRef.getChildren("wd:ID");								 
													 for(ReportElement idTypeElement:passportIdTypeData)
													 {
														 passportTypeMap = idTypeElement.getAllAttributes();
														 if(passportTypeMap.get("wd:type").equals("Passport_ID_Type_ID"))
														 {
															 passportType = idTypeElement.getValue().trim();
															 if(passportTypeArr.equals(""))
															 {
																 passportTypeArr = passportType;
															 }
															 else
															 {
																 passportTypeArr = passportTypeArr + "~" + passportType;
															 }
														 }
													 }
												 }
												 
												 ReportElement passportCountryReference = passportIdData.getChild("wd:Country_Reference");
												 if(passportCountryReference != null)
												 {
													 List<ReportElement> passportCountryData = passportCountryReference.getChildren("wd:ID");								 
													 for(ReportElement countryElement:passportCountryData)
													 {
														 passportCountryMap = countryElement.getAllAttributes();
														 if(passportCountryMap.get("wd:type").equals("ISO_3166-1_Alpha-3_Code"))
														 {
															 passportCountry = countryElement.getValue().trim();
															 if(passportCountryArr.equals(""))
															 {
																 passportCountryArr = passportCountry;
															 }
															 else
															 {
																 passportCountryArr = passportCountryArr + "~" + passportCountry;
															 }
														 }
													 }
												 }
											 }
										 }
									 }
									 else
									 {
										 passportNumberArr = "";
										 passportTypeArr = "";
										 passportCountryArr = "";
										 passportIssuedDateArr = "";
										 passportExpirationDateArr = "";
										 passportVerificationDateArr = "";
									 }
									 									
									 List<ReportElement> visaIDList = identificationData.getChildren("wd:Visa_ID");
									 if(visaIDList != null && visaIDList.size() >0)
									 {
										 visaIdArr = "";
										 visaTypeArr = "";
										 visaCountryArr = "";
										 visaIssuedDateArr = "";
										 visaExpirationDateArr = "";
										 visaVerificationDateArr = "";
										 visaVerifiedByArr = "";
										 
										 for(ReportElement visaElement : visaIDList)
										 {
											 ReportElement visaIdData = visaElement.getChild("wd:Visa_ID_Data");
											 if(visaIdData != null)
											 {
												 visaId = visaIdData.getChild("wd:ID") != null?visaIdData.getChild("wd:ID").getValue().trim():""; 
												 if(visaIdArr.equals(""))
												 {
													 visaIdArr = visaId;
												 }
												 else
												 {
													 visaIdArr = visaIdArr + "~" + visaId;
												 }
												 visaIssuedDate = visaIdData.getChild("wd:Issued_Date") != null?visaIdData.getChild("wd:Issued_Date").getValue().trim():"";
												 if(visaIssuedDateArr.equals(""))
												 {
													 visaIssuedDateArr = visaIssuedDate;
												 }
												 else
												 {
													 if(!visaIssuedDate.isEmpty())
													 {
														 visaIssuedDateArr = visaIssuedDateArr + "~" + visaIssuedDate;
													 }
												 }
												 visaExpirationDate = visaIdData.getChild("wd:Expiration_Date") != null?visaIdData.getChild("wd:Expiration_Date").getValue().trim():"";
												 if(visaExpirationDateArr.equals(""))
												 {
													 visaExpirationDateArr = visaExpirationDate;
												 }
												 else
												 {
													 if(!visaExpirationDate.isEmpty())
													 {
														 visaExpirationDateArr = visaExpirationDateArr + "~" + visaExpirationDate;
													 }
												 }
												 visaVerificationDate = visaIdData.getChild("wd:Verification_Date") != null?visaIdData.getChild("wd:Verification_Date").getValue().trim():""; 
												 if(visaVerificationDateArr.equals(""))
												 {
													 visaVerificationDateArr = visaVerificationDate;
												 }
												 else
												 {
													 if(!visaVerificationDate.isEmpty())
													 {
														 visaVerificationDateArr = visaVerificationDateArr + "~" + visaVerificationDate;
													 }
												 }
												 
												 ReportElement visaTypeRef = visaIdData.getChild("wd:ID_Type_Reference");
												 if(visaTypeRef != null)
												 {
													 List<ReportElement> visaTypeData = visaTypeRef.getChildren("wd:ID");								 
													 for(ReportElement idTypeElement:visaTypeData)
													 {
														 visaIdTypeMap = idTypeElement.getAllAttributes();
														 if(visaIdTypeMap.get("wd:type").equals("Visa_ID_Type_ID "))
														 {
															 visaType = idTypeElement.getValue().trim();
															 if(visaTypeArr.equals(""))
															 {
																 visaTypeArr = visaType;
															 }
															 else
															 {
																 visaTypeArr = visaTypeArr + "~" + visaType;
															 }
														 }
													 }
												 }
												 
												 ReportElement visaCountryReference = visaIdData.getChild("wd:Country_Reference");
												 if(visaCountryReference != null)
												 {
													 List<ReportElement> visaCountryData = visaCountryReference.getChildren("wd:ID");								 
													 for(ReportElement countryElement:visaCountryData)
													 {
														 visaCountryMap = countryElement.getAllAttributes();
														 if(visaCountryMap.get("wd:type").equals("ISO_3166-1_Alpha-3_Code"))
														 {
															 visaCountry = countryElement.getValue().trim();
															 if(visaCountryArr.equals(""))
															 {
																 visaCountryArr = visaCountry;
															 }
															 else
															 {
																 visaCountryArr = visaCountryArr + "~" + visaCountry;
															 }
														 }
													 }
												 }												 
												 
												 ReportElement visaVerifiedByRef = visaIdData.getChild("wd:Verified_By_Reference");
												 if(visaVerifiedByRef != null)
												 {
													 List<ReportElement> visaVerifiedByData = visaVerifiedByRef.getChildren("wd:ID");								 
													 for(ReportElement verifiedByElement:visaVerifiedByData)
													 {
														 visaVerifiedByMap = verifiedByElement.getAllAttributes();
														 if(visaVerifiedByMap.get("wd:type").equals("Employee_ID"))
														 {
															 visaVerifiedBy = verifiedByElement.getValue().trim();
															 if(visaVerifiedByArr.equals(""))
															 {
																 visaVerifiedByArr = visaVerifiedBy;
															 }
															 else
															 {
																 if(!visaVerifiedBy.isEmpty())
																 {
																	 visaVerifiedByArr = visaVerifiedByArr + "~" + visaVerifiedBy;
																 }
															 }
														 }
													 }
												 }												 
											 }
										 }
									 }
									 else
									 {
										 visaIdArr = "";
										 visaTypeArr = "";
										 visaCountryArr = "";
										 visaIssuedDateArr = "";
										 visaExpirationDateArr = "";
										 visaVerificationDateArr = "";
										 visaVerifiedByArr = "";
									 }									 
									 
									 List<ReportElement> customIDList = identificationData.getChildren("wd:Custom_ID");
									 if(customIDList != null && customIDList.size() >0)
									 {
										 String expirationDate = "";
										 customIdNumber = "" ;
										 for(ReportElement customElement : customIDList)
										 {
											 ReportElement customIdData = customElement.getChild("wd:Custom_ID_Data");
											 if(customIdData != null)
											 {
												 expirationDate = customIdData.getChild("wd:Expiration_Date") != null?customIdData.getChild("wd:Expiration_Date").getValue().trim():"";
												 ReportElement customTypeRef = customIdData.getChild("wd:ID_Type_Reference");
												 if(customTypeRef != null)
												 {
													 List<ReportElement> customIdTypeData = customTypeRef.getChildren("wd:ID");								 
													 for(ReportElement idTypeElement:customIdTypeData)
													 {
														 customTypeMap = idTypeElement.getAllAttributes();
														 if(customTypeMap.get("wd:type").equals("Custom_ID_Type_ID"))
														 {
															 if(idTypeElement.getValue().trim().equalsIgnoreCase("Global_CNUM") && expirationDate.isEmpty())
															 {
																 customIdNumber = customIdData.getChild("wd:ID") != null?customIdData.getChild("wd:ID").getValue().trim():""; 
															 }
														 }
													 }
												 }
											 }
										 }
										 if(customIdNumber.isEmpty())
										 {
											 customIdNumber = "" ;
										 }
									 }
									 else
									 {
										 customIdNumber = "" ;
									 }
								 }
								 else
								 {
									 customIdNumber = "" ;
									 passportNumberArr = "";
									 passportTypeArr = "";
									 passportCountryArr = "";
									 passportIssuedDateArr = "";
									 passportExpirationDateArr = "";
									 passportVerificationDateArr = "";
									 visaIdArr = "";
									 visaTypeArr = "";
									 visaCountryArr = "";
									 visaIssuedDateArr = "";
									 visaExpirationDateArr = "";
									 visaVerificationDateArr = "";
								 }										 							        	
						}						        
				        
			        }
			        	
			     headingFromSourceTenant = "Home_CNUM,Employee_ID,"
		        			+ "Passport_Number,Passport_Type,Passport_Issued_Date,Passport_Expiration_Date,Passport_Verification_Date,Passport_Country,"
		        			+ "Visa_ID,Visa_Type,Visa_Country,Visa_Issued_Date,Visa_Expiration_Date,Visa_Verification_Date,Visa_Verified_By";
		        			

		        	if(!customIdNumber.isEmpty())
					{
			        	headerStr = customIdNumber + "," + employeeId + "," + passportNumberArr + "," + passportTypeArr + "," + passportIssuedDateArr +
						 		 "," + passportExpirationDateArr + "," + passportVerificationDateArr + "," + passportCountryArr + "," + 
						 		 visaIdArr + "," + visaTypeArr + "," + visaCountryArr + "," + visaIssuedDateArr + "," + visaExpirationDateArr + "," + visaVerificationDateArr + "," + visaVerifiedByArr;
			        	
			        	sourceTenantRowMap.put(customIdNumber, headerStr);							        	
			        	sourceTenantColumnList.add(customIdNumber);
			        	
			        	if(finalStr.equals(""))
						{
							 finalStr =  headingFromSourceTenant + "\n" + headerStr;
						}
						else
						{
							 finalStr = finalStr + "\n" + headerStr;
						}
					 }
			     }						 							 
			   }
				 
				 System.out.println(finalStr);
				 sourceContent = finalStr.getBytes();
				 sourceCount = sourceTenantColumnList.size();
		    }
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		
	}
	
	private void createTemplateFromTargetTenantPassportVisa(Tenant tenant2, InputStream is, SOAPConnection soapConnection, String loadCycle, String ruleName, String client, Long userId) {

		wdCount = 0;
		headingFromTargetTenant = "";
		targetTenantRowMap.clear();
		targetTenantColumnList.clear();
		String xmlReqFile = null;
		try 
		{			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 xmlReqFile = requestfile.getAbsolutePath();
				 String outputfile = addHireIdList(xmlReqFile, newEmpList, ruleName, 0, newEmpList.size(), "Employee_ID");
				 is = new FileInputStream(outputfile);
			     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
			     SOAPPart soapPart = soapMessage.getSOAPPart();
			     SOAPEnvelope envelope = soapPart.getEnvelope();
				 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
				 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
				 {
					  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
					  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
				 }
				 soapMessage.saveChanges();
			     ByteArrayOutputStream out = new ByteArrayOutputStream();
			     soapMessage.writeTo(out);
			     String strMsg = new String(out.toByteArray());	
			     
			     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
			     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
				 soapConnection = soapConnectionFactory.createConnection();
				 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
				 out = new ByteArrayOutputStream();
				 soapResponse.writeTo(out);
				 strMsg = new String(out.toByteArray(), "utf-8");

				 ReportElement soapResp = XmlParserManager.parseXml(strMsg);
				 
				 ReportElement pageData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Results");
				 
				 String totalNoOfPages = pageData.getChild("wd:Total_Pages").getValue().trim();
				 String totalResults = pageData.getChild("wd:Total_Results").getValue().trim();
				 int totalResult = Integer.parseInt(totalResults);
				 System.out.println("totalNoOfPages-"+totalNoOfPages);
				 System.out.println("totalResult-"+totalResult);				 
				 
				 String employeeId = "";
				 String employeeHireDate = "";
				 String passportNumber = "";
				 String passportType = "";
				 String passportCountry = "";
				 String passportIssuedDate = "";
				 String passportExpirationDate = "";
				 String passportVerificationDate = "";
				 String passportNumberArr = "";
				 String passportTypeArr = "";
				 String passportCountryArr = "";
				 String passportIssuedDateArr = "";
				 String passportExpirationDateArr = "";
				 String passportVerificationDateArr = "";
				 String visaId = "";
				 String visaType = "";
				 String visaCountry = "";
				 String visaIssuedDate = "";
				 String visaExpirationDate = "";
				 String visaVerificationDate = "";
				 String visaVerifiedBy = "";
				 String visaIdArr = "";
				 String visaTypeArr = "";
				 String visaCountryArr = "";
				 String visaIssuedDateArr = "";
				 String visaExpirationDateArr = "";
				 String visaVerificationDateArr = "";
				 String visaVerifiedByArr = "";
				 String customIdNumber = "";
				 String finalStr = "";
				 String headerStr = "";
				 
				 Map<String,String> passportTypeMap = null;
				 Map<String,String> passportCountryMap = null;
				 Map<String,String> visaIdTypeMap = null;
				 Map<String,String> visaCountryMap = null;
				 Map<String,String> visaVerifiedByMap = null;
				 Map<String,String> customTypeMap = null;
				 
				 int startIndex = 0;
				 int endIndex = 0;
				 
				 for (int j = 1; j <=Integer.parseInt(totalNoOfPages); j++) //
				 {
					 if(j == 1)
					 {
						startIndex = 0;
						if(999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = j*999;
						}
					 }
					 else
					 {
						startIndex = endIndex;
						if(j*999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = (j*999);
						}
					 }
					 outputfile = addHireIdList(xmlReqFile, newEmpList, ruleName, startIndex, endIndex, "Employee_ID");
					 is = new FileInputStream(outputfile);
				     soapMessage = MessageFactory.newInstance().createMessage(null, is);
				     soapPart = soapMessage.getSOAPPart();
				     envelope = soapPart.getEnvelope();
					 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
					 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
					 {
							envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
					 }
					 soapMessage.saveChanges();
			         out = new ByteArrayOutputStream();
			         soapMessage.writeTo(out);
			         strMsg = new String(out.toByteArray());
			        
			         soapConnectionFactory = SOAPConnectionFactory.newInstance();
					 soapConnection = soapConnectionFactory.createConnection();
			         soapResponse = soapConnection.call(soapMessage, sourceUrl);
			         out = new ByteArrayOutputStream();
			         soapResponse.writeTo(out);
			         strMsg = new String(out.toByteArray(), "utf-8");
			        
			         soapResp = XmlParserManager.parseXml(strMsg);
			        
			        ReportElement responseData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Data");
			        
			        List<ReportElement> applicantData = responseData.getChildren("wd:Worker");
			        for(ReportElement reportElement : applicantData)
					{
			        	ReportElement hireStatusData = reportElement.getChild("wd:Worker_Data")
					 			.getChild("wd:Employment_Data")
					 			.getChild("wd:Worker_Status_Data");
			        	
			        	employeeHireDate = hireStatusData.getChild("wd:Hire_Date") != null?hireStatusData.getChild("wd:Hire_Date").getValue().trim():"";					        	
			        	if(!employeeHireDate.equalsIgnoreCase(""))
			        	{
			        		Date empHireDate = convertWorkdayStringToDate(employeeHireDate);
			        		//if((empHireDate.equals(hireFromDate) || empHireDate.after(hireFromDate)) && (empHireDate.equals(hireToDate) || empHireDate.before(hireToDate)))
			        		{
					        	System.out.println("empHireDate--"+ empHireDate);
				        		ReportElement element1 = reportElement.getChild("wd:Worker_Data");
				        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
				        		System.out.println("employeeId--"+ employeeId);
				        										 
								 ReportElement identificationData = reportElement.getChild("wd:Worker_Data")
								 			.getChild("wd:Personal_Data")
								 			.getChild("wd:Identification_Data");
								 
								 if(identificationData != null)
								 {										 
									 List<ReportElement> passportIDList = identificationData.getChildren("wd:Passport_ID");
									 if(passportIDList != null && passportIDList.size() >0)
									 {
										 passportNumberArr = "";
										 passportTypeArr = "";
										 passportCountryArr = "";
										 passportIssuedDateArr = "";
										 passportExpirationDateArr = "";
										 passportVerificationDateArr = "";
										 
										 for(ReportElement passportElement : passportIDList)
										 {
											 ReportElement passportIdData = passportElement.getChild("wd:Passport_ID_Data");
											 if(passportIdData != null)
											 {
												 passportNumber = passportIdData.getChild("wd:ID") != null?passportIdData.getChild("wd:ID").getValue().trim():""; 
												 if(passportNumberArr.equals(""))
												 {
													 passportNumberArr = passportNumber;
												 }
												 else
												 {
													 passportNumberArr = passportNumberArr + "~" + passportNumber;
												 }
												 passportIssuedDate = passportIdData.getChild("wd:Issued_Date") != null?passportIdData.getChild("wd:Issued_Date").getValue().trim():"";
												 if(passportIssuedDateArr.equals(""))
												 {
													 passportIssuedDateArr = passportIssuedDate;
												 }
												 else
												 {
													 if(!passportIssuedDate.isEmpty())
													 {
														 passportIssuedDateArr = passportIssuedDateArr + "~" + passportIssuedDate;
													 }
												 }
												 passportExpirationDate = passportIdData.getChild("wd:Expiration_Date") != null?passportIdData.getChild("wd:Expiration_Date").getValue().trim():"";
												 if(passportExpirationDateArr.equals(""))
												 {
													 passportExpirationDateArr = passportExpirationDate;
												 }
												 else
												 {
													 if(!passportExpirationDate.isEmpty())
													 {
														 passportExpirationDateArr = passportExpirationDateArr + "~" + passportExpirationDate;
													 }
												 }
												 passportVerificationDate = passportIdData.getChild("wd:Verification_Date") != null?passportIdData.getChild("wd:Verification_Date").getValue().trim():""; 
												 if(passportVerificationDateArr.equals(""))
												 {
													 passportVerificationDateArr = passportVerificationDate;
												 }
												 else
												 {
													 if(!passportVerificationDate.isEmpty())
													 {
														 passportVerificationDateArr = passportVerificationDateArr + "~" + passportVerificationDate;
													 }
												 }
												 
												 ReportElement passportTypeRef = passportIdData.getChild("wd:ID_Type_Reference");
												 if(passportTypeRef != null)
												 {
													 List<ReportElement> passportIdTypeData = passportTypeRef.getChildren("wd:ID");								 
													 for(ReportElement idTypeElement:passportIdTypeData)
													 {
														 passportTypeMap = idTypeElement.getAllAttributes();
														 if(passportTypeMap.get("wd:type").equals("Passport_ID_Type_ID"))
														 {
															 passportType = idTypeElement.getValue().trim();
															 if(passportTypeArr.equals(""))
															 {
																 passportTypeArr = passportType;
															 }
															 else
															 {
																 passportTypeArr = passportTypeArr + "~" + passportType;
															 }
														 }
													 }
												 }
												 
												 ReportElement passportCountryReference = passportIdData.getChild("wd:Country_Reference");
												 if(passportCountryReference != null)
												 {
													 List<ReportElement> passportCountryData = passportCountryReference.getChildren("wd:ID");								 
													 for(ReportElement countryElement:passportCountryData)
													 {
														 passportCountryMap = countryElement.getAllAttributes();
														 if(passportCountryMap.get("wd:type").equals("ISO_3166-1_Alpha-3_Code"))
														 {
															 passportCountry = countryElement.getValue().trim();
															 if(passportCountryArr.equals(""))
															 {
																 passportCountryArr = passportCountry;
															 }
															 else
															 {
																 passportCountryArr = passportCountryArr + "~" + passportCountry;
															 }
														 }
													 }
												 }
											 }
										 }
									 }
									 else
									 {
										 passportNumberArr = "";
										 passportTypeArr = "";
										 passportCountryArr = "";
										 passportIssuedDateArr = "";
										 passportExpirationDateArr = "";
										 passportVerificationDateArr = "";
									 }									 
									 
									 List<ReportElement> visaIDList = identificationData.getChildren("wd:Visa_ID");
									 if(visaIDList != null && visaIDList.size() >0)
									 {
										 visaIdArr = "";
										 visaTypeArr = "";
										 visaCountryArr = "";
										 visaIssuedDateArr = "";
										 visaExpirationDateArr = "";
										 visaVerificationDateArr = "";
										 visaVerifiedByArr = "";
										 
										 for(ReportElement visaElement : visaIDList)
										 {
											 ReportElement visaIdData = visaElement.getChild("wd:Visa_ID_Data");
											 if(visaIdData != null)
											 {
												 visaId = visaIdData.getChild("wd:ID") != null?visaIdData.getChild("wd:ID").getValue().trim():""; 
												 if(visaIdArr.equals(""))
												 {
													 visaIdArr = visaId;
												 }
												 else
												 {
													 visaIdArr = visaIdArr + "~" + visaId;
												 }
												 visaIssuedDate = visaIdData.getChild("wd:Issued_Date") != null?visaIdData.getChild("wd:Issued_Date").getValue().trim():"";
												 if(visaIssuedDateArr.equals(""))
												 {
													 visaIssuedDateArr = visaIssuedDate;
												 }
												 else
												 {
													 if(!visaIssuedDate.isEmpty())
													 {
														 visaIssuedDateArr = visaIssuedDateArr + "~" + visaIssuedDate;
													 }
												 }	
												 visaExpirationDate = visaIdData.getChild("wd:Expiration_Date") != null?visaIdData.getChild("wd:Expiration_Date").getValue().trim():"";
												 if(visaExpirationDateArr.equals(""))
												 {
													 visaExpirationDateArr = visaExpirationDate;
												 }
												 else
												 {
													 if(!visaExpirationDate.isEmpty())
													 {
														 visaExpirationDateArr = visaExpirationDateArr + "~" + visaExpirationDate;
													 }
												 }
												 visaVerificationDate = visaIdData.getChild("wd:Verification_Date") != null?visaIdData.getChild("wd:Verification_Date").getValue().trim():""; 
												 if(visaVerificationDateArr.equals(""))
												 {
													 visaVerificationDateArr = visaVerificationDate;
												 }
												 else
												 {
													 if(!visaVerificationDate.isEmpty())
													 {
														 visaVerificationDateArr = visaVerificationDateArr + "~" + visaVerificationDate;
													 }
												 }
												 
												 ReportElement visaTypeRef = visaIdData.getChild("wd:ID_Type_Reference");
												 if(visaTypeRef != null)
												 {
													 List<ReportElement> visaTypeData = visaTypeRef.getChildren("wd:ID");								 
													 for(ReportElement idTypeElement:visaTypeData)
													 {
														 visaIdTypeMap = idTypeElement.getAllAttributes();
														 if(visaIdTypeMap.get("wd:type").equals("Visa_ID_Type_ID "))
														 {
															 visaType = idTypeElement.getValue().trim();
															 if(visaTypeArr.equals(""))
															 {
																 visaTypeArr = visaType;
															 }
															 else
															 {
																 visaTypeArr = visaTypeArr + "~" + visaType;
															 }
														 }
													 }
												 }												 
												 
												 ReportElement visaCountryReference = visaIdData.getChild("wd:Country_Reference");
												 if(visaCountryReference != null)
												 {
													 List<ReportElement> visaCountryData = visaCountryReference.getChildren("wd:ID");								 
													 for(ReportElement countryElement:visaCountryData)
													 {
														 visaCountryMap = countryElement.getAllAttributes();
														 if(visaCountryMap.get("wd:type").equals("ISO_3166-1_Alpha-3_Code"))
														 {
															 visaCountry = countryElement.getValue().trim();
															 if(visaCountryArr.equals(""))
															 {
																 visaCountryArr = visaCountry;
															 }
															 else
															 {
																 visaCountryArr = visaCountryArr + "~" + visaCountry;
															 }
														 }
													 }
												 }
												 
												 
												 ReportElement visaVerifiedByRef = visaIdData.getChild("wd:Verified_By_Reference");
												 if(visaVerifiedByRef != null)
												 {
													 List<ReportElement> visaVerifiedByData = visaVerifiedByRef.getChildren("wd:ID");								 
													 for(ReportElement verifiedByElement:visaVerifiedByData)
													 {
														 visaVerifiedByMap = verifiedByElement.getAllAttributes();
														 if(visaVerifiedByMap.get("wd:type").equals("Employee_ID"))
														 {
															 visaVerifiedBy = verifiedByElement.getValue().trim();
															 if(visaVerifiedByArr.equals(""))
															 {
																 visaVerifiedByArr = visaVerifiedBy;
															 }
															 else
															 {
																 if(!visaVerifiedBy.isEmpty())
																 {
																	 visaVerifiedByArr = visaVerifiedByArr + "~" + visaVerifiedBy;
																 }
															 }
														 }
													 }
												 }
											 }
										 }
									 }
									 else
									 {
										 visaIdArr = "";
										 visaTypeArr = "";
										 visaCountryArr = "";
										 visaIssuedDateArr = "";
										 visaExpirationDateArr = "";
										 visaVerificationDateArr = "";
										 visaVerifiedByArr = "";
									 }
									 
									 List<ReportElement> customIDList = identificationData.getChildren("wd:Custom_ID");
									 if(customIDList != null && customIDList.size() >0)
									 {
										 customIdNumber = "" ;
										 for(ReportElement customElement : customIDList)
										 {
											 ReportElement customIdData = customElement.getChild("wd:Custom_ID_Data");
											 if(customIdData != null)
											 {
												 ReportElement customTypeRef = customIdData.getChild("wd:ID_Type_Reference");
												 if(customTypeRef != null)
												 {
													 List<ReportElement> customIdTypeData = customTypeRef.getChildren("wd:ID");								 
													 for(ReportElement idTypeElement:customIdTypeData)
													 {
														 customTypeMap = idTypeElement.getAllAttributes();
														 if(customTypeMap.get("wd:type").equals("Custom_ID_Type_ID"))
														 {
															 if(idTypeElement.getValue().trim().equalsIgnoreCase("Previous_IBM_CNUM"))
															 {
																 customIdNumber = customIdData.getChild("wd:ID") != null?customIdData.getChild("wd:ID").getValue().trim():"";
															 }
														 }
													 }
												 }
											 }
										 }
										 if(customIdNumber.isEmpty())
										 {
											 customIdNumber = "" ;
										 }
									 }
									 else
									 {
										 customIdNumber = "" ;
									 }
								 }
								 else
								 {
									 customIdNumber = "" ;
									 passportNumberArr = "";
									 passportTypeArr = "";
									 passportCountryArr = "";
									 passportIssuedDateArr = "";
									 passportExpirationDateArr = "";
									 passportVerificationDateArr = "";
									 visaIdArr = "";
									 visaTypeArr = "";
									 visaCountryArr = "";
									 visaIssuedDateArr = "";
									 visaExpirationDateArr = "";
									 visaVerificationDateArr = "";
								 }								 								 													        	
						}				        				        
			          }
			        	headingFromTargetTenant = "Home_CNUM,Employee_ID,"
			        			+ "Passport_Number,Passport_Type,Passport_Issued_Date,Passport_Expiration_Date,Passport_Verification_Date,Passport_Country,"
			        			+ "Visa_ID,Visa_Type,Visa_Country,Visa_Issued_Date,Visa_Expiration_Date,Visa_Verification_Date,Visa_Verified_By";
			        			

			        	if(!customIdNumber.isEmpty())
						{
				        	headerStr = customIdNumber + "," + employeeId + "," + passportNumberArr + "," + passportTypeArr + "," + passportIssuedDateArr +
							 		 "," + passportExpirationDateArr + "," + passportVerificationDateArr + "," + passportCountryArr + "," + 
							 		 visaIdArr + "," + visaTypeArr + "," + visaCountryArr + "," + visaIssuedDateArr + "," + visaExpirationDateArr + "," + visaVerificationDateArr + "," + visaVerifiedByArr;
				        	
				        	
				        	 targetTenantRowMap.put(customIdNumber, headerStr);
				        	 targetTenantColumnList.add(customIdNumber);
				        	 
							 if(finalStr.equals(""))
							 {
								 finalStr =  headingFromTargetTenant + "\n" + headerStr;
							 }
							 else
							 {
								 finalStr = finalStr + "\n" + headerStr;
							 }
						}
				   }						 							 
			     }
				 System.out.println(finalStr);
				 targetContent = finalStr.getBytes();
				 wdCount = targetTenantColumnList.size();
		   }
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		
	}
	
	private void createTemplateFromSourceTenantGovernmentID(Tenant tenant, InputStream is, SOAPConnection soapConnection, String loadCycle, String ruleName, String client, Long userId) {

		sourceCount = 0;
		headingFromSourceTenant = "";
		sourceTenantRowMap.clear();
		sourceTenantColumnList.clear();
		errorList.clear();
		String xmlReqFile = null;
		try 
		{			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 xmlReqFile = requestfile.getAbsolutePath();
				 String outputfile = addHireIdList(xmlReqFile, oldEmpList, ruleName, 0, oldEmpList.size(), "Employee_ID");
				 is = new FileInputStream(outputfile);
			     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
			     SOAPPart soapPart = soapMessage.getSOAPPart();
			     SOAPEnvelope envelope = soapPart.getEnvelope();
				 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
				 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
				 {
					  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
					  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
				 }
				 soapMessage.saveChanges();
			     ByteArrayOutputStream out = new ByteArrayOutputStream();
			     soapMessage.writeTo(out);
			     String strMsg = new String(out.toByteArray());	
			     
			     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
			     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
				 soapConnection = soapConnectionFactory.createConnection();
				 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
				 out = new ByteArrayOutputStream();
				 soapResponse.writeTo(out);
				 strMsg = new String(out.toByteArray(), "utf-8");

				 ReportElement soapResp = XmlParserManager.parseXml(strMsg);
				 
				 ReportElement pageData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Results");
				 
				 String totalNoOfPages = pageData.getChild("wd:Total_Pages").getValue().trim();
				 String totalResults = pageData.getChild("wd:Total_Results").getValue().trim();
				 int totalResult = Integer.parseInt(totalResults);
				 System.out.println("totalNoOfPages-"+totalNoOfPages);
				 System.out.println("totalResult-"+totalResult);						 
				 
				 String employeeId = "";
				 String empTerminationDate = "";
				 String nationalId = "";
				 String nationalIdTypeCode = "";
				 String issuedDateNid = "";
				 String expieryDateNid = "";
				 String verificationDateNid = "";
				 String countryISOCodeNid = "";
				 String nationalIdArr = "";
				 String nationalIdTypeCodeArr = "";
				 String issuedDateNidArr = "";
				 String expieryDateNidArr = "";
				 String verificationDateNidArr = "";
				 String countryISOCodeNidArr = "";				 
				 String govtId = "";
				 String govtIdType = "";
				 String goviIdCountry = "";
				 String govtIdIssuedDate = "";
				 String govtIdExpirationDate = "";
				 String govtIdIVerificationDate = "";
				 String govtIdVerifiedBy = "";
				 String govtIdArr = "";
				 String govtIdTypeArr = "";
				 String goviIdCountryArr = "";
				 String govtIdIssuedDateArr = "";
				 String govtIdExpirationDateArr = "";
				 String govtIdIVerificationDateArr = "";
				 String govtIdVerifiedByArr = "";
				 String customIdNumber = "";						 
				 String finalStr = "";
				 String headerStr = "";				 
				
				 Map<String,String> nationalIdMap = null;
				 Map<String,String> countryNidMap = null;
				 Map<String,String> govtIdTypeMap = null;
				 Map<String,String> govtCountryMap = null;
				 Map<String,String> govtIdVerifiedByMap = null;
				 Map<String,String> customTypeMap = null;
				 
				 int startIndex = 0;
				 int endIndex = 0;
				 
				 for (int j = 1; j <=Integer.parseInt(totalNoOfPages); j++) //
				 {
					 if(j == 1)
					 {
						startIndex = 0;
						if(999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = j*999;
						}
					 }
					 else
					 {
						startIndex = endIndex;
						if(j*999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = (j*999);
						}
					 }
					 outputfile = addHireIdList(xmlReqFile, oldEmpList, ruleName, startIndex, endIndex, "Employee_ID");
					 is = new FileInputStream(outputfile);
				     soapMessage = MessageFactory.newInstance().createMessage(null, is);
				     soapPart = soapMessage.getSOAPPart();
				     envelope = soapPart.getEnvelope();
					 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
					 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
					 {
							envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
					 }
					 soapMessage.saveChanges();
			         out = new ByteArrayOutputStream();
			         soapMessage.writeTo(out);
			         strMsg = new String(out.toByteArray());
			        
			         soapConnectionFactory = SOAPConnectionFactory.newInstance();
					 soapConnection = soapConnectionFactory.createConnection();
			         soapResponse = soapConnection.call(soapMessage, sourceUrl);
			         out = new ByteArrayOutputStream();
			         soapResponse.writeTo(out);
			         strMsg = new String(out.toByteArray(), "utf-8");
			        
			         soapResp = XmlParserManager.parseXml(strMsg);
				 
			        
			        ReportElement responseData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Data");
			        
			        List<ReportElement> applicantData = responseData.getChildren("wd:Worker");
			        for(ReportElement reportElement : applicantData)
					{
			        	ReportElement terminationStatusData = reportElement.getChild("wd:Worker_Data")
					 			.getChild("wd:Employment_Data")
					 			.getChild("wd:Worker_Status_Data");
			        	
			        	empTerminationDate = terminationStatusData.getChild("wd:Termination_Date") != null?terminationStatusData.getChild("wd:Termination_Date").getValue().trim():"";					        	
			        	//if(!empTerminationDate.equalsIgnoreCase(""))
			        	{
			        		//Date termDate = convertWorkdayStringToDate(empTerminationDate);
			        		//if((termDate.equals(termFromDate) || termDate.after(termFromDate)) && (termDate.equals(termToDate) || termDate.before(termToDate)))
			        		{
					        	//System.out.println("empTerminationDate--"+ termDate);
				        		ReportElement element1 = reportElement.getChild("wd:Worker_Data");
				        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
				        		System.out.println("employeeId--"+ employeeId);
				        		
				        		
								 
								 ReportElement identificationData = reportElement.getChild("wd:Worker_Data")
								 			.getChild("wd:Personal_Data")
								 			.getChild("wd:Identification_Data");
								 
								 if(identificationData != null)
								 {	
									 List<ReportElement> nationalIDList = identificationData.getChildren("wd:National_ID");
									 if(nationalIDList != null && nationalIDList.size() >0)
									 {
										 nationalIdArr = "";
										 nationalIdTypeCodeArr = "";
										 issuedDateNidArr = "";
										 expieryDateNidArr = "";
										 verificationDateNidArr = "";
										 countryISOCodeNidArr = "";
										 for(ReportElement nationalElement : nationalIDList)
										 {
											 ReportElement nationalIdData = nationalElement.getChild("wd:National_ID_Data");
											 if(nationalIdData != null)
											 {
												 nationalId = nationalIdData.getChild("wd:ID") != null?nationalIdData.getChild("wd:ID").getValue().trim():""; 
												 if(nationalId.contains(","))
												 {
													 nationalId = nationalId.replaceAll(",", "|");
												 }
												 if(nationalIdArr.equals(""))
												 {
													 nationalIdArr = nationalId;
												 }
												 else
												 {
													 nationalIdArr = nationalIdArr + "~" + nationalId;
												 }
												 issuedDateNid = nationalIdData.getChild("wd:Issued_Date") != null?nationalIdData.getChild("wd:Issued_Date").getValue().trim():"";
												 if(issuedDateNidArr.equals(""))
												 {
													 issuedDateNidArr = issuedDateNid;
												 }
												 else
												 {
													 if(!issuedDateNid.isEmpty())
													 {
														 issuedDateNidArr = issuedDateNidArr + "~" + issuedDateNid;
													 }
												 }
												 expieryDateNid = nationalIdData.getChild("wd:Expiration_Date") != null?nationalIdData.getChild("wd:Expiration_Date").getValue().trim():"";
												 if(expieryDateNidArr.equals(""))
												 {
													 expieryDateNidArr = expieryDateNid;
												 }
												 else
												 {
													 if(!expieryDateNid.isEmpty())
													 {
														 expieryDateNidArr = expieryDateNidArr + "~" + expieryDateNid;
													 }
												 }
												 verificationDateNid = nationalIdData.getChild("wd:Verification_Date") != null?nationalIdData.getChild("wd:Verification_Date").getValue().trim():""; 
												 if(verificationDateNidArr.equals(""))
												 {
													 verificationDateNidArr = verificationDateNid;
												 }
												 else
												 {
													 if(!verificationDateNid.isEmpty())
													 {
														 verificationDateNidArr = verificationDateNidArr + "~" + verificationDateNid;
													 }
												 }
												 
												 ReportElement idTypeRef = nationalIdData.getChild("wd:ID_Type_Reference");
												 if(idTypeRef != null)
												 {
													 List<ReportElement> idTypeData = idTypeRef.getChildren("wd:ID");								 
													 for(ReportElement idTypeElement:idTypeData)
													 {
														 nationalIdMap = idTypeElement.getAllAttributes();
														 if(nationalIdMap.get("wd:type").equals("National_ID_Type_Code"))
														 {
															 nationalIdTypeCode = idTypeElement.getValue().trim();
															 if(nationalIdTypeCodeArr.equals(""))
															 {
																 nationalIdTypeCodeArr = nationalIdTypeCode;
															 }
															 else
															 {
																 nationalIdTypeCodeArr = nationalIdTypeCodeArr + "~" + nationalIdTypeCode;
															 }
														 }
													 }
												 }
												 
												 ReportElement countryReference = nationalIdData.getChild("wd:Country_Reference");
												 if(countryReference != null)
												 {
													 List<ReportElement> countryData = countryReference.getChildren("wd:ID");								 
													 for(ReportElement countryElement:countryData)
													 {
														 countryNidMap = countryElement.getAllAttributes();
														 if(countryNidMap.get("wd:type").equals("ISO_3166-1_Alpha-3_Code"))
														 {
															 countryISOCodeNid = countryElement.getValue().trim();
															 if(countryISOCodeNidArr.equals(""))
															 {
																 countryISOCodeNidArr = countryISOCodeNid;
															 }
															 else
															 {
																 countryISOCodeNidArr = countryISOCodeNidArr + "~" + countryISOCodeNid;
															 }
														 }
													 }
												 }
											 }
										 }
									 }
									 else
									 {
										 nationalIdArr = "";
										 nationalIdTypeCodeArr = "";
										 issuedDateNidArr = "";
										 expieryDateNidArr = "";
										 verificationDateNidArr = "";
										 countryISOCodeNidArr = "";
									 }
									 
									 List<ReportElement> governmentIDList = identificationData.getChildren("wd:Government_ID");
									 if(governmentIDList != null && governmentIDList.size() >0)
									 {
										 govtIdArr = "";
										 govtIdTypeArr = "";
										 goviIdCountryArr = "";
										 govtIdIssuedDateArr = "";
										 govtIdExpirationDateArr = "";
										 govtIdIVerificationDateArr = "";
										 govtIdVerifiedByArr = "";
										 
										 for(ReportElement governmentIdElement : governmentIDList)
										 {
											 ReportElement governmentIdData = governmentIdElement.getChild("wd:Government_ID_Data");
											 if(governmentIdData != null)
											 {
												 govtId = governmentIdData.getChild("wd:ID") != null?governmentIdData.getChild("wd:ID").getValue().trim():""; 
												 if(govtIdArr.equals(""))
												 {
													 govtIdArr = govtId;
												 }
												 else
												 {
													 govtIdArr = govtIdArr + "~" + govtId;
												 }
												 govtIdIssuedDate = governmentIdData.getChild("wd:Issued_Date") != null?governmentIdData.getChild("wd:Issued_Date").getValue().trim():"";
												 if(govtIdIssuedDateArr.equals(""))
												 {
													 govtIdIssuedDateArr = govtIdIssuedDate;
												 }
												 else
												 {
													 if(!govtIdIssuedDate.isEmpty())
													 {
														 govtIdIssuedDateArr = govtIdIssuedDateArr + "~" + govtIdIssuedDate;
													 }
												 }
												 govtIdExpirationDate = governmentIdData.getChild("wd:Expiration_Date") != null?governmentIdData.getChild("wd:Expiration_Date").getValue().trim():"";
												 if(govtIdExpirationDateArr.equals(""))
												 {
													 govtIdExpirationDateArr = govtIdExpirationDate;
												 }
												 else
												 {
													 if(!govtIdExpirationDate.isEmpty())
													 {
														 govtIdExpirationDateArr = govtIdExpirationDateArr + "~" + govtIdExpirationDate;
													 }
												 }
												 govtIdIVerificationDate = governmentIdData.getChild("wd:Verification_Date") != null?governmentIdData.getChild("wd:Verification_Date").getValue().trim():""; 
												 if(govtIdIVerificationDateArr.equals(""))
												 {
													 govtIdIVerificationDateArr = govtIdIVerificationDate;
												 }
												 else
												 {
													 if(!govtIdIVerificationDate.isEmpty())
													 {
														 govtIdIVerificationDateArr = govtIdIVerificationDateArr + "~" + govtIdIVerificationDate;
													 }
												 }
												 
												 ReportElement govtTypeRef = governmentIdData.getChild("wd:ID_Type_Reference");
												 if(govtTypeRef != null)
												 {
													 List<ReportElement> govtIdTypeData = govtTypeRef.getChildren("wd:ID");								 
													 for(ReportElement idTypeElement:govtIdTypeData)
													 {
														 govtIdTypeMap = idTypeElement.getAllAttributes();
														 if(govtIdTypeMap.get("wd:type").equals("Government_ID_Type_ID"))
														 {
															 govtIdType = idTypeElement.getValue().trim();
															 if(govtIdTypeArr.equals(""))
															 {
																 govtIdTypeArr = govtIdType;
															 }
															 else
															 {
																 govtIdTypeArr = govtIdTypeArr + "~" + govtIdType;
															 }
														 }
													 }
												 }
												 
												 ReportElement govtCountryReference = governmentIdData.getChild("wd:Country_Reference");
												 if(govtCountryReference != null)
												 {
													 List<ReportElement> govtCountryData = govtCountryReference.getChildren("wd:ID");								 
													 for(ReportElement countryElement:govtCountryData)
													 {
														 govtCountryMap = countryElement.getAllAttributes();
														 if(govtCountryMap.get("wd:type").equals("ISO_3166-1_Alpha-3_Code"))
														 {
															 goviIdCountry = countryElement.getValue().trim();
															 if(goviIdCountryArr.equals(""))
															 {
																 goviIdCountryArr = goviIdCountry;
															 }
															 else
															 {
																 goviIdCountryArr = goviIdCountryArr + "~" + goviIdCountry;
															 }
														 }
													 }
												 }
												 
												 ReportElement govtVerifiedByRef = governmentIdData.getChild("wd:Verified_by_Reference");
												 if(govtVerifiedByRef != null)
												 {
													 List<ReportElement> govtIdVerifiedByData = govtVerifiedByRef.getChildren("wd:ID");								 
													 for(ReportElement verifiedByElement:govtIdVerifiedByData)
													 {
														 govtIdVerifiedByMap = verifiedByElement.getAllAttributes();
														 if(govtIdVerifiedByMap.get("wd:type").equals("Employee_ID"))
														 {
															 govtIdVerifiedBy = verifiedByElement.getValue().trim();
															 if(govtIdVerifiedByArr.equals(""))
															 {
																 govtIdVerifiedByArr = govtIdVerifiedBy;
															 }
															 else
															 {
																 govtIdVerifiedByArr = govtIdVerifiedByArr + "~" + govtIdVerifiedBy;
															 }
														 }
													 }
												 }
											 }
										 }
									 }
									 else
									 {
										 govtIdArr = "";
										 govtIdTypeArr = "";
										 goviIdCountryArr = "";
										 govtIdIssuedDateArr = "";
										 govtIdExpirationDateArr = "";
										 govtIdIVerificationDateArr = "";
										 govtIdVerifiedByArr = "";
									 }
									 
									 List<ReportElement> customIDList = identificationData.getChildren("wd:Custom_ID");
									 if(customIDList != null && customIDList.size() >0)
									 {
										 String expirationDate = "";
										 customIdNumber = "" ;
										 for(ReportElement customElement : customIDList)
										 {
											 ReportElement customIdData = customElement.getChild("wd:Custom_ID_Data");
											 if(customIdData != null)
											 {
												 expirationDate = customIdData.getChild("wd:Expiration_Date") != null?customIdData.getChild("wd:Expiration_Date").getValue().trim():"";
												 ReportElement customTypeRef = customIdData.getChild("wd:ID_Type_Reference");
												 if(customTypeRef != null)
												 {
													 List<ReportElement> customIdTypeData = customTypeRef.getChildren("wd:ID");								 
													 for(ReportElement idTypeElement:customIdTypeData)
													 {
														 customTypeMap = idTypeElement.getAllAttributes();
														 if(customTypeMap.get("wd:type").equals("Custom_ID_Type_ID"))
														 {
															 if(idTypeElement.getValue().trim().equalsIgnoreCase("Global_CNUM") && expirationDate.isEmpty())
															 {
																 customIdNumber = customIdData.getChild("wd:ID") != null?customIdData.getChild("wd:ID").getValue().trim():""; 
															 }
														 }
													 }
												 }
											 }
										 }
										 if(customIdNumber.isEmpty())
										 {
											 customIdNumber = "" ;
										 }
									 }
									 else
									 {
										 customIdNumber = "" ;
									 }
								 }
								 else
								 {
									 customIdNumber = "" ;
									 nationalIdArr = "";
									 nationalIdTypeCodeArr = "";
									 issuedDateNidArr = "";
									 expieryDateNidArr = "";
									 verificationDateNidArr = "";
									 countryISOCodeNidArr = "";
									 govtIdArr = "";
									 govtIdTypeArr = "";
									 goviIdCountryArr = "";
									 govtIdIssuedDateArr = "";
									 govtIdExpirationDateArr = "";
									 govtIdIVerificationDateArr = "";
								 }										 							        	
						}						        
				        
			        }
			        	
			     headingFromSourceTenant = "Home_CNUM,Employee_ID,National_ID_Type_Code,National_ID,National_ID_Issued_Date,National_ID_Expiration_Date,National_ID_Verification_Date,Country_ISO_Code_National_ID,"
		        			+ "Government_ID,Government_ID_Type,Government_ID_Country,Government_ID_Issued_Date,Government_ID_Expiration_Date,Government_ID_Verification_Date,Government_ID_Verified_By,";
		        			

		        	if(!customIdNumber.isEmpty())
					{
			        	headerStr = customIdNumber + "," + employeeId + "," + nationalIdTypeCodeArr + "," + nationalIdArr + "," + issuedDateNidArr +
						 		 "," + expieryDateNidArr + "," + verificationDateNidArr + "," + countryISOCodeNidArr + "," + 
						 		 govtIdArr + "," + govtIdTypeArr + "," + goviIdCountryArr + "," + govtIdIssuedDateArr + "," + govtIdExpirationDateArr + "," + govtIdIVerificationDateArr + "," + govtIdVerifiedByArr;
			        	
			        	sourceTenantRowMap.put(customIdNumber, headerStr);							        	
			        	sourceTenantColumnList.add(customIdNumber);
			        	
			        	if(finalStr.equals(""))
						{
							 finalStr =  headingFromSourceTenant + "\n" + headerStr;
						}
						else
						{
							 finalStr = finalStr + "\n" + headerStr;
						}
					 }
			     }						 							 
			   }
				 
				 System.out.println(finalStr);
				 sourceContent = finalStr.getBytes();
				 sourceCount = sourceTenantColumnList.size();
		    }
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		
	}

	private void createTemplateFromTargetTenantGovernmentID(Tenant tenant, InputStream is, SOAPConnection soapConnection, String loadCycle, String ruleName, String client, Long userId) {

		wdCount = 0;
		headingFromTargetTenant = "";
		targetTenantRowMap.clear();
		targetTenantColumnList.clear();
		String xmlReqFile = null;
		try 
		{			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 xmlReqFile = requestfile.getAbsolutePath();
				 String outputfile = addHireIdList(xmlReqFile, newEmpList, ruleName, 0, newEmpList.size(), "Employee_ID");
				 is = new FileInputStream(outputfile);
			     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
			     SOAPPart soapPart = soapMessage.getSOAPPart();
			     SOAPEnvelope envelope = soapPart.getEnvelope();
				 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
				 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
				 {
					  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
					  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
				 }
				 soapMessage.saveChanges();
			     ByteArrayOutputStream out = new ByteArrayOutputStream();
			     soapMessage.writeTo(out);
			     String strMsg = new String(out.toByteArray());	
			     
			     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
			     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
				 soapConnection = soapConnectionFactory.createConnection();
				 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
				 out = new ByteArrayOutputStream();
				 soapResponse.writeTo(out);
				 strMsg = new String(out.toByteArray(), "utf-8");

				 ReportElement soapResp = XmlParserManager.parseXml(strMsg);
				 
				 ReportElement pageData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Results");
				 
				 String totalNoOfPages = pageData.getChild("wd:Total_Pages").getValue().trim();
				 String totalResults = pageData.getChild("wd:Total_Results").getValue().trim();
				 int totalResult = Integer.parseInt(totalResults);
				 System.out.println("totalNoOfPages-"+totalNoOfPages);
				 System.out.println("totalResult-"+totalResult);				 
				 
				 String employeeId = "";
				 String employeeHireDate = "";
				 String nationalId = "";
				 String nationalIdTypeCode = "";
				 String issuedDateNid = "";
				 String expieryDateNid = "";
				 String verificationDateNid = "";
				 String countryISOCodeNid = "";
				 String nationalIdArr = "";
				 String nationalIdTypeCodeArr = "";
				 String issuedDateNidArr = "";
				 String expieryDateNidArr = "";
				 String verificationDateNidArr = "";
				 String countryISOCodeNidArr = "";
				 String govtId = "";
				 String govtIdType = "";
				 String goviIdCountry = "";
				 String govtIdIssuedDate = "";
				 String govtIdExpirationDate = "";
				 String govtIdIVerificationDate = "";
				 String govtIdVerifiedBy = "";
				 String govtIdArr = "";
				 String govtIdTypeArr = "";
				 String goviIdCountryArr = "";
				 String govtIdIssuedDateArr = "";
				 String govtIdExpirationDateArr = "";
				 String govtIdIVerificationDateArr = "";
				 String govtIdVerifiedByArr = "";
				 String customIdNumber = "";
				 String finalStr = "";
				 String headerStr = "";
				 
				
				 Map<String,String> nationalIdMap = null;
				 Map<String,String> countryNidMap = null;
				 Map<String,String> govtIdTypeMap = null;
				 Map<String,String> govtCountryMap = null;
				 Map<String,String> govtIdVerifiedByMap = null;
				 Map<String,String> customTypeMap = null;
				 
				 int startIndex = 0;
				 int endIndex = 0;
				 
				 for (int j = 1; j <=Integer.parseInt(totalNoOfPages); j++) //
				 {
					 if(j == 1)
					 {
						startIndex = 0;
						if(999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = j*999;
						}
					 }
					 else
					 {
						startIndex = endIndex;
						if(j*999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = (j*999);
						}
					 }
					 outputfile = addHireIdList(xmlReqFile, newEmpList, ruleName, startIndex, endIndex, "Employee_ID");
					 is = new FileInputStream(outputfile);
				     soapMessage = MessageFactory.newInstance().createMessage(null, is);
				     soapPart = soapMessage.getSOAPPart();
				     envelope = soapPart.getEnvelope();
					 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
					 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
					 {
							envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
					 }
					 soapMessage.saveChanges();
			         out = new ByteArrayOutputStream();
			         soapMessage.writeTo(out);
			         strMsg = new String(out.toByteArray());
			        
			         soapConnectionFactory = SOAPConnectionFactory.newInstance();
					 soapConnection = soapConnectionFactory.createConnection();
			         soapResponse = soapConnection.call(soapMessage, sourceUrl);
			         out = new ByteArrayOutputStream();
			         soapResponse.writeTo(out);
			         strMsg = new String(out.toByteArray(), "utf-8");
			        
			         soapResp = XmlParserManager.parseXml(strMsg);
			        
			        ReportElement responseData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Data");
			        
			        List<ReportElement> applicantData = responseData.getChildren("wd:Worker");
			        for(ReportElement reportElement : applicantData)
					{
			        	ReportElement hireStatusData = reportElement.getChild("wd:Worker_Data")
					 			.getChild("wd:Employment_Data")
					 			.getChild("wd:Worker_Status_Data");
			        	
			        	employeeHireDate = hireStatusData.getChild("wd:Hire_Date") != null?hireStatusData.getChild("wd:Hire_Date").getValue().trim():"";					        	
			        	if(!employeeHireDate.equalsIgnoreCase(""))
			        	{
			        		Date empHireDate = convertWorkdayStringToDate(employeeHireDate);
			        		//if((empHireDate.equals(hireFromDate) || empHireDate.after(hireFromDate)) && (empHireDate.equals(hireToDate) || empHireDate.before(hireToDate)))
			        		{
					        	System.out.println("empHireDate--"+ empHireDate);
				        		ReportElement element1 = reportElement.getChild("wd:Worker_Data");
				        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
				        		System.out.println("employeeId--"+ employeeId);
				        										 
								 ReportElement identificationData = reportElement.getChild("wd:Worker_Data")
								 			.getChild("wd:Personal_Data")
								 			.getChild("wd:Identification_Data");
								 
								 if(identificationData != null)
								 {	
									 List<ReportElement> nationalIDList = identificationData.getChildren("wd:National_ID");
									 if(nationalIDList != null && nationalIDList.size() >0)
									 {
										 nationalIdArr = "";
										 nationalIdTypeCodeArr = "";
										 issuedDateNidArr = "";
										 expieryDateNidArr = "";
										 verificationDateNidArr = "";
										 countryISOCodeNidArr = "";
										 for(ReportElement nationalElement : nationalIDList)
										 {
											 ReportElement nationalIdData = nationalElement.getChild("wd:National_ID_Data");
											 if(nationalIdData != null)
											 {
												 nationalId = nationalIdData.getChild("wd:ID") != null?nationalIdData.getChild("wd:ID").getValue().trim():""; 
												 if(nationalId.contains(","))
												 {
													 nationalId = nationalId.replaceAll(",", "|");
												 }
												 if(nationalIdArr.equals(""))
												 {
													 nationalIdArr = nationalId;
												 }
												 else
												 {
													 nationalIdArr = nationalIdArr + "~" + nationalId;
												 }
												 issuedDateNid = nationalIdData.getChild("wd:Issued_Date") != null?nationalIdData.getChild("wd:Issued_Date").getValue().trim():"";
												 if(issuedDateNidArr.equals(""))
												 {
													 issuedDateNidArr = issuedDateNid;
												 }
												 else
												 {
													 if(!issuedDateNid.isEmpty())
													 {
														 issuedDateNidArr = issuedDateNidArr + "~" + issuedDateNid;
													 }
												 }
												 expieryDateNid = nationalIdData.getChild("wd:Expiration_Date") != null?nationalIdData.getChild("wd:Expiration_Date").getValue().trim():"";
												 if(expieryDateNidArr.equals(""))
												 {
													 expieryDateNidArr = expieryDateNid;
												 }
												 else
												 {
													 if(!expieryDateNid.isEmpty())
													 {
														 expieryDateNidArr = expieryDateNidArr + "~" + expieryDateNid;
													 }
												 }
												 verificationDateNid = nationalIdData.getChild("wd:Verification_Date") != null?nationalIdData.getChild("wd:Verification_Date").getValue().trim():""; 
												 if(verificationDateNidArr.equals(""))
												 {
													 verificationDateNidArr = verificationDateNid;
												 }
												 else
												 {
													 if(!verificationDateNid.isEmpty())
													 {
														 verificationDateNidArr = verificationDateNidArr + "~" + verificationDateNid;
													 }
												 }
												 
												 ReportElement idTypeRef = nationalIdData.getChild("wd:ID_Type_Reference");
												 if(idTypeRef != null)
												 {
													 List<ReportElement> idTypeData = idTypeRef.getChildren("wd:ID");								 
													 for(ReportElement idTypeElement:idTypeData)
													 {
														 nationalIdMap = idTypeElement.getAllAttributes();
														 if(nationalIdMap.get("wd:type").equals("National_ID_Type_Code"))
														 {
															 nationalIdTypeCode = idTypeElement.getValue().trim();
															 if(nationalIdTypeCodeArr.equals(""))
															 {
																 nationalIdTypeCodeArr = nationalIdTypeCode;
															 }
															 else
															 {
																 nationalIdTypeCodeArr = nationalIdTypeCodeArr + "~" + nationalIdTypeCode;
															 }
														 }
													 }
												 }												 
												 
												 ReportElement countryReference = nationalIdData.getChild("wd:Country_Reference");
												 if(countryReference != null)
												 {
													 List<ReportElement> countryData = countryReference.getChildren("wd:ID");								 
													 for(ReportElement countryElement:countryData)
													 {
														 countryNidMap = countryElement.getAllAttributes();
														 if(countryNidMap.get("wd:type").equals("ISO_3166-1_Alpha-3_Code"))
														 {
															 countryISOCodeNid = countryElement.getValue().trim();
															 if(countryISOCodeNidArr.equals(""))
															 {
																 countryISOCodeNidArr = countryISOCodeNid;
															 }
															 else
															 {
																 countryISOCodeNidArr = countryISOCodeNidArr + "~" + countryISOCodeNid;
															 }
														 }
													 }
												 }
											 }
										 }
									 }
									 else
									 {
										 nationalIdArr = "";
										 nationalIdTypeCodeArr = "";
										 issuedDateNidArr = "";
										 expieryDateNidArr = "";
										 verificationDateNidArr = "";
										 countryISOCodeNidArr = "";
									 }
									 
									 List<ReportElement> governmentIDList = identificationData.getChildren("wd:Government_ID");
									 if(governmentIDList != null && governmentIDList.size() >0)
									 {
										 govtIdArr = "";
										 govtIdTypeArr = "";
										 goviIdCountryArr = "";
										 govtIdIssuedDateArr = "";
										 govtIdExpirationDateArr = "";
										 govtIdIVerificationDateArr = "";
										 govtIdVerifiedByArr = "";
										 
										 for(ReportElement governmentIdElement : governmentIDList)
										 {
											 ReportElement governmentIdData = governmentIdElement.getChild("wd:Government_ID_Data");
											 if(governmentIdData != null)
											 {
												 govtId = governmentIdData.getChild("wd:ID") != null?governmentIdData.getChild("wd:ID").getValue().trim():""; 
												 if(govtIdArr.equals(""))
												 {
													 govtIdArr = govtId;
												 }
												 else
												 {
													 govtIdArr = govtIdArr + "~" + govtId;
												 }
												 govtIdIssuedDate = governmentIdData.getChild("wd:Issued_Date") != null?governmentIdData.getChild("wd:Issued_Date").getValue().trim():"";
												 if(govtIdIssuedDateArr.equals(""))
												 {
													 govtIdIssuedDateArr = govtIdIssuedDate;
												 }
												 else
												 {
													 if(!govtIdIssuedDate.isEmpty())
													 {
														 govtIdIssuedDateArr = govtIdIssuedDateArr + "~" + govtIdIssuedDate;
													 }
												 }
												 govtIdExpirationDate = governmentIdData.getChild("wd:Expiration_Date") != null?governmentIdData.getChild("wd:Expiration_Date").getValue().trim():"";
												 if(govtIdExpirationDateArr.equals(""))
												 {
													 govtIdExpirationDateArr = govtIdExpirationDate;
												 }
												 else
												 {
													 if(!govtIdExpirationDate.isEmpty())
													 {
														 govtIdExpirationDateArr = govtIdExpirationDateArr + "~" + govtIdExpirationDate;
													 }
												 }
												 govtIdIVerificationDate = governmentIdData.getChild("wd:Verification_Date") != null?governmentIdData.getChild("wd:Verification_Date").getValue().trim():""; 
												 if(govtIdIVerificationDateArr.equals(""))
												 {
													 govtIdIVerificationDateArr = govtIdIVerificationDate;
												 }
												 else
												 {
													 if(!govtIdIVerificationDate.isEmpty())
													 {
														 govtIdIVerificationDateArr = govtIdIVerificationDateArr + "~" + govtIdIVerificationDate;
													 }
												 }
												 
												 ReportElement govtTypeRef = governmentIdData.getChild("wd:ID_Type_Reference");
												 if(govtTypeRef != null)
												 {
													 List<ReportElement> govtIdTypeData = govtTypeRef.getChildren("wd:ID");								 
													 for(ReportElement idTypeElement:govtIdTypeData)
													 {
														 govtIdTypeMap = idTypeElement.getAllAttributes();
														 if(govtIdTypeMap.get("wd:type").equals("Government_ID_Type_ID"))
														 {
															 govtIdType = idTypeElement.getValue().trim();
															 if(govtIdTypeArr.equals(""))
															 {
																 govtIdTypeArr = govtIdType;
															 }
															 else
															 {
																 govtIdTypeArr = govtIdTypeArr + "~" + govtIdType;
															 }
														 }
													 }
												 }
												 
												 ReportElement govtCountryReference = governmentIdData.getChild("wd:Country_Reference");
												 if(govtCountryReference != null)
												 {
													 List<ReportElement> govtCountryData = govtCountryReference.getChildren("wd:ID");								 
													 for(ReportElement countryElement:govtCountryData)
													 {
														 govtCountryMap = countryElement.getAllAttributes();
														 if(govtCountryMap.get("wd:type").equals("ISO_3166-1_Alpha-3_Code"))
														 {
															 goviIdCountry = countryElement.getValue().trim();
															 if(goviIdCountryArr.equals(""))
															 {
																 goviIdCountryArr = goviIdCountry;
															 }
															 else
															 {
																 goviIdCountryArr = goviIdCountryArr + "~" + goviIdCountry;
															 }
														 }
													 }
												 }
												 
												 ReportElement govtVerifiedByRef = governmentIdData.getChild("wd:Verified_by_Reference");
												 if(govtVerifiedByRef != null)
												 {
													 List<ReportElement> govtIdVerifiedByData = govtVerifiedByRef.getChildren("wd:ID");								 
													 for(ReportElement verifiedByElement:govtIdVerifiedByData)
													 {
														 govtIdVerifiedByMap = verifiedByElement.getAllAttributes();
														 if(govtIdVerifiedByMap.get("wd:type").equals("Employee_ID"))
														 {
															 govtIdVerifiedBy = verifiedByElement.getValue().trim();
															 if(govtIdVerifiedByArr.equals(""))
															 {
																 govtIdVerifiedByArr = govtIdVerifiedBy;
															 }
															 else
															 {
																 govtIdVerifiedByArr = govtIdVerifiedByArr + "~" + govtIdVerifiedBy;
															 }
														 }
													 }
												 }											 
											 }
										 }
									 }
									 else
									 {
										 govtIdArr = "";
										 govtIdTypeArr = "";
										 goviIdCountryArr = "";
										 govtIdIssuedDateArr = "";
										 govtIdExpirationDateArr = "";
										 govtIdIVerificationDateArr = "";
										 govtIdVerifiedByArr = "";
									 }
							
									 List<ReportElement> customIDList = identificationData.getChildren("wd:Custom_ID");
									 if(customIDList != null && customIDList.size() >0)
									 {
										 customIdNumber = "" ;
										 for(ReportElement customElement : customIDList)
										 {
											 ReportElement customIdData = customElement.getChild("wd:Custom_ID_Data");
											 if(customIdData != null)
											 {
												 ReportElement customTypeRef = customIdData.getChild("wd:ID_Type_Reference");
												 if(customTypeRef != null)
												 {
													 List<ReportElement> customIdTypeData = customTypeRef.getChildren("wd:ID");								 
													 for(ReportElement idTypeElement:customIdTypeData)
													 {
														 customTypeMap = idTypeElement.getAllAttributes();
														 if(customTypeMap.get("wd:type").equals("Custom_ID_Type_ID"))
														 {
															 if(idTypeElement.getValue().trim().equalsIgnoreCase("Previous_IBM_CNUM"))
															 {
																 customIdNumber = customIdData.getChild("wd:ID") != null?customIdData.getChild("wd:ID").getValue().trim():"";
															 }
														 }
													 }
												 }
											 }
										 }
										 if(customIdNumber.isEmpty())
										 {
											 customIdNumber = "" ;
										 }
									 }
									 else
									 {
										 customIdNumber = "" ;
									 }
								 }
								 else
								 {
									 customIdNumber = "" ;
									 nationalIdArr = "";
									 nationalIdTypeCodeArr = "";
									 issuedDateNidArr = "";
									 expieryDateNidArr = "";
									 verificationDateNidArr = "";
									 countryISOCodeNidArr = "";
									 govtIdArr = "";
									 govtIdTypeArr = "";
									 goviIdCountryArr = "";
									 govtIdIssuedDateArr = "";
									 govtIdExpirationDateArr = "";
									 govtIdIVerificationDateArr = "";
								 }								 								 													        	
						}				        				        
			          }
					 headingFromTargetTenant = "Home_CNUM,Employee_ID,National_ID_Type_Code,National_ID,National_ID_Issued_Date,National_ID_Expiration_Date,National_ID_Verification_Date,Country_ISO_Code_National_ID,"
			        			+ "Government_ID,Government_ID_Type,Government_ID_Country,Government_ID_Issued_Date,Government_ID_Expiration_Date,Government_ID_Verification_Date,Government_ID_Verified_By";
			        			

			        	if(!customIdNumber.isEmpty())
						{
				        	headerStr = customIdNumber + "," + employeeId + "," + nationalIdTypeCodeArr + "," + nationalIdArr + "," + issuedDateNidArr +
							 		 "," + expieryDateNidArr + "," + verificationDateNidArr + "," + countryISOCodeNidArr + "," + 
							 		 govtIdArr + "," + govtIdTypeArr + "," + goviIdCountryArr + "," + govtIdIssuedDateArr + "," + govtIdExpirationDateArr + "," + govtIdIVerificationDateArr + "," + govtIdVerifiedByArr;
				        	
				        	
				        	 targetTenantRowMap.put(customIdNumber, headerStr);
				        	 targetTenantColumnList.add(customIdNumber);
				        	 
							 if(finalStr.equals(""))
							 {
								 finalStr =  headingFromTargetTenant + "\n" + headerStr;
							 }
							 else
							 {
								 finalStr = finalStr + "\n" + headerStr;
							 }
						}
				   }						 							 
			     }
				 System.out.println(finalStr);
				 targetContent = finalStr.getBytes();
				 wdCount = targetTenantColumnList.size();
		   }
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		
	}
	
	private void createTemplateFromSourceTenantOtherID(Tenant tenant2, InputStream is, SOAPConnection soapConnection, String loadCycle, String ruleName, String client, Long userId) {
		
		sourceCount = 0;
		headingFromSourceTenant = "";
		sourceTenantRowMap.clear();
		sourceTenantColumnList.clear();
		errorList.clear();
		String xmlReqFile = null;
		try 
		{			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 xmlReqFile = requestfile.getAbsolutePath();
				 String outputfile = addHireIdList(xmlReqFile, oldEmpList, ruleName, 0, oldEmpList.size(), "Employee_ID");
				 is = new FileInputStream(outputfile);
			     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
			     SOAPPart soapPart = soapMessage.getSOAPPart();
			     SOAPEnvelope envelope = soapPart.getEnvelope();
				 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
				 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
				 {
					  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
					  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
				 }
				 soapMessage.saveChanges();
			     ByteArrayOutputStream out = new ByteArrayOutputStream();
			     soapMessage.writeTo(out);
			     String strMsg = new String(out.toByteArray());	
			     
			     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
			     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
				 soapConnection = soapConnectionFactory.createConnection();
				 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
				 out = new ByteArrayOutputStream();
				 soapResponse.writeTo(out);
				 strMsg = new String(out.toByteArray(), "utf-8");

				 ReportElement soapResp = XmlParserManager.parseXml(strMsg);
				 
				 ReportElement pageData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Results");
				 
				 String totalNoOfPages = pageData.getChild("wd:Total_Pages").getValue().trim();
				 String totalResults = pageData.getChild("wd:Total_Results").getValue().trim();
				 int totalResult = Integer.parseInt(totalResults);
				 System.out.println("totalNoOfPages-"+totalNoOfPages);
				 System.out.println("totalResult-"+totalResult);						 
				 
				 String employeeId = "";
				 String empTerminationDate = "";

				 String customIdNumber = "";
				 String customType = "";
				 String customIdIssuedDate = "";
				 String customIdExpirationDate = "";
				 String customIdVerificationDate = "";
				 String expirationDate = "";
				 String finalStr = "";
				 String headerStr = "";
				 
				 Map<String,String> customTypeMap = null;
				 
				 int startIndex = 0;
				 int endIndex = 0;
				 
				 for (int j = 1; j <=Integer.parseInt(totalNoOfPages); j++) //
				 {
					 if(j == 1)
					 {
						startIndex = 0;
						if(999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = j*999;
						}
					 }
					 else
					 {
						startIndex = endIndex;
						if(j*999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = (j*999);
						}
					 }
					 outputfile = addHireIdList(xmlReqFile, oldEmpList, ruleName, startIndex, endIndex, "Employee_ID");
					 is = new FileInputStream(outputfile);
				     soapMessage = MessageFactory.newInstance().createMessage(null, is);
				     soapPart = soapMessage.getSOAPPart();
				     envelope = soapPart.getEnvelope();
					 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
					 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
					 {
							envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
					 }
					 soapMessage.saveChanges();
			         out = new ByteArrayOutputStream();
			         soapMessage.writeTo(out);
			         strMsg = new String(out.toByteArray());
			        
			         soapConnectionFactory = SOAPConnectionFactory.newInstance();
					 soapConnection = soapConnectionFactory.createConnection();
			         soapResponse = soapConnection.call(soapMessage, sourceUrl);
			         out = new ByteArrayOutputStream();
			         soapResponse.writeTo(out);
			         strMsg = new String(out.toByteArray(), "utf-8");
			        
			         soapResp = XmlParserManager.parseXml(strMsg);
				 
			        
			        ReportElement responseData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Data");
			        
			        List<ReportElement> applicantData = responseData.getChildren("wd:Worker");
			        for(ReportElement reportElement : applicantData)
					{
			        	ReportElement terminationStatusData = reportElement.getChild("wd:Worker_Data")
					 			.getChild("wd:Employment_Data")
					 			.getChild("wd:Worker_Status_Data");
			        	
			        	empTerminationDate = terminationStatusData.getChild("wd:Termination_Date") != null?terminationStatusData.getChild("wd:Termination_Date").getValue().trim():"";					        	
			        	//if(!empTerminationDate.equalsIgnoreCase(""))
			        	{
			        		//Date termDate = convertWorkdayStringToDate(empTerminationDate);
			        		//if((termDate.equals(termFromDate) || termDate.after(termFromDate)) && (termDate.equals(termToDate) || termDate.before(termToDate)))
			        		{
					        	//System.out.println("empTerminationDate--"+ termDate);
				        		ReportElement element1 = reportElement.getChild("wd:Worker_Data");
				        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
				        		System.out.println("employeeId--"+ employeeId);
				        										 
								 ReportElement identificationData = reportElement.getChild("wd:Worker_Data")
								 			.getChild("wd:Personal_Data")
								 			.getChild("wd:Identification_Data");
								 
								 if(identificationData != null)
								 {										 
									 List<ReportElement> customIDList = identificationData.getChildren("wd:Custom_ID");
									 if(customIDList != null && customIDList.size() >0)
									 {
										 expirationDate = "";
										 customIdNumber = "" ;
										 customType = "";
										 customIdIssuedDate = "";
										 customIdVerificationDate = "";
										 for(ReportElement customElement : customIDList)
										 {
											 ReportElement customIdData = customElement.getChild("wd:Custom_ID_Data");
											 if(customIdData != null)
											 {
												 expirationDate = customIdData.getChild("wd:Expiration_Date") != null?customIdData.getChild("wd:Expiration_Date").getValue().trim():"";
												 ReportElement customTypeRef = customIdData.getChild("wd:ID_Type_Reference");
												 if(customTypeRef != null)
												 {
													 List<ReportElement> customIdTypeData = customTypeRef.getChildren("wd:ID");								 
													 for(ReportElement idTypeElement:customIdTypeData)
													 {
														 customTypeMap = idTypeElement.getAllAttributes();
														 if(customTypeMap.get("wd:type").equals("Custom_ID_Type_ID"))
														 {
															 if(idTypeElement.getValue().trim().equalsIgnoreCase("Global_CNUM") && expirationDate.isEmpty())
															 {
																 customType = idTypeElement.getValue().trim();
																 customIdNumber = customIdData.getChild("wd:ID") != null?customIdData.getChild("wd:ID").getValue().trim():""; 
																 customIdIssuedDate = customIdData.getChild("wd:Issued_Date") != null?customIdData.getChild("wd:Issued_Date").getValue().trim():"";
																 customIdExpirationDate = expirationDate;
																 customIdVerificationDate = customIdData.getChild("wd:Verification_Date") != null?customIdData.getChild("wd:EVerification_Date").getValue().trim():""; 
															 }
														 }
													 }
												 }
											 }
										 }
										 if(customIdNumber.isEmpty())
										 {
											 customIdNumber = "" ;
											 customType = "";
											 customIdIssuedDate = "";
											 expirationDate = "";
											 customIdVerificationDate = "";
										 }
									 }
									 else
									 {
										 customIdNumber = "" ;
										 customType = "";
										 customIdIssuedDate = ""; 
										 expirationDate = "";
										 customIdVerificationDate = "";
									 }
								 }
						}						        
				        
			        }
			        	
					headingFromSourceTenant = "Home_CNUM,Employee_ID,Custom_ID_Type,Issued_Date,Expiration_Date,Verification_Date";		        			

		        	if(!customIdNumber.isEmpty())
					{
			        	headerStr = customIdNumber + "," + employeeId + "," + customType + "," + customIdIssuedDate + "," + customIdExpirationDate + "," + customIdVerificationDate;
			        	
			        	sourceTenantRowMap.put(customIdNumber, headerStr);							        	
			        	sourceTenantColumnList.add(customIdNumber);
			        	
			        	if(finalStr.equals(""))
						{
							 finalStr =  headingFromSourceTenant + "\n" + headerStr;
						}
						else
						{
							 finalStr = finalStr + "\n" + headerStr;
						}
					 }
			     }						 							 
			   }
				 
				 System.out.println(finalStr);
				 sourceContent = finalStr.getBytes();
				 sourceCount = sourceTenantColumnList.size();
		    }
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		
	}

	private void createTemplateFromTargetTenantOtherID(Tenant tenant2, InputStream is, SOAPConnection soapConnection, String loadCycle, String ruleName, String client, Long userId) {
		
		wdCount = 0;
		headingFromTargetTenant = "";
		targetTenantRowMap.clear();
		targetTenantColumnList.clear();
		errorList.clear();
		String xmlReqFile = null;
		try 
		{			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 xmlReqFile = requestfile.getAbsolutePath();
				 String outputfile = addHireIdList(xmlReqFile, newEmpList, ruleName, 0, oldEmpList.size(), "Employee_ID");
				 is = new FileInputStream(outputfile);
			     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
			     SOAPPart soapPart = soapMessage.getSOAPPart();
			     SOAPEnvelope envelope = soapPart.getEnvelope();
				 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
				 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
				 {
					  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
					  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
				 }
				 soapMessage.saveChanges();
			     ByteArrayOutputStream out = new ByteArrayOutputStream();
			     soapMessage.writeTo(out);
			     String strMsg = new String(out.toByteArray());	
			     
			     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
			     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
				 soapConnection = soapConnectionFactory.createConnection();
				 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
				 out = new ByteArrayOutputStream();
				 soapResponse.writeTo(out);
				 strMsg = new String(out.toByteArray(), "utf-8");

				 ReportElement soapResp = XmlParserManager.parseXml(strMsg);
				 
				 ReportElement pageData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Results");
				 
				 String totalNoOfPages = pageData.getChild("wd:Total_Pages").getValue().trim();
				 String totalResults = pageData.getChild("wd:Total_Results").getValue().trim();
				 int totalResult = Integer.parseInt(totalResults);
				 System.out.println("totalNoOfPages-"+totalNoOfPages);
				 System.out.println("totalResult-"+totalResult);						 
				 
				 String employeeId = "";
				 String employeeHireDate = "";

				 String customIdNumber = "";
				 String customType = "";
				 String customIdIssuedDate = "";
				 String customIdVerificationDate = "";
				 String expirationDate = "";
				 String finalStr = "";
				 String headerStr = "";
				 
				 Map<String,String> customTypeMap = null;
				 
				 int startIndex = 0;
				 int endIndex = 0;
				 
				 for (int j = 1; j <=Integer.parseInt(totalNoOfPages); j++) //
				 {
					 if(j == 1)
					 {
						startIndex = 0;
						if(999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = j*999;
						}
					 }
					 else
					 {
						startIndex = endIndex;
						if(j*999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = (j*999);
						}
					 }
					 outputfile = addHireIdList(xmlReqFile, newEmpList, ruleName, startIndex, endIndex, "Employee_ID");
					 is = new FileInputStream(outputfile);
				     soapMessage = MessageFactory.newInstance().createMessage(null, is);
				     soapPart = soapMessage.getSOAPPart();
				     envelope = soapPart.getEnvelope();
					 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
					 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
					 {
							envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
					 }
					 soapMessage.saveChanges();
			         out = new ByteArrayOutputStream();
			         soapMessage.writeTo(out);
			         strMsg = new String(out.toByteArray());
			        
			         soapConnectionFactory = SOAPConnectionFactory.newInstance();
					 soapConnection = soapConnectionFactory.createConnection();
			         soapResponse = soapConnection.call(soapMessage, sourceUrl);
			         out = new ByteArrayOutputStream();
			         soapResponse.writeTo(out);
			         strMsg = new String(out.toByteArray(), "utf-8");
			        
			         soapResp = XmlParserManager.parseXml(strMsg);
				 
			        
			        ReportElement responseData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Data");
			        
			        List<ReportElement> applicantData = responseData.getChildren("wd:Worker");
			        for(ReportElement reportElement : applicantData)
					{
			        	ReportElement hireStatusData = reportElement.getChild("wd:Worker_Data")
					 			.getChild("wd:Employment_Data")
					 			.getChild("wd:Worker_Status_Data");
			        	
			        	employeeHireDate = hireStatusData.getChild("wd:Hire_Date") != null?hireStatusData.getChild("wd:Hire_Date").getValue().trim():"";					        	
			        	if(!employeeHireDate.equalsIgnoreCase(""))
			        	{
			        		Date empHireDate = convertWorkdayStringToDate(employeeHireDate);
			        		//if((empHireDate.equals(hireFromDate) || empHireDate.after(hireFromDate)) && (empHireDate.equals(hireToDate) || empHireDate.before(hireToDate)))
			        		{
					        	System.out.println("empHireDate--"+ empHireDate);
				        		ReportElement element1 = reportElement.getChild("wd:Worker_Data");
				        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
				        		System.out.println("employeeId--"+ employeeId);
				        										 
								 ReportElement identificationData = reportElement.getChild("wd:Worker_Data")
								 			.getChild("wd:Personal_Data")
								 			.getChild("wd:Identification_Data");
								 
								 if(identificationData != null)
								 {										 
									 List<ReportElement> customIDList = identificationData.getChildren("wd:Custom_ID");
									 if(customIDList != null && customIDList.size() >0)
									 {
										 expirationDate = "";
										 customIdNumber = "" ;
										 customType = "";
										 customIdIssuedDate = "";
										 customIdVerificationDate = "";
										 for(ReportElement customElement : customIDList)
										 {
											 ReportElement customIdData = customElement.getChild("wd:Custom_ID_Data");
											 if(customIdData != null)
											 {												 
												 ReportElement customTypeRef = customIdData.getChild("wd:ID_Type_Reference");
												 if(customTypeRef != null)
												 {
													 List<ReportElement> customIdTypeData = customTypeRef.getChildren("wd:ID");								 
													 for(ReportElement idTypeElement:customIdTypeData)
													 {
														 customTypeMap = idTypeElement.getAllAttributes();
														 if(customTypeMap.get("wd:type").equals("Custom_ID_Type_ID"))
														 {
															 if(idTypeElement.getValue().trim().equalsIgnoreCase("Previous_IBM_CNUM"))
															 {
																 customType = idTypeElement.getValue().trim();
																 customIdNumber = customIdData.getChild("wd:ID") != null?customIdData.getChild("wd:ID").getValue().trim():""; 
																 customIdIssuedDate = customIdData.getChild("wd:Issued_Date") != null?customIdData.getChild("wd:Issued_Date").getValue().trim():"";
																 expirationDate = customIdData.getChild("wd:Expiration_Date") != null?customIdData.getChild("wd:Expiration_Date").getValue().trim():"";
																 customIdVerificationDate = customIdData.getChild("wd:Verification_Date") != null?customIdData.getChild("wd:EVerification_Date").getValue().trim():""; 
															 }
														 }
													 }
												 }
											 }
										 }
										 if(customIdNumber.isEmpty())
										 {
											 customIdNumber = "" ;
											 customType = "";
											 customIdIssuedDate = ""; 
											 expirationDate = "";
											 customIdVerificationDate = "";
										 }
									 }
									 else
									 {
										 customIdNumber = "" ;
										 customType = "";
										 customIdIssuedDate = ""; 
										 expirationDate = "";
										 customIdVerificationDate = "";
									 }
								 }
						}						        
				        
			        }
			        	
					headingFromTargetTenant = "Home_CNUM,Employee_ID,Custom_ID_Type,Issued_Date,Expiration_Date,Verification_Date";		        			

		        	if(!customIdNumber.isEmpty())
					{
			        	headerStr = customIdNumber + "," + employeeId + "," + customType + "," + customIdIssuedDate + "," + expirationDate + "," + customIdVerificationDate;
			        	
			        	targetTenantRowMap.put(customIdNumber, headerStr);							        	
			        	targetTenantColumnList.add(customIdNumber);
			        	
			        	if(finalStr.equals(""))
						{
							 finalStr =  headingFromTargetTenant + "\n" + headerStr;
						}
						else
						{
							 finalStr = finalStr + "\n" + headerStr;
						}
					 }
			     }						 							 
			   }
				 
				 System.out.println(finalStr);
				 targetContent = finalStr.getBytes();
				 wdCount = targetTenantColumnList.size();
		    }
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		
	}
	
	private void createTemplateFromSourceTenantCustomDomain8(Tenant tenant2, InputStream is, SOAPConnection soapConnection, String loadCycle, String ruleName, String client, Long userId) {		
		
		sourceCount = 0;
		headingFromSourceTenant = "";
		sourceTenantRowMap.clear();
		sourceTenantColumnList.clear();
		errorList.clear();
		String xmlReqFile = null;
		try 
		{			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 xmlReqFile = requestfile.getAbsolutePath();
				 String outputfile = addHireIdList(xmlReqFile, oldEmpList, ruleName, 0, oldEmpList.size(), "Employee_ID");
				 is = new FileInputStream(outputfile);
			     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
			     SOAPPart soapPart = soapMessage.getSOAPPart();
			     SOAPEnvelope envelope = soapPart.getEnvelope();
				 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
				 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
				 {
					  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
					  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
				 }
				 soapMessage.saveChanges();
			     ByteArrayOutputStream out = new ByteArrayOutputStream();
			     soapMessage.writeTo(out);
			     String strMsg = new String(out.toByteArray());	
			     
			     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
			     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
				 soapConnection = soapConnectionFactory.createConnection();
				 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
				 out = new ByteArrayOutputStream();
				 soapResponse.writeTo(out);
				 strMsg = new String(out.toByteArray(), "utf-8");

				 ReportElement soapResp = XmlParserManager.parseXml(strMsg);
				 
				 ReportElement pageData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Results");
				 
				 String totalNoOfPages = pageData.getChild("wd:Total_Pages").getValue().trim();
				 String totalResults = pageData.getChild("wd:Total_Results").getValue().trim();
				 int totalResult = Integer.parseInt(totalResults);
				 System.out.println("totalNoOfPages-"+totalNoOfPages);
				 System.out.println("totalResult-"+totalResult);						 
				 
				 String employeeId = "";
				 String WID = "";
				 String empTerminationDate = "";						 
				 String customIdNumber = "";
				 String birthDate = "";
				 String maidenName = "";
				 String motherMaidenName = "";
				 String scattiNextJumpDate = "";
				 String dateOfFirstEnrollmentMandatorySocialSecurity = "";
				 String dateOfEnrollmentToIbmPension = "";
				 String tfrSeniorityDate = "";
				 String tfrDestination = "";
				 String essentialBusinessContinuityEmployee = "";
				 String employeeMustBeOnsite = "";
				 String howOftenDoesTheEmployeeNeedToBeOnsite = "";
				 String reportURL = "";
				 
				 String finalStr = "";
				 String headerStr = "";
				 						 
				 Map<String,String> customTypeMap = null;
				 Map<String,String> widMap = null;
				 
				 int startIndex = 0;
				 int endIndex = 0;
				 
				 for (int j = 1; j <=Integer.parseInt(totalNoOfPages); j++) //
				 {
					 if(j == 1)
					 {
						startIndex = 0;
						if(999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = j*999;
						}
					 }
					 else
					 {
						startIndex = endIndex;
						if(j*999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = (j*999);
						}
					 }
					 outputfile = addHireIdList(xmlReqFile, oldEmpList, ruleName, startIndex, endIndex, "Employee_ID");
					 is = new FileInputStream(outputfile);
				     soapMessage = MessageFactory.newInstance().createMessage(null, is);
				     soapPart = soapMessage.getSOAPPart();
				     envelope = soapPart.getEnvelope();
					 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
					 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
					 {
							envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
					 }
					 soapMessage.saveChanges();
			         out = new ByteArrayOutputStream();
			         soapMessage.writeTo(out);
			         strMsg = new String(out.toByteArray());
			        
			         soapConnectionFactory = SOAPConnectionFactory.newInstance();
					 soapConnection = soapConnectionFactory.createConnection();
			         soapResponse = soapConnection.call(soapMessage, sourceUrl);
			         out = new ByteArrayOutputStream();
			         soapResponse.writeTo(out);
			         strMsg = new String(out.toByteArray(), "utf-8");
			        
			         soapResp = XmlParserManager.parseXml(strMsg);
			        
			        ReportElement responseData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Data");
			        
			        List<ReportElement> applicantData = responseData.getChildren("wd:Worker");
			        for(ReportElement reportElement : applicantData)
					{
			        	ReportElement terminationStatusData = reportElement.getChild("wd:Worker_Data")
					 			.getChild("wd:Employment_Data")
					 			.getChild("wd:Worker_Status_Data");
			        	
			        	empTerminationDate = terminationStatusData.getChild("wd:Termination_Date") != null?terminationStatusData.getChild("wd:Termination_Date").getValue().trim():"";					        	
			        	//if(!empTerminationDate.equalsIgnoreCase(""))
			        	{
			        		//Date termDate = convertWorkdayStringToDate(empTerminationDate);
			        		//if((termDate.equals(termFromDate) || termDate.after(termFromDate)) && (termDate.equals(termToDate) || termDate.before(termToDate)))
			        		{
					        	//System.out.println("empTerminationDate--"+ termDate);
				        		ReportElement element1 = reportElement.getChild("wd:Worker_Data");
				        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
				        		System.out.println("employeeId--"+ employeeId);
				        		
				        		ReportElement widRef = reportElement.getChild("wd:Worker_Reference");
								 if(widRef != null)
								 {
									 List<ReportElement> idList = widRef.getChildren("wd:ID");
									 for(ReportElement idElement:idList)
									 {
										 widMap = idElement.getAllAttributes();
										 if(widMap.get("wd:type").equals("WID"))
										 {
											 WID = idElement.getValue().trim();
										 }
									 }
								 }
								 else
								 {
									 WID = "";
								 }
								
								 /*if(tenant.getTenantName().equalsIgnoreCase("ibm6"))
								 {
									 reportURL = "https://" + tenant.getTenantUrl() + "customreport2/" + tenant.getTenantName() + "/ISU_Verify_Global/" + "Custom_Domain8?Effective_as_of_Date=2021-09-01-07:00&Employee!WID=" + WID;
								 }
								 else if(tenant.getTenantName().equalsIgnoreCase("ibm10"))
								 {*/
									 reportURL = "https://" + tenant.getTenantUrl() + "customreport2/" + tenant.getTenantName() + "/ISU_Verify_Global/" + "Custom_Domain8?Effective_as_of_Date=2021-10-11-07:00&Employee!WID=" + WID;
								 //}
								 
								 JSONArray jArr = createCustomDomain8Data(reportURL);
								 if(jArr != null && jArr.length() >0)
								 {
									 for(int i = 0; i<jArr.length(); i++) 
								     {
										JSONObject objects = jArr.getJSONObject(i);
										birthDate = objects.isNull("birthDate")?"":objects.getString("birthDate");
										maidenName = objects.isNull("maidenName")?"":objects.getString("maidenName");
										motherMaidenName = objects.isNull("motherMaidenName")?"":objects.getString("motherMaidenName");
										scattiNextJumpDate = objects.isNull("scattiNextJumpDate")?"":objects.getString("scattiNextJumpDate");
										dateOfFirstEnrollmentMandatorySocialSecurity = objects.isNull("dateOfFirstEnrollmentMandatorySocialSecurity")?"":objects.getString("dateOfFirstEnrollmentMandatorySocialSecurity");
										dateOfEnrollmentToIbmPension = objects.isNull("dateOfEnrollmentToIbmPension")?"":objects.getString("dateOfEnrollmentToIbmPension");
										tfrSeniorityDate = objects.isNull("tfrSeniorityDate")?"":objects.getString("tfrSeniorityDate");
										tfrDestination = objects.isNull("tfrDestination")?"":objects.getString("tfrDestination");
										essentialBusinessContinuityEmployee = objects.isNull("essentialBusinessContinuityEmployee")?"":objects.getString("essentialBusinessContinuityEmployee");
										employeeMustBeOnsite = objects.isNull("employeeMustBeOnsite")?"":objects.getString("employeeMustBeOnsite");
										howOftenDoesTheEmployeeNeedToBeOnsite = objects.isNull("howOftenDoesTheEmployeeNeedToBeOnsite")?"":objects.getString("howOftenDoesTheEmployeeNeedToBeOnsite");
										if(howOftenDoesTheEmployeeNeedToBeOnsite.contains(","))
										{
											howOftenDoesTheEmployeeNeedToBeOnsite = howOftenDoesTheEmployeeNeedToBeOnsite.replaceAll(",", "|");
										}
								     }
								 }
								 else
								 {
									 birthDate = "";
									 maidenName = "";
									 motherMaidenName = "";
									 scattiNextJumpDate = "";
									 dateOfFirstEnrollmentMandatorySocialSecurity = "";
									 dateOfEnrollmentToIbmPension = "";
									 tfrSeniorityDate = "";
									 tfrDestination = "";
									 essentialBusinessContinuityEmployee = "";
									 employeeMustBeOnsite = "";
									 howOftenDoesTheEmployeeNeedToBeOnsite = "";
								 }
								 																											 
								 ReportElement identificationData = reportElement.getChild("wd:Worker_Data")
								 			.getChild("wd:Personal_Data")
								 			.getChild("wd:Identification_Data");
								 
								 if(identificationData != null)
								 {												 
									 List<ReportElement> customIDList = identificationData.getChildren("wd:Custom_ID");
									 if(customIDList != null && customIDList.size() >0)
									 {
										 String expirationDate = "";
										 customIdNumber = "" ;
										 for(ReportElement customElement : customIDList)
										 {
											 ReportElement customIdData = customElement.getChild("wd:Custom_ID_Data");
											 if(customIdData != null)
											 {
												 expirationDate = customIdData.getChild("wd:Expiration_Date") != null?customIdData.getChild("wd:Expiration_Date").getValue().trim():"";
												 ReportElement customTypeRef = customIdData.getChild("wd:ID_Type_Reference");
												 if(customTypeRef != null)
												 {
													 List<ReportElement> customIdTypeData = customTypeRef.getChildren("wd:ID");								 
													 for(ReportElement idTypeElement:customIdTypeData)
													 {
														 customTypeMap = idTypeElement.getAllAttributes();
														 if(customTypeMap.get("wd:type").equals("Custom_ID_Type_ID"))
														 {
															 if(idTypeElement.getValue().trim().equalsIgnoreCase("Global_CNUM") && expirationDate.isEmpty())
															 {
																 customIdNumber = customIdData.getChild("wd:ID") != null?customIdData.getChild("wd:ID").getValue().trim():""; 
															 }
														 }
													 }
												 }												 												 
											 }
										 }
										 if(customIdNumber.isEmpty())
										 {
											 customIdNumber = "" ;
										 }
									 }
									 else
									 {
										 customIdNumber = "" ;
									 }
								 }
								 else
								 {
									 customIdNumber = "" ;											 
								 }								 															 
						}						        
			           }

			        	headingFromSourceTenant = "Home_CNUM,Employee_ID,Birth_Date,Maiden_Name,Mothers_Maiden_Name,Scatti_Next_Jump_Date,Date_Of_First_Enrollment_Mandatory_Social_Security,"
			        							+ "Date_Of_Enrollment_To_Ibm_Pension,TFR_Seniority_Date,TFR_Destination,Essential_Business_Continuity_Employee,"
			        							+ "Employee_Must_Be_Onsite,How_Often_Does_The_Employee_Need_To_Be_Onsite";
			        	if(!customIdNumber.isEmpty())
						{
				        	headerStr = customIdNumber + "," + employeeId + "," + birthDate + "," + maidenName + "," + motherMaidenName + "," + scattiNextJumpDate + "," + dateOfFirstEnrollmentMandatorySocialSecurity
				        			+ "," + dateOfEnrollmentToIbmPension + "," + tfrSeniorityDate + "," + tfrDestination + "," + essentialBusinessContinuityEmployee + "," +
				        			employeeMustBeOnsite + "," + howOftenDoesTheEmployeeNeedToBeOnsite;
				        	
				        	sourceTenantRowMap.put(customIdNumber, headerStr);							        	
				        	sourceTenantColumnList.add(customIdNumber);
				        	
				        	if(finalStr.equals(""))
							{
								 finalStr =  headingFromSourceTenant + "\n" + headerStr;
							}
							else
							{
								 finalStr = finalStr + "\n" + headerStr;
							}
						}	
			     }						 							 
			   }
				 System.out.println(finalStr);
				 sourceContent = finalStr.getBytes();						 
				 sourceCount = sourceTenantColumnList.size();
		    }
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		
	}


	private void createTemplateFromTargetTenantCustomDomain8(Tenant tenant2, InputStream is, SOAPConnection soapConnection, String loadCycle, String ruleName, String client, Long userId) {
		
		wdCount = 0;
		headingFromTargetTenant = "";
		targetTenantRowMap.clear();
		targetTenantColumnList.clear();
		String xmlReqFile = null;
		try 
		{			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 xmlReqFile = requestfile.getAbsolutePath();
				 String outputfile = addHireIdList(xmlReqFile, newEmpList, ruleName, 0, newEmpList.size(), "Employee_ID");
				 is = new FileInputStream(outputfile);
			     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
			     SOAPPart soapPart = soapMessage.getSOAPPart();
			     SOAPEnvelope envelope = soapPart.getEnvelope();
				 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
				 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
				 {
					  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
					  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
				 }
				 soapMessage.saveChanges();
			     ByteArrayOutputStream out = new ByteArrayOutputStream();
			     soapMessage.writeTo(out);
			     String strMsg = new String(out.toByteArray());	
			     
			     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
			     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
				 soapConnection = soapConnectionFactory.createConnection();
				 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
				 out = new ByteArrayOutputStream();
				 soapResponse.writeTo(out);
				 strMsg = new String(out.toByteArray(), "utf-8");

				 ReportElement soapResp = XmlParserManager.parseXml(strMsg);
				 
				 ReportElement pageData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Results");
				 
				 String totalNoOfPages = pageData.getChild("wd:Total_Pages").getValue().trim();
				 String totalResults = pageData.getChild("wd:Total_Results").getValue().trim();
				 int totalResult = Integer.parseInt(totalResults);
				 System.out.println("totalNoOfPages-"+totalNoOfPages);
				 System.out.println("totalResult-"+totalResult);				 
				 
				 String employeeId = "";
				 String WID = "";
				 String employeeHireDate = "";
				 String customIdNumber = "";
				 String birthDate = "";
				 String maidenName = "";
				 String motherMaidenName = "";
				 String scattiNextJumpDate = "";
				 String dateOfFirstEnrollmentMandatorySocialSecurity = "";
				 String dateOfEnrollmentToIbmPension = "";
				 String tfrSeniorityDate = "";
				 String tfrDestination = "";
				 String essentialBusinessContinuityEmployee = "";
				 String employeeMustBeOnsite = "";
				 String howOftenDoesTheEmployeeNeedToBeOnsite = "";
				 String reportURL = "";
				 
				 String finalStr = "";
				 String headerStr = "";
				 						 
				 Map<String,String> customTypeMap = null;
				 Map<String,String> widMap = null;
				 
				 int startIndex = 0;
				 int endIndex = 0;
				 
				 for (int j = 1; j <=Integer.parseInt(totalNoOfPages); j++) //
				 {
					 if(j == 1)
					 {
						startIndex = 0;
						if(999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = j*999;
						}
					 }
					 else
					 {
						startIndex = endIndex;
						if(j*999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = (j*999);
						}
					 }
					 outputfile = addHireIdList(xmlReqFile, newEmpList, ruleName, startIndex, endIndex, "Employee_ID");
					 is = new FileInputStream(outputfile);
				     soapMessage = MessageFactory.newInstance().createMessage(null, is);
				     soapPart = soapMessage.getSOAPPart();
				     envelope = soapPart.getEnvelope();
					 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
					 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
					 {
							envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
					 }
					 soapMessage.saveChanges();
			         out = new ByteArrayOutputStream();
			         soapMessage.writeTo(out);
			         strMsg = new String(out.toByteArray());
			        
			         soapConnectionFactory = SOAPConnectionFactory.newInstance();
					 soapConnection = soapConnectionFactory.createConnection();
			         soapResponse = soapConnection.call(soapMessage, sourceUrl);
			         out = new ByteArrayOutputStream();
			         soapResponse.writeTo(out);
			         strMsg = new String(out.toByteArray(), "utf-8");
			        
			         soapResp = XmlParserManager.parseXml(strMsg);
			        
			        ReportElement responseData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Data");
			        
			        List<ReportElement> applicantData = responseData.getChildren("wd:Worker");
			        for(ReportElement reportElement : applicantData)
					{
			        	ReportElement hireStatusData = reportElement.getChild("wd:Worker_Data")
					 			.getChild("wd:Employment_Data")
					 			.getChild("wd:Worker_Status_Data");
			        	
			        	employeeHireDate = hireStatusData.getChild("wd:Hire_Date") != null?hireStatusData.getChild("wd:Hire_Date").getValue().trim():"";					        	
			        	if(!employeeHireDate.equalsIgnoreCase(""))
			        	{
			        		Date empHireDate = convertWorkdayStringToDate(employeeHireDate);
			        		//if((empHireDate.equals(hireFromDate) || empHireDate.after(hireFromDate)) && (empHireDate.equals(hireToDate) || empHireDate.before(hireToDate)))
			        		{
					        	System.out.println("empHireDate--"+ empHireDate);
				        		ReportElement element1 = reportElement.getChild("wd:Worker_Data");
				        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
				        		System.out.println("employeeId--"+ employeeId);
				        		
				        		ReportElement widRef = reportElement.getChild("wd:Worker_Reference");
								 if(widRef != null)
								 {
									 List<ReportElement> idList = widRef.getChildren("wd:ID");
									 for(ReportElement idElement:idList)
									 {
										 widMap = idElement.getAllAttributes();
										 if(widMap.get("wd:type").equals("WID"))
										 {
											 WID = idElement.getValue().trim();
										 }
									 }
								 }
								 else
								 {
									 WID = "";
								 }
								
								 /*if(tenant.getTenantName().equalsIgnoreCase("ibm6"))
								 {
									 reportURL = "https://" + tenant.getTenantUrl() + "customreport2/" + tenant.getTenantName() + "/ISU_Verify_Global/" + "Custom_Domain8?Effective_as_of_Date=2021-09-01-07:00&Employee!WID=" + WID;
								 }
								 else if(tenant.getTenantName().equalsIgnoreCase("ibm10"))
								 {*/
									 reportURL = "https://" + tenant.getTenantUrl() + "customreport2/" + tenant.getTenantName() + "/ISU_Verify_Global/" + "Custom_Domain8?Effective_as_of_Date=2021-11-01-07:00&Employee!WID=" + WID;
								 //}
								 
								 JSONArray jArr = createCustomDomain8Data(reportURL);
								 if(jArr != null && jArr.length() >0)
								 {
									 for(int i = 0; i<jArr.length(); i++) 
								     {
										JSONObject objects = jArr.getJSONObject(i);
										birthDate = objects.isNull("birthDate")?"":objects.getString("birthDate");
										maidenName = objects.isNull("maidenName")?"":objects.getString("maidenName");
										motherMaidenName = objects.isNull("motherMaidenName")?"":objects.getString("motherMaidenName");
										scattiNextJumpDate = objects.isNull("scattiNextJumpDate")?"":objects.getString("scattiNextJumpDate");
										dateOfFirstEnrollmentMandatorySocialSecurity = objects.isNull("dateOfFirstEnrollmentMandatorySocialSecurity")?"":objects.getString("dateOfFirstEnrollmentMandatorySocialSecurity");
										dateOfEnrollmentToIbmPension = objects.isNull("dateOfEnrollmentToIbmPension")?"":objects.getString("dateOfEnrollmentToIbmPension");
										tfrSeniorityDate = objects.isNull("tfrSeniorityDate")?"":objects.getString("tfrSeniorityDate");
										tfrDestination = objects.isNull("tfrDestination")?"":objects.getString("tfrDestination");
										essentialBusinessContinuityEmployee = objects.isNull("essentialBusinessContinuityEmployee")?"":objects.getString("essentialBusinessContinuityEmployee");
										employeeMustBeOnsite = objects.isNull("employeeMustBeOnsite")?"":objects.getString("employeeMustBeOnsite");
										howOftenDoesTheEmployeeNeedToBeOnsite = objects.isNull("howOftenDoesTheEmployeeNeedToBeOnsite")?"":objects.getString("howOftenDoesTheEmployeeNeedToBeOnsite");
										if(howOftenDoesTheEmployeeNeedToBeOnsite.contains(","))
										{
											howOftenDoesTheEmployeeNeedToBeOnsite = howOftenDoesTheEmployeeNeedToBeOnsite.replaceAll(",", "|");
										}
								     }
								 }
								 else
								 {
									 birthDate = "";
									 maidenName = "";
									 motherMaidenName = "";
									 scattiNextJumpDate = "";
									 dateOfFirstEnrollmentMandatorySocialSecurity = "";
									 dateOfEnrollmentToIbmPension = "";
									 tfrSeniorityDate = "";
									 tfrDestination = "";
									 essentialBusinessContinuityEmployee = "";
									 employeeMustBeOnsite = "";
									 howOftenDoesTheEmployeeNeedToBeOnsite = "";
								 }
				        						        										 
								 ReportElement identificationData = reportElement.getChild("wd:Worker_Data")
								 			.getChild("wd:Personal_Data")
								 			.getChild("wd:Identification_Data");
								 
								 if(identificationData != null)
								 {																		 
									 List<ReportElement> customIDList = identificationData.getChildren("wd:Custom_ID");
									 if(customIDList != null && customIDList.size() >0)
									 {
										 //String customIdOldDate = null;
										 customIdNumber = "" ;
										 for(ReportElement customElement : customIDList)
										 {
											 ReportElement customIdData = customElement.getChild("wd:Custom_ID_Data");
											 if(customIdData != null)
											 {
												 ReportElement customTypeRef = customIdData.getChild("wd:ID_Type_Reference");
												 if(customTypeRef != null)
												 {
													 List<ReportElement> customIdTypeData = customTypeRef.getChildren("wd:ID");								 
													 for(ReportElement idTypeElement:customIdTypeData)
													 {
														 customTypeMap = idTypeElement.getAllAttributes();
														 if(customTypeMap.get("wd:type").equals("Custom_ID_Type_ID"))
														 {
															 if(idTypeElement.getValue().trim().equalsIgnoreCase("Previous_IBM_CNUM"))
															 {
																 customIdNumber = customIdData.getChild("wd:ID") != null?customIdData.getChild("wd:ID").getValue().trim():"";
															 }
														 }
													 }
												 }
											 }
										 }
										 if(customIdNumber.isEmpty())
										 {
											 customIdNumber = "" ;
										 }
									 }
									 else
									 {
										 customIdNumber = "" ;
									 }
								 }
								 else
								 {
									 customIdNumber = "" ;
								 }
						}				        
			          }
			        	
			        	headingFromTargetTenant = "Home_CNUM,Employee_ID,Birth_Date,Maiden_Name,Mothers_Maiden_Name,Scatti_Next_Jump_Date,Date_Of_First_Enrollment_Mandatory_Social_Security,"
    							+ "Date_Of_Enrollment_To_Ibm_Pension,TFR_Seniority_Date,TFR_Destination,Essential_Business_Continuity_Employee,"
    							+ "Employee_Must_Be_Onsite,How_Often_Does_The_Employee_Need_To_Be_Onsite";
			        	
						    	if(!customIdNumber.isEmpty())
								{
						        	headerStr = customIdNumber + "," + employeeId + "," + birthDate + "," + maidenName + "," + motherMaidenName + "," + scattiNextJumpDate + "," + dateOfFirstEnrollmentMandatorySocialSecurity
						        			+ "," + dateOfEnrollmentToIbmPension + "," + tfrSeniorityDate + "," + tfrDestination + "," + essentialBusinessContinuityEmployee + "," +
						        			employeeMustBeOnsite + "," + howOftenDoesTheEmployeeNeedToBeOnsite;
							        	
						        	 targetTenantRowMap.put(customIdNumber, headerStr);
						        	 targetTenantColumnList.add(customIdNumber);
						        	 
									 if(finalStr.equals(""))
									 {
										 finalStr =  headingFromTargetTenant + "\n" + headerStr;
									 }
									 else
									 {
										 finalStr = finalStr + "\n" + headerStr;
									 }
							}
				   }						 							 
			     }
				 System.out.println(finalStr);
				 targetContent = finalStr.getBytes();
				 wdCount = targetTenantColumnList.size();
		   }
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		
	}
	
	private JSONArray createCustomDomain8Data(String reportURL) throws JSONException {

		JSONArray jArr = new JSONArray();
		DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilder dBuilder;
		XPath xPath = XPathFactory.newInstance().newXPath();
		HttpBasicAuthentication httpBasicAuthentication = new HttpBasicAuthentication();
		String output = httpBasicAuthentication.getWithBasicAuthentication(reportURL, tenant.getTenantUser(), tenant.getTenantUserPassword());
		Reader reader1 = new StringReader(output);
		Document doc;
		try 
		{
			dBuilder = dbFactory.newDocumentBuilder();
			doc = dBuilder.parse(new InputSource(reader1));
			doc.getDocumentElement().normalize();
			String expression = EMPLOYEE_APPLICANT_MAPPING_RESPONSE_EXPRESSION;
			NodeList nodeList = (NodeList) xPath.compile(expression).evaluate(doc, XPathConstants.NODESET);
			for (int i = 0; i < nodeList.getLength(); i++) 
			{
				try 
				{
					jArr = parseNodesForCustomDomain8(nodeList);
				} 
				catch (DOMException e)
				{
					e.printStackTrace();
				}
			}			
		} 
		catch (SAXException e) 
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (XPathExpressionException e) 
		{
			e.printStackTrace();
		} 
		catch (ParserConfigurationException e) 
		{
			e.printStackTrace();
		}
		return jArr;
	}

	private JSONArray parseNodesForCustomDomain8(NodeList nodeList) throws DOMException, JSONException {

		JSONArray details = new JSONArray();
		for (int i = 0; i < nodeList.getLength(); i++) 
		{
		    Node nNode = nodeList.item(i);
		    if (nNode.getNodeName().equals("wd:Report_Data")) 
		    {
				if (nNode.getNodeType() == Node.ELEMENT_NODE) 
				{
					Element eElement = (Element) nNode;
					if (eElement.hasChildNodes()) 
					{
						NodeList childNodes = eElement.getChildNodes();
						for (int j = 0; j < childNodes.getLength(); j++) 
						{
							Node aChildNode = childNodes.item(j);
							JSONObject obj = new JSONObject();
							if (aChildNode.getNodeName().equals("wd:Report_Entry")) 
							{
								Element eElementEntry = (Element) aChildNode;
								if (eElement.hasChildNodes()) 
								{
									NodeList childNodesEntry = eElementEntry.getChildNodes();
									for (int k = 0; k < childNodesEntry.getLength(); k++) 
									{										
										Node aChildNodeEntry = childNodesEntry.item(k);
										if(aChildNodeEntry.getNodeName().equals("wd:CF_Birth_Name_Aus_LRV"))
										{											
											obj.put("birthDate", aChildNodeEntry.getTextContent());											
										}
										else if(aChildNodeEntry.getNodeName().equals("wd:CF_Maiden_Name_LRV"))
										{
											obj.put("maidenName", aChildNodeEntry.getTextContent());	
										}
										else if(aChildNodeEntry.getNodeName().equals("wd:CF_Mother_Maiden_Name_LRV"))
										{
											obj.put("motherMaidenName", aChildNodeEntry.getTextContent());	
										}
										else if(aChildNodeEntry.getNodeName().equals("wd:CF_Scatti_Next_Jump_Date_LRV"))
										{
											obj.put("scattiNextJumpDate", aChildNodeEntry.getTextContent());	
										}
										else if(aChildNodeEntry.getNodeName().equals("wd:CF_LRV_Date_of_First_Enrollment_to_Mandatory_Social_Security"))
										{
											String secVal = aChildNodeEntry.getAttributes().getNamedItem("wd:Descriptor").toString();
											String socialSecVal = secVal.replaceAll("\"", "");
											int pos = socialSecVal.trim().indexOf("=") + 1;
											String actualSocialSecVal = socialSecVal.substring(pos, socialSecVal.length());
											obj.put("dateOfFirstEnrollmentMandatorySocialSecurity", actualSocialSecVal);	
										}
										else if(aChildNodeEntry.getNodeName().equals("wd:CF_LRV_Worker_Date_of_Enrollment_to_IBM_Pension"))
										{
											obj.put("dateOfEnrollmentToIbmPension", aChildNodeEntry.getTextContent());	
										}
										else if(aChildNodeEntry.getNodeName().equals("wd:CF_LRV_Worker_TFR_Seniority_Date"))
										{
											obj.put("tfrSeniorityDate", aChildNodeEntry.getTextContent());	
										}
										else if(aChildNodeEntry.getNodeName().equals("wd:CF_LRV_Worker_TFR_Destination"))
										{
											String destVal = aChildNodeEntry.getAttributes().getNamedItem("wd:Descriptor").toString();
											String destinationVal = destVal.replaceAll("\"", "");
											int pos = destinationVal.trim().indexOf("=") + 1;
											String actualDestination = destinationVal.substring(pos, destinationVal.length());
											obj.put("tfrDestination", actualDestination);	
										}
										else if(aChildNodeEntry.getNodeName().equals("wd:CF_LRV_Essential_Business_Continuity_Employee"))
										{
											String businessVal = aChildNodeEntry.getAttributes().getNamedItem("wd:Descriptor").toString();
											String essBusinessVal = businessVal.replaceAll("\"", "");
											int pos = essBusinessVal.trim().indexOf("=") + 1;
											String actualBusiness = essBusinessVal.substring(pos, essBusinessVal.length());
											obj.put("essentialBusinessContinuityEmployee", actualBusiness);	
										}
										else if(aChildNodeEntry.getNodeName().equals("wd:CF_LRV_Employee_must_be_onsite"))
										{
											String onsiteVal = aChildNodeEntry.getAttributes().getNamedItem("wd:Descriptor").toString();
											String empOnsiteVal = onsiteVal.replaceAll("\"", "");
											int pos = empOnsiteVal.trim().indexOf("=") + 1;
											String actualEmpOnsiteVal = empOnsiteVal.substring(pos, empOnsiteVal.length());
											obj.put("employeeMustBeOnsite", actualEmpOnsiteVal);	
										}
										else if(aChildNodeEntry.getNodeName().equals("wd:CF_LRV_How_often_does_the_employee_need_to_be_onsite"))
										{
											String oftenVal = aChildNodeEntry.getAttributes().getNamedItem("wd:Descriptor").toString();
											String howOftenVal = oftenVal.replaceAll("\"", "");
											int pos = howOftenVal.trim().indexOf("=") + 1;
											String actualHowOftenVal = howOftenVal.substring(pos, howOftenVal.length());
											obj.put("howOftenDoesTheEmployeeNeedToBeOnsite", actualHowOftenVal);	
										}
									}
								}
							}
							details.put(obj);
						}
					}
				}
		    }
		}
		return details;
	}
	
	private void createTemplateFromSourceTenantBeneficiary(Tenant tenant, InputStream is, SOAPConnection soapConnection, String loadCycle, String ruleName, String client, Long userId) {
		
		sourceCount = 0;
		headingFromSourceTenant = "";
		sourceTenantRowMap.clear();
		sourceTenantColumnList.clear();
		errorList.clear();
		String xmlReqFile = null;
		try 
		{			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 xmlReqFile = requestfile.getAbsolutePath();
				 String outputfile = addHireIdList(xmlReqFile, oldEmpList, ruleName, 0, oldEmpList.size(), "Employee_ID");
				 is = new FileInputStream(outputfile);
			     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
			     SOAPPart soapPart = soapMessage.getSOAPPart();
			     SOAPEnvelope envelope = soapPart.getEnvelope();
				 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
				 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
				 {
					  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
					  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
				 }
				 soapMessage.saveChanges();
			     ByteArrayOutputStream out = new ByteArrayOutputStream();
			     soapMessage.writeTo(out);
			     String strMsg = new String(out.toByteArray());	
			     
			     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
			     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
				 soapConnection = soapConnectionFactory.createConnection();
				 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
				 out = new ByteArrayOutputStream();
				 soapResponse.writeTo(out);
				 strMsg = new String(out.toByteArray(), "utf-8");

				 ReportElement soapResp = XmlParserManager.parseXml(strMsg);
				 
				 ReportElement pageData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Results");
				 
				 String totalNoOfPages = pageData.getChild("wd:Total_Pages").getValue().trim();
				 String totalResults = pageData.getChild("wd:Total_Results").getValue().trim();
				 int totalResult = Integer.parseInt(totalResults);
				 System.out.println("totalNoOfPages-"+totalNoOfPages);
				 System.out.println("totalResult-"+totalResult);						 
				 
				 String employeeId = "";
				 String empTerminationDate = "";						 
				 String customIdNumber = "";
				 String relatedPersonRelationShipName = "";
				 String formattedName = "";
				 String reportingName = "";
				 String formattedAddress = "";
				 String countryISOCode = "";
				 String city = "";
				 String postalCode = "";
				 String formattedPhone = "";
				 String phoneDeviceType = "";
				 String emailAddress = "";
				 String gender = "";
				 String birthDate = "";
				 String relatedPersonRelationShipNameArr = "";
				 String formattedNameArr = "";
				 String reportingNameArr = "";
				 String formattedAddressArr = "";
				 String countryISOCodeArr = "";
				 String cityArr = "";
				 String postalCodeArr = "";
				 String formattedPhoneArr = "";
				 String phoneDeviceTypeArr = "";
				 String emailAddressArr = "";
				 String genderArr = "";
				 String birthDateArr = "";
				 
				 String finalStr = "";
				 String headerStr = "";
				 						 
				 Map<String,String> customTypeMap = null;
				 Map<String,String> relationshipMap = null;
				 Map<String,String> countryMap = null;
				 Map<String,String> nameMap = null;
				 Map<String,String> addressMap = null;
				 Map<String,String> phoneMap = null;
				 Map<String,String> phoneDeviceMap = null;
				 Map<String,String> genderMap = null;
				 
				 int startIndex = 0;
				 int endIndex = 0;
				 
				 for (int j = 1; j <=Integer.parseInt(totalNoOfPages); j++) //
				 {
					 if(j == 1)
					 {
						startIndex = 0;
						if(999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = j*999;
						}
					 }
					 else
					 {
						startIndex = endIndex;
						if(j*999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = (j*999);
						}
					 }
					 outputfile = addHireIdList(xmlReqFile, oldEmpList, ruleName, startIndex, endIndex, "Employee_ID");
					 is = new FileInputStream(outputfile);
				     soapMessage = MessageFactory.newInstance().createMessage(null, is);
				     soapPart = soapMessage.getSOAPPart();
				     envelope = soapPart.getEnvelope();
					 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
					 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
					 {
							envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
					 }
					 soapMessage.saveChanges();
			         out = new ByteArrayOutputStream();
			         soapMessage.writeTo(out);
			         strMsg = new String(out.toByteArray());
			        
			         soapConnectionFactory = SOAPConnectionFactory.newInstance();
					 soapConnection = soapConnectionFactory.createConnection();
			         soapResponse = soapConnection.call(soapMessage, sourceUrl);
			         out = new ByteArrayOutputStream();
			         soapResponse.writeTo(out);
			         strMsg = new String(out.toByteArray(), "utf-8");
			        
			         soapResp = XmlParserManager.parseXml(strMsg);
			        
			        ReportElement responseData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Data");
			        
			        List<ReportElement> applicantData = responseData.getChildren("wd:Worker");
			        for(ReportElement reportElement : applicantData)
					{
			        	ReportElement terminationStatusData = reportElement.getChild("wd:Worker_Data")
					 			.getChild("wd:Employment_Data")
					 			.getChild("wd:Worker_Status_Data");
			        	
			        	empTerminationDate = terminationStatusData.getChild("wd:Termination_Date") != null?terminationStatusData.getChild("wd:Termination_Date").getValue().trim():"";					        	
			        	if(!empTerminationDate.equalsIgnoreCase(""))
			        	{
			        		Date termDate = convertWorkdayStringToDate(empTerminationDate);
			        		//if((termDate.equals(termFromDate) || termDate.after(termFromDate)) && (termDate.equals(termToDate) || termDate.before(termToDate)))
			        		{
					        	System.out.println("empTerminationDate--"+ termDate);
				        		ReportElement element1 = reportElement.getChild("wd:Worker_Data");
				        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
				        		System.out.println("employeeId--"+ employeeId);
				        		
				        		List<ReportElement> workerRelatedPersonDataList = reportElement.getChild("wd:Worker_Data")
			 							.getChild("wd:Related_Person_Data")
			 							.getChildren("wd:Related_Person");
				        		 if(workerRelatedPersonDataList != null && workerRelatedPersonDataList.size() >0)
				        		 {
				    				 relatedPersonRelationShipNameArr = "";
				    				 formattedNameArr = "";
				    				 reportingNameArr = "";
				    				 formattedAddressArr = "";
				    				 countryISOCodeArr = "";
				    				 cityArr = "";
				    				 postalCodeArr = "";
				    				 formattedPhoneArr = "";
				    				 phoneDeviceTypeArr = "";
				    				 emailAddressArr = "";
				    				 genderArr = "";
				    				 birthDateArr = "";
				    				 
									 for(ReportElement workerRelatedPersonData :workerRelatedPersonDataList)
									 {
										 ReportElement beneficiaryData = workerRelatedPersonData.getChild("wd:Beneficiary");
										 if(beneficiaryData != null)
										 {
											 ReportElement relationRef = workerRelatedPersonData.getChild("wd:Related_Person_Relationship_Reference");
											 if(relationRef != null)
											 {
												 List<ReportElement> relationData = relationRef.getChildren("wd:ID");					 
												 for(ReportElement relationElement:relationData)
												 {
													 relationshipMap = relationElement.getAllAttributes();
													 if(relationshipMap.get("wd:type").equals("Related_Person_Relationship_ID"))
													 {
														 relatedPersonRelationShipName = relationElement.getValue().trim();
														 if(relatedPersonRelationShipNameArr.equals(""))
														 {
															 relatedPersonRelationShipNameArr = relatedPersonRelationShipName;
														 }
														 else
														 {
															 relatedPersonRelationShipNameArr = relatedPersonRelationShipNameArr + "~" + relatedPersonRelationShipName;
														 }
													 }
												 }
											 }
											 
											 ReportElement nameDetailData = workerRelatedPersonData.getChild("wd:Personal_Data")
							 							.getChild("wd:Name_Data")
							 							.getChild("wd:Legal_Name_Data")
											 			.getChild("wd:Name_Detail_Data");
											 
											 if(nameDetailData != null)
											 {
												 nameMap = nameDetailData.getAllAttributes();
												 formattedName = nameMap.get("wd:Formatted_Name");
												 if(formattedNameArr.equals(""))
												 {
													 formattedNameArr = formattedName;
												 }
												 else
												 {
													 formattedNameArr = formattedNameArr + "~" + formattedName;
												 }
												 reportingName = nameMap.get("wd:Reporting_Name");
												 if(reportingName.contains(","))
												 {
													 reportingName = reportingName.replaceAll(",", "|");
												 }
												 if(reportingNameArr.equals(""))
												 {
													 reportingNameArr = reportingName;
												 }
												 else
												 {
													 reportingNameArr = reportingNameArr + "~" + reportingName;
												 }
												 
												 ReportElement countryRef = nameDetailData.getChild("wd:Country_Reference");
												 if(countryRef != null)
												 {
													 List<ReportElement> countryData = countryRef.getChildren("wd:ID");					 
													 for(ReportElement countryElement:countryData)
													 {
														 countryMap = countryElement.getAllAttributes();
														 if(countryMap.get("wd:type").equals("ISO_3166-1_Alpha-3_Code"))
														 {
															 countryISOCode = countryElement.getValue().trim();
															 if(countryISOCodeArr.equals(""))
															 {
																 countryISOCodeArr = countryISOCode;
															 }
															 else
															 {
																 countryISOCodeArr = countryISOCodeArr + "~" + countryISOCode;
															 }
														 }
													 }
												 }
											 }
											 
											 ReportElement personalData = workerRelatedPersonData.getChild("wd:Personal_Data");									 
											 ReportElement genderRef = personalData.getChild("wd:Gender_Reference");
											 if(genderRef != null)
											 {
												 List<ReportElement> genderData = genderRef.getChildren("wd:ID");					 
												 for(ReportElement genderElement:genderData)
												 {
													 genderMap = genderElement.getAllAttributes();
													 if(genderMap.get("wd:type").equals("Gender_Code"))
													 {
														 gender = genderElement.getValue().trim();
														 if(genderArr.equals(""))
														 {
															 genderArr = gender;
														 }
														 else
														 {
															 genderArr = genderArr + "~" + gender;
														 }
													 }
												 }
											 }
	
											 birthDate = personalData.getChild("wd:Birth_Date") != null?personalData.getChild("wd:Birth_Date").getValue().trim():"";
											 if(birthDateArr.equals(""))
											 {
												 birthDateArr = birthDate;
											 }
											 else
											 {
												 if(!birthDate.isEmpty())
												 {
													 birthDateArr = birthDateArr + "~" + birthDate;
												 }
											 }
											 ReportElement addressData = workerRelatedPersonData.getChild("wd:Personal_Data")
													    .getChild("wd:Contact_Data")
							 							.getChild("wd:Address_Data");
											 if(addressData != null) 
											 {
												 addressMap = addressData.getAllAttributes();
												 formattedAddress = addressMap.get("wd:Formatted_Address");
												 if(formattedAddress.contains(","))
												 {
													 formattedAddress = formattedAddress.replaceAll(",", "|");
												 }
												 if(formattedAddressArr.equals(""))
												 {
													 formattedAddressArr = formattedAddress;
												 }
												 else
												 {
													 formattedAddressArr = formattedAddressArr + "~" + formattedAddress;
												 }
												 city = addressData.getChild("wd:Municipality") != null?addressData.getChild("wd:Municipality").getValue().trim():"";
												 if(cityArr.equals(""))
												 {
													 cityArr = city;
												 }
												 else
												 {
													 cityArr = cityArr + "~" + city;
												 }
												 postalCode = addressData.getChild("wd:Postal_Code") != null?addressData.getChild("wd:Postal_Code").getValue().trim():"";
												 if(postalCodeArr.equals(""))
												 {
													 postalCodeArr = postalCode;
												 }
												 else
												 {
													 postalCodeArr = postalCodeArr + "~" + postalCode;
												 }
											 }
	
											 ReportElement phoneData = workerRelatedPersonData.getChild("wd:Personal_Data")
													    .getChild("wd:Contact_Data")
							 							.getChild("wd:Phone_Data");
											 if(phoneData != null)
											 {
												 phoneMap = phoneData.getAllAttributes();
												 formattedPhone = phoneMap.get("wd:Formatted_Phone");
												 if(formattedPhoneArr.equals(""))
												 {
													 formattedPhoneArr = formattedPhone;
												 }
												 else
												 {
													 formattedPhoneArr = formattedPhoneArr + "~" + formattedPhone;
												 }
												 ReportElement phDeviceRef = personalData.getChild("wd:Phone_Device_Type_Reference");
												 if(phDeviceRef != null)
												 {
													 List<ReportElement> phDeviceData = phDeviceRef.getChildren("wd:ID");					 
													 for(ReportElement phDeviceElement:phDeviceData)
													 {
														 phoneDeviceMap = phDeviceElement.getAllAttributes();
														 if(phoneDeviceMap.get("wd:type").equals("Phone_Device_Type_ID"))
														 {
															 phoneDeviceType = phDeviceElement.getValue().trim();
															 if(phoneDeviceTypeArr.equals(""))
															 {
																 phoneDeviceTypeArr = phoneDeviceType;
															 }
															 else
															 {
																 phoneDeviceTypeArr = phoneDeviceTypeArr + "~" + phoneDeviceType;
															 }
														 }
													 }
												 }
											 }
	
											 ReportElement emailData = workerRelatedPersonData.getChild("wd:Personal_Data")
													    .getChild("wd:Contact_Data")
							 							.getChild("wd:Email_Address_Data");
											 if(emailData != null)
											 {
												 emailAddress = emailData.getChild("wd:Email_Address") != null?emailData.getChild("wd:Email_Address").getValue().trim():"";
												 if(emailAddressArr.equals(""))
												 {
													 emailAddressArr = emailAddress;
												 }
												 else
												 {
													 emailAddressArr = emailAddressArr + "~" + emailAddress;
												 }
											 }
										 }
									 }
				        		 }
								 																											 
								 ReportElement identificationData = reportElement.getChild("wd:Worker_Data")
								 			.getChild("wd:Personal_Data")
								 			.getChild("wd:Identification_Data");
								 
								 if(identificationData != null)
								 {												 
									 List<ReportElement> customIDList = identificationData.getChildren("wd:Custom_ID");
									 if(customIDList != null && customIDList.size() >0)
									 {
										 String expirationDate = "";
										 customIdNumber = "" ;
										 for(ReportElement customElement : customIDList)
										 {
											 ReportElement customIdData = customElement.getChild("wd:Custom_ID_Data");
											 if(customIdData != null)
											 {
												 expirationDate = customIdData.getChild("wd:Expiration_Date") != null?customIdData.getChild("wd:Expiration_Date").getValue().trim():"";
												 ReportElement customTypeRef = customIdData.getChild("wd:ID_Type_Reference");
												 if(customTypeRef != null)
												 {
													 List<ReportElement> customIdTypeData = customTypeRef.getChildren("wd:ID");								 
													 for(ReportElement idTypeElement:customIdTypeData)
													 {
														 customTypeMap = idTypeElement.getAllAttributes();
														 if(customTypeMap.get("wd:type").equals("Custom_ID_Type_ID"))
														 {
															 if(idTypeElement.getValue().trim().equalsIgnoreCase("Global_CNUM") && expirationDate.isEmpty())
															 {
																 customIdNumber = customIdData.getChild("wd:ID") != null?customIdData.getChild("wd:ID").getValue().trim():""; 
															 }
														 }
													 }
												 }
											 }
										 }
										 if(customIdNumber.isEmpty())
										 {
											 customIdNumber = "" ;
										 }
									 }
									 else
									 {
										 customIdNumber = "" ;
									 }
								 }
								 else
								 {
									 customIdNumber = "" ;											 
								 }								 															 
						}						        
			           }

			        	headingFromSourceTenant = "Home_CNUM,Employee_ID,Related_Person_RelationShip_Name,Formatted_Name,Reporting_Name,Address,City,Postal_Code,Phone_Number,Phone_Device_Type,"
			        								+ "Email_Address,Gender,Birth_Date,Country_ISO_Code";
			        	if(!customIdNumber.isEmpty())
						{
				        	headerStr = customIdNumber + "," + employeeId + "," + relatedPersonRelationShipNameArr + "," + formattedNameArr + "," + reportingNameArr + "," + formattedAddressArr + "," +
				        				cityArr + "," + postalCodeArr + "," + formattedPhoneArr + "," + phoneDeviceTypeArr + "," + emailAddressArr + "," + genderArr + "," + 
				        			    birthDateArr + "," + countryISOCodeArr;
				        	
				        	sourceTenantRowMap.put(customIdNumber, headerStr);							        	
				        	sourceTenantColumnList.add(customIdNumber);
				        	
				        	if(finalStr.equals(""))
							{
								 finalStr =  headingFromSourceTenant + "\n" + headerStr;
							}
							else
							{
								 finalStr = finalStr + "\n" + headerStr;
							}
						}	
			     }						 							 
			   }
				 System.out.println(finalStr);
				 sourceContent = finalStr.getBytes();						 
				 sourceCount = sourceTenantColumnList.size();
		    }
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		
		
	}

	private void createTemplateFromTargetTenantBeneficiary(Tenant tenant, InputStream is, SOAPConnection soapConnection, String loadCycle, String ruleName, String client, Long userId) {
		
		wdCount = 0;
		headingFromTargetTenant = "";
		targetTenantRowMap.clear();
		targetTenantColumnList.clear();
		String xmlReqFile = null;
		try 
		{			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 xmlReqFile = requestfile.getAbsolutePath();
				 String outputfile = addHireIdList(xmlReqFile, newEmpList, ruleName, 0, newEmpList.size(), "Employee_ID");
				 is = new FileInputStream(outputfile);
			     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
			     SOAPPart soapPart = soapMessage.getSOAPPart();
			     SOAPEnvelope envelope = soapPart.getEnvelope();
				 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
				 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
				 {
					  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
					  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
				 }
				 soapMessage.saveChanges();
			     ByteArrayOutputStream out = new ByteArrayOutputStream();
			     soapMessage.writeTo(out);
			     String strMsg = new String(out.toByteArray());	
			     
			     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
			     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
				 soapConnection = soapConnectionFactory.createConnection();
				 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
				 out = new ByteArrayOutputStream();
				 soapResponse.writeTo(out);
				 strMsg = new String(out.toByteArray(), "utf-8");

				 ReportElement soapResp = XmlParserManager.parseXml(strMsg);
				 
				 ReportElement pageData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Results");
				 
				 String totalNoOfPages = pageData.getChild("wd:Total_Pages").getValue().trim();
				 String totalResults = pageData.getChild("wd:Total_Results").getValue().trim();
				 int totalResult = Integer.parseInt(totalResults);
				 System.out.println("totalNoOfPages-"+totalNoOfPages);
				 System.out.println("totalResult-"+totalResult);				 
				 
				 String employeeId = "";
				 String employeeHireDate = "";
				 String customIdNumber = "";
				 String relatedPersonRelationShipName = "";
				 String formattedName = "";
				 String reportingName = "";
				 String formattedAddress = "";
				 String countryISOCode = "";
				 String city = "";
				 String postalCode = "";
				 String formattedPhone = "";
				 String phoneDeviceType = "";
				 String emailAddress = "";
				 String gender = "";
				 String birthDate = "";
				 String relatedPersonRelationShipNameArr = "";
				 String formattedNameArr = "";
				 String reportingNameArr = "";
				 String formattedAddressArr = "";
				 String countryISOCodeArr = "";
				 String cityArr = "";
				 String postalCodeArr = "";
				 String formattedPhoneArr = "";
				 String phoneDeviceTypeArr = "";
				 String emailAddressArr = "";
				 String genderArr = "";
				 String birthDateArr = "";
				 
				 String finalStr = "";
				 String headerStr = "";
				 						 
				 Map<String,String> customTypeMap = null;
				 Map<String,String> relationshipMap = null;
				 Map<String,String> countryMap = null;
				 Map<String,String> nameMap = null;
				 Map<String,String> addressMap = null;
				 Map<String,String> phoneMap = null;
				 Map<String,String> phoneDeviceMap = null;
				 Map<String,String> genderMap = null;
				 
				 int startIndex = 0;
				 int endIndex = 0;
				 
				 for (int j = 1; j <=Integer.parseInt(totalNoOfPages); j++) //
				 {
					 if(j == 1)
					 {
						startIndex = 0;
						if(999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = j*999;
						}
					 }
					 else
					 {
						startIndex = endIndex;
						if(j*999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = (j*999);
						}
					 }
					 outputfile = addHireIdList(xmlReqFile, newEmpList, ruleName, startIndex, endIndex, "Employee_ID");
					 is = new FileInputStream(outputfile);
				     soapMessage = MessageFactory.newInstance().createMessage(null, is);
				     soapPart = soapMessage.getSOAPPart();
				     envelope = soapPart.getEnvelope();
					 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
					 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
					 {
							envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
					 }
					 soapMessage.saveChanges();
			         out = new ByteArrayOutputStream();
			         soapMessage.writeTo(out);
			         strMsg = new String(out.toByteArray());
			        
			         soapConnectionFactory = SOAPConnectionFactory.newInstance();
					 soapConnection = soapConnectionFactory.createConnection();
			         soapResponse = soapConnection.call(soapMessage, sourceUrl);
			         out = new ByteArrayOutputStream();
			         soapResponse.writeTo(out);
			         strMsg = new String(out.toByteArray(), "utf-8");
			        
			         soapResp = XmlParserManager.parseXml(strMsg);
			        
			        ReportElement responseData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Data");
			        
			        List<ReportElement> applicantData = responseData.getChildren("wd:Worker");
			        for(ReportElement reportElement : applicantData)
					{
			        	ReportElement hireStatusData = reportElement.getChild("wd:Worker_Data")
					 			.getChild("wd:Employment_Data")
					 			.getChild("wd:Worker_Status_Data");
			        	
			        	employeeHireDate = hireStatusData.getChild("wd:Hire_Date") != null?hireStatusData.getChild("wd:Hire_Date").getValue().trim():"";					        	
			        	if(!employeeHireDate.equalsIgnoreCase(""))
			        	{
			        		Date empHireDate = convertWorkdayStringToDate(employeeHireDate);
			        		//if((empHireDate.equals(hireFromDate) || empHireDate.after(hireFromDate)) && (empHireDate.equals(hireToDate) || empHireDate.before(hireToDate)))
			        		{
					        	System.out.println("empHireDate--"+ empHireDate);
				        		ReportElement element1 = reportElement.getChild("wd:Worker_Data");
				        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
				        		System.out.println("employeeId--"+ employeeId);	
				        		
				        		List<ReportElement> workerRelatedPersonDataList = reportElement.getChild("wd:Worker_Data")
			 							.getChild("wd:Related_Person_Data")
			 							.getChildren("wd:Related_Person");
				        		 if(workerRelatedPersonDataList != null && workerRelatedPersonDataList.size() >0)
				        		 {
				    				 relatedPersonRelationShipNameArr = "";
				    				 formattedNameArr = "";
				    				 reportingNameArr = "";
				    				 formattedAddressArr = "";
				    				 countryISOCodeArr = "";
				    				 cityArr = "";
				    				 postalCodeArr = "";
				    				 formattedPhoneArr = "";
				    				 phoneDeviceTypeArr = "";
				    				 emailAddressArr = "";
				    				 genderArr = "";
				    				 birthDateArr = "";
				    				 
									 for(ReportElement workerRelatedPersonData :workerRelatedPersonDataList)
									 {
										 ReportElement beneficiaryData = workerRelatedPersonData.getChild("wd:Beneficiary");
										 if(beneficiaryData != null)
										 {
											 ReportElement relationRef = workerRelatedPersonData.getChild("wd:Related_Person_Relationship_Reference");
											 if(relationRef != null)
											 {
												 List<ReportElement> relationData = relationRef.getChildren("wd:ID");					 
												 for(ReportElement relationElement:relationData)
												 {
													 relationshipMap = relationElement.getAllAttributes();
													 if(relationshipMap.get("wd:type").equals("Related_Person_Relationship_ID"))
													 {
														 relatedPersonRelationShipName = relationElement.getValue().trim();
														 if(relatedPersonRelationShipNameArr.equals(""))
														 {
															 relatedPersonRelationShipNameArr = relatedPersonRelationShipName;
														 }
														 else
														 {
															 relatedPersonRelationShipNameArr = relatedPersonRelationShipNameArr + "~" + relatedPersonRelationShipName;
														 }
													 }
												 }
											 }
											 
											 ReportElement nameDetailData = workerRelatedPersonData.getChild("wd:Personal_Data")
							 							.getChild("wd:Name_Data")
							 							.getChild("wd:Legal_Name_Data")
											 			.getChild("wd:Name_Detail_Data");
											 
											 if(nameDetailData != null)
											 {
												 nameMap = nameDetailData.getAllAttributes();
												 formattedName = nameMap.get("wd:Formatted_Name");
												 if(formattedNameArr.equals(""))
												 {
													 formattedNameArr = formattedName;
												 }
												 else
												 {
													 formattedNameArr = formattedNameArr + "~" + formattedName;
												 }
												 reportingName = nameMap.get("wd:Reporting_Name");
												 if(reportingName.contains(","))
												 {
													 reportingName = reportingName.replaceAll(",", "|");
												 }
												 if(reportingNameArr.equals(""))
												 {
													 reportingNameArr = reportingName;
												 }
												 else
												 {
													 reportingNameArr = reportingNameArr + "~" + reportingName;
												 }
												 
												 ReportElement countryRef = nameDetailData.getChild("wd:Country_Reference");
												 if(countryRef != null)
												 {
													 List<ReportElement> countryData = countryRef.getChildren("wd:ID");					 
													 for(ReportElement countryElement:countryData)
													 {
														 countryMap = countryElement.getAllAttributes();
														 if(countryMap.get("wd:type").equals("ISO_3166-1_Alpha-3_Code"))
														 {
															 countryISOCode = countryElement.getValue().trim();
															 if(countryISOCodeArr.equals(""))
															 {
																 countryISOCodeArr = countryISOCode;
															 }
															 else
															 {
																 countryISOCodeArr = countryISOCodeArr + "~" + countryISOCode;
															 }
														 }
													 }
												 }
											 }
											 
											 ReportElement personalData = workerRelatedPersonData.getChild("wd:Personal_Data");									 
											 ReportElement genderRef = personalData.getChild("wd:Gender_Reference");
											 if(genderRef != null)
											 {
												 List<ReportElement> genderData = genderRef.getChildren("wd:ID");					 
												 for(ReportElement genderElement:genderData)
												 {
													 genderMap = genderElement.getAllAttributes();
													 if(genderMap.get("wd:type").equals("Gender_Code"))
													 {
														 gender = genderElement.getValue().trim();
														 if(genderArr.equals(""))
														 {
															 genderArr = gender;
														 }
														 else
														 {
															 genderArr = genderArr + "~" + gender;
														 }
													 }
												 }
											 }
	
											 birthDate = personalData.getChild("wd:Birth_Date") != null?personalData.getChild("wd:Birth_Date").getValue().trim():"";
											 if(birthDateArr.equals(""))
											 {
												 birthDateArr = birthDate;
											 }
											 else
											 {
												 if(!birthDate.isEmpty())
												 {
													 birthDateArr = birthDateArr + "~" + birthDate;
												 }
											 }
											 ReportElement addressData = workerRelatedPersonData.getChild("wd:Personal_Data")
													    .getChild("wd:Contact_Data")
							 							.getChild("wd:Address_Data");
											 if(addressData != null) 
											 {
												 addressMap = addressData.getAllAttributes();
												 formattedAddress = addressMap.get("wd:Formatted_Address");
												 if(formattedAddress.contains(","))
												 {
													 formattedAddress = formattedAddress.replaceAll(",", "|");
												 }
												 if(formattedAddressArr.equals(""))
												 {
													 formattedAddressArr = formattedAddress;
												 }
												 else
												 {
													 formattedAddressArr = formattedAddressArr + "~" + formattedAddress;
												 }
												 city = addressData.getChild("wd:Municipality") != null?addressData.getChild("wd:Municipality").getValue().trim():"";
												 if(cityArr.equals(""))
												 {
													 cityArr = city;
												 }
												 else
												 {
													 cityArr = cityArr + "~" + city;
												 }
												 postalCode = addressData.getChild("wd:Postal_Code") != null?addressData.getChild("wd:Postal_Code").getValue().trim():"";
												 if(postalCodeArr.equals(""))
												 {
													 postalCodeArr = postalCode;
												 }
												 else
												 {
													 postalCodeArr = postalCodeArr + "~" + postalCode;
												 }
											 }
	
											 ReportElement phoneData = workerRelatedPersonData.getChild("wd:Personal_Data")
													    .getChild("wd:Contact_Data")
							 							.getChild("wd:Phone_Data");
											 if(phoneData != null)
											 {
												 phoneMap = phoneData.getAllAttributes();
												 formattedPhone = phoneMap.get("wd:Formatted_Phone");
												 if(formattedPhoneArr.equals(""))
												 {
													 formattedPhoneArr = formattedPhone;
												 }
												 else
												 {
													 formattedPhoneArr = formattedPhoneArr + "~" + formattedPhone;
												 }
												 ReportElement phDeviceRef = personalData.getChild("wd:Phone_Device_Type_Reference");
												 if(phDeviceRef != null)
												 {
													 List<ReportElement> phDeviceData = phDeviceRef.getChildren("wd:ID");					 
													 for(ReportElement phDeviceElement:phDeviceData)
													 {
														 phoneDeviceMap = phDeviceElement.getAllAttributes();
														 if(phoneDeviceMap.get("wd:type").equals("Phone_Device_Type_ID"))
														 {
															 phoneDeviceType = phDeviceElement.getValue().trim();
															 if(phoneDeviceTypeArr.equals(""))
															 {
																 phoneDeviceTypeArr = phoneDeviceType;
															 }
															 else
															 {
																 phoneDeviceTypeArr = phoneDeviceTypeArr + "~" + phoneDeviceType;
															 }
														 }
													 }
												 }
											 }
	
											 ReportElement emailData = workerRelatedPersonData.getChild("wd:Personal_Data")
													    .getChild("wd:Contact_Data")
							 							.getChild("wd:Email_Address_Data");
											 if(emailData != null)
											 {
												 emailAddress = emailData.getChild("wd:Email_Address") != null?emailData.getChild("wd:Email_Address").getValue().trim():"";
												 if(emailAddressArr.equals(""))
												 {
													 emailAddressArr = emailAddress;
												 }
												 else
												 {
													 emailAddressArr = emailAddressArr + "~" + emailAddress;
												 }
											 }
										 }
									 }
				        		 }
				        						        										 
								 ReportElement identificationData = reportElement.getChild("wd:Worker_Data")
								 			.getChild("wd:Personal_Data")
								 			.getChild("wd:Identification_Data");
								 
								 if(identificationData != null)
								 {																		 
									 List<ReportElement> customIDList = identificationData.getChildren("wd:Custom_ID");
									 if(customIDList != null && customIDList.size() >0)
									 {
										 for(ReportElement customElement : customIDList)
										 {
											 ReportElement customIdData = customElement.getChild("wd:Custom_ID_Data");
											 if(customIdData != null)
											 {
												 ReportElement customTypeRef = customIdData.getChild("wd:ID_Type_Reference");
												 if(customTypeRef != null)
												 {
													 List<ReportElement> customIdTypeData = customTypeRef.getChildren("wd:ID");								 
													 for(ReportElement idTypeElement:customIdTypeData)
													 {
														 customTypeMap = idTypeElement.getAllAttributes();
														 if(customTypeMap.get("wd:type").equals("Custom_ID_Type_ID"))
														 {
															 if(idTypeElement.getValue().trim().equalsIgnoreCase("Previous_IBM_CNUM"))
															 {
																 customIdNumber = customIdData.getChild("wd:ID") != null?customIdData.getChild("wd:ID").getValue().trim():"";
															 }
														 }
													 }
												 }
											 }
										 }
										 if(customIdNumber.isEmpty())
										 {
											 customIdNumber = "" ;
										 }
									 }
									 else
									 {
										 customIdNumber = "" ;
									 }
								 }
								 else
								 {
									 customIdNumber = "" ;
								 }
						}				        
			          }
			        	
			        	headingFromTargetTenant = "Home_CNUM,Employee_ID,Related_Person_RelationShip_Name,Formatted_Name,Reporting_Name,Address,City,Postal_Code,Phone_Number,Phone_Device_Type,"
								+ "Email_Address,Gender,Birth_Date,Country_ISO_Code";
						if(!customIdNumber.isEmpty())
						{
					    	headerStr = customIdNumber + "," + employeeId + "," + relatedPersonRelationShipNameArr + "," + formattedNameArr + "," + reportingNameArr + "," + formattedAddressArr + "," +
					    				cityArr + "," + postalCodeArr + "," + formattedPhoneArr + "," + phoneDeviceTypeArr + "," + emailAddressArr + "," + genderArr + "," + birthDateArr 
					    				+ "," + countryISOCodeArr;
				        	
				        	targetTenantRowMap.put(customIdNumber, headerStr);							        	
				        	targetTenantColumnList.add(customIdNumber);
				        	
				        	if(finalStr.equals(""))
							{
								 finalStr =  headingFromTargetTenant + "\n" + headerStr;
							}
							else
							{
								 finalStr = finalStr + "\n" + headerStr;
							}
						}	
				   }						 							 
			     }
				 System.out.println(finalStr);
				 targetContent = finalStr.getBytes();
				 wdCount = targetTenantColumnList.size();
		   }
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		
	}
	
	private void createTemplateFromSourceTenantDependent(Tenant tenant, InputStream is, SOAPConnection soapConnection, String loadCycle, String ruleName, String client, Long userId) {

		sourceCount = 0;
		headingFromSourceTenant = "";
		sourceTenantRowMap.clear();
		sourceTenantColumnList.clear();
		errorList.clear();
		String xmlReqFile = null;
		try 
		{			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 xmlReqFile = requestfile.getAbsolutePath();
				 String outputfile = addHireIdList(xmlReqFile, oldEmpList, ruleName, 0, oldEmpList.size(), "Employee_ID");
				 is = new FileInputStream(outputfile);
			     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
			     SOAPPart soapPart = soapMessage.getSOAPPart();
			     SOAPEnvelope envelope = soapPart.getEnvelope();
				 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
				 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
				 {
					  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
					  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
				 }
				 soapMessage.saveChanges();
			     ByteArrayOutputStream out = new ByteArrayOutputStream();
			     soapMessage.writeTo(out);
			     String strMsg = new String(out.toByteArray());	
			     
			     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
			     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
				 soapConnection = soapConnectionFactory.createConnection();
				 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
				 out = new ByteArrayOutputStream();
				 soapResponse.writeTo(out);
				 strMsg = new String(out.toByteArray(), "utf-8");

				 ReportElement soapResp = XmlParserManager.parseXml(strMsg);
				 
				 ReportElement pageData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Results");
				 
				 String totalNoOfPages = pageData.getChild("wd:Total_Pages").getValue().trim();
				 String totalResults = pageData.getChild("wd:Total_Results").getValue().trim();
				 int totalResult = Integer.parseInt(totalResults);
				 System.out.println("totalNoOfPages-"+totalNoOfPages);
				 System.out.println("totalResult-"+totalResult);						 
				 
				 String employeeId = "";
				 String empTerminationDate = "";						 
				 String customIdNumber = "";
				 String relatedPersonRelationShipName = "";
				 String formattedName = "";
				 String reportingName = "";
				 String formattedAddress = "";
				 String countryISOCode = "";
				 String city = "";
				 String postalCode = "";
				 String formattedPhone = "";
				 String phoneDeviceType = "";
				 String emailAddress = "";
				 String gender = "";
				 String birthDate = "";
				 String relatedPersonRelationShipNameArr = "";
				 String formattedNameArr = "";
				 String reportingNameArr = "";
				 String formattedAddressArr = "";
				 String countryISOCodeArr = "";
				 String cityArr = "";
				 String postalCodeArr = "";
				 String formattedPhoneArr = "";
				 String phoneDeviceTypeArr = "";
				 String emailAddressArr = "";
				 String genderArr = "";
				 String birthDateArr = "";
				 
				 String finalStr = "";
				 String headerStr = "";
				 						 
				 Map<String,String> customTypeMap = null;
				 Map<String,String> relationshipMap = null;
				 Map<String,String> countryMap = null;
				 Map<String,String> nameMap = null;
				 Map<String,String> addressMap = null;
				 Map<String,String> phoneMap = null;
				 Map<String,String> phoneDeviceMap = null;
				 Map<String,String> genderMap = null;
				 
				 int startIndex = 0;
				 int endIndex = 0;
				 
				 for (int j = 1; j <=Integer.parseInt(totalNoOfPages); j++) //
				 {
					 if(j == 1)
					 {
						startIndex = 0;
						if(999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = j*999;
						}
					 }
					 else
					 {
						startIndex = endIndex;
						if(j*999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = (j*999);
						}
					 }
					 outputfile = addHireIdList(xmlReqFile, oldEmpList, ruleName, startIndex, endIndex, "Employee_ID");
					 is = new FileInputStream(outputfile);
				     soapMessage = MessageFactory.newInstance().createMessage(null, is);
				     soapPart = soapMessage.getSOAPPart();
				     envelope = soapPart.getEnvelope();
					 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
					 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
					 {
							envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
					 }
					 soapMessage.saveChanges();
			         out = new ByteArrayOutputStream();
			         soapMessage.writeTo(out);
			         strMsg = new String(out.toByteArray());
			        
			         soapConnectionFactory = SOAPConnectionFactory.newInstance();
					 soapConnection = soapConnectionFactory.createConnection();
			         soapResponse = soapConnection.call(soapMessage, sourceUrl);
			         out = new ByteArrayOutputStream();
			         soapResponse.writeTo(out);
			         strMsg = new String(out.toByteArray(), "utf-8");
			        
			         soapResp = XmlParserManager.parseXml(strMsg);
			        
			        ReportElement responseData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Data");
			        
			        List<ReportElement> applicantData = responseData.getChildren("wd:Worker");
			        for(ReportElement reportElement : applicantData)
					{
			        	ReportElement terminationStatusData = reportElement.getChild("wd:Worker_Data")
					 			.getChild("wd:Employment_Data")
					 			.getChild("wd:Worker_Status_Data");
			        	
			        	empTerminationDate = terminationStatusData.getChild("wd:Termination_Date") != null?terminationStatusData.getChild("wd:Termination_Date").getValue().trim():"";					        	
			        	if(!empTerminationDate.equalsIgnoreCase(""))
			        	{
			        		Date termDate = convertWorkdayStringToDate(empTerminationDate);
			        		//if((termDate.equals(termFromDate) || termDate.after(termFromDate)) && (termDate.equals(termToDate) || termDate.before(termToDate)))
			        		{
					        	System.out.println("empTerminationDate--"+ termDate);
				        		ReportElement element1 = reportElement.getChild("wd:Worker_Data");
				        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
				        		System.out.println("employeeId--"+ employeeId);
				        		
				        		List<ReportElement> workerRelatedPersonDataList = reportElement.getChild("wd:Worker_Data")
			 							.getChild("wd:Related_Person_Data")
			 							.getChildren("wd:Related_Person");
				        		 if(workerRelatedPersonDataList != null && workerRelatedPersonDataList.size() >0)
				        		 {
				    				 relatedPersonRelationShipNameArr = "";
				    				 formattedNameArr = "";
				    				 reportingNameArr = "";
				    				 formattedAddressArr = "";
				    				 countryISOCodeArr = "";
				    				 cityArr = "";
				    				 postalCodeArr = "";
				    				 formattedPhoneArr = "";
				    				 phoneDeviceTypeArr = "";
				    				 emailAddressArr = "";
				    				 genderArr = "";
				    				 birthDateArr = "";
				    				 
									 for(ReportElement workerRelatedPersonData :workerRelatedPersonDataList)
									 {
										 ReportElement beneficiaryData = workerRelatedPersonData.getChild("wd:Dependent");
										 if(beneficiaryData != null)
										 {
											 ReportElement relationRef = workerRelatedPersonData.getChild("wd:Related_Person_Relationship_Reference");
											 if(relationRef != null)
											 {
												 List<ReportElement> relationData = relationRef.getChildren("wd:ID");					 
												 for(ReportElement relationElement:relationData)
												 {
													 relationshipMap = relationElement.getAllAttributes();
													 if(relationshipMap.get("wd:type").equals("Related_Person_Relationship_ID"))
													 {
														 relatedPersonRelationShipName = relationElement.getValue().trim();
														 if(relatedPersonRelationShipNameArr.equals(""))
														 {
															 relatedPersonRelationShipNameArr = relatedPersonRelationShipName;
														 }
														 else
														 {
															 relatedPersonRelationShipNameArr = relatedPersonRelationShipNameArr + "~" + relatedPersonRelationShipName;
														 }
													 }
												 }
											 }
											 
											 ReportElement nameDetailData = workerRelatedPersonData.getChild("wd:Personal_Data")
							 							.getChild("wd:Name_Data")
							 							.getChild("wd:Legal_Name_Data")
											 			.getChild("wd:Name_Detail_Data");
											 
											 if(nameDetailData != null)
											 {
												 nameMap = nameDetailData.getAllAttributes();
												 formattedName = nameMap.get("wd:Formatted_Name");
												 if(formattedNameArr.equals(""))
												 {
													 formattedNameArr = formattedName;
												 }
												 else
												 {
													 formattedNameArr = formattedNameArr + "~" + formattedName;
												 }
												 reportingName = nameMap.get("wd:Reporting_Name");
												 if(reportingName.contains(","))
												 {
													 reportingName = reportingName.replaceAll(",", "|");
												 }
												 if(reportingNameArr.equals(""))
												 {
													 reportingNameArr = reportingName;
												 }
												 else
												 {
													 reportingNameArr = reportingNameArr + "~" + reportingName;
												 }
												 
												 ReportElement countryRef = nameDetailData.getChild("wd:Country_Reference");
												 if(countryRef != null)
												 {
													 List<ReportElement> countryData = countryRef.getChildren("wd:ID");					 
													 for(ReportElement countryElement:countryData)
													 {
														 countryMap = countryElement.getAllAttributes();
														 if(countryMap.get("wd:type").equals("ISO_3166-1_Alpha-3_Code"))
														 {
															 countryISOCode = countryElement.getValue().trim();
															 if(countryISOCodeArr.equals(""))
															 {
																 countryISOCodeArr = countryISOCode;
															 }
															 else
															 {
																 countryISOCodeArr = countryISOCodeArr + "~" + countryISOCode;
															 }
														 }
													 }
												 }
											 }
											 
											 ReportElement personalData = workerRelatedPersonData.getChild("wd:Personal_Data");									 
											 ReportElement genderRef = personalData.getChild("wd:Gender_Reference");
											 if(genderRef != null)
											 {
												 List<ReportElement> genderData = genderRef.getChildren("wd:ID");					 
												 for(ReportElement genderElement:genderData)
												 {
													 genderMap = genderElement.getAllAttributes();
													 if(genderMap.get("wd:type").equals("Gender_Code"))
													 {
														 gender = genderElement.getValue().trim();
														 if(genderArr.equals(""))
														 {
															 genderArr = gender;
														 }
														 else
														 {
															 genderArr = genderArr + "~" + gender;
														 }
													 }
												 }
											 }
	
											 birthDate = personalData.getChild("wd:Birth_Date") != null?personalData.getChild("wd:Birth_Date").getValue().trim():"";
											 if(birthDateArr.equals(""))
											 {
												 birthDateArr = birthDate;
											 }
											 else
											 {
												 birthDateArr = birthDateArr + "~" + birthDate;
											 }
											 
											 ReportElement contactData = workerRelatedPersonData.getChild("wd:Personal_Data")
													    .getChild("wd:Contact_Data");
											 if(contactData != null)
											 {
												 ReportElement addressData = contactData.getChild("wd:Address_Data");
												 if(addressData != null) 
												 {
													 addressMap = addressData.getAllAttributes();
													 formattedAddress = addressMap.get("wd:Formatted_Address");
													 if(formattedAddress.contains(","))
													 {
														 formattedAddress = formattedAddress.replaceAll(",", "|");
													 }
													 if(formattedAddressArr.equals(""))
													 {
														 formattedAddressArr = formattedAddress;
													 }
													 else
													 {
														 formattedAddressArr = formattedAddressArr + "~" + formattedAddress;
													 }
													 city = addressData.getChild("wd:Municipality") != null?addressData.getChild("wd:Municipality").getValue().trim():"";
													 if(city.contains(","))
													 {
														 city = city.replaceAll(",", "|");
													 }
													 if(cityArr.equals(""))
													 {
														 cityArr = city;
													 }
													 else
													 {
														 cityArr = cityArr + "~" + city;
													 }
													 postalCode = addressData.getChild("wd:Postal_Code") != null?addressData.getChild("wd:Postal_Code").getValue().trim():"";
													 if(postalCodeArr.equals(""))
													 {
														 postalCodeArr = postalCode;
													 }
													 else
													 {
														 postalCodeArr = postalCodeArr + "~" + postalCode;
													 }
												 }
		
												 ReportElement phoneData = contactData.getChild("wd:Phone_Data");
												 if(phoneData != null)
												 {
													 phoneMap = phoneData.getAllAttributes();
													 formattedPhone = phoneMap.get("wd:Formatted_Phone");
													 if(formattedPhoneArr.equals(""))
													 {
														 formattedPhoneArr = formattedPhone;
													 }
													 else
													 {
														 formattedPhoneArr = formattedPhoneArr + "~" + formattedPhone;
													 }
													 ReportElement phDeviceRef = personalData.getChild("wd:Phone_Device_Type_Reference");
													 if(phDeviceRef != null)
													 {
														 List<ReportElement> phDeviceData = phDeviceRef.getChildren("wd:ID");					 
														 for(ReportElement phDeviceElement:phDeviceData)
														 {
															 phoneDeviceMap = phDeviceElement.getAllAttributes();
															 if(phoneDeviceMap.get("wd:type").equals("Phone_Device_Type_ID"))
															 {
																 phoneDeviceType = phDeviceElement.getValue().trim();
																 if(phoneDeviceTypeArr.equals(""))
																 {
																	 phoneDeviceTypeArr = phoneDeviceType;
																 }
																 else
																 {
																	 phoneDeviceTypeArr = phoneDeviceTypeArr + "~" + phoneDeviceType;
																 }
															 }
														 }
													 }
												 }
		
												 ReportElement emailData = contactData.getChild("wd:Email_Address_Data");
												 if(emailData != null)
												 {
													 emailAddress = emailData.getChild("wd:Email_Address") != null?emailData.getChild("wd:Email_Address").getValue().trim():"";
													 if(emailAddressArr.equals(""))
													 {
														 emailAddressArr = emailAddress;
													 }
													 else
													 {
														 emailAddressArr = emailAddressArr + "~" + emailAddress;
													 }
												 }
											 }
										 }
									 }
				        		 }
								 																											 
								 ReportElement identificationData = reportElement.getChild("wd:Worker_Data")
								 			.getChild("wd:Personal_Data")
								 			.getChild("wd:Identification_Data");
								 
								 if(identificationData != null)
								 {												 
									 List<ReportElement> customIDList = identificationData.getChildren("wd:Custom_ID");
									 if(customIDList != null && customIDList.size() >0)
									 {
										 String expirationDate = "";
										 customIdNumber = "" ;
										 for(ReportElement customElement : customIDList)
										 {
											 ReportElement customIdData = customElement.getChild("wd:Custom_ID_Data");
											 if(customIdData != null)
											 {
												 expirationDate = customIdData.getChild("wd:Expiration_Date") != null?customIdData.getChild("wd:Expiration_Date").getValue().trim():"";
												 ReportElement customTypeRef = customIdData.getChild("wd:ID_Type_Reference");
												 if(customTypeRef != null)
												 {
													 List<ReportElement> customIdTypeData = customTypeRef.getChildren("wd:ID");								 
													 for(ReportElement idTypeElement:customIdTypeData)
													 {
														 customTypeMap = idTypeElement.getAllAttributes();
														 if(customTypeMap.get("wd:type").equals("Custom_ID_Type_ID"))
														 {
															 if(idTypeElement.getValue().trim().equalsIgnoreCase("Global_CNUM") && expirationDate.isEmpty())
															 {
																 customIdNumber = customIdData.getChild("wd:ID") != null?customIdData.getChild("wd:ID").getValue().trim():""; 
															 }
														 }
													 }
												 }
											 }
										 }
										 if(customIdNumber.isEmpty())
										 {
											 customIdNumber = "" ;
										 }
									 }
									 else
									 {
										 customIdNumber = "" ;
									 }
								 }
								 else
								 {
									 customIdNumber = "" ;											 
								 }								 															 
						}						        
			           }

			        	headingFromSourceTenant = "Home_CNUM,Employee_ID,Related_Person_RelationShip_Name,Formatted_Name,Reporting_Name,Address,City,Postal_Code,Phone_Number,Phone_Device_Type,"
			        								+ "Email_Address,Gender,Birth_Date,Country_ISO_Code";
			        	if(!customIdNumber.isEmpty())
						{
				        	headerStr = customIdNumber + "," + employeeId + "," + relatedPersonRelationShipNameArr + "," + formattedNameArr + "," + reportingNameArr + "," + formattedAddressArr + "," +
				        				cityArr + "," + postalCodeArr + "," + formattedPhoneArr + "," + phoneDeviceTypeArr + "," + emailAddressArr + "," + genderArr + "," + 
				        			    birthDateArr + "," + countryISOCodeArr;
				        	
				        	sourceTenantRowMap.put(customIdNumber, headerStr);							        	
				        	sourceTenantColumnList.add(customIdNumber);
				        	
				        	if(finalStr.equals(""))
							{
								 finalStr =  headingFromSourceTenant + "\n" + headerStr;
							}
							else
							{
								 finalStr = finalStr + "\n" + headerStr;
							}
						}	
			     }						 							 
			   }
				 System.out.println(finalStr);
				 sourceContent = finalStr.getBytes();						 
				 sourceCount = sourceTenantColumnList.size();
		    }
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		
	}

	private void createTemplateFromTargetTenantDependent(Tenant tenant, InputStream is, SOAPConnection soapConnection, String loadCycle, String ruleName, String client, Long userId) {

		wdCount = 0;
		headingFromTargetTenant = "";
		targetTenantRowMap.clear();
		targetTenantColumnList.clear();
		String xmlReqFile = null;
		try 
		{			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 xmlReqFile = requestfile.getAbsolutePath();
				 String outputfile = addHireIdList(xmlReqFile, newEmpList, ruleName, 0, newEmpList.size(), "Employee_ID");
				 is = new FileInputStream(outputfile);
			     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
			     SOAPPart soapPart = soapMessage.getSOAPPart();
			     SOAPEnvelope envelope = soapPart.getEnvelope();
				 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
				 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
				 {
					  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
					  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
				 }
				 soapMessage.saveChanges();
			     ByteArrayOutputStream out = new ByteArrayOutputStream();
			     soapMessage.writeTo(out);
			     String strMsg = new String(out.toByteArray());	
			     
			     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
			     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
				 soapConnection = soapConnectionFactory.createConnection();
				 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
				 out = new ByteArrayOutputStream();
				 soapResponse.writeTo(out);
				 strMsg = new String(out.toByteArray(), "utf-8");

				 ReportElement soapResp = XmlParserManager.parseXml(strMsg);
				 
				 ReportElement pageData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Results");
				 
				 String totalNoOfPages = pageData.getChild("wd:Total_Pages").getValue().trim();
				 String totalResults = pageData.getChild("wd:Total_Results").getValue().trim();
				 int totalResult = Integer.parseInt(totalResults);
				 System.out.println("totalNoOfPages-"+totalNoOfPages);
				 System.out.println("totalResult-"+totalResult);				 
				 
				 String employeeId = "";
				 String employeeHireDate = "";
				 String customIdNumber = "";
				 String relatedPersonRelationShipName = "";
				 String formattedName = "";
				 String reportingName = "";
				 String formattedAddress = "";
				 String countryISOCode = "";
				 String city = "";
				 String postalCode = "";
				 String formattedPhone = "";
				 String phoneDeviceType = "";
				 String emailAddress = "";
				 String gender = "";
				 String birthDate = "";
				 String relatedPersonRelationShipNameArr = "";
				 String formattedNameArr = "";
				 String reportingNameArr = "";
				 String formattedAddressArr = "";
				 String countryISOCodeArr = "";
				 String cityArr = "";
				 String postalCodeArr = "";
				 String formattedPhoneArr = "";
				 String phoneDeviceTypeArr = "";
				 String emailAddressArr = "";
				 String genderArr = "";
				 String birthDateArr = "";
				 
				 String finalStr = "";
				 String headerStr = "";
				 						 
				 Map<String,String> customTypeMap = null;
				 Map<String,String> relationshipMap = null;
				 Map<String,String> countryMap = null;
				 Map<String,String> nameMap = null;
				 Map<String,String> addressMap = null;
				 Map<String,String> phoneMap = null;
				 Map<String,String> phoneDeviceMap = null;
				 Map<String,String> genderMap = null;
				 
				 int startIndex = 0;
				 int endIndex = 0;
				 
				 for (int j = 1; j <=Integer.parseInt(totalNoOfPages); j++) //
				 {
					 if(j == 1)
					 {
						startIndex = 0;
						if(999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = j*999;
						}
					 }
					 else
					 {
						startIndex = endIndex;
						if(j*999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = (j*999);
						}
					 }
					 outputfile = addHireIdList(xmlReqFile, newEmpList, ruleName, startIndex, endIndex, "Employee_ID");
					 is = new FileInputStream(outputfile);
				     soapMessage = MessageFactory.newInstance().createMessage(null, is);
				     soapPart = soapMessage.getSOAPPart();
				     envelope = soapPart.getEnvelope();
					 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
					 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
					 {
							envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
					 }
					 soapMessage.saveChanges();
			         out = new ByteArrayOutputStream();
			         soapMessage.writeTo(out);
			         strMsg = new String(out.toByteArray());
			        
			         soapConnectionFactory = SOAPConnectionFactory.newInstance();
					 soapConnection = soapConnectionFactory.createConnection();
			         soapResponse = soapConnection.call(soapMessage, sourceUrl);
			         out = new ByteArrayOutputStream();
			         soapResponse.writeTo(out);
			         strMsg = new String(out.toByteArray(), "utf-8");
			        
			         soapResp = XmlParserManager.parseXml(strMsg);
			        
			        ReportElement responseData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Data");
			        
			        List<ReportElement> applicantData = responseData.getChildren("wd:Worker");
			        for(ReportElement reportElement : applicantData)
					{
			        	ReportElement hireStatusData = reportElement.getChild("wd:Worker_Data")
					 			.getChild("wd:Employment_Data")
					 			.getChild("wd:Worker_Status_Data");
			        	
			        	employeeHireDate = hireStatusData.getChild("wd:Hire_Date") != null?hireStatusData.getChild("wd:Hire_Date").getValue().trim():"";					        	
			        	if(!employeeHireDate.equalsIgnoreCase(""))
			        	{
			        		Date empHireDate = convertWorkdayStringToDate(employeeHireDate);
			        		//if((empHireDate.equals(hireFromDate) || empHireDate.after(hireFromDate)) && (empHireDate.equals(hireToDate) || empHireDate.before(hireToDate)))
			        		{
					        	System.out.println("empHireDate--"+ empHireDate);
				        		ReportElement element1 = reportElement.getChild("wd:Worker_Data");
				        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
				        		System.out.println("employeeId--"+ employeeId);	
				        		
				        		List<ReportElement> workerRelatedPersonDataList = reportElement.getChild("wd:Worker_Data")
			 							.getChild("wd:Related_Person_Data")
			 							.getChildren("wd:Related_Person");
				        		 if(workerRelatedPersonDataList != null && workerRelatedPersonDataList.size() >0)
				        		 {
				    				 relatedPersonRelationShipNameArr = "";
				    				 formattedNameArr = "";
				    				 reportingNameArr = "";
				    				 formattedAddressArr = "";
				    				 countryISOCodeArr = "";
				    				 cityArr = "";
				    				 postalCodeArr = "";
				    				 formattedPhoneArr = "";
				    				 phoneDeviceTypeArr = "";
				    				 emailAddressArr = "";
				    				 genderArr = "";
				    				 birthDateArr = "";
				    				 
									 for(ReportElement workerRelatedPersonData :workerRelatedPersonDataList)
									 {
										 ReportElement beneficiaryData = workerRelatedPersonData.getChild("wd:Dependent");
										 if(beneficiaryData != null)
										 {
											 ReportElement relationRef = workerRelatedPersonData.getChild("wd:Related_Person_Relationship_Reference");
											 if(relationRef != null)
											 {
												 List<ReportElement> relationData = relationRef.getChildren("wd:ID");					 
												 for(ReportElement relationElement:relationData)
												 {
													 relationshipMap = relationElement.getAllAttributes();
													 if(relationshipMap.get("wd:type").equals("Related_Person_Relationship_ID"))
													 {
														 relatedPersonRelationShipName = relationElement.getValue().trim();
														 if(relatedPersonRelationShipNameArr.equals(""))
														 {
															 relatedPersonRelationShipNameArr = relatedPersonRelationShipName;
														 }
														 else
														 {
															 relatedPersonRelationShipNameArr = relatedPersonRelationShipNameArr + "~" + relatedPersonRelationShipName;
														 }
													 }
												 }
											 }
											 
											 ReportElement nameDetailData = workerRelatedPersonData.getChild("wd:Personal_Data")
							 							.getChild("wd:Name_Data")
							 							.getChild("wd:Legal_Name_Data")
											 			.getChild("wd:Name_Detail_Data");
											 
											 if(nameDetailData != null)
											 {
												 nameMap = nameDetailData.getAllAttributes();
												 formattedName = nameMap.get("wd:Formatted_Name");
												 if(formattedNameArr.equals(""))
												 {
													 formattedNameArr = formattedName;
												 }
												 else
												 {
													 formattedNameArr = formattedNameArr + "~" + formattedName;
												 }
												 reportingName = nameMap.get("wd:Reporting_Name");
												 if(reportingName.contains(","))
												 {
													 reportingName = reportingName.replaceAll(",", "|");
												 }
												 if(reportingNameArr.equals(""))
												 {
													 reportingNameArr = reportingName;
												 }
												 else
												 {
													 reportingNameArr = reportingNameArr + "~" + reportingName;
												 }
												 
												 ReportElement countryRef = nameDetailData.getChild("wd:Country_Reference");
												 if(countryRef != null)
												 {
													 List<ReportElement> countryData = countryRef.getChildren("wd:ID");					 
													 for(ReportElement countryElement:countryData)
													 {
														 countryMap = countryElement.getAllAttributes();
														 if(countryMap.get("wd:type").equals("ISO_3166-1_Alpha-3_Code"))
														 {
															 countryISOCode = countryElement.getValue().trim();
															 if(countryISOCodeArr.equals(""))
															 {
																 countryISOCodeArr = countryISOCode;
															 }
															 else
															 {
																 countryISOCodeArr = countryISOCodeArr + "~" + countryISOCode;
															 }
														 }
													 }
												 }
											 }
											 
											 ReportElement personalData = workerRelatedPersonData.getChild("wd:Personal_Data");									 
											 ReportElement genderRef = personalData.getChild("wd:Gender_Reference");
											 if(genderRef != null)
											 {
												 List<ReportElement> genderData = genderRef.getChildren("wd:ID");					 
												 for(ReportElement genderElement:genderData)
												 {
													 genderMap = genderElement.getAllAttributes();
													 if(genderMap.get("wd:type").equals("Gender_Code"))
													 {
														 gender = genderElement.getValue().trim();
														 if(genderArr.equals(""))
														 {
															 genderArr = gender;
														 }
														 else
														 {
															 genderArr = genderArr + "~" + gender;
														 }
													 }
												 }
											 }
	
											 birthDate = personalData.getChild("wd:Birth_Date") != null?personalData.getChild("wd:Birth_Date").getValue().trim():"";
											 if(birthDateArr.equals(""))
											 {
												 birthDateArr = birthDate;
											 }
											 else
											 {
												 birthDateArr = birthDateArr + "~" + birthDate;
											 }
											 ReportElement contactData = workerRelatedPersonData.getChild("wd:Personal_Data")
													    .getChild("wd:Contact_Data");
											 if(contactData != null)
											 {
												 ReportElement addressData = contactData.getChild("wd:Address_Data");
												 if(addressData != null) 
												 {
													 addressMap = addressData.getAllAttributes();
													 formattedAddress = addressMap.get("wd:Formatted_Address");
													 if(formattedAddress.contains(","))
													 {
														 formattedAddress = formattedAddress.replaceAll(",", "|");
													 }
													 if(formattedAddressArr.equals(""))
													 {
														 formattedAddressArr = formattedAddress;
													 }
													 else
													 {
														 formattedAddressArr = formattedAddressArr + "~" + formattedAddress;
													 }
													 city = addressData.getChild("wd:Municipality") != null?addressData.getChild("wd:Municipality").getValue().trim():"";
													 if(city.contains(","))
													 {
														 city = city.replaceAll(",", "|");
													 }
													 if(cityArr.equals(""))
													 {
														 cityArr = city;
													 }
													 else
													 {
														 cityArr = cityArr + "~" + city;
													 }
													 postalCode = addressData.getChild("wd:Postal_Code") != null?addressData.getChild("wd:Postal_Code").getValue().trim():"";
													 if(postalCodeArr.equals(""))
													 {
														 postalCodeArr = postalCode;
													 }
													 else
													 {
														 postalCodeArr = postalCodeArr + "~" + postalCode;
													 }
												 }
		
												 ReportElement phoneData = contactData.getChild("wd:Phone_Data");
												 if(phoneData != null)
												 {
													 phoneMap = phoneData.getAllAttributes();
													 formattedPhone = phoneMap.get("wd:Formatted_Phone");
													 if(formattedPhoneArr.equals(""))
													 {
														 formattedPhoneArr = formattedPhone;
													 }
													 else
													 {
														 formattedPhoneArr = formattedPhoneArr + "~" + formattedPhone;
													 }
													 ReportElement phDeviceRef = personalData.getChild("wd:Phone_Device_Type_Reference");
													 if(phDeviceRef != null)
													 {
														 List<ReportElement> phDeviceData = phDeviceRef.getChildren("wd:ID");					 
														 for(ReportElement phDeviceElement:phDeviceData)
														 {
															 phoneDeviceMap = phDeviceElement.getAllAttributes();
															 if(phoneDeviceMap.get("wd:type").equals("Phone_Device_Type_ID"))
															 {
																 phoneDeviceType = phDeviceElement.getValue().trim();
																 if(phoneDeviceTypeArr.equals(""))
																 {
																	 phoneDeviceTypeArr = phoneDeviceType;
																 }
																 else
																 {
																	 phoneDeviceTypeArr = phoneDeviceTypeArr + "~" + phoneDeviceType;
																 }
															 }
														 }
													 }
												 }
		
												 ReportElement emailData = contactData.getChild("wd:Email_Address_Data");
												 if(emailData != null)
												 {
													 emailAddress = emailData.getChild("wd:Email_Address") != null?emailData.getChild("wd:Email_Address").getValue().trim():"";
													 if(emailAddressArr.equals(""))
													 {
														 emailAddressArr = emailAddress;
													 }
													 else
													 {
														 emailAddressArr = emailAddressArr + "~" + emailAddress;
													 }
												 }
											 }
										 }
									 }
				        		 }
				        						        										 
								 ReportElement identificationData = reportElement.getChild("wd:Worker_Data")
								 			.getChild("wd:Personal_Data")
								 			.getChild("wd:Identification_Data");
								 
								 if(identificationData != null)
								 {																		 
									 List<ReportElement> customIDList = identificationData.getChildren("wd:Custom_ID");
									 if(customIDList != null && customIDList.size() >0)
									 {
										 for(ReportElement customElement : customIDList)
										 {
											 ReportElement customIdData = customElement.getChild("wd:Custom_ID_Data");
											 if(customIdData != null)
											 {
												 ReportElement customTypeRef = customIdData.getChild("wd:ID_Type_Reference");
												 if(customTypeRef != null)
												 {
													 List<ReportElement> customIdTypeData = customTypeRef.getChildren("wd:ID");								 
													 for(ReportElement idTypeElement:customIdTypeData)
													 {
														 customTypeMap = idTypeElement.getAllAttributes();
														 if(customTypeMap.get("wd:type").equals("Custom_ID_Type_ID"))
														 {
															 if(idTypeElement.getValue().trim().equalsIgnoreCase("Previous_IBM_CNUM"))
															 {
																 customIdNumber = customIdData.getChild("wd:ID") != null?customIdData.getChild("wd:ID").getValue().trim():"";
															 }
														 }
													 }
												 }
											 }
										 }
										 if(customIdNumber.isEmpty())
										 {
											 customIdNumber = "" ;
										 }
									 }
									 else
									 {
										 customIdNumber = "" ;
									 }
								 }
								 else
								 {
									 customIdNumber = "" ;
								 }
						}				        
			          }
			        	
			        	headingFromTargetTenant = "Home_CNUM,Employee_ID,Related_Person_RelationShip_Name,Formatted_Name,Reporting_Name,Address,City,Postal_Code,Phone_Number,Phone_Device_Type,"
								+ "Email_Address,Gender,Birth_Date,Country_ISO_Code";
						if(!customIdNumber.isEmpty())
						{
					    	headerStr = customIdNumber + "," + employeeId + "," + relatedPersonRelationShipNameArr + "," + formattedNameArr + "," + reportingNameArr + "," + formattedAddressArr + "," +
					    				cityArr + "," + postalCodeArr + "," + formattedPhoneArr + "," + phoneDeviceTypeArr + "," + emailAddressArr + "," + genderArr + "," + birthDateArr 
					    				+ "," + countryISOCodeArr;
				        	
				        	targetTenantRowMap.put(customIdNumber, headerStr);							        	
				        	targetTenantColumnList.add(customIdNumber);
				        	
				        	if(finalStr.equals(""))
							{
								 finalStr =  headingFromTargetTenant + "\n" + headerStr;
							}
							else
							{
								 finalStr = finalStr + "\n" + headerStr;
							}
						}	
				   }						 							 
			     }
				 System.out.println(finalStr);
				 targetContent = finalStr.getBytes();
				 wdCount = targetTenantColumnList.size();
		   }
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		
	}
	
	private void createTemplateFromSourceTenantPayrollPayeeProvinceTD1(Tenant tenant, InputStream is, SOAPConnection soapConnection, String loadCycle, String ruleName, String client, Long userId) {
		
		sourceCount = 0;
		headingFromSourceTenant = "";
		sourceTenantRowMap.clear();
		sourceTenantColumnList.clear();
		errorList.clear();
		String xmlReqFile = null;
		try 
		{			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 xmlReqFile = requestfile.getAbsolutePath();
				 is = new FileInputStream(xmlReqFile);
			     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
			     SOAPPart soapPart = soapMessage.getSOAPPart();
			     SOAPEnvelope envelope = soapPart.getEnvelope();
				 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
				 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
				 {
					  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
					  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
				 }
				 soapMessage.saveChanges();
			     ByteArrayOutputStream out = new ByteArrayOutputStream();
			     soapMessage.writeTo(out);
			     String strMsg = new String(out.toByteArray());	
			     
			     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Payroll";
			     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
				 soapConnection = soapConnectionFactory.createConnection();
				 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
				 out = new ByteArrayOutputStream();
				 soapResponse.writeTo(out);
				 strMsg = new String(out.toByteArray(), "utf-8");

				 ReportElement soapResp = XmlParserManager.parseXml(strMsg);
				 
				 ReportElement pageData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Payroll_Payee_PT1s_Response")
							.getChild("wd:Response_Results");
				 
				 String totalNoOfPages = pageData.getChild("wd:Total_Pages").getValue().trim();
				 String totalResults = pageData.getChild("wd:Total_Results").getValue().trim();
				 int totalResult = Integer.parseInt(totalResults);
				 System.out.println("totalNoOfPages-"+totalNoOfPages);
				 System.out.println("totalResult-"+totalResult);						 
				 
				 String employeeId = "";						 
				 String customIdNumber = "";
				 String basicPersonalAmount = "";
				 String childAmount = "";
				 String ageAmount = "";
				 String ageAmountSuppl = "";
				 String SeniorSupplAmount = "";
				 String amountForWorkers65OrOlder = "";
				 String pensionIncomeAmount = "";
				 String tuitionEducationTextbookAmounts = "";
				 String disabilityAmount = "";
				 String spouseCommonlawPartnerAmount = "";
				 String spouseCommonlawPartnerAmountSuppl = "";
				 String additionalAmount = "";
				 String deductionLivingPrescribedZone = "";
				 String amountEligibleDependant = "";
				 String amountEligibleDependantSuppl = "";
				 String caregiverAmount = "";
				 String amountInfirmDependantsAge18orOlder = "";
				 String amountsTransferredFromSpouseCommonlawPartner = "";
				 String amountsTransferredFromDependent = "";
				 String manitobaFamilyTaxBenefitAmount = "";
				 String totalIncomeLessThanTotalClaimAmount = "";//n
				 String moreThanOneEmployerReference = "";//n
				 String dependentsUnderAge19 = "";
				 String disabledDependents = "";
				 String exempt = "";//n
				 String exemptFromHealthContribution = "";//n
				 
				 String finalStr = "";
				 String headerStr = "";
				 						 
				 Map<String,String> workerMap = null;
				 
				 for (int j = 1; j <=Integer.parseInt(totalNoOfPages); j++) //
				 {
					 String xmlStr = convertFileToString(xmlReqFile);
					 String outputfile = updatePageIndex(xmlStr, j, ruleName);
					 is = new FileInputStream(outputfile);
				     soapMessage = MessageFactory.newInstance().createMessage(null, is);
				     soapPart = soapMessage.getSOAPPart();
				     envelope = soapPart.getEnvelope();
					 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
					 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
					 {
							envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
					 }
					 soapMessage.saveChanges();
			         out = new ByteArrayOutputStream();
			         soapMessage.writeTo(out);
			         strMsg = new String(out.toByteArray());
			        
			         soapConnectionFactory = SOAPConnectionFactory.newInstance();
					 soapConnection = soapConnectionFactory.createConnection();
			         soapResponse = soapConnection.call(soapMessage, sourceUrl);
			         out = new ByteArrayOutputStream();
			         soapResponse.writeTo(out);
			         strMsg = new String(out.toByteArray(), "utf-8");
			        
			         soapResp = XmlParserManager.parseXml(strMsg);
			        
			        ReportElement responseData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Payroll_Payee_PT1s_Response")
							.getChild("wd:Response_Data");
			        
			        List<ReportElement> payrollData = responseData.getChildren("wd:Payroll_Payee_PT1");
			        for(ReportElement reportElement : payrollData)
					{
			        	customIdNumber = "";
			        	ReportElement payrollPayeePT1Data = reportElement.getChild("wd:Payroll_Payee_PT1_Data");			        	
			        	if(payrollPayeePT1Data != null)
			        	{
							 ReportElement workerRef = payrollPayeePT1Data.getChild("wd:Worker_Reference");
							 if(workerRef != null)
							 {
								 List<ReportElement> workerData = workerRef.getChildren("wd:ID");					 
								 for(ReportElement workerElement:workerData)
								 {
									 workerMap = workerElement.getAllAttributes();
									 if(workerMap.get("wd:type").equals("Employee_ID"))
									 {
										 employeeId = workerElement.getValue().trim();
									 }
								 }
							 }
							 
							 if(oldEmpList.contains(employeeId))
					         {
								 customIdNumber = getHomeCNUMForPayroll(employeeId, ruleName, client, "Global_CNUM");
								 basicPersonalAmount = payrollPayeePT1Data.getChild("wd:Basic_Personal_Amount") != null?payrollPayeePT1Data.getChild("wd:Basic_Personal_Amount").getValue().trim():"";
								 childAmount = payrollPayeePT1Data.getChild("wd:Child_Amount") != null?payrollPayeePT1Data.getChild("wd:Child_Amount").getValue().trim():"";
								 ageAmount = payrollPayeePT1Data.getChild("wd:Age_Amount") != null?payrollPayeePT1Data.getChild("wd:Age_Amount").getValue().trim():"";
								 ageAmountSuppl = payrollPayeePT1Data.getChild("wd:Age_Amount_Supplement") != null?payrollPayeePT1Data.getChild("wd:Age_Amount_Supplement").getValue().trim():"";
								 SeniorSupplAmount = payrollPayeePT1Data.getChild("wd:Senior_Supplementary_Amount_for_Withholding") != null?payrollPayeePT1Data.getChild("wd:Senior_Supplementary_Amount_for_Withholding").getValue().trim():"";
								 amountForWorkers65OrOlder = payrollPayeePT1Data.getChild("wd:Amount_for_Workers_65_or_Older") != null?payrollPayeePT1Data.getChild("wd:Amount_for_Workers_65_or_Older").getValue().trim():"";
								 pensionIncomeAmount = payrollPayeePT1Data.getChild("wd:Pension_Income_Amount") != null?payrollPayeePT1Data.getChild("wd:Pension_Income_Amount").getValue().trim():"";
								 tuitionEducationTextbookAmounts = payrollPayeePT1Data.getChild("wd:Tuition__Education_and_Textbook_Amounts") != null?payrollPayeePT1Data.getChild("wd:Tuition__Education_and_Textbook_Amounts").getValue().trim():"";
								 disabilityAmount = payrollPayeePT1Data.getChild("wd:Disability_Amount") != null?payrollPayeePT1Data.getChild("wd:Disability_Amount").getValue().trim():"";
								 spouseCommonlawPartnerAmount = payrollPayeePT1Data.getChild("wd:Spouse_or_Common-law_Partner_Amount") != null?payrollPayeePT1Data.getChild("wd:Spouse_or_Common-law_Partner_Amount").getValue().trim():"";
								 spouseCommonlawPartnerAmountSuppl = payrollPayeePT1Data.getChild("wd:Spouse_or_Common-law_Partner_Amount_Supplement") != null?payrollPayeePT1Data.getChild("wd:Spouse_or_Common-law_Partner_Amount_Supplement").getValue().trim():"";
								 additionalAmount = payrollPayeePT1Data.getChild("wd:Additional_Amount") != null?payrollPayeePT1Data.getChild("wd:Additional_Amount").getValue().trim():"";
								 deductionLivingPrescribedZone = payrollPayeePT1Data.getChild("wd:Deduction_for_Living_in_a_Prescribed_Zone") != null?payrollPayeePT1Data.getChild("wd:Deduction_for_Living_in_a_Prescribed_Zone").getValue().trim():"";
								 amountEligibleDependant = payrollPayeePT1Data.getChild("wd:Amount_for_an_Eligible_Dependant") != null?payrollPayeePT1Data.getChild("wd:Amount_for_an_Eligible_Dependant").getValue().trim():"";
								 amountEligibleDependantSuppl = payrollPayeePT1Data.getChild("wd:Amount_for_an_Eligible_Dependant_Supplement") != null?payrollPayeePT1Data.getChild("wd:Amount_for_an_Eligible_Dependant_Supplement").getValue().trim():"";
								 caregiverAmount = payrollPayeePT1Data.getChild("wd:Caregiver_Amount") != null?payrollPayeePT1Data.getChild("wd:Caregiver_Amount").getValue().trim():"";
								 amountInfirmDependantsAge18orOlder = payrollPayeePT1Data.getChild("wd:Amount_for_Infirm_Dependants_Age_18_or_Older") != null?payrollPayeePT1Data.getChild("wd:Amount_for_Infirm_Dependants_Age_18_or_Older").getValue().trim():"";
								 amountsTransferredFromSpouseCommonlawPartner = payrollPayeePT1Data.getChild("wd:Amounts_Transferred_from_your_Spouse_or_Common-law_Partner") != null?payrollPayeePT1Data.getChild("wd:Amounts_Transferred_from_your_Spouse_or_Common-law_Partner").getValue().trim():"";
								 amountsTransferredFromDependent = payrollPayeePT1Data.getChild("wd:Amounts_Transferred_from_a_Dependant") != null?payrollPayeePT1Data.getChild("wd:Amounts_Transferred_from_a_Dependant").getValue().trim():"";
								 manitobaFamilyTaxBenefitAmount = payrollPayeePT1Data.getChild("wd:Manitoba_Family_Tax_Benefit_Amount") != null?payrollPayeePT1Data.getChild("wd:Manitoba_Family_Tax_Benefit_Amount").getValue().trim():"";
								 totalIncomeLessThanTotalClaimAmount = payrollPayeePT1Data.getChild("wd:Total_Income_less_than_Total_Claim_Amount") != null?payrollPayeePT1Data.getChild("wd:Total_Income_less_than_Total_Claim_Amount").getValue().trim():"";
								 if(totalIncomeLessThanTotalClaimAmount.equalsIgnoreCase("0"))
								 {
									 totalIncomeLessThanTotalClaimAmount = "n";
								 }
								 else
								 {
									 totalIncomeLessThanTotalClaimAmount = "y";
								 }
								 moreThanOneEmployerReference = payrollPayeePT1Data.getChild("wd:More_than_One_Employer_Reference") != null?payrollPayeePT1Data.getChild("wd:More_than_One_Employer_Reference").getValue().trim():"";
								 if(moreThanOneEmployerReference.equalsIgnoreCase("0"))
								 {
									 moreThanOneEmployerReference = "n";
								 }
								 else
								 {
									 moreThanOneEmployerReference = "y";
								 }
								 dependentsUnderAge19 = payrollPayeePT1Data.getChild("wd:Dependents_Under_Age_19") != null?payrollPayeePT1Data.getChild("wd:Dependents_Under_Age_19").getValue().trim():"";
								 disabledDependents = payrollPayeePT1Data.getChild("wd:Disabled_Dependents") != null?payrollPayeePT1Data.getChild("wd:Disabled_Dependents").getValue().trim():"";
								 exempt = payrollPayeePT1Data.getChild("wd:Exempt") != null?payrollPayeePT1Data.getChild("wd:Exempt").getValue().trim():"";
								 if(exempt.equalsIgnoreCase("0"))
								 {
									 exempt = "n";
								 }
								 else
								 {
									 exempt = "y";
								 }
								 exemptFromHealthContribution = payrollPayeePT1Data.getChild("wd:Exempt_from_Health_Contribution") != null?payrollPayeePT1Data.getChild("wd:Exempt_from_Health_Contribution").getValue().trim():"";
								 if(exemptFromHealthContribution.equalsIgnoreCase("0"))
								 {
									 exemptFromHealthContribution = "n";
								 }
								 else
								 {
									 exemptFromHealthContribution = "y";
								 }
					         }
						 }
			        	
			        		headingFromSourceTenant = "Home_CNUM,Employee_ID,Basic_Personal_Amount,Child_Amount,Age_Amount,Age_Amount_Supplement,Senior_Supplementary_Amount_Withholding,Amount_Workers_65_Older,"
			        									+ "Pension_Income_Amount,Tuition_Education_Textbook_Amounts,Disability_Amount,Spouse_or_Common-law_Partner_Amount,Spouse_or_Common-law_Partner_Amount_Supplement,"
			        									+ "Additional_Amount,Deduction_for_Living_in_a_Prescribed_Zone,Amount_for_an_Eligible_Dependant,Amount_for_an_Eligible_Dependant_Supplement,"
			        									+ "Caregiver_Amount,Amount_for_Infirm_Dependants_Age_18_or_Older,Amounts_Transferred_from_your_Spouse_or_Common-law_Partner,"
			        									+ "Amounts_Transferred_from_a_Dependant,Manitoba_Family_Tax_Benefit_Amount,Total_Income_less_than_Total_Claim_Amount,More_than_One_Employer_Reference,"
			        									+ "Dependents_Under_Age_19,Disabled_Dependents,Exempt,Exempt_from_Health_Contribution";
				        	if(!customIdNumber.isEmpty())
							{
					        	headerStr = customIdNumber + "," + employeeId + "," + basicPersonalAmount + "," + childAmount + "," + ageAmount + "," + ageAmountSuppl + "," + SeniorSupplAmount
					        			+ "," + amountForWorkers65OrOlder + "," + pensionIncomeAmount + "," + tuitionEducationTextbookAmounts + "," + disabilityAmount + "," + spouseCommonlawPartnerAmount
					        			+ "," + spouseCommonlawPartnerAmountSuppl + "," + additionalAmount + "," + deductionLivingPrescribedZone + "," + amountEligibleDependant
					        			+ "," + amountEligibleDependantSuppl + "," + caregiverAmount + "," + amountInfirmDependantsAge18orOlder + "," + amountsTransferredFromSpouseCommonlawPartner
					        			+ "," + amountsTransferredFromDependent + "," + manitobaFamilyTaxBenefitAmount + "," + totalIncomeLessThanTotalClaimAmount + "," + moreThanOneEmployerReference
					        			+ "," + dependentsUnderAge19 + "," + disabledDependents + "," + exempt + "," + exemptFromHealthContribution;
					        	
					        	sourceTenantRowMap.put(customIdNumber, headerStr);							        	
					        	sourceTenantColumnList.add(customIdNumber);
					        	
					        	if(finalStr.equals(""))
								{
									 finalStr =  headingFromSourceTenant + "\n" + headerStr;
								}
								else
								{
									 finalStr = finalStr + "\n" + headerStr;
								}
							}				        				        				        	
			         }			        	
			     }
				 System.out.println(finalStr);
				 sourceContent = finalStr.getBytes();						 
				 sourceCount = sourceTenantColumnList.size();
			   }
		}		
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		
	}

	private void createTemplateFromTargetTenantPayrollPayeeProvinceTD1(Tenant tenant2, InputStream is, SOAPConnection soapConnection, String loadCycle, String ruleName, String client, Long userId) {
		
		wdCount = 0;
		headingFromTargetTenant = "";
		targetTenantRowMap.clear();
		targetTenantColumnList.clear();
		errorList.clear();
		String xmlReqFile = null;
		try 
		{			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 xmlReqFile = requestfile.getAbsolutePath();
				 is = new FileInputStream(xmlReqFile);
			     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
			     SOAPPart soapPart = soapMessage.getSOAPPart();
			     SOAPEnvelope envelope = soapPart.getEnvelope();
				 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
				 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
				 {
					  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
					  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
				 }
				 soapMessage.saveChanges();
			     ByteArrayOutputStream out = new ByteArrayOutputStream();
			     soapMessage.writeTo(out);
			     String strMsg = new String(out.toByteArray());	
			     
			     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Payroll";
			     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
				 soapConnection = soapConnectionFactory.createConnection();
				 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
				 out = new ByteArrayOutputStream();
				 soapResponse.writeTo(out);
				 strMsg = new String(out.toByteArray(), "utf-8");

				 ReportElement soapResp = XmlParserManager.parseXml(strMsg);
				 
				 ReportElement pageData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Payroll_Payee_PT1s_Response")
							.getChild("wd:Response_Results");
				 
				 String totalNoOfPages = pageData.getChild("wd:Total_Pages").getValue().trim();
				 String totalResults = pageData.getChild("wd:Total_Results").getValue().trim();
				 int totalResult = Integer.parseInt(totalResults);
				 System.out.println("totalNoOfPages-"+totalNoOfPages);
				 System.out.println("totalResult-"+totalResult);						 
				 
				 String employeeId = "";						 
				 String customIdNumber = "";
				 String basicPersonalAmount = "";
				 String childAmount = "";
				 String ageAmount = "";
				 String ageAmountSuppl = "";
				 String SeniorSupplAmount = "";
				 String amountForWorkers65OrOlder = "";
				 String pensionIncomeAmount = "";
				 String tuitionEducationTextbookAmounts = "";
				 String disabilityAmount = "";
				 String spouseCommonlawPartnerAmount = "";
				 String spouseCommonlawPartnerAmountSuppl = "";
				 String additionalAmount = "";
				 String deductionLivingPrescribedZone = "";
				 String amountEligibleDependant = "";
				 String amountEligibleDependantSuppl = "";
				 String caregiverAmount = "";
				 String amountInfirmDependantsAge18orOlder = "";
				 String amountsTransferredFromSpouseCommonlawPartner = "";
				 String amountsTransferredFromDependent = "";
				 String manitobaFamilyTaxBenefitAmount = "";
				 String totalIncomeLessThanTotalClaimAmount = "";//n
				 String moreThanOneEmployerReference = "";//n
				 String dependentsUnderAge19 = "";
				 String disabledDependents = "";
				 String exempt = "";//n
				 String exemptFromHealthContribution = "";//n
				 
				 String finalStr = "";
				 String headerStr = "";
				 						 
				 Map<String,String> workerMap = null;
				 
				 for (int j = 1; j <=Integer.parseInt(totalNoOfPages); j++) //
				 {
					 String xmlStr = convertFileToString(xmlReqFile);
					 String outputfile = updatePageIndex(xmlStr, j, ruleName);
					 is = new FileInputStream(outputfile);
				     soapMessage = MessageFactory.newInstance().createMessage(null, is);
				     soapPart = soapMessage.getSOAPPart();
				     envelope = soapPart.getEnvelope();
					 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
					 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
					 {
							envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
					 }
					 soapMessage.saveChanges();
			         out = new ByteArrayOutputStream();
			         soapMessage.writeTo(out);
			         strMsg = new String(out.toByteArray());
			        
			         soapConnectionFactory = SOAPConnectionFactory.newInstance();
					 soapConnection = soapConnectionFactory.createConnection();
			         soapResponse = soapConnection.call(soapMessage, sourceUrl);
			         out = new ByteArrayOutputStream();
			         soapResponse.writeTo(out);
			         strMsg = new String(out.toByteArray(), "utf-8");
			        
			         soapResp = XmlParserManager.parseXml(strMsg);
			        
			        ReportElement responseData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Payroll_Payee_PT1s_Response")
							.getChild("wd:Response_Data");
			        
			        List<ReportElement> payrollData = responseData.getChildren("wd:Payroll_Payee_PT1");
			        for(ReportElement reportElement : payrollData)
					{
			        	customIdNumber = "";
			        	ReportElement payrollPayeePT1Data = reportElement.getChild("wd:Payroll_Payee_PT1_Data");			        	
			        	if(payrollPayeePT1Data != null)
			        	{
							 ReportElement workerRef = payrollPayeePT1Data.getChild("wd:Worker_Reference");
							 if(workerRef != null)
							 {
								 List<ReportElement> workerData = workerRef.getChildren("wd:ID");					 
								 for(ReportElement workerElement:workerData)
								 {
									 workerMap = workerElement.getAllAttributes();
									 if(workerMap.get("wd:type").equals("Employee_ID"))
									 {
										 employeeId = workerElement.getValue().trim();
									 }
								 }
							 }
							 
							 if(newEmpList.contains(employeeId))
					         {
								 customIdNumber = getHomeCNUMForPayroll(employeeId, ruleName, client, "Previous_IBM_CNUM");
								 basicPersonalAmount = payrollPayeePT1Data.getChild("wd:Basic_Personal_Amount") != null?payrollPayeePT1Data.getChild("wd:Basic_Personal_Amount").getValue().trim():"";
								 childAmount = payrollPayeePT1Data.getChild("wd:Child_Amount") != null?payrollPayeePT1Data.getChild("wd:Child_Amount").getValue().trim():"";
								 ageAmount = payrollPayeePT1Data.getChild("wd:Age_Amount") != null?payrollPayeePT1Data.getChild("wd:Age_Amount").getValue().trim():"";
								 ageAmountSuppl = payrollPayeePT1Data.getChild("wd:Age_Amount_Supplement") != null?payrollPayeePT1Data.getChild("wd:Age_Amount_Supplement").getValue().trim():"";
								 SeniorSupplAmount = payrollPayeePT1Data.getChild("wd:Senior_Supplementary_Amount_for_Withholding") != null?payrollPayeePT1Data.getChild("wd:Senior_Supplementary_Amount_for_Withholding").getValue().trim():"";
								 amountForWorkers65OrOlder = payrollPayeePT1Data.getChild("wd:Amount_for_Workers_65_or_Older") != null?payrollPayeePT1Data.getChild("wd:Amount_for_Workers_65_or_Older").getValue().trim():"";
								 pensionIncomeAmount = payrollPayeePT1Data.getChild("wd:Pension_Income_Amount") != null?payrollPayeePT1Data.getChild("wd:Pension_Income_Amount").getValue().trim():"";
								 tuitionEducationTextbookAmounts = payrollPayeePT1Data.getChild("wd:Tuition__Education_and_Textbook_Amounts") != null?payrollPayeePT1Data.getChild("wd:Tuition__Education_and_Textbook_Amounts").getValue().trim():"";
								 disabilityAmount = payrollPayeePT1Data.getChild("wd:Disability_Amount") != null?payrollPayeePT1Data.getChild("wd:Disability_Amount").getValue().trim():"";
								 spouseCommonlawPartnerAmount = payrollPayeePT1Data.getChild("wd:Spouse_or_Common-law_Partner_Amount") != null?payrollPayeePT1Data.getChild("wd:Spouse_or_Common-law_Partner_Amount").getValue().trim():"";
								 spouseCommonlawPartnerAmountSuppl = payrollPayeePT1Data.getChild("wd:Spouse_or_Common-law_Partner_Amount_Supplement") != null?payrollPayeePT1Data.getChild("wd:Spouse_or_Common-law_Partner_Amount_Supplement").getValue().trim():"";
								 additionalAmount = payrollPayeePT1Data.getChild("wd:Additional_Amount") != null?payrollPayeePT1Data.getChild("wd:Additional_Amount").getValue().trim():"";
								 deductionLivingPrescribedZone = payrollPayeePT1Data.getChild("wd:Deduction_for_Living_in_a_Prescribed_Zone") != null?payrollPayeePT1Data.getChild("wd:Deduction_for_Living_in_a_Prescribed_Zone").getValue().trim():"";
								 amountEligibleDependant = payrollPayeePT1Data.getChild("wd:Amount_for_an_Eligible_Dependant") != null?payrollPayeePT1Data.getChild("wd:Amount_for_an_Eligible_Dependant").getValue().trim():"";
								 amountEligibleDependantSuppl = payrollPayeePT1Data.getChild("wd:Amount_for_an_Eligible_Dependant_Supplement") != null?payrollPayeePT1Data.getChild("wd:Amount_for_an_Eligible_Dependant_Supplement").getValue().trim():"";
								 caregiverAmount = payrollPayeePT1Data.getChild("wd:Caregiver_Amount") != null?payrollPayeePT1Data.getChild("wd:Caregiver_Amount").getValue().trim():"";
								 amountInfirmDependantsAge18orOlder = payrollPayeePT1Data.getChild("wd:Amount_for_Infirm_Dependants_Age_18_or_Older") != null?payrollPayeePT1Data.getChild("wd:Amount_for_Infirm_Dependants_Age_18_or_Older").getValue().trim():"";
								 amountsTransferredFromSpouseCommonlawPartner = payrollPayeePT1Data.getChild("wd:Amounts_Transferred_from_your_Spouse_or_Common-law_Partner") != null?payrollPayeePT1Data.getChild("wd:Amounts_Transferred_from_your_Spouse_or_Common-law_Partner").getValue().trim():"";
								 amountsTransferredFromDependent = payrollPayeePT1Data.getChild("wd:Amounts_Transferred_from_a_Dependant") != null?payrollPayeePT1Data.getChild("wd:Amounts_Transferred_from_a_Dependant").getValue().trim():"";
								 manitobaFamilyTaxBenefitAmount = payrollPayeePT1Data.getChild("wd:Manitoba_Family_Tax_Benefit_Amount") != null?payrollPayeePT1Data.getChild("wd:Manitoba_Family_Tax_Benefit_Amount").getValue().trim():"";
								 totalIncomeLessThanTotalClaimAmount = payrollPayeePT1Data.getChild("wd:Total_Income_less_than_Total_Claim_Amount") != null?payrollPayeePT1Data.getChild("wd:Total_Income_less_than_Total_Claim_Amount").getValue().trim():"";
								 if(totalIncomeLessThanTotalClaimAmount.equalsIgnoreCase("0"))
								 {
									 totalIncomeLessThanTotalClaimAmount = "n";
								 }
								 else
								 {
									 totalIncomeLessThanTotalClaimAmount = "y";
								 }
								 moreThanOneEmployerReference = payrollPayeePT1Data.getChild("wd:More_than_One_Employer_Reference") != null?payrollPayeePT1Data.getChild("wd:More_than_One_Employer_Reference").getValue().trim():"";
								 if(moreThanOneEmployerReference.equalsIgnoreCase("0"))
								 {
									 moreThanOneEmployerReference = "n";
								 }
								 else
								 {
									 moreThanOneEmployerReference = "y";
								 }
								 dependentsUnderAge19 = payrollPayeePT1Data.getChild("wd:Dependents_Under_Age_19") != null?payrollPayeePT1Data.getChild("wd:Dependents_Under_Age_19").getValue().trim():"";
								 disabledDependents = payrollPayeePT1Data.getChild("wd:Disabled_Dependents") != null?payrollPayeePT1Data.getChild("wd:Disabled_Dependents").getValue().trim():"";
								 exempt = payrollPayeePT1Data.getChild("wd:Exempt") != null?payrollPayeePT1Data.getChild("wd:Exempt").getValue().trim():"";
								 if(exempt.equalsIgnoreCase("0"))
								 {
									 exempt = "n";
								 }
								 else
								 {
									 exempt = "y";
								 }
								 exemptFromHealthContribution = payrollPayeePT1Data.getChild("wd:Exempt_from_Health_Contribution") != null?payrollPayeePT1Data.getChild("wd:Exempt_from_Health_Contribution").getValue().trim():"";
								 if(exemptFromHealthContribution.equalsIgnoreCase("0"))
								 {
									 exemptFromHealthContribution = "n";
								 }
								 else
								 {
									 exemptFromHealthContribution = "y";
								 }
					         }
						 }
			        	
			        	  headingFromTargetTenant = "Home_CNUM,Employee_ID,Basic_Personal_Amount,Child_Amount,Age_Amount,Age_Amount_Supplement,Senior_Supplementary_Amount_Withholding,Amount_Workers_65_Older,"
			        									+ "Pension_Income_Amount,Tuition_Education_Textbook_Amounts,Disability_Amount,Spouse_or_Common-law_Partner_Amount,Spouse_or_Common-law_Partner_Amount_Supplement,"
			        									+ "Additional_Amount,Deduction_for_Living_in_a_Prescribed_Zone,Amount_for_an_Eligible_Dependant,Amount_for_an_Eligible_Dependant_Supplement,"
			        									+ "Caregiver_Amount,Amount_for_Infirm_Dependants_Age_18_or_Older,Amounts_Transferred_from_your_Spouse_or_Common-law_Partner,"
			        									+ "Amounts_Transferred_from_a_Dependant,Manitoba_Family_Tax_Benefit_Amount,Total_Income_less_than_Total_Claim_Amount,More_than_One_Employer_Reference,"
			        									+ "Dependents_Under_Age_19,Disabled_Dependents,Exempt,Exempt_from_Health_Contribution";
				        	if(!customIdNumber.isEmpty())
							{
					        	headerStr = customIdNumber + "," + employeeId + "," + basicPersonalAmount + "," + childAmount + "," + ageAmount + "," + ageAmountSuppl + "," + SeniorSupplAmount
					        			+ "," + amountForWorkers65OrOlder + "," + pensionIncomeAmount + "," + tuitionEducationTextbookAmounts + "," + disabilityAmount + "," + spouseCommonlawPartnerAmount
					        			+ "," + spouseCommonlawPartnerAmountSuppl + "," + additionalAmount + "," + deductionLivingPrescribedZone + "," + amountEligibleDependant
					        			+ "," + amountEligibleDependantSuppl + "," + caregiverAmount + "," + amountInfirmDependantsAge18orOlder + "," + amountsTransferredFromSpouseCommonlawPartner
					        			+ "," + amountsTransferredFromDependent + "," + manitobaFamilyTaxBenefitAmount + "," + totalIncomeLessThanTotalClaimAmount + "," + moreThanOneEmployerReference
					        			+ "," + dependentsUnderAge19 + "," + disabledDependents + "," + exempt + "," + exemptFromHealthContribution;
					        	
					        	targetTenantRowMap.put(customIdNumber, headerStr);							        	
					        	targetTenantColumnList.add(customIdNumber);
					        	
					        	if(finalStr.equals(""))
								{
									 finalStr =  headingFromTargetTenant + "\n" + headerStr;
								}
								else
								{
									 finalStr = finalStr + "\n" + headerStr;
								}
							}				        				        				        	
			         }			        	
			     }
				 System.out.println(finalStr);
				 targetContent = finalStr.getBytes();						 
				 wdCount = targetTenantColumnList.size();
			   }
		}		
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		
	}
	
	private void createTemplateFromSourceTenantEducation(Tenant tenant, InputStream is, SOAPConnection soapConnection, String loadCycle, String ruleName, String client, Long userId) {
		
		sourceCount = 0;
		headingFromSourceTenant = "";
		sourceTenantRowMap.clear();
		sourceTenantColumnList.clear();
		errorList.clear();
		String xmlReqFile = null;
		try 
		{			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 xmlReqFile = requestfile.getAbsolutePath();
				 String outputfile = addHireIdList(xmlReqFile, oldEmpList, ruleName, 0, oldEmpList.size(), "Employee_ID");
				 is = new FileInputStream(outputfile);
			     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
			     SOAPPart soapPart = soapMessage.getSOAPPart();
			     SOAPEnvelope envelope = soapPart.getEnvelope();
				 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
				 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
				 {
					  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
					  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
				 }
				 soapMessage.saveChanges();
			     ByteArrayOutputStream out = new ByteArrayOutputStream();
			     soapMessage.writeTo(out);
			     String strMsg = new String(out.toByteArray());	
			     
			     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
			     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
				 soapConnection = soapConnectionFactory.createConnection();
				 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
				 out = new ByteArrayOutputStream();
				 soapResponse.writeTo(out);
				 strMsg = new String(out.toByteArray(), "utf-8");

				 ReportElement soapResp = XmlParserManager.parseXml(strMsg);
				 
				 ReportElement pageData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Results");
				 
				 String totalNoOfPages = pageData.getChild("wd:Total_Pages").getValue().trim();
				 String totalResults = pageData.getChild("wd:Total_Results").getValue().trim();
				 int totalResult = Integer.parseInt(totalResults);
				 System.out.println("totalNoOfPages-"+totalNoOfPages);
				 System.out.println("totalResult-"+totalResult);						 
				 
				 String employeeId = "";
				 String WID = "";

				 String empTerminationDate = "";				 
				 String customIdNumber = "";
				 String school = "";
				 String schoolArr = "";
				 String schoolLocation = "";
				 String schoolLocationArr = "";
				 String degree = "";
				 String degreeArr = "";
				 String degreeDate = "";
				 String degreeDateArr = "";
				 String fieldOfStudy = "";
				 String fieldOfStudyArr = "";
						 
				 String finalStr = "";
				 String headerStr = "";
				 
				 Map<String,String> customTypeMap = null;
				 Map<String,String> widMap = null;
				 
				 String reportURL = "";
				 int startIndex = 0;
				 int endIndex = 0;
				 
				 for (int j = 1; j <=Integer.parseInt(totalNoOfPages); j++) //
				 {
					 if(j == 1)
					 {
						startIndex = 0;
						if(999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = j*999;
						}
					 }
					 else
					 {
						startIndex = endIndex;
						if(j*999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = (j*999);
						}
					 }
					 outputfile = addHireIdList(xmlReqFile, oldEmpList, ruleName, startIndex, endIndex, "Employee_ID");
					 is = new FileInputStream(outputfile);
				     soapMessage = MessageFactory.newInstance().createMessage(null, is);
				     soapPart = soapMessage.getSOAPPart();
				     envelope = soapPart.getEnvelope();
					 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
					 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
					 {
							envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
					 }
					 soapMessage.saveChanges();
			         out = new ByteArrayOutputStream();
			         soapMessage.writeTo(out);
			         strMsg = new String(out.toByteArray());
			        
			         soapConnectionFactory = SOAPConnectionFactory.newInstance();
					 soapConnection = soapConnectionFactory.createConnection();
			         soapResponse = soapConnection.call(soapMessage, sourceUrl);
			         out = new ByteArrayOutputStream();
			         soapResponse.writeTo(out);
			         strMsg = new String(out.toByteArray(), "utf-8");
			        
			         soapResp = XmlParserManager.parseXml(strMsg);
			        
			        ReportElement responseData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Data");
			        
			        List<ReportElement> applicantData = responseData.getChildren("wd:Worker");
			        for(ReportElement reportElement : applicantData)
					{
			        	ReportElement terminationStatusData = reportElement.getChild("wd:Worker_Data")
					 			.getChild("wd:Employment_Data")
					 			.getChild("wd:Worker_Status_Data");
			        	
			        	empTerminationDate = terminationStatusData.getChild("wd:Termination_Date") != null?terminationStatusData.getChild("wd:Termination_Date").getValue().trim():"";					        	
			        	//if(!empTerminationDate.equalsIgnoreCase(""))
			        	{
			        		//Date termDate = convertWorkdayStringToDate(empTerminationDate);
			        		//if((termDate.equals(termFromDate) || termDate.after(termFromDate)) && (termDate.equals(termToDate) || termDate.before(termToDate)))
			        		{
					        	//System.out.println("empTerminationDate--"+ termDate);
				        		ReportElement element1 = reportElement.getChild("wd:Worker_Data");
				        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
				        		System.out.println(employeeId);
				        		//System.out.println(rowNum);
				        		//System.out.println("--------------");
				        		
				        		ReportElement widRef = reportElement.getChild("wd:Worker_Reference");
								 if(widRef != null)
								 {
									 List<ReportElement> idList = widRef.getChildren("wd:ID");
									 for(ReportElement idElement:idList)
									 {
										 widMap = idElement.getAllAttributes();
										 if(widMap.get("wd:type").equals("WID"))
										 {
											 WID = idElement.getValue().trim();
										 }
									 }
								 }
								 else
								 {
									 WID = "";
								 }
								
								 /*if(tenant.getTenantName().equalsIgnoreCase("ibm6"))
								 {
									 reportURL = "https://" + tenant.getTenantUrl() + "customreport2/" + tenant.getTenantName() + "/ISU_Verify_Global/" + "Manage_Education?Employee!WID=" + WID;
								 }
								 else if(tenant.getTenantName().equalsIgnoreCase("ibm10"))
								 {*/
									 reportURL = "https://" + tenant.getTenantUrl() + "customreport2/" + tenant.getTenantName() + "/ISU_Verify_Global/" + "Manage_Education?Effective_as_of_Date=2021-10-11-07:00&Employee!WID=" + WID;
								 //}
								 
								JSONArray jArr = createEducationData(reportURL);
								if(jArr != null && jArr.length() >0)
								{
									 schoolArr = "";
									 schoolLocationArr = "";
									 degreeArr = "";
									 degreeDateArr = "";
									 fieldOfStudyArr = "";
									for(int i = 0; i<jArr.length(); i++) 
							        {
										JSONObject objects = jArr.getJSONObject(i);
										school = objects.isNull("school")?"":objects.getString("school");
										if(schoolArr.equals(""))
										{
											schoolArr = school;
										}
										else
										{
											if(!school.isEmpty())
											{
												schoolArr = schoolArr + "~" + school;
											}
										}
										schoolLocation = objects.isNull("schoolLocation")?"":objects.getString("schoolLocation");
										if(schoolLocation.contains(","))
										{
											schoolLocation = schoolLocation.replaceAll(",", "|");
										}
										if(schoolLocationArr.equals(""))
										{
											schoolLocationArr = schoolLocation;
										}
										else
										{
											if(!schoolLocation.isEmpty())
											{
												schoolLocationArr = schoolLocationArr + "~" + schoolLocation;
											}
										}
										degree = objects.isNull("degree")?"":objects.getString("degree");
										if(degreeArr.equals(""))
										{
											degreeArr = degree;
										}
										else
										{
											if(!degree.isEmpty())
											{
												degreeArr = degreeArr + "~" + degree;
											}
										}
										degreeDate = objects.isNull("degreeDate")?"":objects.getString("degreeDate");
										if(degreeDateArr.equals(""))
										{
											degreeDateArr = degreeDate;
										}
										else
										{
											if(!degreeDate.isEmpty())
											{
												degreeDateArr = degreeDateArr + "~" + degreeDate;
											}
										}
										fieldOfStudy = objects.isNull("fieldOfStudy")?"":objects.getString("fieldOfStudy");
										if(fieldOfStudyArr.equals(""))
										{
											fieldOfStudyArr = fieldOfStudy;
										}
										else
										{
											if(!fieldOfStudy.isEmpty())
											{
												fieldOfStudyArr = fieldOfStudyArr + "~" + fieldOfStudy;
											}
										}
							        }
								}
								else
								{
									 schoolArr = "";
									 schoolLocationArr = "";
									 degreeArr = "";
									 degreeDateArr = "";
									 fieldOfStudyArr = "";
								}
		 
								 
								 ReportElement identificationData = reportElement.getChild("wd:Worker_Data")
								 			.getChild("wd:Personal_Data")
								 			.getChild("wd:Identification_Data");
								 
								 if(identificationData != null)
								 {												 											 
									 List<ReportElement> customIDList = identificationData.getChildren("wd:Custom_ID");
									 if(customIDList != null && customIDList.size() >0)
									 {
										 String expirationDate = "";
										 customIdNumber = "" ;
										 for(ReportElement customElement : customIDList)
										 {
											 ReportElement customIdData = customElement.getChild("wd:Custom_ID_Data");
											 if(customIdData != null)
											 {
												 expirationDate = customIdData.getChild("wd:Expiration_Date") != null?customIdData.getChild("wd:Expiration_Date").getValue().trim():"";
												 ReportElement customTypeRef = customIdData.getChild("wd:ID_Type_Reference");
												 if(customTypeRef != null)
												 {
													 List<ReportElement> customIdTypeData = customTypeRef.getChildren("wd:ID");								 
													 for(ReportElement idTypeElement:customIdTypeData)
													 {
														 customTypeMap = idTypeElement.getAllAttributes();
														 if(customTypeMap.get("wd:type").equals("Custom_ID_Type_ID"))
														 {
															 if(idTypeElement.getValue().trim().equalsIgnoreCase("Global_CNUM") && expirationDate.isEmpty())
															 {
																 customIdNumber = customIdData.getChild("wd:ID") != null?customIdData.getChild("wd:ID").getValue().trim():""; 
															 }
														 }
													 }
												 }												 
											 }
										 }
										 if(customIdNumber.isEmpty())
										 {
											 customIdNumber = "" ;
										 }
									 }
									 else
									 {
										 customIdNumber = "" ;
									 }
								 }
								 else
								 {
									 customIdNumber = "" ;										 
								 }										 										 									 
						}						        						        
			        }
				     headingFromSourceTenant = "Home_CNUM,Employee_ID,School,School_Location,Degree,Degree_Received_Date,Field_Of_Study";
				     
		        	if(!customIdNumber.isEmpty())
					{
			        	headerStr = customIdNumber + "," + employeeId + "," + schoolArr + "," + schoolLocationArr + "," + degreeArr + "," + degreeDateArr + "," + fieldOfStudyArr; 
			        	
			        	sourceTenantRowMap.put(customIdNumber, headerStr);							        	
			        	sourceTenantColumnList.add(customIdNumber);
			        	
			        	if(finalStr.equals(""))
						{
							 finalStr =  headingFromSourceTenant + "\n" + headerStr;
						}
						else
						{
							 finalStr = finalStr + "\n" + headerStr;
						}
					 }
		          }						 							 
			   }
			
				 System.out.println(finalStr);
				 sourceContent = finalStr.getBytes();						 
				 sourceCount = sourceTenantColumnList.size();
		    }
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		
	}

	private void createTemplateFromTargetTenantEducation(Tenant tenant, InputStream is, SOAPConnection soapConnection, String loadCycle, String ruleName, String client, Long userId) {
		
		wdCount = 0;
		headingFromTargetTenant = "";
		targetTenantRowMap.clear();
		targetTenantColumnList.clear();
		String xmlReqFile = null;
		try 
		{			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 xmlReqFile = requestfile.getAbsolutePath();
				 String outputfile = addHireIdList(xmlReqFile, newEmpList, ruleName, 0, newEmpList.size(), "Employee_ID");
				 is = new FileInputStream(outputfile);
			     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
			     SOAPPart soapPart = soapMessage.getSOAPPart();
			     SOAPEnvelope envelope = soapPart.getEnvelope();
				 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
				 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
				 {
					  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
					  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
				 }
				 soapMessage.saveChanges();
			     ByteArrayOutputStream out = new ByteArrayOutputStream();
			     soapMessage.writeTo(out);
			     String strMsg = new String(out.toByteArray());	
			     
			     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
			     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
				 soapConnection = soapConnectionFactory.createConnection();
				 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
				 out = new ByteArrayOutputStream();
				 soapResponse.writeTo(out);
				 strMsg = new String(out.toByteArray(), "utf-8");
		
				 ReportElement soapResp = XmlParserManager.parseXml(strMsg);
				 
				 ReportElement pageData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Results");
				 
				 String totalNoOfPages = pageData.getChild("wd:Total_Pages").getValue().trim();
				 String totalResults = pageData.getChild("wd:Total_Results").getValue().trim();
				 int totalResult = Integer.parseInt(totalResults);
				 System.out.println("totalNoOfPages-"+totalNoOfPages);
				 System.out.println("totalResult-"+totalResult);				 
				 
				 String employeeId = "";
				 String WID = "";
				 String employeeHireDate = "";				 
				 String customIdNumber = "";
				 String school = "";
				 String schoolArr = "";
				 String schoolLocation = "";
				 String schoolLocationArr = "";
				 String degree = "";
				 String degreeArr = "";
				 String degreeDate = "";
				 String degreeDateArr = "";
				 String fieldOfStudy = "";
				 String fieldOfStudyArr = "";						 
				 String finalStr = "";
				 String headerStr = "";
				 
				 Map<String,String> customTypeMap = null;
				 Map<String,String> widMap = null;
				 
				 String reportURL = "";
				 int startIndex = 0;
				 int endIndex = 0;
				 
				 for (int j = 1; j <=Integer.parseInt(totalNoOfPages); j++) //
				 {
					 if(j == 1)
					 {
						startIndex = 0;
						if(999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = j*999;
						}
					 }
					 else
					 {
						startIndex = endIndex;
						if(j*999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = (j*999);
						}
					 }
					 outputfile = addHireIdList(xmlReqFile, newEmpList, ruleName, startIndex, endIndex, "Employee_ID");
					 is = new FileInputStream(outputfile);
				     soapMessage = MessageFactory.newInstance().createMessage(null, is);
				     soapPart = soapMessage.getSOAPPart();
				     envelope = soapPart.getEnvelope();
					 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
					 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
					 {
							envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
					 }
					 soapMessage.saveChanges();
			         out = new ByteArrayOutputStream();
			         soapMessage.writeTo(out);
			         strMsg = new String(out.toByteArray());
			        
			         soapConnectionFactory = SOAPConnectionFactory.newInstance();
					 soapConnection = soapConnectionFactory.createConnection();
			         soapResponse = soapConnection.call(soapMessage, sourceUrl);
			         out = new ByteArrayOutputStream();
			         soapResponse.writeTo(out);
			         strMsg = new String(out.toByteArray(), "utf-8");
			        
			         soapResp = XmlParserManager.parseXml(strMsg);
			        
			        ReportElement responseData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Data");
			        
			        List<ReportElement> applicantData = responseData.getChildren("wd:Worker");
			        for(ReportElement reportElement : applicantData)
					{
			        	ReportElement hireStatusData = reportElement.getChild("wd:Worker_Data")
					 			.getChild("wd:Employment_Data")
					 			.getChild("wd:Worker_Status_Data");
			        	
			        	employeeHireDate = hireStatusData.getChild("wd:Hire_Date") != null?hireStatusData.getChild("wd:Hire_Date").getValue().trim():"";					        	
			        	if(!employeeHireDate.equalsIgnoreCase(""))
			        	{
			        		Date empHireDate = convertWorkdayStringToDate(employeeHireDate);
			        		//if((empHireDate.equals(hireFromDate) || empHireDate.after(hireFromDate)) && (empHireDate.equals(hireToDate) || empHireDate.before(hireToDate)))
			        		{
					        	System.out.println("empHireDate--"+ empHireDate);
				        		ReportElement element1 = reportElement.getChild("wd:Worker_Data");
				        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
				        		System.out.println("employeeId--"+ employeeId);
				        		
				        		ReportElement widRef = reportElement.getChild("wd:Worker_Reference");
								 if(widRef != null)
								 {
									 List<ReportElement> idList = widRef.getChildren("wd:ID");
									 for(ReportElement idElement:idList)
									 {
										 widMap = idElement.getAllAttributes();
										 if(widMap.get("wd:type").equals("WID"))
										 {
											 WID = idElement.getValue().trim();
										 }
									 }
								 }
								 else
								 {
									 WID = "";
								 }
								 
								 /*if(tenant.getTenantName().equalsIgnoreCase("ibm6"))
								 {
									 reportURL = "https://" + tenant.getTenantUrl() + "customreport2/" + tenant.getTenantName() + "/ISU_Verify_Global/" + "Manage_Education?Employee!WID=" + WID;
								 }
								 else if(tenant.getTenantName().equalsIgnoreCase("ibm10"))
								 {*/
									 reportURL = "https://" + tenant.getTenantUrl() + "customreport2/" + tenant.getTenantName() + "/ISU_Verify_Global/" + "Manage_Education?Effective_as_of_Date=2021-11-01-07:00&Employee!WID=" + WID;
								 //}
								 
								JSONArray jArr = createEducationData(reportURL);
								if(jArr != null && jArr.length() >0)
								{
									 schoolArr = "";
									 schoolLocationArr = "";
									 degreeArr = "";
									 degreeDateArr = "";
									 fieldOfStudyArr = "";
									for(int i = 0; i<jArr.length(); i++) 
							        {
										JSONObject objects = jArr.getJSONObject(i);
										school = objects.isNull("school")?"":objects.getString("school");
										if(schoolArr.equals(""))
										{
											schoolArr = school;
										}
										else
										{
											if(!school.isEmpty())
											{
												schoolArr = schoolArr + "~" + school;
											}
										}
										schoolLocation = objects.isNull("schoolLocation")?"":objects.getString("schoolLocation");
										if(schoolLocation.contains(","))
										{
											schoolLocation = schoolLocation.replaceAll(",", "|");
										}
										if(schoolLocationArr.equals(""))
										{
											schoolLocationArr = schoolLocation;
										}
										else
										{
											if(!schoolLocation.isEmpty())
											{
												schoolLocationArr = schoolLocationArr + "~" + schoolLocation;
											}
										}
										degree = objects.isNull("degree")?"":objects.getString("degree");
										if(degreeArr.equals(""))
										{
											degreeArr = degree;
										}
										else
										{
											if(!degree.isEmpty())
											{
												degreeArr = degreeArr + "~" + degree;
											}
										}
										degreeDate = objects.isNull("degreeDate")?"":objects.getString("degreeDate");
										if(degreeDateArr.equals(""))
										{
											degreeDateArr = degreeDate;
										}
										else
										{
											if(!degreeDate.isEmpty())
											{
												degreeDateArr = degreeDateArr + "~" + degreeDate;
											}
										}
										fieldOfStudy = objects.isNull("fieldOfStudy")?"":objects.getString("fieldOfStudy");
										if(fieldOfStudyArr.equals(""))
										{
											fieldOfStudyArr = fieldOfStudy;
										}
										else
										{
											if(!fieldOfStudy.isEmpty())
											{
												fieldOfStudyArr = fieldOfStudyArr + "~" + fieldOfStudy;
											}
										}
							        }
								}
								else
								{
									 schoolArr = "";
									 schoolLocationArr = "";
									 degreeArr = "";
									 degreeDateArr = "";
									 fieldOfStudyArr = "";
								}
								 
								 ReportElement identificationData = reportElement.getChild("wd:Worker_Data")
								 			.getChild("wd:Personal_Data")
								 			.getChild("wd:Identification_Data");
								 
								 if(identificationData != null)
								 {										 
									 List<ReportElement> customIDList = identificationData.getChildren("wd:Custom_ID");
									 if(customIDList != null && customIDList.size() >0)
									 {
										 customIdNumber = "" ;
										 for(ReportElement customElement : customIDList)
										 {
											 ReportElement customIdData = customElement.getChild("wd:Custom_ID_Data");
											 if(customIdData != null)
											 {
												 ReportElement customTypeRef = customIdData.getChild("wd:ID_Type_Reference");
												 if(customTypeRef != null)
												 {
													 List<ReportElement> customIdTypeData = customTypeRef.getChildren("wd:ID");								 
													 for(ReportElement idTypeElement:customIdTypeData)
													 {
														 customTypeMap = idTypeElement.getAllAttributes();
														 if(customTypeMap.get("wd:type").equals("Custom_ID_Type_ID"))
														 {
															 if(idTypeElement.getValue().trim().equalsIgnoreCase("Previous_IBM_CNUM"))
															 {
																 customIdNumber = customIdData.getChild("wd:ID") != null?customIdData.getChild("wd:ID").getValue().trim():""; 
															 }
														 }
													 }
												 }
											 }
										 }
										 if(customIdNumber.isEmpty())
										 {
											 customIdNumber = "" ;
										 }
									 }
									 else
									 {
										 customIdNumber = "" ;
									 }
								 }
								 else
								 {
									 customIdNumber = "" ;
								 }								 								 								 
						}				        				        
			          }
			        	headingFromTargetTenant = "Home_CNUM,Employee_ID,School,School_Location,Degree,Degree_Received_Date,Field_Of_Study";
					     
			        	if(!customIdNumber.isEmpty())
						{
				        	headerStr = customIdNumber + "," + employeeId + "," + schoolArr + "," + schoolLocationArr + "," + degreeArr + "," + degreeDateArr + "," + fieldOfStudyArr; 
				        	
				        	 targetTenantRowMap.put(customIdNumber, headerStr);
				        	 targetTenantColumnList.add(customIdNumber);
				        	 
							 if(finalStr.equals(""))
							 {
								 finalStr =  headingFromTargetTenant + "\n" + headerStr;
							 }
							 else
							 {
								 finalStr = finalStr + "\n" + headerStr;
							 }
					 }
				   }						 							 
			     }
				 System.out.println(finalStr);
				 targetContent = finalStr.getBytes();
				 wdCount = targetTenantColumnList.size();
		   }
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		
		
	}
	
	private JSONArray createEducationData(String reportURL) throws JSONException {

		JSONArray jArr = new JSONArray();
		DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilder dBuilder;
		XPath xPath = XPathFactory.newInstance().newXPath();
		HttpBasicAuthentication httpBasicAuthentication = new HttpBasicAuthentication();
		String output = httpBasicAuthentication.getWithBasicAuthentication(reportURL, tenant.getTenantUser(), tenant.getTenantUserPassword());
		Reader reader1 = new StringReader(output);
		Document doc;
		try 
		{
			dBuilder = dbFactory.newDocumentBuilder();
			doc = dBuilder.parse(new InputSource(reader1));
			doc.getDocumentElement().normalize();
			String expression = EMPLOYEE_APPLICANT_MAPPING_RESPONSE_EXPRESSION;
			NodeList nodeList = (NodeList) xPath.compile(expression).evaluate(doc, XPathConstants.NODESET);
			for (int i = 0; i < nodeList.getLength(); i++) 
			{
				try 
				{
					jArr = parseNodesForEducation(nodeList);
				} 
				catch (DOMException e)
				{
					e.printStackTrace();
				}
			}			
		} 
		catch (SAXException e) 
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (XPathExpressionException e) 
		{
			e.printStackTrace();
		} 
		catch (ParserConfigurationException e) 
		{
			e.printStackTrace();
		}
		return jArr;
	}

	private JSONArray parseNodesForEducation(NodeList nodeList) throws JSONException {

		JSONArray details = new JSONArray();
		for (int i = 0; i < nodeList.getLength(); i++) 
		{
		    Node nNode = nodeList.item(i);
		    if (nNode.getNodeName().equals("wd:Report_Data")) 
		    {
				if (nNode.getNodeType() == Node.ELEMENT_NODE) 
				{
					Element eElement = (Element) nNode;
					if (eElement.hasChildNodes()) 
					{
						NodeList childNodes = eElement.getChildNodes();
						for (int j = 0; j < childNodes.getLength(); j++) 
						{
							Node aChildNode = childNodes.item(j);
							if (aChildNode.getNodeName().equals("wd:Report_Entry")) 
							{
								Element eElementEntry = (Element) aChildNode;
								if (eElement.hasChildNodes()) 
								{
									NodeList childNodesEntry = eElementEntry.getChildNodes();
									for (int k = 0; k < childNodesEntry.getLength(); k++) 
									{										
										Node aChildNodeEntry = childNodesEntry.item(k);
										JSONObject obj = new JSONObject();
										if(aChildNodeEntry.getNodeName().equals("wd:education_group"))
										{
											Element eElemEntry = (Element) aChildNodeEntry;
											if (eElementEntry.hasChildNodes()) 
											{												
												NodeList childNodesEnt = eElemEntry.getChildNodes();
												for (int l = 0; l < childNodesEnt.getLength(); l++) 
												{													
													Node nChildNodeEntry = childNodesEnt.item(l);
													if(nChildNodeEntry.getNodeName().equals("wd:School"))
													{
														String schVal = nChildNodeEntry.getAttributes().getNamedItem("wd:Descriptor").toString();
														String schoolVal = schVal.replaceAll("\"", "");
														int pos = schoolVal.trim().indexOf("=") + 1;
														String actualSchoolVal = schoolVal.substring(pos, schoolVal.length());
														obj.put("school", actualSchoolVal);	
													}
													else if(nChildNodeEntry.getNodeName().equals("wd:School_Location"))
													{
														obj.put("schoolLocation", nChildNodeEntry.getTextContent());													
													}
													else if(nChildNodeEntry.getNodeName().equals("wd:Degree"))
													{
														String degVal = nChildNodeEntry.getAttributes().getNamedItem("wd:Descriptor").toString();
														String degreeVal = degVal.replaceAll("\"", "");
														int pos = degreeVal.trim().indexOf("=") + 1;
														String actualDegreeVal = degreeVal.substring(pos, degreeVal.length());
														obj.put("degree", actualDegreeVal);	
													}
													else if(nChildNodeEntry.getNodeName().equals("wd:Year_Degree_Received"))
													{
														obj.put("degreeDate", nChildNodeEntry.getTextContent());													
													}
													else if(nChildNodeEntry.getNodeName().equals("wd:Field_of_Study"))
													{
														String fieldVal = nChildNodeEntry.getAttributes().getNamedItem("wd:Descriptor").toString();
														String studyVal = fieldVal.replaceAll("\"", "");
														int pos = studyVal.trim().indexOf("=") + 1;
														String actualStudyVal = studyVal.substring(pos, studyVal.length());
														obj.put("fieldOfStudy", actualStudyVal);	
													}
												}
											}
										}
										details.put(obj);
									}
								}
							}
						}
					}
				}
		    }
		}
		return details;
	}
	
	private void createTemplateFromSourceTenantCalculatedSalary(Tenant tenant, InputStream is, SOAPConnection soapConnection, String loadCycle, String ruleName, String client, Long userId) {
		
		sourceCount = 0;
		headingFromSourceTenant = "";
		sourceTenantRowMap.clear();
		sourceTenantColumnList.clear();
		errorList.clear();
		String xmlReqFile = null;
		try 
		{			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 xmlReqFile = requestfile.getAbsolutePath();
				 String outputfile = addHireIdList(xmlReqFile, oldEmpList, ruleName, 0, oldEmpList.size(), "Employee_ID");
				 is = new FileInputStream(outputfile);
			     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
			     SOAPPart soapPart = soapMessage.getSOAPPart();
			     SOAPEnvelope envelope = soapPart.getEnvelope();
				 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
				 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
				 {
					  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
					  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
				 }
				 soapMessage.saveChanges();
			     ByteArrayOutputStream out = new ByteArrayOutputStream();
			     soapMessage.writeTo(out);
			     String strMsg = new String(out.toByteArray());	
			     
			     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
			     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
				 soapConnection = soapConnectionFactory.createConnection();
				 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
				 out = new ByteArrayOutputStream();
				 soapResponse.writeTo(out);
				 strMsg = new String(out.toByteArray(), "utf-8");

				 ReportElement soapResp = XmlParserManager.parseXml(strMsg);
				 
				 ReportElement pageData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Results");
				 
				 String totalNoOfPages = pageData.getChild("wd:Total_Pages").getValue().trim();
				 String totalResults = pageData.getChild("wd:Total_Results").getValue().trim();
				 int totalResult = Integer.parseInt(totalResults);
				 System.out.println("totalNoOfPages-"+totalNoOfPages);
				 System.out.println("totalResult-"+totalResult);						 
				 
				 String employeeId = "";
				 String WID = "";
				 String empTerminationDate = "";						 
				 String customIdNumber = "";
				 String calculatedPlanName = "";
				 String currency = "";
				 String frequency = "";
				 String amount = "";
				 String calculatedPlanNameArr = "";
				 String currencyArr = "";
				 String frequencyArr = "";
				 String amountArr = "";
				 
				 String reportURL = "";
				 
				 String finalStr = "";
				 String headerStr = "";
				 						 
				 Map<String,String> customTypeMap = null;
				 Map<String,String> widMap = null;
				 
				 int startIndex = 0;
				 int endIndex = 0;
				 
				 for (int j = 1; j <=Integer.parseInt(totalNoOfPages); j++) //
				 {
					 if(j == 1)
					 {
						startIndex = 0;
						if(999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = j*999;
						}
					 }
					 else
					 {
						startIndex = endIndex;
						if(j*999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = (j*999);
						}
					 }
					 outputfile = addHireIdList(xmlReqFile, oldEmpList, ruleName, startIndex, endIndex, "Employee_ID");
					 is = new FileInputStream(outputfile);
				     soapMessage = MessageFactory.newInstance().createMessage(null, is);
				     soapPart = soapMessage.getSOAPPart();
				     envelope = soapPart.getEnvelope();
					 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
					 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
					 {
							envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
					 }
					 soapMessage.saveChanges();
			         out = new ByteArrayOutputStream();
			         soapMessage.writeTo(out);
			         strMsg = new String(out.toByteArray());
			        
			         soapConnectionFactory = SOAPConnectionFactory.newInstance();
					 soapConnection = soapConnectionFactory.createConnection();
			         soapResponse = soapConnection.call(soapMessage, sourceUrl);
			         out = new ByteArrayOutputStream();
			         soapResponse.writeTo(out);
			         strMsg = new String(out.toByteArray(), "utf-8");
			        
			         soapResp = XmlParserManager.parseXml(strMsg);
			        
			        ReportElement responseData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Data");
			        
			        List<ReportElement> applicantData = responseData.getChildren("wd:Worker");
			        for(ReportElement reportElement : applicantData)
					{
			        	ReportElement terminationStatusData = reportElement.getChild("wd:Worker_Data")
					 			.getChild("wd:Employment_Data")
					 			.getChild("wd:Worker_Status_Data");
			        	
			        	empTerminationDate = terminationStatusData.getChild("wd:Termination_Date") != null?terminationStatusData.getChild("wd:Termination_Date").getValue().trim():"";					        	
			        	//if(!empTerminationDate.equalsIgnoreCase(""))
			        	{
			        		//Date termDate = convertWorkdayStringToDate(empTerminationDate);
			        		//if((termDate.equals(termFromDate) || termDate.after(termFromDate)) && (termDate.equals(termToDate) || termDate.before(termToDate)))
			        		{
					        	//System.out.println("empTerminationDate--"+ termDate);
				        		ReportElement element1 = reportElement.getChild("wd:Worker_Data");
				        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
				        		System.out.println("employeeId--"+ employeeId);
				        		
				        		ReportElement widRef = reportElement.getChild("wd:Worker_Reference");
								 if(widRef != null)
								 {
									 List<ReportElement> idList = widRef.getChildren("wd:ID");
									 for(ReportElement idElement:idList)
									 {
										 widMap = idElement.getAllAttributes();
										 if(widMap.get("wd:type").equals("WID"))
										 {
											 WID = idElement.getValue().trim();
										 }
									 }
								 }
								 else
								 {
									 WID = "";
								 }
								
								 /*if(tenant.getTenantName().equalsIgnoreCase("ibm6"))
								 {
									 reportURL = "https://" + tenant.getTenantUrl() + "customreport2/" + tenant.getTenantName() + "/ISU_Verify_Global/" + "Calculated_Salary?Effective_as_of_Date=2021-08-01-07:00&Employee!WID=" + WID;
								 }
								 else if(tenant.getTenantName().equalsIgnoreCase("ibm10"))
								 {*/
									 reportURL = "https://" + tenant.getTenantUrl() + "customreport2/" + tenant.getTenantName() + "/ISU_Verify_Global/" + "Calculated_Salary?Effective_as_of_Date=2021-10-11-07:00&Employee!WID=" + WID;
								 //}
								 
								 JSONArray jArr = createCalculatedSalaryData(reportURL);
								 if(jArr != null && jArr.length() >0)
								 {
									 calculatedPlanNameArr = "";
									 currencyArr = "";
									 frequencyArr = "";
									 amountArr = "";
									 for(int i = 0; i<jArr.length(); i++) 
								     {
										JSONObject objects = jArr.getJSONObject(i);
										calculatedPlanName = objects.isNull("calculatedPlanName")?"":objects.getString("calculatedPlanName");
										if(calculatedPlanName.contains(","))
										{
											calculatedPlanName = calculatedPlanName.replaceAll(",", "|");
										}
										if(calculatedPlanNameArr.equals(""))
										{
											calculatedPlanNameArr = calculatedPlanName;
										}
										else
										{
											if(!calculatedPlanName.isEmpty())
											{
												calculatedPlanNameArr = calculatedPlanNameArr + "~" + calculatedPlanName;
											}
										}
										currency = objects.isNull("currency")?"":objects.getString("currency");
										if(currencyArr.equals(""))
										{
											currencyArr = currency;
										}
										else
										{
											if(!currency.isEmpty())
											{
												currencyArr = currencyArr + "~" + currency;
											}
										}
										frequency = objects.isNull("frequency")?"":objects.getString("frequency");
										if(frequencyArr.equals(""))
										{
											frequencyArr = frequency;
										}
										else
										{
											if(!frequency.isEmpty())
											{
												frequencyArr = frequencyArr + "~" + frequency;
											}
										}
										amount = objects.isNull("amount")?"":objects.getString("amount");
										if(amountArr.equals(""))
										{
											amountArr = amount;
										}
										else
										{
											if(!amount.isEmpty())
											{
												amountArr = amountArr + "~" + amount;
											}
										}
								     }
								 }
								 else
								 {
									 calculatedPlanNameArr = "";
									 currencyArr = "";
									 frequencyArr = "";
									 amountArr = "";
								 }
								 																											 
								 ReportElement identificationData = reportElement.getChild("wd:Worker_Data")
								 			.getChild("wd:Personal_Data")
								 			.getChild("wd:Identification_Data");
								 
								 if(identificationData != null)
								 {												 
									 List<ReportElement> customIDList = identificationData.getChildren("wd:Custom_ID");
									 if(customIDList != null && customIDList.size() >0)
									 {
										 String expirationDate = "";
										 customIdNumber = "" ;
										 for(ReportElement customElement : customIDList)
										 {
											 ReportElement customIdData = customElement.getChild("wd:Custom_ID_Data");
											 if(customIdData != null)
											 {
												 expirationDate = customIdData.getChild("wd:Expiration_Date") != null?customIdData.getChild("wd:Expiration_Date").getValue().trim():"";
												 ReportElement customTypeRef = customIdData.getChild("wd:ID_Type_Reference");
												 if(customTypeRef != null)
												 {
													 List<ReportElement> customIdTypeData = customTypeRef.getChildren("wd:ID");								 
													 for(ReportElement idTypeElement:customIdTypeData)
													 {
														 customTypeMap = idTypeElement.getAllAttributes();
														 if(customTypeMap.get("wd:type").equals("Custom_ID_Type_ID"))
														 {
															 if(idTypeElement.getValue().trim().equalsIgnoreCase("Global_CNUM") && expirationDate.isEmpty())
															 {
																 customIdNumber = customIdData.getChild("wd:ID") != null?customIdData.getChild("wd:ID").getValue().trim():""; 
															 }
														 }
													 }
												 }												 												 
											 }
										 }
										 if(customIdNumber.isEmpty())
										 {
											 customIdNumber = "" ;
										 }
									 }
									 else
									 {
										 customIdNumber = "" ;
									 }
								 }
								 else
								 {
									 customIdNumber = "" ;											 
								 }								 															 
						}						        
			           }

			        	headingFromSourceTenant = "Home_CNUM,Employee_ID,Calculated_Plan_Name,Currency,Frequency,Amount";
			        	if(!customIdNumber.isEmpty())
						{
				        	headerStr = customIdNumber + "," + employeeId + "," + calculatedPlanNameArr + "," + currencyArr + "," + frequencyArr + "," + amountArr;
				        	
				        	sourceTenantRowMap.put(customIdNumber, headerStr);							        	
				        	sourceTenantColumnList.add(customIdNumber);
				        	
				        	if(finalStr.equals(""))
							{
								 finalStr =  headingFromSourceTenant + "\n" + headerStr;
							}
							else
							{
								 finalStr = finalStr + "\n" + headerStr;
							}
						}	
			     }						 							 
			   }
				 System.out.println(finalStr);
				 sourceContent = finalStr.getBytes();						 
				 sourceCount = sourceTenantColumnList.size();
		    }
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		
	}

	private void createTemplateFromTargetTenantCalculatedSalaryn(Tenant tenant, InputStream is, SOAPConnection soapConnection, String loadCycle, String ruleName, String client, Long userId) {
		
		wdCount = 0;
		headingFromTargetTenant = "";
		targetTenantRowMap.clear();
		targetTenantColumnList.clear();
		String xmlReqFile = null;
		try 
		{			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 xmlReqFile = requestfile.getAbsolutePath();
				 String outputfile = addHireIdList(xmlReqFile, newEmpList, ruleName, 0, newEmpList.size(), "Employee_ID");
				 is = new FileInputStream(outputfile);
			     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
			     SOAPPart soapPart = soapMessage.getSOAPPart();
			     SOAPEnvelope envelope = soapPart.getEnvelope();
				 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
				 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
				 {
					  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
					  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
				 }
				 soapMessage.saveChanges();
			     ByteArrayOutputStream out = new ByteArrayOutputStream();
			     soapMessage.writeTo(out);
			     String strMsg = new String(out.toByteArray());	
			     
			     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
			     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
				 soapConnection = soapConnectionFactory.createConnection();
				 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
				 out = new ByteArrayOutputStream();
				 soapResponse.writeTo(out);
				 strMsg = new String(out.toByteArray(), "utf-8");

				 ReportElement soapResp = XmlParserManager.parseXml(strMsg);
				 
				 ReportElement pageData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Results");
				 
				 String totalNoOfPages = pageData.getChild("wd:Total_Pages").getValue().trim();
				 String totalResults = pageData.getChild("wd:Total_Results").getValue().trim();
				 int totalResult = Integer.parseInt(totalResults);
				 System.out.println("totalNoOfPages-"+totalNoOfPages);
				 System.out.println("totalResult-"+totalResult);				 
				 
				 String employeeId = "";
				 String WID = "";
				 String employeeHireDate = "";
				 String customIdNumber = "";
				 String calculatedPlanName = "";
				 String currency = "";
				 String frequency = "";
				 String amount = "";
				 String calculatedPlanNameArr = "";
				 String currencyArr = "";
				 String frequencyArr = "";
				 String amountArr = "";
				 
				 String reportURL = "";
				 
				 String finalStr = "";
				 String headerStr = "";
				 						 
				 Map<String,String> customTypeMap = null;
				 Map<String,String> widMap = null;
				 
				 int startIndex = 0;
				 int endIndex = 0;
				 
				 for (int j = 1; j <=Integer.parseInt(totalNoOfPages); j++) //
				 {
					 if(j == 1)
					 {
						startIndex = 0;
						if(999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = j*999;
						}
					 }
					 else
					 {
						startIndex = endIndex;
						if(j*999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = (j*999);
						}
					 }
					 outputfile = addHireIdList(xmlReqFile, newEmpList, ruleName, startIndex, endIndex, "Employee_ID");
					 is = new FileInputStream(outputfile);
				     soapMessage = MessageFactory.newInstance().createMessage(null, is);
				     soapPart = soapMessage.getSOAPPart();
				     envelope = soapPart.getEnvelope();
					 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
					 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
					 {
							envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
					 }
					 soapMessage.saveChanges();
			         out = new ByteArrayOutputStream();
			         soapMessage.writeTo(out);
			         strMsg = new String(out.toByteArray());
			        
			         soapConnectionFactory = SOAPConnectionFactory.newInstance();
					 soapConnection = soapConnectionFactory.createConnection();
			         soapResponse = soapConnection.call(soapMessage, sourceUrl);
			         out = new ByteArrayOutputStream();
			         soapResponse.writeTo(out);
			         strMsg = new String(out.toByteArray(), "utf-8");
			        
			         soapResp = XmlParserManager.parseXml(strMsg);
			        
			        ReportElement responseData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Data");
			        
			        List<ReportElement> applicantData = responseData.getChildren("wd:Worker");
			        for(ReportElement reportElement : applicantData)
					{
			        	ReportElement hireStatusData = reportElement.getChild("wd:Worker_Data")
					 			.getChild("wd:Employment_Data")
					 			.getChild("wd:Worker_Status_Data");
			        	
			        	employeeHireDate = hireStatusData.getChild("wd:Hire_Date") != null?hireStatusData.getChild("wd:Hire_Date").getValue().trim():"";					        	
			        	if(!employeeHireDate.equalsIgnoreCase(""))
			        	{
			        		Date empHireDate = convertWorkdayStringToDate(employeeHireDate);
			        		//if((empHireDate.equals(hireFromDate) || empHireDate.after(hireFromDate)) && (empHireDate.equals(hireToDate) || empHireDate.before(hireToDate)))
			        		{
					        	System.out.println("empHireDate--"+ empHireDate);
				        		ReportElement element1 = reportElement.getChild("wd:Worker_Data");
				        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
				        		System.out.println("employeeId--"+ employeeId);
				        		
				        		ReportElement widRef = reportElement.getChild("wd:Worker_Reference");
								 if(widRef != null)
								 {
									 List<ReportElement> idList = widRef.getChildren("wd:ID");
									 for(ReportElement idElement:idList)
									 {
										 widMap = idElement.getAllAttributes();
										 if(widMap.get("wd:type").equals("WID"))
										 {
											 WID = idElement.getValue().trim();
										 }
									 }
								 }
								 else
								 {
									 WID = "";
								 }
								
								 /*if(tenant.getTenantName().equalsIgnoreCase("ibm6"))
								 {
									 reportURL = "https://" + tenant.getTenantUrl() + "customreport2/" + tenant.getTenantName() + "/ISU_Verify_Global/" + "Calculated_Salary?Effective_as_of_Date=2021-09-01-07:00&Employee!WID=" + WID;
								 }
								 else if(tenant.getTenantName().equalsIgnoreCase("ibm10"))
								 {*/
									 reportURL = "https://" + tenant.getTenantUrl() + "customreport2/" + tenant.getTenantName() + "/ISU_Verify_Global/" + "Calculated_Salary?Effective_as_of_Date=2021-11-01-07:00&Employee!WID=" + WID;
								 //}
								 
								 JSONArray jArr = createCalculatedSalaryData(reportURL);
								 if(jArr != null && jArr.length() >0)
								 {
									 calculatedPlanNameArr = "";
									 currencyArr = "";
									 frequencyArr = "";
									 amountArr = "";
									 for(int i = 0; i<jArr.length(); i++) 
								     {
										JSONObject objects = jArr.getJSONObject(i);
										calculatedPlanName = objects.isNull("calculatedPlanName")?"":objects.getString("calculatedPlanName");
										if(calculatedPlanName.contains(","))
										{
											calculatedPlanName = calculatedPlanName.replaceAll(",", "|");
										}
										if(calculatedPlanNameArr.equals(""))
										{
											calculatedPlanNameArr = calculatedPlanName;
										}
										else
										{
											if(!calculatedPlanName.isEmpty())
											{
												calculatedPlanNameArr = calculatedPlanNameArr + "~" + calculatedPlanName;
											}
										}
										currency = objects.isNull("currency")?"":objects.getString("currency");
										if(currencyArr.equals(""))
										{
											currencyArr = currency;
										}
										else
										{
											if(!currency.isEmpty())
											{
												currencyArr = currencyArr + "~" + currency;
											}
										}
										frequency = objects.isNull("frequency")?"":objects.getString("frequency");
										if(frequencyArr.equals(""))
										{
											frequencyArr = frequency;
										}
										else
										{
											if(!frequency.isEmpty())
											{
												frequencyArr = frequencyArr + "~" + frequency;
											}
										}
										amount = objects.isNull("amount")?"":objects.getString("amount");
										if(amountArr.equals(""))
										{
											amountArr = amount;
										}
										else
										{
											if(!amount.isEmpty())
											{
												amountArr = amountArr + "~" + amount;
											}
										}
								     }
								 }
								 else
								 {
									 calculatedPlanNameArr = "";
									 currencyArr = "";
									 frequencyArr = "";
									 amountArr = "";
								 }
				        						        										 
								 ReportElement identificationData = reportElement.getChild("wd:Worker_Data")
								 			.getChild("wd:Personal_Data")
								 			.getChild("wd:Identification_Data");
								 
								 if(identificationData != null)
								 {																		 
									 List<ReportElement> customIDList = identificationData.getChildren("wd:Custom_ID");
									 if(customIDList != null && customIDList.size() >0)
									 {
										 //String customIdOldDate = null;
										 customIdNumber = "" ;
										 for(ReportElement customElement : customIDList)
										 {
											 ReportElement customIdData = customElement.getChild("wd:Custom_ID_Data");
											 if(customIdData != null)
											 {
												 ReportElement customTypeRef = customIdData.getChild("wd:ID_Type_Reference");
												 if(customTypeRef != null)
												 {
													 List<ReportElement> customIdTypeData = customTypeRef.getChildren("wd:ID");								 
													 for(ReportElement idTypeElement:customIdTypeData)
													 {
														 customTypeMap = idTypeElement.getAllAttributes();
														 if(customTypeMap.get("wd:type").equals("Custom_ID_Type_ID"))
														 {
															 if(idTypeElement.getValue().trim().equalsIgnoreCase("Previous_IBM_CNUM"))
															 {
																 customIdNumber = customIdData.getChild("wd:ID") != null?customIdData.getChild("wd:ID").getValue().trim():"";
															 }
														 }
													 }
												 }
											 }
										 }
										 if(customIdNumber.isEmpty())
										 {
											 customIdNumber = "" ;
										 }
									 }
									 else
									 {
										 customIdNumber = "" ;
									 }
								 }
								 else
								 {
									 customIdNumber = "" ;
								 }
						}				        
			          }
			        	
			        	headingFromTargetTenant = "Home_CNUM,Employee_ID,Calculated_Plan_Name,Currency,Frequency,Amount";

				        	if(!customIdNumber.isEmpty())
							{
					        	headerStr = customIdNumber + "," + employeeId + "," + calculatedPlanNameArr + "," + currencyArr + "," + frequencyArr + "," + amountArr;
							        	
						        	 targetTenantRowMap.put(customIdNumber, headerStr);
						        	 targetTenantColumnList.add(customIdNumber);
						        	 
									 if(finalStr.equals(""))
									 {
										 finalStr =  headingFromTargetTenant + "\n" + headerStr;
									 }
									 else
									 {
										 finalStr = finalStr + "\n" + headerStr;
									 }
							}
				   }						 							 
			     }
				 System.out.println(finalStr);
				 targetContent = finalStr.getBytes();
				 wdCount = targetTenantColumnList.size();
		   }
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		
	}
	
	private JSONArray createCalculatedSalaryData(String reportURL) throws JSONException {

		JSONArray jArr = new JSONArray();
		DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilder dBuilder;
		XPath xPath = XPathFactory.newInstance().newXPath();
		HttpBasicAuthentication httpBasicAuthentication = new HttpBasicAuthentication();
		String output = httpBasicAuthentication.getWithBasicAuthentication(reportURL, tenant.getTenantUser(), tenant.getTenantUserPassword());
		Reader reader1 = new StringReader(output);
		Document doc;
		try 
		{
			dBuilder = dbFactory.newDocumentBuilder();
			doc = dBuilder.parse(new InputSource(reader1));
			doc.getDocumentElement().normalize();
			String expression = EMPLOYEE_APPLICANT_MAPPING_RESPONSE_EXPRESSION;
			NodeList nodeList = (NodeList) xPath.compile(expression).evaluate(doc, XPathConstants.NODESET);
			for (int i = 0; i < nodeList.getLength(); i++) 
			{
				try 
				{
					jArr = parseNodesForCalculatedSalary(nodeList);
				} 
				catch (DOMException e)
				{
					e.printStackTrace();
				}
			}			
		} 
		catch (SAXException e) 
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (XPathExpressionException e) 
		{
			e.printStackTrace();
		} 
		catch (ParserConfigurationException e) 
		{
			e.printStackTrace();
		}
		return jArr;
	}

	private JSONArray parseNodesForCalculatedSalary(NodeList nodeList) throws DOMException, JSONException {

		JSONArray details = new JSONArray();
		for (int i = 0; i < nodeList.getLength(); i++) 
		{
		    Node nNode = nodeList.item(i);
		    if (nNode.getNodeName().equals("wd:Report_Data")) 
		    {
				if (nNode.getNodeType() == Node.ELEMENT_NODE) 
				{
					Element eElement = (Element) nNode;
					if (eElement.hasChildNodes()) 
					{
						NodeList childNodes = eElement.getChildNodes();
						for (int j = 0; j < childNodes.getLength(); j++) 
						{
							Node aChildNode = childNodes.item(j);
							if (aChildNode.getNodeName().equals("wd:Report_Entry")) 
							{
								Element eElementEntry = (Element) aChildNode;
								if (eElement.hasChildNodes()) 
								{
									NodeList childNodesEntry = eElementEntry.getChildNodes();
									for (int k = 0; k < childNodesEntry.getLength(); k++) 
									{										
										Node aChildNodeEntry = childNodesEntry.item(k);
										JSONObject obj = new JSONObject();
										if(aChildNodeEntry.getNodeName().equals("wd:Calculated_Plans_-_Plan_Details_group"))
										{
											Element eElemEntry = (Element) aChildNodeEntry;
											if (eElementEntry.hasChildNodes()) 
											{												
												NodeList childNodesEnt = eElemEntry.getChildNodes();
												for (int l = 0; l < childNodesEnt.getLength(); l++) 
												{													
													Node nChildNodeEntry = childNodesEnt.item(l);
													if(nChildNodeEntry.getNodeName().equals("wd:Reference_ID"))
													{
														obj.put("calculatedPlanName", nChildNodeEntry.getTextContent());		
													}													
												}
											}
										}
										else if(aChildNodeEntry.getNodeName().equals("wd:Calculated_Plan_Assignments_group"))
										{
											Element eElemEntry = (Element) aChildNodeEntry;
											if (eElementEntry.hasChildNodes()) 
											{												
												NodeList childNodesEnt = eElemEntry.getChildNodes();
												for (int l = 0; l < childNodesEnt.getLength(); l++) 
												{													
													Node nChildNodeEntry = childNodesEnt.item(l);
													if(nChildNodeEntry.getNodeName().equals("wd:Currency"))
													{
														String calCurrVal = nChildNodeEntry.getAttributes().getNamedItem("wd:Descriptor").toString();
														String calCurrencyVal = calCurrVal.replaceAll("\"", "");
														int pos = calCurrencyVal.trim().indexOf("=") + 1;
														String actualCalCurrencyVal = calCurrencyVal.substring(pos, calCurrencyVal.length());
														obj.put("currency", actualCalCurrencyVal);	
													}
													else if(nChildNodeEntry.getNodeName().equals("wd:Frequency"))
													{
														String calFreqVal = nChildNodeEntry.getAttributes().getNamedItem("wd:Descriptor").toString();
														String calFrequenVal = calFreqVal.replaceAll("\"", "");
														int pos = calFrequenVal.trim().indexOf("=") + 1;
														String actualCalFrequency = calFrequenVal.substring(pos, calFrequenVal.length());
														obj.put("frequency", actualCalFrequency);	
													}
													else if(nChildNodeEntry.getNodeName().equals("wd:Amount"))
													{
														obj.put("amount", nChildNodeEntry.getTextContent());		
													}	
												}
											}
										}
										details.put(obj);
									}
								}
							}
						}
					}
				}
		    }
		}
		return details;
	}
	
	private void createTemplateFromSourceTenantAllowanceOverride(Tenant tenant2, InputStream is, SOAPConnection soapConnection, String loadCycle, String ruleName, String client, Long userId) {
		
		sourceCount = 0;
		headingFromSourceTenant = "";
		sourceTenantRowMap.clear();
		sourceTenantColumnList.clear();
		errorList.clear();
		String xmlReqFile = null;
		try 
		{			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 xmlReqFile = requestfile.getAbsolutePath();
				 String outputfile = addHireIdList(xmlReqFile, oldEmpList, ruleName, 0, oldEmpList.size(), "Employee_ID");
				 is = new FileInputStream(outputfile);
			     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
			     SOAPPart soapPart = soapMessage.getSOAPPart();
			     SOAPEnvelope envelope = soapPart.getEnvelope();
				 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
				 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
				 {
					  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
					  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
				 }
				 soapMessage.saveChanges();
			     ByteArrayOutputStream out = new ByteArrayOutputStream();
			     soapMessage.writeTo(out);
			     String strMsg = new String(out.toByteArray());	
			     
			     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
			     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
				 soapConnection = soapConnectionFactory.createConnection();
				 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
				 out = new ByteArrayOutputStream();
				 soapResponse.writeTo(out);
				 strMsg = new String(out.toByteArray(), "utf-8");

				 ReportElement soapResp = XmlParserManager.parseXml(strMsg);
				 
				 ReportElement pageData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Results");
				 
				 String totalNoOfPages = pageData.getChild("wd:Total_Pages").getValue().trim();
				 String totalResults = pageData.getChild("wd:Total_Results").getValue().trim();
				 int totalResult = Integer.parseInt(totalResults);
				 System.out.println("totalNoOfPages-"+totalNoOfPages);
				 System.out.println("totalResult-"+totalResult);						 
				 
				 String employeeId = "";
				 String WID = "";
				 String empTerminationDate = "";						 
				 String customIdNumber = "";
				 String overrideAmount = "";
				 String overrideAmountArr = "";
				 String details = "";
				 String detailsArr = "";
				 
				 String reportURL = "";
				 
				 String finalStr = "";
				 String headerStr = "";
				 						 
				 Map<String,String> customTypeMap = null;
				 Map<String,String> widMap = null;
				 
				 int startIndex = 0;
				 int endIndex = 0;
				 
				 for (int j = 1; j <=Integer.parseInt(totalNoOfPages); j++) //
				 {
					 if(j == 1)
					 {
						startIndex = 0;
						if(999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = j*999;
						}
					 }
					 else
					 {
						startIndex = endIndex;
						if(j*999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = (j*999);
						}
					 }
					 outputfile = addHireIdList(xmlReqFile, oldEmpList, ruleName, startIndex, endIndex, "Employee_ID");
					 is = new FileInputStream(outputfile);
				     soapMessage = MessageFactory.newInstance().createMessage(null, is);
				     soapPart = soapMessage.getSOAPPart();
				     envelope = soapPart.getEnvelope();
					 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
					 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
					 {
							envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
					 }
					 soapMessage.saveChanges();
			         out = new ByteArrayOutputStream();
			         soapMessage.writeTo(out);
			         strMsg = new String(out.toByteArray());
			        
			         soapConnectionFactory = SOAPConnectionFactory.newInstance();
					 soapConnection = soapConnectionFactory.createConnection();
			         soapResponse = soapConnection.call(soapMessage, sourceUrl);
			         out = new ByteArrayOutputStream();
			         soapResponse.writeTo(out);
			         strMsg = new String(out.toByteArray(), "utf-8");
			        
			         soapResp = XmlParserManager.parseXml(strMsg);
			        
			        ReportElement responseData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Data");
			        
			        List<ReportElement> applicantData = responseData.getChildren("wd:Worker");
			        for(ReportElement reportElement : applicantData)
					{
			        	ReportElement terminationStatusData = reportElement.getChild("wd:Worker_Data")
					 			.getChild("wd:Employment_Data")
					 			.getChild("wd:Worker_Status_Data");
			        	
			        	//empTerminationDate = terminationStatusData.getChild("wd:Termination_Date") != null?terminationStatusData.getChild("wd:Termination_Date").getValue().trim():"";					        	
			        	if(!empTerminationDate.equalsIgnoreCase(""))
			        	{
			        		//Date termDate = convertWorkdayStringToDate(empTerminationDate);
			        		//if((termDate.equals(termFromDate) || termDate.after(termFromDate)) && (termDate.equals(termToDate) || termDate.before(termToDate)))
			        		{
					        	//System.out.println("empTerminationDate--"+ termDate);
				        		ReportElement element1 = reportElement.getChild("wd:Worker_Data");
				        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
				        		System.out.println("employeeId--"+ employeeId);
				        		
				        		ReportElement widRef = reportElement.getChild("wd:Worker_Reference");
								 if(widRef != null)
								 {
									 List<ReportElement> idList = widRef.getChildren("wd:ID");
									 for(ReportElement idElement:idList)
									 {
										 widMap = idElement.getAllAttributes();
										 if(widMap.get("wd:type").equals("WID"))
										 {
											 WID = idElement.getValue().trim();
										 }
									 }
								 }
								 else
								 {
									 WID = "";
								 }
								
								 /*if(tenant.getTenantName().equalsIgnoreCase("ibm6"))
								 {
									 reportURL = "https://" + tenant.getTenantUrl() + "customreport2/" + tenant.getTenantName() + "/ISU_Verify_Global/" + "Allowance_Override?Effective_as_of_Date=2021-08-01-07:00&Employee!WID=" + WID;
								 }
								 else if(tenant.getTenantName().equalsIgnoreCase("ibm10"))
								 {*/
									 reportURL = "https://" + tenant.getTenantUrl() + "customreport2/" + tenant.getTenantName() + "/ISU_Verify_Global/" + "Allowance_Override?Effective_as_of_Date=2021-11-01-07:00&Employee!WID=" + WID;
								 //}
								 
								 JSONArray jArr = createAllowanceOverrideData(reportURL);
								 if(jArr != null && jArr.length() >0)
								 {
									 overrideAmountArr = "";
									 detailsArr = "";
									 for(int i = 0; i<jArr.length(); i++) 
								     {
										JSONObject objects = jArr.getJSONObject(i);
										overrideAmount = objects.isNull("amount")?"":objects.getString("amount");
										if(overrideAmountArr.equals(""))
										{
											overrideAmountArr = overrideAmount;
										}
										else
										{
											if(!overrideAmount.isEmpty())
											{
												overrideAmountArr = overrideAmountArr + "~" + overrideAmount;
											}
										}
										details = objects.isNull("details")?"":objects.getString("details");
										if(details.contains(","))
										{
											details = details.replaceAll(",", "|");
										}
										if(detailsArr.equals(""))
										{
											detailsArr = details;
										}
										else
										{
											if(!details.isEmpty())
											{
												detailsArr = detailsArr + "~" + details;
											}
										}
								     }
								 }
								 else
								 {
									 overrideAmountArr = "";
									 detailsArr = "";
								 }
								 																											 
								 ReportElement identificationData = reportElement.getChild("wd:Worker_Data")
								 			.getChild("wd:Personal_Data")
								 			.getChild("wd:Identification_Data");
								 
								 if(identificationData != null)
								 {												 
									 List<ReportElement> customIDList = identificationData.getChildren("wd:Custom_ID");
									 if(customIDList != null && customIDList.size() >0)
									 {
										 String expirationDate = "";
										 customIdNumber = "" ;
										 for(ReportElement customElement : customIDList)
										 {
											 ReportElement customIdData = customElement.getChild("wd:Custom_ID_Data");
											 if(customIdData != null)
											 {
												 expirationDate = customIdData.getChild("wd:Expiration_Date") != null?customIdData.getChild("wd:Expiration_Date").getValue().trim():"";
												 ReportElement customTypeRef = customIdData.getChild("wd:ID_Type_Reference");
												 if(customTypeRef != null)
												 {
													 List<ReportElement> customIdTypeData = customTypeRef.getChildren("wd:ID");								 
													 for(ReportElement idTypeElement:customIdTypeData)
													 {
														 customTypeMap = idTypeElement.getAllAttributes();
														 if(customTypeMap.get("wd:type").equals("Custom_ID_Type_ID"))
														 {
															 if(idTypeElement.getValue().trim().equalsIgnoreCase("Global_CNUM") && expirationDate.isEmpty())
															 {
																 customIdNumber = customIdData.getChild("wd:ID") != null?customIdData.getChild("wd:ID").getValue().trim():""; 
															 }
														 }
													 }
												 }												 												 
											 }
										 }
										 if(customIdNumber.isEmpty())
										 {
											 customIdNumber = "" ;
										 }
									 }
									 else
									 {
										 customIdNumber = "" ;
									 }
								 }
								 else
								 {
									 customIdNumber = "" ;											 
								 }								 															 
						}						        
			           }

			        	headingFromSourceTenant = "Home_CNUM,Employee_ID,Override_Amount,Assignment_Details";
			        	if(!customIdNumber.isEmpty())
						{
				        	headerStr = customIdNumber + "," + employeeId + "," + overrideAmountArr + "," + detailsArr;
				        	
				        	sourceTenantRowMap.put(customIdNumber, headerStr);							        	
				        	sourceTenantColumnList.add(customIdNumber);
				        	
				        	if(finalStr.equals(""))
							{
								 finalStr =  headingFromSourceTenant + "\n" + headerStr;
							}
							else
							{
								 finalStr = finalStr + "\n" + headerStr;
							}
						}	
			     }						 							 
			   }
				 System.out.println(finalStr);
				 sourceContent = finalStr.getBytes();						 
				 sourceCount = sourceTenantColumnList.size();
		    }
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		
	}

	private void createTemplateFromTargetTenantAllowanceOverride(Tenant tenant2, InputStream is, SOAPConnection soapConnection, String loadCycle, String ruleName, String client, Long userId) {
		
		wdCount = 0;
		headingFromTargetTenant = "";
		targetTenantRowMap.clear();
		targetTenantColumnList.clear();
		String xmlReqFile = null;
		try 
		{			 
			 GetRequest getRequest = getRequestService.getRequestByReqClient(ruleName, client);
			 if(getRequest != null)
			 {
				 byte[] requestFileContent = getRequest.getRequestXMLContent();
				 File requestfile = null;
				 try 
				 {
					 requestfile = File.createTempFile(getRequest.getRequestXMLName().substring(0, getRequest.getRequestXMLName().indexOf(".")), ".xml");
					 FileUtils.writeByteArrayToFile(requestfile, requestFileContent);
				 } 
				 catch (IOException e1) 
				 {
				     e1.printStackTrace();
				 }
				 xmlReqFile = requestfile.getAbsolutePath();
				 String outputfile = addHireIdList(xmlReqFile, newEmpList, ruleName, 0, newEmpList.size(), "Employee_ID");
				 is = new FileInputStream(outputfile);
			     SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, is);
			     SOAPPart soapPart = soapMessage.getSOAPPart();
			     SOAPEnvelope envelope = soapPart.getEnvelope();
				 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
				 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
				 {
					  envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
					  createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
				 }
				 soapMessage.saveChanges();
			     ByteArrayOutputStream out = new ByteArrayOutputStream();
			     soapMessage.writeTo(out);
			     String strMsg = new String(out.toByteArray());	
			     
			     String sourceUrl = SERVICE_URL_PROTOCOL + tenant.getTenantUrl() + "Staffing";
			     SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
				 soapConnection = soapConnectionFactory.createConnection();
				 SOAPMessage soapResponse = soapConnection.call(soapMessage, sourceUrl);
				 out = new ByteArrayOutputStream();
				 soapResponse.writeTo(out);
				 strMsg = new String(out.toByteArray(), "utf-8");

				 ReportElement soapResp = XmlParserManager.parseXml(strMsg);
				 
				 ReportElement pageData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Results");
				 
				 String totalNoOfPages = pageData.getChild("wd:Total_Pages").getValue().trim();
				 String totalResults = pageData.getChild("wd:Total_Results").getValue().trim();
				 int totalResult = Integer.parseInt(totalResults);
				 System.out.println("totalNoOfPages-"+totalNoOfPages);
				 System.out.println("totalResult-"+totalResult);				 
				 
				 String employeeId = "";
				 String WID = "";
				 String employeeHireDate = "";
				 String customIdNumber = "";
				 String overrideAmount = "";
				 String overrideAmountArr = "";
				 String details = "";
				 String detailsArr = "";
				 
				 String reportURL = "";
				 
				 String finalStr = "";
				 String headerStr = "";
				 						 
				 Map<String,String> customTypeMap = null;
				 Map<String,String> widMap = null;
				 
				 int startIndex = 0;
				 int endIndex = 0;
				 
				 for (int j = 1; j <=Integer.parseInt(totalNoOfPages); j++) //
				 {
					 if(j == 1)
					 {
						startIndex = 0;
						if(999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = j*999;
						}
					 }
					 else
					 {
						startIndex = endIndex;
						if(j*999 > totalResult)
						{
							endIndex = totalResult;
						}
						else
						{
							endIndex = (j*999);
						}
					 }
					 outputfile = addHireIdList(xmlReqFile, newEmpList, ruleName, startIndex, endIndex, "Employee_ID");
					 is = new FileInputStream(outputfile);
				     soapMessage = MessageFactory.newInstance().createMessage(null, is);
				     soapPart = soapMessage.getSOAPPart();
				     envelope = soapPart.getEnvelope();
					 envelope.addNamespaceDeclaration(NAMESPACE_PREFIX, NAMESPACE_URL);
					 if (tenant.getTenantName() != null && tenant.getTenantUser() != null && tenant.getTenantUserPassword() != null) 
					 {
							envelope.addNamespaceDeclaration(HEADER_SECURITY_NS_PREFIX, HEADER_SECURITY_NAMESPACE);
							createSOAPHeader(envelope.getHeader(), tenant.getTenantName(), tenant.getTenantUser(), tenant.getTenantUserPassword());
					 }
					 soapMessage.saveChanges();
			         out = new ByteArrayOutputStream();
			         soapMessage.writeTo(out);
			         strMsg = new String(out.toByteArray());
			        
			         soapConnectionFactory = SOAPConnectionFactory.newInstance();
					 soapConnection = soapConnectionFactory.createConnection();
			         soapResponse = soapConnection.call(soapMessage, sourceUrl);
			         out = new ByteArrayOutputStream();
			         soapResponse.writeTo(out);
			         strMsg = new String(out.toByteArray(), "utf-8");
			        
			         soapResp = XmlParserManager.parseXml(strMsg);
			        
			        ReportElement responseData = soapResp.getChild("env:Body")
							.getChild("wd:Get_Workers_Response")
							.getChild("wd:Response_Data");
			        
			        List<ReportElement> applicantData = responseData.getChildren("wd:Worker");
			        for(ReportElement reportElement : applicantData)
					{
			        	ReportElement hireStatusData = reportElement.getChild("wd:Worker_Data")
					 			.getChild("wd:Employment_Data")
					 			.getChild("wd:Worker_Status_Data");
			        	
			        	employeeHireDate = hireStatusData.getChild("wd:Hire_Date") != null?hireStatusData.getChild("wd:Hire_Date").getValue().trim():"";					        	
			        	if(!employeeHireDate.equalsIgnoreCase(""))
			        	{
			        		Date empHireDate = convertWorkdayStringToDate(employeeHireDate);
			        		//if((empHireDate.equals(hireFromDate) || empHireDate.after(hireFromDate)) && (empHireDate.equals(hireToDate) || empHireDate.before(hireToDate)))
			        		{
					        	System.out.println("empHireDate--"+ empHireDate);
				        		ReportElement element1 = reportElement.getChild("wd:Worker_Data");
				        		employeeId = element1.getChild("wd:Worker_ID").getValue().trim();
				        		System.out.println("employeeId--"+ employeeId);
				        		
				        		ReportElement widRef = reportElement.getChild("wd:Worker_Reference");
								 if(widRef != null)
								 {
									 List<ReportElement> idList = widRef.getChildren("wd:ID");
									 for(ReportElement idElement:idList)
									 {
										 widMap = idElement.getAllAttributes();
										 if(widMap.get("wd:type").equals("WID"))
										 {
											 WID = idElement.getValue().trim();
										 }
									 }
								 }
								 else
								 {
									 WID = "";
								 }
								
								 /*if(tenant.getTenantName().equalsIgnoreCase("ibm6"))
								 {
									 reportURL = "https://" + tenant.getTenantUrl() + "customreport2/" + tenant.getTenantName() + "/ISU_Verify_Global/" + "Allowance_Override?Effective_as_of_Date=2021-09-01-07:00&Employee!WID=" + WID;
								 }
								 else if(tenant.getTenantName().equalsIgnoreCase("ibm10"))
								 {*/
									 reportURL = "https://" + tenant.getTenantUrl() + "customreport2/" + tenant.getTenantName() + "/ISU_Verify_Global/" + "Allowance_Override?Entry_Date_and_Time=2021-11-01T11:29:59.000-07:00&Employee!WID=" + WID;
								 //}
								 
								 JSONArray jArr = createAllowanceOverrideData(reportURL);
								 if(jArr != null && jArr.length() >0)
								 {
									 overrideAmountArr = "";
									 detailsArr = "";
									 for(int i = 0; i<jArr.length(); i++) 
								     {
										JSONObject objects = jArr.getJSONObject(i);
										overrideAmount = objects.isNull("amount")?"":objects.getString("amount");
										if(overrideAmountArr.equals(""))
										{
											overrideAmountArr = overrideAmount;
										}
										else
										{
											if(!overrideAmount.isEmpty())
											{
												overrideAmountArr = overrideAmountArr + "~" + overrideAmount;
											}
										}
										details = objects.isNull("details")?"":objects.getString("details");
										if(details.contains(","))
										{
											details = details.replaceAll(",", "|");
										}
										if(detailsArr.equals(""))
										{
											detailsArr = details;
										}
										else
										{
											if(!details.isEmpty())
											{
												detailsArr = detailsArr + "~" + details;
											}
										}
								     }
								 }
								 else
								 {
									 overrideAmountArr = "";
									 detailsArr = "";
								 }
				        						        										 
								 ReportElement identificationData = reportElement.getChild("wd:Worker_Data")
								 			.getChild("wd:Personal_Data")
								 			.getChild("wd:Identification_Data");
								 
								 if(identificationData != null)
								 {																		 
									 List<ReportElement> customIDList = identificationData.getChildren("wd:Custom_ID");
									 if(customIDList != null && customIDList.size() >0)
									 {
										 //String customIdOldDate = null;
										 customIdNumber = "" ;
										 for(ReportElement customElement : customIDList)
										 {
											 ReportElement customIdData = customElement.getChild("wd:Custom_ID_Data");
											 if(customIdData != null)
											 {
												 ReportElement customTypeRef = customIdData.getChild("wd:ID_Type_Reference");
												 if(customTypeRef != null)
												 {
													 List<ReportElement> customIdTypeData = customTypeRef.getChildren("wd:ID");								 
													 for(ReportElement idTypeElement:customIdTypeData)
													 {
														 customTypeMap = idTypeElement.getAllAttributes();
														 if(customTypeMap.get("wd:type").equals("Custom_ID_Type_ID"))
														 {
															 if(idTypeElement.getValue().trim().equalsIgnoreCase("Previous_IBM_CNUM"))
															 {
																 customIdNumber = customIdData.getChild("wd:ID") != null?customIdData.getChild("wd:ID").getValue().trim():"";
															 }
														 }
													 }
												 }
											 }
										 }
										 if(customIdNumber.isEmpty())
										 {
											 customIdNumber = "" ;
										 }
									 }
									 else
									 {
										 customIdNumber = "" ;
									 }
								 }
								 else
								 {
									 customIdNumber = "" ;
								 }
						}				        
			          }
			        	
			        	headingFromTargetTenant = "Home_CNUM,Employee_ID,Override_Amount,Assignment_Details";

				        	if(!customIdNumber.isEmpty())
							{
					        	headerStr = customIdNumber + "," + employeeId + "," + overrideAmountArr + "," + detailsArr;
							        	
						        	 targetTenantRowMap.put(customIdNumber, headerStr);
						        	 targetTenantColumnList.add(customIdNumber);
						        	 
									 if(finalStr.equals(""))
									 {
										 finalStr =  headingFromTargetTenant + "\n" + headerStr;
									 }
									 else
									 {
										 finalStr = finalStr + "\n" + headerStr;
									 }
							}
				   }						 							 
			     }
				 System.out.println(finalStr);
				 targetContent = finalStr.getBytes();
				 wdCount = targetTenantColumnList.size();
		   }
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (SOAPException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		
	}

	private JSONArray createAllowanceOverrideData(String reportURL) throws JSONException {
		
		JSONArray jArr = new JSONArray();
		DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilder dBuilder;
		XPath xPath = XPathFactory.newInstance().newXPath();
		HttpBasicAuthentication httpBasicAuthentication = new HttpBasicAuthentication();
		String output = httpBasicAuthentication.getWithBasicAuthentication(reportURL, tenant.getTenantUser(), tenant.getTenantUserPassword());
		Reader reader1 = new StringReader(output);
		Document doc;
		try 
		{
			dBuilder = dbFactory.newDocumentBuilder();
			doc = dBuilder.parse(new InputSource(reader1));
			doc.getDocumentElement().normalize();
			String expression = EMPLOYEE_APPLICANT_MAPPING_RESPONSE_EXPRESSION;
			NodeList nodeList = (NodeList) xPath.compile(expression).evaluate(doc, XPathConstants.NODESET);
			for (int i = 0; i < nodeList.getLength(); i++) 
			{
				try 
				{
					jArr = parseNodesForAllowanceOverride(nodeList);
				} 
				catch (DOMException e)
				{
					e.printStackTrace();
				}
			}			
		} 
		catch (SAXException e) 
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		catch (XPathExpressionException e) 
		{
			e.printStackTrace();
		} 
		catch (ParserConfigurationException e) 
		{
			e.printStackTrace();
		}
		return jArr;
	}

	private JSONArray parseNodesForAllowanceOverride(NodeList nodeList) throws DOMException, JSONException {

		JSONArray details = new JSONArray();
		for (int i = 0; i < nodeList.getLength(); i++) 
		{
		    Node nNode = nodeList.item(i);
		    if (nNode.getNodeName().equals("wd:Report_Data")) 
		    {
				if (nNode.getNodeType() == Node.ELEMENT_NODE) 
				{
					Element eElement = (Element) nNode;
					if (eElement.hasChildNodes()) 
					{
						NodeList childNodes = eElement.getChildNodes();
						for (int j = 0; j < childNodes.getLength(); j++) 
						{
							Node aChildNode = childNodes.item(j);
							if (aChildNode.getNodeName().equals("wd:Report_Entry")) 
							{
								Element eElementEntry = (Element) aChildNode;
								if (eElement.hasChildNodes()) 
								{
									NodeList childNodesEntry = eElementEntry.getChildNodes();
									for (int k = 0; k < childNodesEntry.getLength(); k++) 
									{										
										Node aChildNodeEntry = childNodesEntry.item(k);
										JSONObject obj = new JSONObject();
										if(aChildNodeEntry.getNodeName().equals("wd:Allowance_Plan_Assignments_group"))
										{
											Element eElemEntry = (Element) aChildNodeEntry;
											if (eElementEntry.hasChildNodes()) 
											{												
												NodeList childNodesEnt = eElemEntry.getChildNodes();
												for (int l = 0; l < childNodesEnt.getLength(); l++) 
												{													
													Node nChildNodeEntry = childNodesEnt.item(l);
													if(nChildNodeEntry.getNodeName().equals("wd:Amount"))
													{
														obj.put("amount", nChildNodeEntry.getTextContent());													
													}
													else if(nChildNodeEntry.getNodeName().equals("wd:Assignment_Details"))
													{
														obj.put("details", nChildNodeEntry.getTextContent());													
													}
												}
											}
										}
										details.put(obj);
									}
								}
							}
						}
					}
				}
		    }
		}
		return details;
	}
	
	
}
